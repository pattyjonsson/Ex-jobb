
IOPORT_EXAMPLE31.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000004b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004c63  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000038b9  00000000  00000000  000051c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019f5  00000000  00000000  00008a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  0000a474  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00029913  00000000  00000000  0000a570  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000063d  00000000  00000000  00033e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000344c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00008ecd  00000000  00000000  00034540  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
   2:	00 00       	nop
   4:	05 c1       	rjmp	.+522    	; 0x210 <__bad_interrupt>
   6:	00 00       	nop
   8:	03 c1       	rjmp	.+518    	; 0x210 <__bad_interrupt>
   a:	00 00       	nop
   c:	01 c1       	rjmp	.+514    	; 0x210 <__bad_interrupt>
   e:	00 00       	nop
  10:	ff c0       	rjmp	.+510    	; 0x210 <__bad_interrupt>
  12:	00 00       	nop
  14:	fd c0       	rjmp	.+506    	; 0x210 <__bad_interrupt>
  16:	00 00       	nop
  18:	fb c0       	rjmp	.+502    	; 0x210 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	f9 c0       	rjmp	.+498    	; 0x210 <__bad_interrupt>
  1e:	00 00       	nop
  20:	f7 c0       	rjmp	.+494    	; 0x210 <__bad_interrupt>
  22:	00 00       	nop
  24:	f5 c0       	rjmp	.+490    	; 0x210 <__bad_interrupt>
  26:	00 00       	nop
  28:	f3 c0       	rjmp	.+486    	; 0x210 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	f1 c0       	rjmp	.+482    	; 0x210 <__bad_interrupt>
  2e:	00 00       	nop
  30:	ef c0       	rjmp	.+478    	; 0x210 <__bad_interrupt>
  32:	00 00       	nop
  34:	ed c0       	rjmp	.+474    	; 0x210 <__bad_interrupt>
  36:	00 00       	nop
  38:	eb c0       	rjmp	.+470    	; 0x210 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	e9 c0       	rjmp	.+466    	; 0x210 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e7 c0       	rjmp	.+462    	; 0x210 <__bad_interrupt>
  42:	00 00       	nop
  44:	e5 c0       	rjmp	.+458    	; 0x210 <__bad_interrupt>
  46:	00 00       	nop
  48:	e3 c0       	rjmp	.+454    	; 0x210 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e1 c0       	rjmp	.+450    	; 0x210 <__bad_interrupt>
  4e:	00 00       	nop
  50:	df c0       	rjmp	.+446    	; 0x210 <__bad_interrupt>
  52:	00 00       	nop
  54:	dd c0       	rjmp	.+442    	; 0x210 <__bad_interrupt>
  56:	00 00       	nop
  58:	db c0       	rjmp	.+438    	; 0x210 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	d9 c0       	rjmp	.+434    	; 0x210 <__bad_interrupt>
  5e:	00 00       	nop
  60:	d7 c0       	rjmp	.+430    	; 0x210 <__bad_interrupt>
  62:	00 00       	nop
  64:	d5 c0       	rjmp	.+426    	; 0x210 <__bad_interrupt>
  66:	00 00       	nop
  68:	d3 c0       	rjmp	.+422    	; 0x210 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d1 c0       	rjmp	.+418    	; 0x210 <__bad_interrupt>
  6e:	00 00       	nop
  70:	cf c0       	rjmp	.+414    	; 0x210 <__bad_interrupt>
  72:	00 00       	nop
  74:	cd c0       	rjmp	.+410    	; 0x210 <__bad_interrupt>
  76:	00 00       	nop
  78:	cb c0       	rjmp	.+406    	; 0x210 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	c9 c0       	rjmp	.+402    	; 0x210 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c7 c0       	rjmp	.+398    	; 0x210 <__bad_interrupt>
  82:	00 00       	nop
  84:	c5 c0       	rjmp	.+394    	; 0x210 <__bad_interrupt>
  86:	00 00       	nop
  88:	c3 c0       	rjmp	.+390    	; 0x210 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c1 c0       	rjmp	.+386    	; 0x210 <__bad_interrupt>
  8e:	00 00       	nop
  90:	bf c0       	rjmp	.+382    	; 0x210 <__bad_interrupt>
  92:	00 00       	nop
  94:	bd c0       	rjmp	.+378    	; 0x210 <__bad_interrupt>
  96:	00 00       	nop
  98:	bb c0       	rjmp	.+374    	; 0x210 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	b9 c0       	rjmp	.+370    	; 0x210 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b7 c0       	rjmp	.+366    	; 0x210 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	b5 c0       	rjmp	.+362    	; 0x210 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	b3 c0       	rjmp	.+358    	; 0x210 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	b1 c0       	rjmp	.+354    	; 0x210 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	af c0       	rjmp	.+350    	; 0x210 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	ad c0       	rjmp	.+346    	; 0x210 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	ab c0       	rjmp	.+342    	; 0x210 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	a9 c0       	rjmp	.+338    	; 0x210 <__bad_interrupt>
  be:	00 00       	nop
  c0:	a7 c0       	rjmp	.+334    	; 0x210 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	a5 c0       	rjmp	.+330    	; 0x210 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	a3 c0       	rjmp	.+326    	; 0x210 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a1 c0       	rjmp	.+322    	; 0x210 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	9f c0       	rjmp	.+318    	; 0x210 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	9d c0       	rjmp	.+314    	; 0x210 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	9b c0       	rjmp	.+310    	; 0x210 <__bad_interrupt>
  da:	00 00       	nop
  dc:	99 c0       	rjmp	.+306    	; 0x210 <__bad_interrupt>
  de:	00 00       	nop
  e0:	97 c0       	rjmp	.+302    	; 0x210 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	95 c0       	rjmp	.+298    	; 0x210 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	93 c0       	rjmp	.+294    	; 0x210 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	91 c0       	rjmp	.+290    	; 0x210 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	8f c0       	rjmp	.+286    	; 0x210 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	8d c0       	rjmp	.+282    	; 0x210 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	8b c0       	rjmp	.+278    	; 0x210 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	89 c0       	rjmp	.+274    	; 0x210 <__bad_interrupt>
  fe:	00 00       	nop
 100:	87 c0       	rjmp	.+270    	; 0x210 <__bad_interrupt>
 102:	00 00       	nop
 104:	85 c0       	rjmp	.+266    	; 0x210 <__bad_interrupt>
 106:	00 00       	nop
 108:	83 c0       	rjmp	.+262    	; 0x210 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	81 c0       	rjmp	.+258    	; 0x210 <__bad_interrupt>
 10e:	00 00       	nop
 110:	7f c0       	rjmp	.+254    	; 0x210 <__bad_interrupt>
 112:	00 00       	nop
 114:	7d c0       	rjmp	.+250    	; 0x210 <__bad_interrupt>
 116:	00 00       	nop
 118:	7b c0       	rjmp	.+246    	; 0x210 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	79 c0       	rjmp	.+242    	; 0x210 <__bad_interrupt>
 11e:	00 00       	nop
 120:	77 c0       	rjmp	.+238    	; 0x210 <__bad_interrupt>
 122:	00 00       	nop
 124:	75 c0       	rjmp	.+234    	; 0x210 <__bad_interrupt>
 126:	00 00       	nop
 128:	73 c0       	rjmp	.+230    	; 0x210 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	71 c0       	rjmp	.+226    	; 0x210 <__bad_interrupt>
 12e:	00 00       	nop
 130:	6f c0       	rjmp	.+222    	; 0x210 <__bad_interrupt>
 132:	00 00       	nop
 134:	6d c0       	rjmp	.+218    	; 0x210 <__bad_interrupt>
 136:	00 00       	nop
 138:	6b c0       	rjmp	.+214    	; 0x210 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	69 c0       	rjmp	.+210    	; 0x210 <__bad_interrupt>
 13e:	00 00       	nop
 140:	67 c0       	rjmp	.+206    	; 0x210 <__bad_interrupt>
 142:	00 00       	nop
 144:	65 c0       	rjmp	.+202    	; 0x210 <__bad_interrupt>
 146:	00 00       	nop
 148:	63 c0       	rjmp	.+198    	; 0x210 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	61 c0       	rjmp	.+194    	; 0x210 <__bad_interrupt>
 14e:	00 00       	nop
 150:	5f c0       	rjmp	.+190    	; 0x210 <__bad_interrupt>
 152:	00 00       	nop
 154:	5d c0       	rjmp	.+186    	; 0x210 <__bad_interrupt>
 156:	00 00       	nop
 158:	5b c0       	rjmp	.+182    	; 0x210 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	59 c0       	rjmp	.+178    	; 0x210 <__bad_interrupt>
 15e:	00 00       	nop
 160:	57 c0       	rjmp	.+174    	; 0x210 <__bad_interrupt>
 162:	00 00       	nop
 164:	55 c0       	rjmp	.+170    	; 0x210 <__bad_interrupt>
 166:	00 00       	nop
 168:	53 c0       	rjmp	.+166    	; 0x210 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	51 c0       	rjmp	.+162    	; 0x210 <__bad_interrupt>
 16e:	00 00       	nop
 170:	4f c0       	rjmp	.+158    	; 0x210 <__bad_interrupt>
 172:	00 00       	nop
 174:	4d c0       	rjmp	.+154    	; 0x210 <__bad_interrupt>
 176:	00 00       	nop
 178:	4b c0       	rjmp	.+150    	; 0x210 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	49 c0       	rjmp	.+146    	; 0x210 <__bad_interrupt>
 17e:	00 00       	nop
 180:	47 c0       	rjmp	.+142    	; 0x210 <__bad_interrupt>
 182:	00 00       	nop
 184:	45 c0       	rjmp	.+138    	; 0x210 <__bad_interrupt>
 186:	00 00       	nop
 188:	43 c0       	rjmp	.+134    	; 0x210 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	41 c0       	rjmp	.+130    	; 0x210 <__bad_interrupt>
 18e:	00 00       	nop
 190:	3f c0       	rjmp	.+126    	; 0x210 <__bad_interrupt>
 192:	00 00       	nop
 194:	3d c0       	rjmp	.+122    	; 0x210 <__bad_interrupt>
 196:	00 00       	nop
 198:	3b c0       	rjmp	.+118    	; 0x210 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	39 c0       	rjmp	.+114    	; 0x210 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	37 c0       	rjmp	.+110    	; 0x210 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	35 c0       	rjmp	.+106    	; 0x210 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	33 c0       	rjmp	.+102    	; 0x210 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	31 c0       	rjmp	.+98     	; 0x210 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	2f c0       	rjmp	.+94     	; 0x210 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	2d c0       	rjmp	.+90     	; 0x210 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	2b c0       	rjmp	.+86     	; 0x210 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	29 c0       	rjmp	.+82     	; 0x210 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	27 c0       	rjmp	.+78     	; 0x210 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	25 c0       	rjmp	.+74     	; 0x210 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	23 c0       	rjmp	.+70     	; 0x210 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	21 c0       	rjmp	.+66     	; 0x210 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	1f c0       	rjmp	.+62     	; 0x210 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	1d c0       	rjmp	.+58     	; 0x210 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	1b c0       	rjmp	.+54     	; 0x210 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	19 c0       	rjmp	.+50     	; 0x210 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	17 c0       	rjmp	.+46     	; 0x210 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	15 c0       	rjmp	.+42     	; 0x210 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	13 c0       	rjmp	.+38     	; 0x210 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	11 c0       	rjmp	.+34     	; 0x210 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	0f c0       	rjmp	.+30     	; 0x210 <__bad_interrupt>
	...

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	df e3       	ldi	r29, 0x3F	; 63
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59
 20c:	c5 d0       	rcall	.+394    	; 0x398 <main>
 20e:	ea c0       	rjmp	.+468    	; 0x3e4 <_exit>

00000210 <__bad_interrupt>:
 210:	f7 ce       	rjmp	.-530    	; 0x0 <__vectors>

00000212 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	1f 92       	push	r1
 218:	1f 92       	push	r1
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
 224:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
 228:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
 22c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
 230:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
 234:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
 238:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 23c:	8f b7       	in	r24, 0x3f	; 63
 23e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
 240:	f8 94       	cli
	return flags;
 242:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
 244:	e0 e5       	ldi	r30, 0x50	; 80
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	82 60       	ori	r24, 0x02	; 2
 24c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 24e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
 250:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
 252:	81 ff       	sbrs	r24, 1
 254:	fd cf       	rjmp	.-6      	; 0x250 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	80 e4       	ldi	r24, 0x40	; 64
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	97 d0       	rcall	.+302    	; 0x38c <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 25e:	8f b7       	in	r24, 0x3f	; 63
 260:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 262:	f8 94       	cli
	return flags;
 264:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
 266:	e0 e5       	ldi	r30, 0x50	; 80
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	8e 7f       	andi	r24, 0xFE	; 254
 26e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 270:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 286:	c6 2f       	mov	r28, r22
 288:	d0 e0       	ldi	r29, 0x00	; 0
 28a:	de 01       	movw	r26, r28
 28c:	02 2e       	mov	r0, r18
 28e:	02 c0       	rjmp	.+4      	; 0x294 <ioport_configure_port_pin+0x18>
 290:	b5 95       	asr	r27
 292:	a7 95       	ror	r26
 294:	0a 94       	dec	r0
 296:	e2 f7       	brpl	.-8      	; 0x290 <ioport_configure_port_pin+0x14>
 298:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 29a:	50 8b       	std	Z+16, r21	; 0x10
 29c:	2f 5f       	subi	r18, 0xFF	; 255
 29e:	3f 4f       	sbci	r19, 0xFF	; 255
 2a0:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 2a2:	28 30       	cpi	r18, 0x08	; 8
 2a4:	31 05       	cpc	r19, r1
 2a6:	89 f7       	brne	.-30     	; 0x28a <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 2a8:	40 ff       	sbrs	r20, 0
 2aa:	0a c0       	rjmp	.+20     	; 0x2c0 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
 2ac:	41 ff       	sbrs	r20, 1
 2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 2b0:	fc 01       	movw	r30, r24
 2b2:	65 83       	std	Z+5, r22	; 0x05
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 2b6:	fc 01       	movw	r30, r24
 2b8:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 2ba:	fc 01       	movw	r30, r24
 2bc:	61 83       	std	Z+1, r22	; 0x01
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 2c0:	fc 01       	movw	r30, r24
 2c2:	62 83       	std	Z+2, r22	; 0x02
	}
}
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 2ca:	43 e0       	ldi	r20, 0x03	; 3
 2cc:	50 e0       	ldi	r21, 0x00	; 0
 2ce:	61 e0       	ldi	r22, 0x01	; 1
 2d0:	80 e8       	ldi	r24, 0x80	; 128
 2d2:	96 e0       	ldi	r25, 0x06	; 6
 2d4:	d3 df       	rcall	.-90     	; 0x27c <ioport_configure_port_pin>
 2d6:	43 e0       	ldi	r20, 0x03	; 3
 2d8:	50 e0       	ldi	r21, 0x00	; 0
 2da:	62 e0       	ldi	r22, 0x02	; 2
 2dc:	80 e8       	ldi	r24, 0x80	; 128
 2de:	96 e0       	ldi	r25, 0x06	; 6
 2e0:	cd df       	rcall	.-102    	; 0x27c <ioport_configure_port_pin>
 2e2:	43 e0       	ldi	r20, 0x03	; 3
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	64 e0       	ldi	r22, 0x04	; 4
 2e8:	80 e8       	ldi	r24, 0x80	; 128
 2ea:	96 e0       	ldi	r25, 0x06	; 6
 2ec:	c7 df       	rcall	.-114    	; 0x27c <ioport_configure_port_pin>
 2ee:	43 e0       	ldi	r20, 0x03	; 3
 2f0:	50 e0       	ldi	r21, 0x00	; 0
 2f2:	68 e0       	ldi	r22, 0x08	; 8
 2f4:	80 e8       	ldi	r24, 0x80	; 128
 2f6:	96 e0       	ldi	r25, 0x06	; 6
 2f8:	c1 df       	rcall	.-126    	; 0x27c <ioport_configure_port_pin>
 2fa:	43 e0       	ldi	r20, 0x03	; 3
 2fc:	50 e0       	ldi	r21, 0x00	; 0
 2fe:	60 e1       	ldi	r22, 0x10	; 16
 300:	80 e8       	ldi	r24, 0x80	; 128
 302:	96 e0       	ldi	r25, 0x06	; 6
 304:	bb df       	rcall	.-138    	; 0x27c <ioport_configure_port_pin>
 306:	43 e0       	ldi	r20, 0x03	; 3
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	60 e2       	ldi	r22, 0x20	; 32
 30c:	80 e8       	ldi	r24, 0x80	; 128
 30e:	96 e0       	ldi	r25, 0x06	; 6
 310:	b5 df       	rcall	.-150    	; 0x27c <ioport_configure_port_pin>
 312:	43 e0       	ldi	r20, 0x03	; 3
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	60 e4       	ldi	r22, 0x40	; 64
 318:	80 e8       	ldi	r24, 0x80	; 128
 31a:	96 e0       	ldi	r25, 0x06	; 6
 31c:	af df       	rcall	.-162    	; 0x27c <ioport_configure_port_pin>
 31e:	43 e0       	ldi	r20, 0x03	; 3
 320:	50 e0       	ldi	r21, 0x00	; 0
 322:	60 e8       	ldi	r22, 0x80	; 128
 324:	80 e8       	ldi	r24, 0x80	; 128
 326:	96 e0       	ldi	r25, 0x06	; 6
 328:	a9 df       	rcall	.-174    	; 0x27c <ioport_configure_port_pin>
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	58 e1       	ldi	r21, 0x18	; 24
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	80 ea       	ldi	r24, 0xA0	; 160
 332:	96 e0       	ldi	r25, 0x06	; 6
 334:	a3 df       	rcall	.-186    	; 0x27c <ioport_configure_port_pin>
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	58 e1       	ldi	r21, 0x18	; 24
 33a:	62 e0       	ldi	r22, 0x02	; 2
 33c:	80 ea       	ldi	r24, 0xA0	; 160
 33e:	96 e0       	ldi	r25, 0x06	; 6
 340:	9d df       	rcall	.-198    	; 0x27c <ioport_configure_port_pin>
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	58 e1       	ldi	r21, 0x18	; 24
 346:	64 e0       	ldi	r22, 0x04	; 4
 348:	80 ea       	ldi	r24, 0xA0	; 160
 34a:	96 e0       	ldi	r25, 0x06	; 6
 34c:	97 df       	rcall	.-210    	; 0x27c <ioport_configure_port_pin>
 34e:	40 e0       	ldi	r20, 0x00	; 0
 350:	58 e1       	ldi	r21, 0x18	; 24
 352:	68 e0       	ldi	r22, 0x08	; 8
 354:	80 ea       	ldi	r24, 0xA0	; 160
 356:	96 e0       	ldi	r25, 0x06	; 6
 358:	91 df       	rcall	.-222    	; 0x27c <ioport_configure_port_pin>
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	58 e1       	ldi	r21, 0x18	; 24
 35e:	60 e1       	ldi	r22, 0x10	; 16
 360:	80 ea       	ldi	r24, 0xA0	; 160
 362:	96 e0       	ldi	r25, 0x06	; 6
 364:	8b df       	rcall	.-234    	; 0x27c <ioport_configure_port_pin>
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	58 e1       	ldi	r21, 0x18	; 24
 36a:	60 e2       	ldi	r22, 0x20	; 32
 36c:	80 ea       	ldi	r24, 0xA0	; 160
 36e:	96 e0       	ldi	r25, 0x06	; 6
 370:	85 df       	rcall	.-246    	; 0x27c <ioport_configure_port_pin>
 372:	40 e0       	ldi	r20, 0x00	; 0
 374:	58 e1       	ldi	r21, 0x18	; 24
 376:	60 e4       	ldi	r22, 0x40	; 64
 378:	80 ea       	ldi	r24, 0xA0	; 160
 37a:	96 e0       	ldi	r25, 0x06	; 6
 37c:	7f df       	rcall	.-258    	; 0x27c <ioport_configure_port_pin>
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	58 e1       	ldi	r21, 0x18	; 24
 382:	60 e8       	ldi	r22, 0x80	; 128
 384:	80 ea       	ldi	r24, 0xA0	; 160
 386:	96 e0       	ldi	r25, 0x06	; 6
 388:	79 cf       	rjmp	.-270    	; 0x27c <ioport_configure_port_pin>
 38a:	08 95       	ret

0000038c <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
 38c:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
 38e:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
 390:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
 392:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
 394:	60 83       	st	Z, r22
	ret                             // Return to caller
 396:	08 95       	ret

00000398 <main>:
 */
#include <asf.h>
#include "conf_example.h"

int main(void)
{
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	1f 92       	push	r1
 39e:	cd b7       	in	r28, 0x3d	; 61
	sysclk_init();
	board_init();
 3a0:	de b7       	in	r29, 0x3e	; 62
 3a2:	37 df       	rcall	.-402    	; 0x212 <sysclk_init>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
 3a4:	92 df       	rcall	.-220    	; 0x2ca <board_init>
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
 3ac:	e0 ea       	ldi	r30, 0xA0	; 160
 3ae:	f6 e0       	ldi	r31, 0x06	; 6

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 3b0:	82 83       	std	Z+2, r24	; 0x02
 3b2:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
 3b4:	89 83       	std	Y+1, r24	; 0x01
	return flags;
 3b6:	f8 94       	cli
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
 3b8:	99 81       	ldd	r25, Y+1	; 0x01
 3ba:	80 89       	ldd	r24, Z+16	; 0x10
 3bc:	87 70       	andi	r24, 0x07	; 7
	*pin_ctrl |= mode;
 3be:	80 8b       	std	Z+16, r24	; 0x10
 3c0:	80 89       	ldd	r24, Z+16	; 0x10
 3c2:	88 61       	ori	r24, 0x18	; 24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 3c4:	80 8b       	std	Z+16, r24	; 0x10

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
 3c6:	9f bf       	out	0x3f, r25	; 63
 3c8:	a0 ea       	ldi	r26, 0xA0	; 160
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 3ca:	b6 e0       	ldi	r27, 0x06	; 6
 3cc:	e0 e8       	ldi	r30, 0x80	; 128
 3ce:	f6 e0       	ldi	r31, 0x06	; 6

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	18 96       	adiw	r26, 0x08	; 8
 3d4:	8c 91       	ld	r24, X
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
 3d6:	18 97       	sbiw	r26, 0x08	; 8
 3d8:	80 ff       	sbrs	r24, 0
		base->OUTSET = arch_ioport_pin_to_mask(pin);
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <main+0x48>
 3dc:	95 83       	std	Z+5, r25	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 3de:	f9 cf       	rjmp	.-14     	; 0x3d2 <main+0x3a>
 3e0:	96 83       	std	Z+6, r25	; 0x06
 3e2:	f7 cf       	rjmp	.-18     	; 0x3d2 <main+0x3a>

000003e4 <_exit>:
 3e4:	f8 94       	cli

000003e6 <__stop_program>:
 3e6:	ff cf       	rjmp	.-2      	; 0x3e6 <__stop_program>
