
FREERTOS_OLED1_XPRO_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f6c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00001f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  0002000c  2**0
                  CONTENTS
  3 .bss          00003c28  2000000c  00001f78  0002000c  2**2
                  ALLOC
  4 .stack        00002004  20003c34  00005ba0  0002000c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  7 .debug_info   00019dcc  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002f6f  00000000  00000000  00039e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000618  00000000  00000000  0003cdc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000668  00000000  00000000  0003d3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00006264  00000000  00000000  0003da48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bb58  00000000  00000000  00043cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a1ae0  00000000  00000000  0004f804  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000f68  00000000  00000000  000f12e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004e5c  00000000  00000000  000f224c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 5c 00 20 7d 06 00 00 79 06 00 00 79 06 00 00     8\. }...y...y...
	...
      2c:	f1 07 00 00 00 00 00 00 00 00 00 00 55 08 00 00     ............U...
      3c:	99 08 00 00 79 06 00 00 79 06 00 00 79 06 00 00     ....y...y...y...
      4c:	79 06 00 00 79 06 00 00 79 06 00 00 79 06 00 00     y...y...y...y...
      5c:	79 06 00 00 e1 01 00 00 f1 01 00 00 01 02 00 00     y...............
      6c:	11 02 00 00 21 02 00 00 31 02 00 00 79 06 00 00     ....!...1...y...
      7c:	79 06 00 00 79 06 00 00 79 06 00 00 79 06 00 00     y...y...y...y...
      8c:	79 06 00 00 79 06 00 00 79 06 00 00 79 06 00 00     y...y...y...y...
      9c:	79 06 00 00 79 06 00 00 79 06 00 00 79 06 00 00     y...y...y...y...
      ac:	79 06 00 00 00 00 00 00                             y.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	00001f6c 	.word	0x00001f6c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	00001f6c 	.word	0x00001f6c
     10c:	00001f6c 	.word	0x00001f6c
     110:	00000000 	.word	0x00000000

00000114 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     114:	4b0c      	ldr	r3, [pc, #48]	; (148 <cpu_irq_enter_critical+0x34>)
     116:	681b      	ldr	r3, [r3, #0]
     118:	2b00      	cmp	r3, #0
     11a:	d106      	bne.n	12a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     11c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     120:	2b00      	cmp	r3, #0
     122:	d007      	beq.n	134 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     124:	2200      	movs	r2, #0
     126:	4b09      	ldr	r3, [pc, #36]	; (14c <cpu_irq_enter_critical+0x38>)
     128:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     12a:	4a07      	ldr	r2, [pc, #28]	; (148 <cpu_irq_enter_critical+0x34>)
     12c:	6813      	ldr	r3, [r2, #0]
     12e:	3301      	adds	r3, #1
     130:	6013      	str	r3, [r2, #0]
}
     132:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     134:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     136:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     13a:	2200      	movs	r2, #0
     13c:	4b04      	ldr	r3, [pc, #16]	; (150 <cpu_irq_enter_critical+0x3c>)
     13e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     140:	3201      	adds	r2, #1
     142:	4b02      	ldr	r3, [pc, #8]	; (14c <cpu_irq_enter_critical+0x38>)
     144:	701a      	strb	r2, [r3, #0]
     146:	e7f0      	b.n	12a <cpu_irq_enter_critical+0x16>
     148:	20000028 	.word	0x20000028
     14c:	2000002c 	.word	0x2000002c
     150:	20000000 	.word	0x20000000

00000154 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     154:	4b08      	ldr	r3, [pc, #32]	; (178 <cpu_irq_leave_critical+0x24>)
     156:	681a      	ldr	r2, [r3, #0]
     158:	3a01      	subs	r2, #1
     15a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     15c:	681b      	ldr	r3, [r3, #0]
     15e:	2b00      	cmp	r3, #0
     160:	d109      	bne.n	176 <cpu_irq_leave_critical+0x22>
     162:	4b06      	ldr	r3, [pc, #24]	; (17c <cpu_irq_leave_critical+0x28>)
     164:	781b      	ldrb	r3, [r3, #0]
     166:	2b00      	cmp	r3, #0
     168:	d005      	beq.n	176 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     16a:	2201      	movs	r2, #1
     16c:	4b04      	ldr	r3, [pc, #16]	; (180 <cpu_irq_leave_critical+0x2c>)
     16e:	701a      	strb	r2, [r3, #0]
     170:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     174:	b662      	cpsie	i
	}
}
     176:	4770      	bx	lr
     178:	20000028 	.word	0x20000028
     17c:	2000002c 	.word	0x2000002c
     180:	20000000 	.word	0x20000000

00000184 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     184:	b5f0      	push	{r4, r5, r6, r7, lr}
     186:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     188:	ac01      	add	r4, sp, #4
     18a:	2501      	movs	r5, #1
     18c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     18e:	2700      	movs	r7, #0
     190:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     192:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     194:	0021      	movs	r1, r4
     196:	202a      	movs	r0, #42	; 0x2a
     198:	4e06      	ldr	r6, [pc, #24]	; (1b4 <system_board_init+0x30>)
     19a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     19c:	2280      	movs	r2, #128	; 0x80
     19e:	00d2      	lsls	r2, r2, #3
     1a0:	4b05      	ldr	r3, [pc, #20]	; (1b8 <system_board_init+0x34>)
     1a2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1a4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1a6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1a8:	0021      	movs	r1, r4
     1aa:	2002      	movs	r0, #2
     1ac:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     1ae:	b003      	add	sp, #12
     1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	000001bd 	.word	0x000001bd
     1b8:	40002880 	.word	0x40002880

000001bc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     1bc:	b500      	push	{lr}
     1be:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1c0:	ab01      	add	r3, sp, #4
     1c2:	2280      	movs	r2, #128	; 0x80
     1c4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     1c6:	780a      	ldrb	r2, [r1, #0]
     1c8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     1ca:	784a      	ldrb	r2, [r1, #1]
     1cc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     1ce:	788a      	ldrb	r2, [r1, #2]
     1d0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     1d2:	0019      	movs	r1, r3
     1d4:	4b01      	ldr	r3, [pc, #4]	; (1dc <port_pin_set_config+0x20>)
     1d6:	4798      	blx	r3
}
     1d8:	b003      	add	sp, #12
     1da:	bd00      	pop	{pc}
     1dc:	00000619 	.word	0x00000619

000001e0 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     1e0:	b510      	push	{r4, lr}
     1e2:	4b02      	ldr	r3, [pc, #8]	; (1ec <SERCOM0_Handler+0xc>)
     1e4:	681b      	ldr	r3, [r3, #0]
     1e6:	2000      	movs	r0, #0
     1e8:	4798      	blx	r3
     1ea:	bd10      	pop	{r4, pc}
     1ec:	20000030 	.word	0x20000030

000001f0 <SERCOM1_Handler>:
     1f0:	b510      	push	{r4, lr}
     1f2:	4b02      	ldr	r3, [pc, #8]	; (1fc <SERCOM1_Handler+0xc>)
     1f4:	685b      	ldr	r3, [r3, #4]
     1f6:	2001      	movs	r0, #1
     1f8:	4798      	blx	r3
     1fa:	bd10      	pop	{r4, pc}
     1fc:	20000030 	.word	0x20000030

00000200 <SERCOM2_Handler>:
     200:	b510      	push	{r4, lr}
     202:	4b02      	ldr	r3, [pc, #8]	; (20c <SERCOM2_Handler+0xc>)
     204:	689b      	ldr	r3, [r3, #8]
     206:	2002      	movs	r0, #2
     208:	4798      	blx	r3
     20a:	bd10      	pop	{r4, pc}
     20c:	20000030 	.word	0x20000030

00000210 <SERCOM3_Handler>:
     210:	b510      	push	{r4, lr}
     212:	4b02      	ldr	r3, [pc, #8]	; (21c <SERCOM3_Handler+0xc>)
     214:	68db      	ldr	r3, [r3, #12]
     216:	2003      	movs	r0, #3
     218:	4798      	blx	r3
     21a:	bd10      	pop	{r4, pc}
     21c:	20000030 	.word	0x20000030

00000220 <SERCOM4_Handler>:
     220:	b510      	push	{r4, lr}
     222:	4b02      	ldr	r3, [pc, #8]	; (22c <SERCOM4_Handler+0xc>)
     224:	691b      	ldr	r3, [r3, #16]
     226:	2004      	movs	r0, #4
     228:	4798      	blx	r3
     22a:	bd10      	pop	{r4, pc}
     22c:	20000030 	.word	0x20000030

00000230 <SERCOM5_Handler>:
     230:	b510      	push	{r4, lr}
     232:	4b02      	ldr	r3, [pc, #8]	; (23c <SERCOM5_Handler+0xc>)
     234:	695b      	ldr	r3, [r3, #20]
     236:	2005      	movs	r0, #5
     238:	4798      	blx	r3
     23a:	bd10      	pop	{r4, pc}
     23c:	20000030 	.word	0x20000030

00000240 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     240:	b510      	push	{r4, lr}
	switch (clock_source) {
     242:	2808      	cmp	r0, #8
     244:	d803      	bhi.n	24e <system_clock_source_get_hz+0xe>
     246:	0080      	lsls	r0, r0, #2
     248:	4b1c      	ldr	r3, [pc, #112]	; (2bc <system_clock_source_get_hz+0x7c>)
     24a:	581b      	ldr	r3, [r3, r0]
     24c:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
     24e:	2000      	movs	r0, #0
     250:	e032      	b.n	2b8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     252:	4b1b      	ldr	r3, [pc, #108]	; (2c0 <system_clock_source_get_hz+0x80>)
     254:	6918      	ldr	r0, [r3, #16]
     256:	e02f      	b.n	2b8 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
     258:	4b1a      	ldr	r3, [pc, #104]	; (2c4 <system_clock_source_get_hz+0x84>)
     25a:	7d18      	ldrb	r0, [r3, #20]
     25c:	0700      	lsls	r0, r0, #28
     25e:	0f80      	lsrs	r0, r0, #30
     260:	1c43      	adds	r3, r0, #1
     262:	4819      	ldr	r0, [pc, #100]	; (2c8 <system_clock_source_get_hz+0x88>)
     264:	4358      	muls	r0, r3
     266:	e027      	b.n	2b8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     268:	4b15      	ldr	r3, [pc, #84]	; (2c0 <system_clock_source_get_hz+0x80>)
     26a:	6958      	ldr	r0, [r3, #20]
     26c:	e024      	b.n	2b8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
     26e:	4b14      	ldr	r3, [pc, #80]	; (2c0 <system_clock_source_get_hz+0x80>)
     270:	681b      	ldr	r3, [r3, #0]
			return 0;
     272:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
     274:	079b      	lsls	r3, r3, #30
     276:	d51f      	bpl.n	2b8 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
     278:	4912      	ldr	r1, [pc, #72]	; (2c4 <system_clock_source_get_hz+0x84>)
     27a:	2280      	movs	r2, #128	; 0x80
     27c:	0052      	lsls	r2, r2, #1
     27e:	68cb      	ldr	r3, [r1, #12]
     280:	4213      	tst	r3, r2
     282:	d0fc      	beq.n	27e <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
     284:	4b0e      	ldr	r3, [pc, #56]	; (2c0 <system_clock_source_get_hz+0x80>)
     286:	681b      	ldr	r3, [r3, #0]
     288:	075b      	lsls	r3, r3, #29
     28a:	d401      	bmi.n	290 <system_clock_source_get_hz+0x50>
		return 48000000UL;
     28c:	480f      	ldr	r0, [pc, #60]	; (2cc <system_clock_source_get_hz+0x8c>)
     28e:	e013      	b.n	2b8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     290:	2000      	movs	r0, #0
     292:	4b0f      	ldr	r3, [pc, #60]	; (2d0 <system_clock_source_get_hz+0x90>)
     294:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     296:	4b0a      	ldr	r3, [pc, #40]	; (2c0 <system_clock_source_get_hz+0x80>)
     298:	689b      	ldr	r3, [r3, #8]
     29a:	041b      	lsls	r3, r3, #16
     29c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     29e:	4358      	muls	r0, r3
     2a0:	e00a      	b.n	2b8 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     2a2:	2328      	movs	r3, #40	; 0x28
     2a4:	4a07      	ldr	r2, [pc, #28]	; (2c4 <system_clock_source_get_hz+0x84>)
     2a6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     2a8:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     2aa:	079b      	lsls	r3, r3, #30
     2ac:	d504      	bpl.n	2b8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     2ae:	4b04      	ldr	r3, [pc, #16]	; (2c0 <system_clock_source_get_hz+0x80>)
     2b0:	68d8      	ldr	r0, [r3, #12]
     2b2:	e001      	b.n	2b8 <system_clock_source_get_hz+0x78>
		return 32768UL;
     2b4:	2080      	movs	r0, #128	; 0x80
     2b6:	0200      	lsls	r0, r0, #8
	}
}
     2b8:	bd10      	pop	{r4, pc}
     2ba:	46c0      	nop			; (mov r8, r8)
     2bc:	00001edc 	.word	0x00001edc
     2c0:	20000048 	.word	0x20000048
     2c4:	40000c00 	.word	0x40000c00
     2c8:	003d0900 	.word	0x003d0900
     2cc:	02dc6c00 	.word	0x02dc6c00
     2d0:	00000541 	.word	0x00000541

000002d4 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     2d4:	b510      	push	{r4, lr}
     2d6:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
     2d8:	2280      	movs	r2, #128	; 0x80
     2da:	0052      	lsls	r2, r2, #1
     2dc:	4b2f      	ldr	r3, [pc, #188]	; (39c <system_clock_init+0xc8>)
     2de:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
     2e0:	3afd      	subs	r2, #253	; 0xfd
     2e2:	4b2f      	ldr	r3, [pc, #188]	; (3a0 <system_clock_init+0xcc>)
     2e4:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     2e6:	4a2f      	ldr	r2, [pc, #188]	; (3a4 <system_clock_init+0xd0>)
     2e8:	6853      	ldr	r3, [r2, #4]
     2ea:	211e      	movs	r1, #30
     2ec:	438b      	bics	r3, r1
     2ee:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
     2f0:	2380      	movs	r3, #128	; 0x80
     2f2:	05db      	lsls	r3, r3, #23
     2f4:	789b      	ldrb	r3, [r3, #2]
     2f6:	2b02      	cmp	r3, #2
     2f8:	d00f      	beq.n	31a <system_clock_init+0x46>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
     2fa:	2380      	movs	r3, #128	; 0x80
     2fc:	05db      	lsls	r3, r3, #23
     2fe:	789b      	ldrb	r3, [r3, #2]
     300:	b25b      	sxtb	r3, r3
     302:	2b00      	cmp	r3, #0
     304:	db09      	blt.n	31a <system_clock_init+0x46>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
     306:	2380      	movs	r3, #128	; 0x80
     308:	05db      	lsls	r3, r3, #23
     30a:	2201      	movs	r2, #1
     30c:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
     30e:	3201      	adds	r2, #1
     310:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
     312:	001a      	movs	r2, r3
     314:	7993      	ldrb	r3, [r2, #6]
     316:	2b00      	cmp	r3, #0
     318:	d0fc      	beq.n	314 <system_clock_init+0x40>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
     31a:	4b20      	ldr	r3, [pc, #128]	; (39c <system_clock_init+0xc8>)
     31c:	7d19      	ldrb	r1, [r3, #20]
     31e:	2280      	movs	r2, #128	; 0x80
     320:	4252      	negs	r2, r2
     322:	430a      	orrs	r2, r1
     324:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
     326:	7d1a      	ldrb	r2, [r3, #20]
     328:	2140      	movs	r1, #64	; 0x40
     32a:	438a      	bics	r2, r1
     32c:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     32e:	4b1e      	ldr	r3, [pc, #120]	; (3a8 <system_clock_init+0xd4>)
     330:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
     332:	4c1e      	ldr	r4, [pc, #120]	; (3ac <system_clock_init+0xd8>)
     334:	2301      	movs	r3, #1
     336:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
     338:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
     33a:	7123      	strb	r3, [r4, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     33c:	a901      	add	r1, sp, #4
     33e:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
     340:	2300      	movs	r3, #0
     342:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
     344:	2206      	movs	r2, #6
     346:	700a      	strb	r2, [r1, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     348:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     34a:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     34c:	2000      	movs	r0, #0
     34e:	4b18      	ldr	r3, [pc, #96]	; (3b0 <system_clock_init+0xdc>)
     350:	4798      	blx	r3
     352:	2000      	movs	r0, #0
     354:	4b17      	ldr	r3, [pc, #92]	; (3b4 <system_clock_init+0xe0>)
     356:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
     358:	2000      	movs	r0, #0
     35a:	4b17      	ldr	r3, [pc, #92]	; (3b8 <system_clock_init+0xe4>)
     35c:	4798      	blx	r3
     35e:	7921      	ldrb	r1, [r4, #4]
     360:	b2c9      	uxtb	r1, r1
     362:	4b16      	ldr	r3, [pc, #88]	; (3bc <system_clock_init+0xe8>)
     364:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
     366:	4b16      	ldr	r3, [pc, #88]	; (3c0 <system_clock_init+0xec>)
     368:	4298      	cmp	r0, r3
     36a:	d814      	bhi.n	396 <system_clock_init+0xc2>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
     36c:	2380      	movs	r3, #128	; 0x80
     36e:	05db      	lsls	r3, r3, #23
     370:	789b      	ldrb	r3, [r3, #2]
     372:	2b00      	cmp	r3, #0
     374:	d00f      	beq.n	396 <system_clock_init+0xc2>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
     376:	2380      	movs	r3, #128	; 0x80
     378:	05db      	lsls	r3, r3, #23
     37a:	789b      	ldrb	r3, [r3, #2]
     37c:	b25b      	sxtb	r3, r3
     37e:	2b00      	cmp	r3, #0
     380:	db09      	blt.n	396 <system_clock_init+0xc2>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
     382:	2380      	movs	r3, #128	; 0x80
     384:	05db      	lsls	r3, r3, #23
     386:	2201      	movs	r2, #1
     388:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
     38a:	2200      	movs	r2, #0
     38c:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
     38e:	001a      	movs	r2, r3
     390:	7993      	ldrb	r3, [r2, #6]
     392:	2b00      	cmp	r3, #0
     394:	d0fc      	beq.n	390 <system_clock_init+0xbc>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
     396:	b004      	add	sp, #16
     398:	bd10      	pop	{r4, pc}
     39a:	46c0      	nop			; (mov r8, r8)
     39c:	40000c00 	.word	0x40000c00
     3a0:	40001400 	.word	0x40001400
     3a4:	41004000 	.word	0x41004000
     3a8:	000003c5 	.word	0x000003c5
     3ac:	40000400 	.word	0x40000400
     3b0:	000003e9 	.word	0x000003e9
     3b4:	00000495 	.word	0x00000495
     3b8:	000004d5 	.word	0x000004d5
     3bc:	00001d69 	.word	0x00001d69
     3c0:	00b71b00 	.word	0x00b71b00

000003c4 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
     3c4:	4a06      	ldr	r2, [pc, #24]	; (3e0 <system_gclk_init+0x1c>)
     3c6:	6953      	ldr	r3, [r2, #20]
     3c8:	2140      	movs	r1, #64	; 0x40
     3ca:	430b      	orrs	r3, r1
     3cc:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
     3ce:	2201      	movs	r2, #1
     3d0:	4b04      	ldr	r3, [pc, #16]	; (3e4 <system_gclk_init+0x20>)
     3d2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
     3d4:	0019      	movs	r1, r3
     3d6:	780b      	ldrb	r3, [r1, #0]
     3d8:	4213      	tst	r3, r2
     3da:	d1fc      	bne.n	3d6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     3dc:	4770      	bx	lr
     3de:	46c0      	nop			; (mov r8, r8)
     3e0:	40000400 	.word	0x40000400
     3e4:	40001800 	.word	0x40001800

000003e8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     3e8:	b570      	push	{r4, r5, r6, lr}
     3ea:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
     3ec:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     3ee:	784b      	ldrb	r3, [r1, #1]
     3f0:	2b00      	cmp	r3, #0
     3f2:	d002      	beq.n	3fa <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     3f4:	2380      	movs	r3, #128	; 0x80
     3f6:	00db      	lsls	r3, r3, #3
     3f8:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     3fa:	7a4b      	ldrb	r3, [r1, #9]
     3fc:	2b00      	cmp	r3, #0
     3fe:	d002      	beq.n	406 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     400:	2380      	movs	r3, #128	; 0x80
     402:	011b      	lsls	r3, r3, #4
     404:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     406:	6848      	ldr	r0, [r1, #4]
     408:	2801      	cmp	r0, #1
     40a:	d90f      	bls.n	42c <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     40c:	1e43      	subs	r3, r0, #1
     40e:	4218      	tst	r0, r3
     410:	d131      	bne.n	476 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     412:	2802      	cmp	r0, #2
     414:	d92d      	bls.n	472 <system_gclk_gen_set_config+0x8a>
     416:	2302      	movs	r3, #2
     418:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     41a:	3201      	adds	r2, #1
						mask <<= 1) {
     41c:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     41e:	4298      	cmp	r0, r3
     420:	d8fb      	bhi.n	41a <system_gclk_gen_set_config+0x32>
     422:	2380      	movs	r3, #128	; 0x80
     424:	015b      	lsls	r3, r3, #5
     426:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
     428:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     42a:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     42c:	7a0b      	ldrb	r3, [r1, #8]
     42e:	2b00      	cmp	r3, #0
     430:	d002      	beq.n	438 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     432:	2380      	movs	r3, #128	; 0x80
     434:	019b      	lsls	r3, r3, #6
     436:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     438:	2604      	movs	r6, #4
     43a:	40a6      	lsls	r6, r4
     43c:	4911      	ldr	r1, [pc, #68]	; (484 <system_gclk_gen_set_config+0x9c>)
     43e:	4a12      	ldr	r2, [pc, #72]	; (488 <system_gclk_gen_set_config+0xa0>)
     440:	684b      	ldr	r3, [r1, #4]
     442:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
     444:	421e      	tst	r6, r3
     446:	d1fb      	bne.n	440 <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     448:	4b10      	ldr	r3, [pc, #64]	; (48c <system_gclk_gen_set_config+0xa4>)
     44a:	4798      	blx	r3
     44c:	00a4      	lsls	r4, r4, #2
     44e:	4b0d      	ldr	r3, [pc, #52]	; (484 <system_gclk_gen_set_config+0x9c>)
     450:	469c      	mov	ip, r3
     452:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
     454:	6a22      	ldr	r2, [r4, #32]
     456:	2380      	movs	r3, #128	; 0x80
     458:	005b      	lsls	r3, r3, #1
     45a:	401a      	ands	r2, r3
     45c:	432a      	orrs	r2, r5
     45e:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     460:	4661      	mov	r1, ip
     462:	4a09      	ldr	r2, [pc, #36]	; (488 <system_gclk_gen_set_config+0xa0>)
     464:	684b      	ldr	r3, [r1, #4]
     466:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
     468:	421e      	tst	r6, r3
     46a:	d1fb      	bne.n	464 <system_gclk_gen_set_config+0x7c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     46c:	4b08      	ldr	r3, [pc, #32]	; (490 <system_gclk_gen_set_config+0xa8>)
     46e:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
     470:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     472:	2200      	movs	r2, #0
     474:	e7d5      	b.n	422 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
     476:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     478:	2380      	movs	r3, #128	; 0x80
     47a:	009b      	lsls	r3, r3, #2
     47c:	4318      	orrs	r0, r3
     47e:	4305      	orrs	r5, r0
     480:	e7d4      	b.n	42c <system_gclk_gen_set_config+0x44>
     482:	46c0      	nop			; (mov r8, r8)
     484:	40001800 	.word	0x40001800
     488:	000007fc 	.word	0x000007fc
     48c:	00000115 	.word	0x00000115
     490:	00000155 	.word	0x00000155

00000494 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     494:	b510      	push	{r4, lr}
     496:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     498:	2204      	movs	r2, #4
     49a:	4082      	lsls	r2, r0
     49c:	4809      	ldr	r0, [pc, #36]	; (4c4 <system_gclk_gen_enable+0x30>)
     49e:	490a      	ldr	r1, [pc, #40]	; (4c8 <system_gclk_gen_enable+0x34>)
     4a0:	6843      	ldr	r3, [r0, #4]
     4a2:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
     4a4:	421a      	tst	r2, r3
     4a6:	d1fb      	bne.n	4a0 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
     4a8:	4b08      	ldr	r3, [pc, #32]	; (4cc <system_gclk_gen_enable+0x38>)
     4aa:	4798      	blx	r3
     4ac:	00a4      	lsls	r4, r4, #2
     4ae:	4b05      	ldr	r3, [pc, #20]	; (4c4 <system_gclk_gen_enable+0x30>)
     4b0:	469c      	mov	ip, r3
     4b2:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
     4b4:	6a22      	ldr	r2, [r4, #32]
     4b6:	2380      	movs	r3, #128	; 0x80
     4b8:	005b      	lsls	r3, r3, #1
     4ba:	4313      	orrs	r3, r2
     4bc:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
     4be:	4b04      	ldr	r3, [pc, #16]	; (4d0 <system_gclk_gen_enable+0x3c>)
     4c0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     4c2:	bd10      	pop	{r4, pc}
     4c4:	40001800 	.word	0x40001800
     4c8:	000007fc 	.word	0x000007fc
     4cc:	00000115 	.word	0x00000115
     4d0:	00000155 	.word	0x00000155

000004d4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4d6:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     4d8:	2204      	movs	r2, #4
     4da:	4082      	lsls	r2, r0
     4dc:	4812      	ldr	r0, [pc, #72]	; (528 <system_gclk_gen_get_hz+0x54>)
     4de:	4913      	ldr	r1, [pc, #76]	; (52c <system_gclk_gen_get_hz+0x58>)
     4e0:	6843      	ldr	r3, [r0, #4]
     4e2:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
     4e4:	421a      	tst	r2, r3
     4e6:	d1fb      	bne.n	4e0 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
     4e8:	4b11      	ldr	r3, [pc, #68]	; (530 <system_gclk_gen_get_hz+0x5c>)
     4ea:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
     4ec:	4f0e      	ldr	r7, [pc, #56]	; (528 <system_gclk_gen_get_hz+0x54>)
     4ee:	3408      	adds	r4, #8
     4f0:	00a4      	lsls	r4, r4, #2
     4f2:	59e0      	ldr	r0, [r4, r7]
     4f4:	0700      	lsls	r0, r0, #28
     4f6:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
     4f8:	4b0e      	ldr	r3, [pc, #56]	; (534 <system_gclk_gen_get_hz+0x60>)
     4fa:	4798      	blx	r3
     4fc:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
     4fe:	59e5      	ldr	r5, [r4, r7]
     500:	04ed      	lsls	r5, r5, #19
     502:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
     504:	59e4      	ldr	r4, [r4, r7]
     506:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     508:	4b0b      	ldr	r3, [pc, #44]	; (538 <system_gclk_gen_get_hz+0x64>)
     50a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     50c:	2d00      	cmp	r5, #0
     50e:	d107      	bne.n	520 <system_gclk_gen_get_hz+0x4c>
     510:	2c01      	cmp	r4, #1
     512:	d907      	bls.n	524 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
     514:	0021      	movs	r1, r4
     516:	0030      	movs	r0, r6
     518:	4b08      	ldr	r3, [pc, #32]	; (53c <system_gclk_gen_get_hz+0x68>)
     51a:	4798      	blx	r3
     51c:	0006      	movs	r6, r0
     51e:	e001      	b.n	524 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     520:	3401      	adds	r4, #1
     522:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
     524:	0030      	movs	r0, r6
     526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     528:	40001800 	.word	0x40001800
     52c:	000007fc 	.word	0x000007fc
     530:	00000115 	.word	0x00000115
     534:	00000241 	.word	0x00000241
     538:	00000155 	.word	0x00000155
     53c:	00001d69 	.word	0x00001d69

00000540 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     540:	b510      	push	{r4, lr}
     542:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     544:	4b06      	ldr	r3, [pc, #24]	; (560 <system_gclk_chan_get_hz+0x20>)
     546:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
     548:	3420      	adds	r4, #32
     54a:	00a4      	lsls	r4, r4, #2
     54c:	4b05      	ldr	r3, [pc, #20]	; (564 <system_gclk_chan_get_hz+0x24>)
     54e:	58e4      	ldr	r4, [r4, r3]
     550:	0724      	lsls	r4, r4, #28
     552:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     554:	4b04      	ldr	r3, [pc, #16]	; (568 <system_gclk_chan_get_hz+0x28>)
     556:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     558:	0020      	movs	r0, r4
     55a:	4b04      	ldr	r3, [pc, #16]	; (56c <system_gclk_chan_get_hz+0x2c>)
     55c:	4798      	blx	r3
}
     55e:	bd10      	pop	{r4, pc}
     560:	00000115 	.word	0x00000115
     564:	40001800 	.word	0x40001800
     568:	00000155 	.word	0x00000155
     56c:	000004d5 	.word	0x000004d5

00000570 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     570:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     572:	78d3      	ldrb	r3, [r2, #3]
     574:	2b00      	cmp	r3, #0
     576:	d135      	bne.n	5e4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     578:	7813      	ldrb	r3, [r2, #0]
     57a:	2b80      	cmp	r3, #128	; 0x80
     57c:	d029      	beq.n	5d2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     57e:	061b      	lsls	r3, r3, #24
     580:	2480      	movs	r4, #128	; 0x80
     582:	0264      	lsls	r4, r4, #9
     584:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     586:	7854      	ldrb	r4, [r2, #1]
     588:	2502      	movs	r5, #2
     58a:	43ac      	bics	r4, r5
     58c:	d106      	bne.n	59c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     58e:	7894      	ldrb	r4, [r2, #2]
     590:	2c00      	cmp	r4, #0
     592:	d120      	bne.n	5d6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     594:	2480      	movs	r4, #128	; 0x80
     596:	02a4      	lsls	r4, r4, #10
     598:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     59a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     59c:	7854      	ldrb	r4, [r2, #1]
     59e:	3c01      	subs	r4, #1
     5a0:	2c01      	cmp	r4, #1
     5a2:	d91c      	bls.n	5de <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     5a4:	040d      	lsls	r5, r1, #16
     5a6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     5a8:	24a0      	movs	r4, #160	; 0xa0
     5aa:	05e4      	lsls	r4, r4, #23
     5ac:	432c      	orrs	r4, r5
     5ae:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     5b0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     5b2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     5b4:	24d0      	movs	r4, #208	; 0xd0
     5b6:	0624      	lsls	r4, r4, #24
     5b8:	432c      	orrs	r4, r5
     5ba:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     5bc:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     5be:	78d4      	ldrb	r4, [r2, #3]
     5c0:	2c00      	cmp	r4, #0
     5c2:	d122      	bne.n	60a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     5c4:	035b      	lsls	r3, r3, #13
     5c6:	d51c      	bpl.n	602 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     5c8:	7893      	ldrb	r3, [r2, #2]
     5ca:	2b01      	cmp	r3, #1
     5cc:	d01e      	beq.n	60c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     5ce:	6141      	str	r1, [r0, #20]
     5d0:	e017      	b.n	602 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
     5d2:	2300      	movs	r3, #0
     5d4:	e7d7      	b.n	586 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     5d6:	24c0      	movs	r4, #192	; 0xc0
     5d8:	02e4      	lsls	r4, r4, #11
     5da:	4323      	orrs	r3, r4
     5dc:	e7dd      	b.n	59a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     5de:	4c0d      	ldr	r4, [pc, #52]	; (614 <_system_pinmux_config+0xa4>)
     5e0:	4023      	ands	r3, r4
     5e2:	e7df      	b.n	5a4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
     5e4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     5e6:	040c      	lsls	r4, r1, #16
     5e8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     5ea:	23a0      	movs	r3, #160	; 0xa0
     5ec:	05db      	lsls	r3, r3, #23
     5ee:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     5f0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     5f2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     5f4:	23d0      	movs	r3, #208	; 0xd0
     5f6:	061b      	lsls	r3, r3, #24
     5f8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     5fa:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
     5fc:	78d3      	ldrb	r3, [r2, #3]
     5fe:	2b00      	cmp	r3, #0
     600:	d103      	bne.n	60a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     602:	7853      	ldrb	r3, [r2, #1]
     604:	3b01      	subs	r3, #1
     606:	2b01      	cmp	r3, #1
     608:	d902      	bls.n	610 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
     60a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
     60c:	6181      	str	r1, [r0, #24]
     60e:	e7f8      	b.n	602 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
     610:	6081      	str	r1, [r0, #8]
}
     612:	e7fa      	b.n	60a <_system_pinmux_config+0x9a>
     614:	fffbffff 	.word	0xfffbffff

00000618 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     618:	b510      	push	{r4, lr}
     61a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     61c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     61e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     620:	2900      	cmp	r1, #0
     622:	d104      	bne.n	62e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     624:	0943      	lsrs	r3, r0, #5
     626:	01db      	lsls	r3, r3, #7
     628:	4905      	ldr	r1, [pc, #20]	; (640 <system_pinmux_pin_set_config+0x28>)
     62a:	468c      	mov	ip, r1
     62c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     62e:	241f      	movs	r4, #31
     630:	4020      	ands	r0, r4
     632:	2101      	movs	r1, #1
     634:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
     636:	0018      	movs	r0, r3
     638:	4b02      	ldr	r3, [pc, #8]	; (644 <system_pinmux_pin_set_config+0x2c>)
     63a:	4798      	blx	r3
}
     63c:	bd10      	pop	{r4, pc}
     63e:	46c0      	nop			; (mov r8, r8)
     640:	40002800 	.word	0x40002800
     644:	00000571 	.word	0x00000571

00000648 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     648:	4770      	bx	lr
	...

0000064c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     64c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     64e:	4b05      	ldr	r3, [pc, #20]	; (664 <system_init+0x18>)
     650:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
     652:	4b05      	ldr	r3, [pc, #20]	; (668 <system_init+0x1c>)
     654:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
     656:	4b05      	ldr	r3, [pc, #20]	; (66c <system_init+0x20>)
     658:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     65a:	4b05      	ldr	r3, [pc, #20]	; (670 <system_init+0x24>)
     65c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
     65e:	4b05      	ldr	r3, [pc, #20]	; (674 <system_init+0x28>)
     660:	4798      	blx	r3
}
     662:	bd10      	pop	{r4, pc}
     664:	000002d5 	.word	0x000002d5
     668:	00000185 	.word	0x00000185
     66c:	00000649 	.word	0x00000649
     670:	00000649 	.word	0x00000649
     674:	00000649 	.word	0x00000649

00000678 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     678:	e7fe      	b.n	678 <Dummy_Handler>
	...

0000067c <Reset_Handler>:
{
     67c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     67e:	4a1a      	ldr	r2, [pc, #104]	; (6e8 <Reset_Handler+0x6c>)
     680:	4b1a      	ldr	r3, [pc, #104]	; (6ec <Reset_Handler+0x70>)
     682:	429a      	cmp	r2, r3
     684:	d011      	beq.n	6aa <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     686:	001a      	movs	r2, r3
     688:	4b19      	ldr	r3, [pc, #100]	; (6f0 <Reset_Handler+0x74>)
     68a:	429a      	cmp	r2, r3
     68c:	d20d      	bcs.n	6aa <Reset_Handler+0x2e>
     68e:	4a19      	ldr	r2, [pc, #100]	; (6f4 <Reset_Handler+0x78>)
     690:	3303      	adds	r3, #3
     692:	1a9b      	subs	r3, r3, r2
     694:	089b      	lsrs	r3, r3, #2
     696:	3301      	adds	r3, #1
     698:	009b      	lsls	r3, r3, #2
     69a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     69c:	4813      	ldr	r0, [pc, #76]	; (6ec <Reset_Handler+0x70>)
     69e:	4912      	ldr	r1, [pc, #72]	; (6e8 <Reset_Handler+0x6c>)
     6a0:	588c      	ldr	r4, [r1, r2]
     6a2:	5084      	str	r4, [r0, r2]
     6a4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     6a6:	429a      	cmp	r2, r3
     6a8:	d1fa      	bne.n	6a0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     6aa:	4a13      	ldr	r2, [pc, #76]	; (6f8 <Reset_Handler+0x7c>)
     6ac:	4b13      	ldr	r3, [pc, #76]	; (6fc <Reset_Handler+0x80>)
     6ae:	429a      	cmp	r2, r3
     6b0:	d20a      	bcs.n	6c8 <Reset_Handler+0x4c>
     6b2:	43d3      	mvns	r3, r2
     6b4:	4911      	ldr	r1, [pc, #68]	; (6fc <Reset_Handler+0x80>)
     6b6:	185b      	adds	r3, r3, r1
     6b8:	2103      	movs	r1, #3
     6ba:	438b      	bics	r3, r1
     6bc:	3304      	adds	r3, #4
     6be:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     6c0:	2100      	movs	r1, #0
     6c2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     6c4:	4293      	cmp	r3, r2
     6c6:	d1fc      	bne.n	6c2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     6c8:	4a0d      	ldr	r2, [pc, #52]	; (700 <Reset_Handler+0x84>)
     6ca:	21ff      	movs	r1, #255	; 0xff
     6cc:	4b0d      	ldr	r3, [pc, #52]	; (704 <Reset_Handler+0x88>)
     6ce:	438b      	bics	r3, r1
     6d0:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     6d2:	4a0d      	ldr	r2, [pc, #52]	; (708 <Reset_Handler+0x8c>)
     6d4:	6853      	ldr	r3, [r2, #4]
     6d6:	397f      	subs	r1, #127	; 0x7f
     6d8:	430b      	orrs	r3, r1
     6da:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     6dc:	4b0b      	ldr	r3, [pc, #44]	; (70c <Reset_Handler+0x90>)
     6de:	4798      	blx	r3
        main();
     6e0:	4b0b      	ldr	r3, [pc, #44]	; (710 <Reset_Handler+0x94>)
     6e2:	4798      	blx	r3
     6e4:	e7fe      	b.n	6e4 <Reset_Handler+0x68>
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	00001f6c 	.word	0x00001f6c
     6ec:	20000000 	.word	0x20000000
     6f0:	2000000c 	.word	0x2000000c
     6f4:	20000004 	.word	0x20000004
     6f8:	2000000c 	.word	0x2000000c
     6fc:	20003c34 	.word	0x20003c34
     700:	e000ed00 	.word	0xe000ed00
     704:	00000000 	.word	0x00000000
     708:	41004000 	.word	0x41004000
     70c:	00001e81 	.word	0x00001e81
     710:	00001d05 	.word	0x00001d05

00000714 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     714:	0003      	movs	r3, r0
     716:	3308      	adds	r3, #8
     718:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     71a:	2201      	movs	r2, #1
     71c:	4252      	negs	r2, r2
     71e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     720:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     722:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     724:	2300      	movs	r3, #0
     726:	6003      	str	r3, [r0, #0]
}
     728:	4770      	bx	lr

0000072a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     72a:	2300      	movs	r3, #0
     72c:	6103      	str	r3, [r0, #16]
}
     72e:	4770      	bx	lr

00000730 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
     730:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     732:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     734:	689a      	ldr	r2, [r3, #8]
     736:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     738:	689a      	ldr	r2, [r3, #8]
     73a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
     73c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     73e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     740:	6803      	ldr	r3, [r0, #0]
     742:	3301      	adds	r3, #1
     744:	6003      	str	r3, [r0, #0]
}
     746:	4770      	bx	lr

00000748 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     748:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     74a:	680c      	ldr	r4, [r1, #0]
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     74c:	0002      	movs	r2, r0
     74e:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
     750:	1c63      	adds	r3, r4, #1
     752:	d102      	bne.n	75a <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
     754:	6902      	ldr	r2, [r0, #16]
     756:	e004      	b.n	762 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     758:	001a      	movs	r2, r3
     75a:	6853      	ldr	r3, [r2, #4]
     75c:	681d      	ldr	r5, [r3, #0]
     75e:	42ac      	cmp	r4, r5
     760:	d2fa      	bcs.n	758 <vListInsert+0x10>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     762:	6853      	ldr	r3, [r2, #4]
     764:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     766:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     768:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
     76a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     76c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     76e:	6803      	ldr	r3, [r0, #0]
     770:	3301      	adds	r3, #1
     772:	6003      	str	r3, [r0, #0]
}
     774:	bd30      	pop	{r4, r5, pc}

00000776 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     776:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     778:	6842      	ldr	r2, [r0, #4]
     77a:	6881      	ldr	r1, [r0, #8]
     77c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     77e:	6882      	ldr	r2, [r0, #8]
     780:	6841      	ldr	r1, [r0, #4]
     782:	6051      	str	r1, [r2, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     784:	685a      	ldr	r2, [r3, #4]
     786:	4290      	cmp	r0, r2
     788:	d005      	beq.n	796 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     78a:	2200      	movs	r2, #0
     78c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
     78e:	681a      	ldr	r2, [r3, #0]
     790:	1e50      	subs	r0, r2, #1
     792:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
     794:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     796:	6882      	ldr	r2, [r0, #8]
     798:	605a      	str	r2, [r3, #4]
     79a:	e7f6      	b.n	78a <uxListRemove+0x14>

0000079c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
     79c:	4b03      	ldr	r3, [pc, #12]	; (7ac <prvTaskExitError+0x10>)
     79e:	681b      	ldr	r3, [r3, #0]
     7a0:	3301      	adds	r3, #1
     7a2:	d001      	beq.n	7a8 <prvTaskExitError+0xc>
     7a4:	b672      	cpsid	i
     7a6:	e7fe      	b.n	7a6 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
     7a8:	b672      	cpsid	i
     7aa:	e7fe      	b.n	7aa <prvTaskExitError+0xe>
     7ac:	20000004 	.word	0x20000004

000007b0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
     7b0:	4a06      	ldr	r2, [pc, #24]	; (7cc <pxCurrentTCBConst2>)
     7b2:	6813      	ldr	r3, [r2, #0]
     7b4:	6818      	ldr	r0, [r3, #0]
     7b6:	3020      	adds	r0, #32
     7b8:	f380 8809 	msr	PSP, r0
     7bc:	2002      	movs	r0, #2
     7be:	f380 8814 	msr	CONTROL, r0
     7c2:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
     7c4:	46ae      	mov	lr, r5
     7c6:	b662      	cpsie	i
     7c8:	bd00      	pop	{pc}
     7ca:	46c0      	nop			; (mov r8, r8)

000007cc <pxCurrentTCBConst2>:
     7cc:	20003b00 	.word	0x20003b00

000007d0 <pxPortInitialiseStack>:
{
     7d0:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     7d2:	1f03      	subs	r3, r0, #4
     7d4:	2480      	movs	r4, #128	; 0x80
     7d6:	0464      	lsls	r4, r4, #17
     7d8:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
     7da:	3b04      	subs	r3, #4
     7dc:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     7de:	3b04      	subs	r3, #4
     7e0:	4902      	ldr	r1, [pc, #8]	; (7ec <pxPortInitialiseStack+0x1c>)
     7e2:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     7e4:	3b14      	subs	r3, #20
     7e6:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
     7e8:	3840      	subs	r0, #64	; 0x40
}
     7ea:	bd10      	pop	{r4, pc}
     7ec:	0000079d 	.word	0x0000079d

000007f0 <SVC_Handler>:
}
     7f0:	4770      	bx	lr
	...

000007f4 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
     7f4:	2280      	movs	r2, #128	; 0x80
     7f6:	0552      	lsls	r2, r2, #21
     7f8:	4b03      	ldr	r3, [pc, #12]	; (808 <vPortYield+0x14>)
     7fa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
     7fc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     800:	f3bf 8f6f 	isb	sy
}
     804:	4770      	bx	lr
     806:	46c0      	nop			; (mov r8, r8)
     808:	e000ed04 	.word	0xe000ed04

0000080c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
     80c:	b672      	cpsid	i
    uxCriticalNesting++;
     80e:	4a04      	ldr	r2, [pc, #16]	; (820 <vPortEnterCritical+0x14>)
     810:	6813      	ldr	r3, [r2, #0]
     812:	3301      	adds	r3, #1
     814:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
     816:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     81a:	f3bf 8f6f 	isb	sy
}
     81e:	4770      	bx	lr
     820:	20000004 	.word	0x20000004

00000824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
     824:	4b06      	ldr	r3, [pc, #24]	; (840 <vPortExitCritical+0x1c>)
     826:	681b      	ldr	r3, [r3, #0]
     828:	2b00      	cmp	r3, #0
     82a:	d101      	bne.n	830 <vPortExitCritical+0xc>
     82c:	b672      	cpsid	i
     82e:	e7fe      	b.n	82e <vPortExitCritical+0xa>
    uxCriticalNesting--;
     830:	3b01      	subs	r3, #1
     832:	4a03      	ldr	r2, [pc, #12]	; (840 <vPortExitCritical+0x1c>)
     834:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
     836:	2b00      	cmp	r3, #0
     838:	d100      	bne.n	83c <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
     83a:	b662      	cpsie	i
    }
}
     83c:	4770      	bx	lr
     83e:	46c0      	nop			; (mov r8, r8)
     840:	20000004 	.word	0x20000004

00000844 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
     844:	f3ef 8010 	mrs	r0, PRIMASK
     848:	b672      	cpsid	i
     84a:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
     84c:	2000      	movs	r0, #0

0000084e <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
     84e:	f380 8810 	msr	PRIMASK, r0
     852:	4770      	bx	lr

00000854 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     854:	f3ef 8009 	mrs	r0, PSP
     858:	4b0e      	ldr	r3, [pc, #56]	; (894 <pxCurrentTCBConst>)
     85a:	681a      	ldr	r2, [r3, #0]
     85c:	3820      	subs	r0, #32
     85e:	6010      	str	r0, [r2, #0]
     860:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     862:	4644      	mov	r4, r8
     864:	464d      	mov	r5, r9
     866:	4656      	mov	r6, sl
     868:	465f      	mov	r7, fp
     86a:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     86c:	b508      	push	{r3, lr}
     86e:	b672      	cpsid	i
     870:	f000 febe 	bl	15f0 <vTaskSwitchContext>
     874:	b662      	cpsie	i
     876:	bc0c      	pop	{r2, r3}
     878:	6811      	ldr	r1, [r2, #0]
     87a:	6808      	ldr	r0, [r1, #0]
     87c:	3010      	adds	r0, #16
     87e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     880:	46a0      	mov	r8, r4
     882:	46a9      	mov	r9, r5
     884:	46b2      	mov	sl, r6
     886:	46bb      	mov	fp, r7
     888:	f380 8809 	msr	PSP, r0
     88c:	3820      	subs	r0, #32
     88e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     890:	4718      	bx	r3
     892:	46c0      	nop			; (mov r8, r8)

00000894 <pxCurrentTCBConst>:
     894:	20003b00 	.word	0x20003b00

00000898 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     898:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
     89a:	4b07      	ldr	r3, [pc, #28]	; (8b8 <SysTick_Handler+0x20>)
     89c:	4798      	blx	r3
     89e:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
     8a0:	4b06      	ldr	r3, [pc, #24]	; (8bc <SysTick_Handler+0x24>)
     8a2:	4798      	blx	r3
     8a4:	2800      	cmp	r0, #0
     8a6:	d003      	beq.n	8b0 <SysTick_Handler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     8a8:	2280      	movs	r2, #128	; 0x80
     8aa:	0552      	lsls	r2, r2, #21
     8ac:	4b04      	ldr	r3, [pc, #16]	; (8c0 <SysTick_Handler+0x28>)
     8ae:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
     8b0:	0020      	movs	r0, r4
     8b2:	4b04      	ldr	r3, [pc, #16]	; (8c4 <SysTick_Handler+0x2c>)
     8b4:	4798      	blx	r3
}
     8b6:	bd10      	pop	{r4, pc}
     8b8:	00000845 	.word	0x00000845
     8bc:	0000133d 	.word	0x0000133d
     8c0:	e000ed04 	.word	0xe000ed04
     8c4:	0000084f 	.word	0x0000084f

000008c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
     8c8:	b510      	push	{r4, lr}
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
     8ca:	2200      	movs	r2, #0
     8cc:	4b07      	ldr	r3, [pc, #28]	; (8ec <vPortSetupTimerInterrupt+0x24>)
     8ce:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     8d0:	2000      	movs	r0, #0
     8d2:	4b07      	ldr	r3, [pc, #28]	; (8f0 <vPortSetupTimerInterrupt+0x28>)
     8d4:	4798      	blx	r3
     8d6:	21c8      	movs	r1, #200	; 0xc8
     8d8:	4b06      	ldr	r3, [pc, #24]	; (8f4 <vPortSetupTimerInterrupt+0x2c>)
     8da:	4798      	blx	r3
     8dc:	3801      	subs	r0, #1
     8de:	4b06      	ldr	r3, [pc, #24]	; (8f8 <vPortSetupTimerInterrupt+0x30>)
     8e0:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
     8e2:	2207      	movs	r2, #7
     8e4:	4b05      	ldr	r3, [pc, #20]	; (8fc <vPortSetupTimerInterrupt+0x34>)
     8e6:	601a      	str	r2, [r3, #0]
}
     8e8:	bd10      	pop	{r4, pc}
     8ea:	46c0      	nop			; (mov r8, r8)
     8ec:	e000e018 	.word	0xe000e018
     8f0:	000004d5 	.word	0x000004d5
     8f4:	00001d69 	.word	0x00001d69
     8f8:	e000e014 	.word	0xe000e014
     8fc:	e000e010 	.word	0xe000e010

00000900 <xPortStartScheduler>:
{
     900:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
     902:	4b0a      	ldr	r3, [pc, #40]	; (92c <xPortStartScheduler+0x2c>)
     904:	6819      	ldr	r1, [r3, #0]
     906:	22ff      	movs	r2, #255	; 0xff
     908:	0412      	lsls	r2, r2, #16
     90a:	430a      	orrs	r2, r1
     90c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
     90e:	6819      	ldr	r1, [r3, #0]
     910:	22ff      	movs	r2, #255	; 0xff
     912:	0612      	lsls	r2, r2, #24
     914:	430a      	orrs	r2, r1
     916:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
     918:	4b05      	ldr	r3, [pc, #20]	; (930 <xPortStartScheduler+0x30>)
     91a:	4798      	blx	r3
	uxCriticalNesting = 0;
     91c:	2200      	movs	r2, #0
     91e:	4b05      	ldr	r3, [pc, #20]	; (934 <xPortStartScheduler+0x34>)
     920:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
     922:	4b05      	ldr	r3, [pc, #20]	; (938 <xPortStartScheduler+0x38>)
     924:	4798      	blx	r3
	prvTaskExitError();
     926:	4b05      	ldr	r3, [pc, #20]	; (93c <xPortStartScheduler+0x3c>)
     928:	4798      	blx	r3
     92a:	46c0      	nop			; (mov r8, r8)
     92c:	e000ed20 	.word	0xe000ed20
     930:	000008c9 	.word	0x000008c9
     934:	20000004 	.word	0x20000004
     938:	000007b1 	.word	0x000007b1
     93c:	0000079d 	.word	0x0000079d

00000940 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     940:	b570      	push	{r4, r5, r6, lr}
     942:	0004      	movs	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     944:	0743      	lsls	r3, r0, #29
     946:	d002      	beq.n	94e <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     948:	2307      	movs	r3, #7
     94a:	439c      	bics	r4, r3
     94c:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
     94e:	4b11      	ldr	r3, [pc, #68]	; (994 <pvPortMalloc+0x54>)
     950:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
     952:	4b11      	ldr	r3, [pc, #68]	; (998 <pvPortMalloc+0x58>)
     954:	681b      	ldr	r3, [r3, #0]
     956:	2b00      	cmp	r3, #0
     958:	d010      	beq.n	97c <pvPortMalloc+0x3c>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     95a:	4b10      	ldr	r3, [pc, #64]	; (99c <pvPortMalloc+0x5c>)
     95c:	681b      	ldr	r3, [r3, #0]
     95e:	18e4      	adds	r4, r4, r3
     960:	4a0f      	ldr	r2, [pc, #60]	; (9a0 <pvPortMalloc+0x60>)
     962:	4294      	cmp	r4, r2
     964:	d811      	bhi.n	98a <pvPortMalloc+0x4a>
     966:	42a3      	cmp	r3, r4
     968:	d211      	bcs.n	98e <pvPortMalloc+0x4e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     96a:	4a0b      	ldr	r2, [pc, #44]	; (998 <pvPortMalloc+0x58>)
     96c:	6815      	ldr	r5, [r2, #0]
     96e:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
     970:	4b0a      	ldr	r3, [pc, #40]	; (99c <pvPortMalloc+0x5c>)
     972:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     974:	4b0b      	ldr	r3, [pc, #44]	; (9a4 <pvPortMalloc+0x64>)
     976:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
     978:	0028      	movs	r0, r5
     97a:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     97c:	2207      	movs	r2, #7
     97e:	4b0a      	ldr	r3, [pc, #40]	; (9a8 <pvPortMalloc+0x68>)
     980:	3308      	adds	r3, #8
     982:	4393      	bics	r3, r2
     984:	4a04      	ldr	r2, [pc, #16]	; (998 <pvPortMalloc+0x58>)
     986:	6013      	str	r3, [r2, #0]
     988:	e7e7      	b.n	95a <pvPortMalloc+0x1a>
void *pvReturn = NULL;
     98a:	2500      	movs	r5, #0
     98c:	e7f2      	b.n	974 <pvPortMalloc+0x34>
     98e:	2500      	movs	r5, #0
     990:	e7f0      	b.n	974 <pvPortMalloc+0x34>
     992:	46c0      	nop			; (mov r8, r8)
     994:	0000130d 	.word	0x0000130d
     998:	20000060 	.word	0x20000060
     99c:	20003afc 	.word	0x20003afc
     9a0:	00003a8f 	.word	0x00003a8f
     9a4:	00001461 	.word	0x00001461
     9a8:	20000064 	.word	0x20000064

000009ac <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
     9ac:	2800      	cmp	r0, #0
     9ae:	d001      	beq.n	9b4 <vPortFree+0x8>
     9b0:	b672      	cpsid	i
     9b2:	e7fe      	b.n	9b2 <vPortFree+0x6>
}
     9b4:	4770      	bx	lr
	...

000009b8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
     9b8:	b570      	push	{r4, r5, r6, lr}
     9ba:	0004      	movs	r4, r0
     9bc:	0015      	movs	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     9be:	6c02      	ldr	r2, [r0, #64]	; 0x40
     9c0:	2a00      	cmp	r2, #0
     9c2:	d10b      	bne.n	9dc <prvCopyDataToQueue+0x24>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     9c4:	6803      	ldr	r3, [r0, #0]
     9c6:	2b00      	cmp	r3, #0
     9c8:	d104      	bne.n	9d4 <prvCopyDataToQueue+0x1c>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     9ca:	6840      	ldr	r0, [r0, #4]
     9cc:	4b17      	ldr	r3, [pc, #92]	; (a2c <prvCopyDataToQueue+0x74>)
     9ce:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
     9d0:	2300      	movs	r3, #0
     9d2:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
     9d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     9d6:	3301      	adds	r3, #1
     9d8:	63a3      	str	r3, [r4, #56]	; 0x38
}
     9da:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
     9dc:	2d00      	cmp	r5, #0
     9de:	d10d      	bne.n	9fc <prvCopyDataToQueue+0x44>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
     9e0:	6880      	ldr	r0, [r0, #8]
     9e2:	4b13      	ldr	r3, [pc, #76]	; (a30 <prvCopyDataToQueue+0x78>)
     9e4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     9e6:	68a3      	ldr	r3, [r4, #8]
     9e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
     9ea:	4694      	mov	ip, r2
     9ec:	4463      	add	r3, ip
     9ee:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     9f0:	6862      	ldr	r2, [r4, #4]
     9f2:	4293      	cmp	r3, r2
     9f4:	d3ee      	bcc.n	9d4 <prvCopyDataToQueue+0x1c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
     9f6:	6823      	ldr	r3, [r4, #0]
     9f8:	60a3      	str	r3, [r4, #8]
     9fa:	e7eb      	b.n	9d4 <prvCopyDataToQueue+0x1c>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     9fc:	68c0      	ldr	r0, [r0, #12]
     9fe:	4b0c      	ldr	r3, [pc, #48]	; (a30 <prvCopyDataToQueue+0x78>)
     a00:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     a02:	6c23      	ldr	r3, [r4, #64]	; 0x40
     a04:	425b      	negs	r3, r3
     a06:	68e2      	ldr	r2, [r4, #12]
     a08:	18d2      	adds	r2, r2, r3
     a0a:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     a0c:	6821      	ldr	r1, [r4, #0]
     a0e:	428a      	cmp	r2, r1
     a10:	d203      	bcs.n	a1a <prvCopyDataToQueue+0x62>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     a12:	6862      	ldr	r2, [r4, #4]
     a14:	4694      	mov	ip, r2
     a16:	4463      	add	r3, ip
     a18:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
     a1a:	2d02      	cmp	r5, #2
     a1c:	d1da      	bne.n	9d4 <prvCopyDataToQueue+0x1c>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
     a1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     a20:	2b00      	cmp	r3, #0
     a22:	d0d7      	beq.n	9d4 <prvCopyDataToQueue+0x1c>
				--( pxQueue->uxMessagesWaiting );
     a24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     a26:	3b01      	subs	r3, #1
     a28:	63a3      	str	r3, [r4, #56]	; 0x38
     a2a:	e7d3      	b.n	9d4 <prvCopyDataToQueue+0x1c>
     a2c:	00001909 	.word	0x00001909
     a30:	00001ec9 	.word	0x00001ec9

00000a34 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
     a34:	b510      	push	{r4, lr}
     a36:	b082      	sub	sp, #8
     a38:	9001      	str	r0, [sp, #4]
     a3a:	000a      	movs	r2, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
     a3c:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
     a3e:	2c00      	cmp	r4, #0
     a40:	d005      	beq.n	a4e <prvNotifyQueueSetContainer+0x1a>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
     a42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
     a44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     a46:	4299      	cmp	r1, r3
     a48:	d303      	bcc.n	a52 <prvNotifyQueueSetContainer+0x1e>
     a4a:	b672      	cpsid	i
     a4c:	e7fe      	b.n	a4c <prvNotifyQueueSetContainer+0x18>
		configASSERT( pxQueueSetContainer );
     a4e:	b672      	cpsid	i
     a50:	e7fe      	b.n	a50 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
     a52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
     a54:	2000      	movs	r0, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
     a56:	428b      	cmp	r3, r1
     a58:	d801      	bhi.n	a5e <prvNotifyQueueSetContainer+0x2a>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
     a5a:	b002      	add	sp, #8
     a5c:	bd10      	pop	{r4, pc}
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
     a5e:	a901      	add	r1, sp, #4
     a60:	0020      	movs	r0, r4
     a62:	4b06      	ldr	r3, [pc, #24]	; (a7c <prvNotifyQueueSetContainer+0x48>)
     a64:	4798      	blx	r3
	BaseType_t xReturn = pdFALSE;
     a66:	2000      	movs	r0, #0
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
     a68:	6a63      	ldr	r3, [r4, #36]	; 0x24
     a6a:	2b00      	cmp	r3, #0
     a6c:	d0f5      	beq.n	a5a <prvNotifyQueueSetContainer+0x26>
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
     a6e:	0020      	movs	r0, r4
     a70:	3024      	adds	r0, #36	; 0x24
     a72:	4b03      	ldr	r3, [pc, #12]	; (a80 <prvNotifyQueueSetContainer+0x4c>)
     a74:	4798      	blx	r3
	BaseType_t xReturn = pdFALSE;
     a76:	1e43      	subs	r3, r0, #1
     a78:	4198      	sbcs	r0, r3
     a7a:	e7ee      	b.n	a5a <prvNotifyQueueSetContainer+0x26>
     a7c:	000009b9 	.word	0x000009b9
     a80:	00001739 	.word	0x00001739

00000a84 <prvCopyDataFromQueue>:
{
     a84:	b570      	push	{r4, r5, r6, lr}
     a86:	000c      	movs	r4, r1
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
     a88:	6801      	ldr	r1, [r0, #0]
     a8a:	2900      	cmp	r1, #0
     a8c:	d00b      	beq.n	aa6 <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     a8e:	6c02      	ldr	r2, [r0, #64]	; 0x40
     a90:	68c3      	ldr	r3, [r0, #12]
     a92:	189b      	adds	r3, r3, r2
     a94:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     a96:	6845      	ldr	r5, [r0, #4]
     a98:	42ab      	cmp	r3, r5
     a9a:	d300      	bcc.n	a9e <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
     a9c:	60c1      	str	r1, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
     a9e:	68c1      	ldr	r1, [r0, #12]
     aa0:	0020      	movs	r0, r4
     aa2:	4b01      	ldr	r3, [pc, #4]	; (aa8 <prvCopyDataFromQueue+0x24>)
     aa4:	4798      	blx	r3
}
     aa6:	bd70      	pop	{r4, r5, r6, pc}
     aa8:	00001ec9 	.word	0x00001ec9

00000aac <prvUnlockQueue>:
{
     aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     aae:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
     ab0:	4b25      	ldr	r3, [pc, #148]	; (b48 <prvUnlockQueue+0x9c>)
     ab2:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     ab4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     ab6:	2b00      	cmp	r3, #0
     ab8:	dd1e      	ble.n	af8 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
     aba:	4d24      	ldr	r5, [pc, #144]	; (b4c <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     abc:	4e24      	ldr	r6, [pc, #144]	; (b50 <prvUnlockQueue+0xa4>)
     abe:	e00d      	b.n	adc <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
     ac2:	2b00      	cmp	r3, #0
     ac4:	d018      	beq.n	af8 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     ac6:	0020      	movs	r0, r4
     ac8:	3024      	adds	r0, #36	; 0x24
     aca:	47b0      	blx	r6
     acc:	2800      	cmp	r0, #0
     ace:	d110      	bne.n	af2 <prvUnlockQueue+0x46>
			--( pxQueue->xTxLock );
     ad0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     ad2:	3b01      	subs	r3, #1
     ad4:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     ad6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     ad8:	2b00      	cmp	r3, #0
     ada:	dd0d      	ble.n	af8 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
     adc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     ade:	2b00      	cmp	r3, #0
     ae0:	d0ee      	beq.n	ac0 <prvUnlockQueue+0x14>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
     ae2:	2100      	movs	r1, #0
     ae4:	0020      	movs	r0, r4
     ae6:	47a8      	blx	r5
     ae8:	2801      	cmp	r0, #1
     aea:	d1f1      	bne.n	ad0 <prvUnlockQueue+0x24>
						vTaskMissedYield();
     aec:	4b19      	ldr	r3, [pc, #100]	; (b54 <prvUnlockQueue+0xa8>)
     aee:	4798      	blx	r3
     af0:	e7ee      	b.n	ad0 <prvUnlockQueue+0x24>
							vTaskMissedYield();
     af2:	4b18      	ldr	r3, [pc, #96]	; (b54 <prvUnlockQueue+0xa8>)
     af4:	4798      	blx	r3
     af6:	e7eb      	b.n	ad0 <prvUnlockQueue+0x24>
		pxQueue->xTxLock = queueUNLOCKED;
     af8:	2301      	movs	r3, #1
     afa:	425b      	negs	r3, r3
     afc:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
     afe:	4b16      	ldr	r3, [pc, #88]	; (b58 <prvUnlockQueue+0xac>)
     b00:	4798      	blx	r3
	taskENTER_CRITICAL();
     b02:	4b11      	ldr	r3, [pc, #68]	; (b48 <prvUnlockQueue+0x9c>)
     b04:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     b06:	6c63      	ldr	r3, [r4, #68]	; 0x44
     b08:	2b00      	cmp	r3, #0
     b0a:	dd16      	ble.n	b3a <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     b0c:	6923      	ldr	r3, [r4, #16]
     b0e:	2b00      	cmp	r3, #0
     b10:	d013      	beq.n	b3a <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     b12:	0025      	movs	r5, r4
     b14:	3510      	adds	r5, #16
     b16:	4f0e      	ldr	r7, [pc, #56]	; (b50 <prvUnlockQueue+0xa4>)
					vTaskMissedYield();
     b18:	4e0e      	ldr	r6, [pc, #56]	; (b54 <prvUnlockQueue+0xa8>)
     b1a:	e008      	b.n	b2e <prvUnlockQueue+0x82>
				--( pxQueue->xRxLock );
     b1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
     b1e:	3b01      	subs	r3, #1
     b20:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     b22:	6c63      	ldr	r3, [r4, #68]	; 0x44
     b24:	2b00      	cmp	r3, #0
     b26:	dd08      	ble.n	b3a <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     b28:	6923      	ldr	r3, [r4, #16]
     b2a:	2b00      	cmp	r3, #0
     b2c:	d005      	beq.n	b3a <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     b2e:	0028      	movs	r0, r5
     b30:	47b8      	blx	r7
     b32:	2800      	cmp	r0, #0
     b34:	d0f2      	beq.n	b1c <prvUnlockQueue+0x70>
					vTaskMissedYield();
     b36:	47b0      	blx	r6
     b38:	e7f0      	b.n	b1c <prvUnlockQueue+0x70>
		pxQueue->xRxLock = queueUNLOCKED;
     b3a:	2301      	movs	r3, #1
     b3c:	425b      	negs	r3, r3
     b3e:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
     b40:	4b05      	ldr	r3, [pc, #20]	; (b58 <prvUnlockQueue+0xac>)
     b42:	4798      	blx	r3
}
     b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b46:	46c0      	nop			; (mov r8, r8)
     b48:	0000080d 	.word	0x0000080d
     b4c:	00000a35 	.word	0x00000a35
     b50:	00001739 	.word	0x00001739
     b54:	00001851 	.word	0x00001851
     b58:	00000825 	.word	0x00000825

00000b5c <xQueueGenericReset>:
{
     b5c:	b570      	push	{r4, r5, r6, lr}
     b5e:	0004      	movs	r4, r0
     b60:	000d      	movs	r5, r1
	configASSERT( pxQueue );
     b62:	2800      	cmp	r0, #0
     b64:	d020      	beq.n	ba8 <xQueueGenericReset+0x4c>
	taskENTER_CRITICAL();
     b66:	4b17      	ldr	r3, [pc, #92]	; (bc4 <xQueueGenericReset+0x68>)
     b68:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     b6a:	6822      	ldr	r2, [r4, #0]
     b6c:	6c21      	ldr	r1, [r4, #64]	; 0x40
     b6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     b70:	434b      	muls	r3, r1
     b72:	18d0      	adds	r0, r2, r3
     b74:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     b76:	2000      	movs	r0, #0
     b78:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
     b7a:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     b7c:	1a5b      	subs	r3, r3, r1
     b7e:	18d3      	adds	r3, r2, r3
     b80:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
     b82:	2301      	movs	r3, #1
     b84:	425b      	negs	r3, r3
     b86:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
     b88:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
     b8a:	2d00      	cmp	r5, #0
     b8c:	d111      	bne.n	bb2 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     b8e:	6923      	ldr	r3, [r4, #16]
     b90:	2b00      	cmp	r3, #0
     b92:	d005      	beq.n	ba0 <xQueueGenericReset+0x44>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     b94:	0020      	movs	r0, r4
     b96:	3010      	adds	r0, #16
     b98:	4b0b      	ldr	r3, [pc, #44]	; (bc8 <xQueueGenericReset+0x6c>)
     b9a:	4798      	blx	r3
     b9c:	2801      	cmp	r0, #1
     b9e:	d005      	beq.n	bac <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
     ba0:	4b0a      	ldr	r3, [pc, #40]	; (bcc <xQueueGenericReset+0x70>)
     ba2:	4798      	blx	r3
}
     ba4:	2001      	movs	r0, #1
     ba6:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
     ba8:	b672      	cpsid	i
     baa:	e7fe      	b.n	baa <xQueueGenericReset+0x4e>
					queueYIELD_IF_USING_PREEMPTION();
     bac:	4b08      	ldr	r3, [pc, #32]	; (bd0 <xQueueGenericReset+0x74>)
     bae:	4798      	blx	r3
     bb0:	e7f6      	b.n	ba0 <xQueueGenericReset+0x44>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     bb2:	0020      	movs	r0, r4
     bb4:	3010      	adds	r0, #16
     bb6:	4d07      	ldr	r5, [pc, #28]	; (bd4 <xQueueGenericReset+0x78>)
     bb8:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     bba:	0020      	movs	r0, r4
     bbc:	3024      	adds	r0, #36	; 0x24
     bbe:	47a8      	blx	r5
     bc0:	e7ee      	b.n	ba0 <xQueueGenericReset+0x44>
     bc2:	46c0      	nop			; (mov r8, r8)
     bc4:	0000080d 	.word	0x0000080d
     bc8:	00001739 	.word	0x00001739
     bcc:	00000825 	.word	0x00000825
     bd0:	000007f5 	.word	0x000007f5
     bd4:	00000715 	.word	0x00000715

00000bd8 <xQueueGenericCreate>:
{
     bd8:	b570      	push	{r4, r5, r6, lr}
     bda:	0005      	movs	r5, r0
     bdc:	000e      	movs	r6, r1
	if( uxQueueLength > ( UBaseType_t ) 0 )
     bde:	2800      	cmp	r0, #0
     be0:	d019      	beq.n	c16 <xQueueGenericCreate+0x3e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
     be2:	2050      	movs	r0, #80	; 0x50
     be4:	4b0d      	ldr	r3, [pc, #52]	; (c1c <xQueueGenericCreate+0x44>)
     be6:	4798      	blx	r3
     be8:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
     bea:	d014      	beq.n	c16 <xQueueGenericCreate+0x3e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     bec:	0030      	movs	r0, r6
     bee:	4368      	muls	r0, r5
     bf0:	3001      	adds	r0, #1
			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
     bf2:	4b0a      	ldr	r3, [pc, #40]	; (c1c <xQueueGenericCreate+0x44>)
     bf4:	4798      	blx	r3
     bf6:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
     bf8:	2800      	cmp	r0, #0
     bfa:	d009      	beq.n	c10 <xQueueGenericCreate+0x38>
				pxNewQueue->uxLength = uxQueueLength;
     bfc:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
     bfe:	6426      	str	r6, [r4, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
     c00:	2101      	movs	r1, #1
     c02:	0020      	movs	r0, r4
     c04:	4b06      	ldr	r3, [pc, #24]	; (c20 <xQueueGenericCreate+0x48>)
     c06:	4798      	blx	r3
					pxNewQueue->pxQueueSetContainer = NULL;
     c08:	2300      	movs	r3, #0
     c0a:	64e3      	str	r3, [r4, #76]	; 0x4c
}
     c0c:	0020      	movs	r0, r4
     c0e:	bd70      	pop	{r4, r5, r6, pc}
				vPortFree( pxNewQueue );
     c10:	0020      	movs	r0, r4
     c12:	4b04      	ldr	r3, [pc, #16]	; (c24 <xQueueGenericCreate+0x4c>)
     c14:	4798      	blx	r3
	configASSERT( xReturn );
     c16:	b672      	cpsid	i
     c18:	e7fe      	b.n	c18 <xQueueGenericCreate+0x40>
     c1a:	46c0      	nop			; (mov r8, r8)
     c1c:	00000941 	.word	0x00000941
     c20:	00000b5d 	.word	0x00000b5d
     c24:	000009ad 	.word	0x000009ad

00000c28 <xQueueGenericSend>:
{
     c28:	b5f0      	push	{r4, r5, r6, r7, lr}
     c2a:	46ce      	mov	lr, r9
     c2c:	4647      	mov	r7, r8
     c2e:	b580      	push	{r7, lr}
     c30:	b085      	sub	sp, #20
     c32:	0004      	movs	r4, r0
     c34:	000f      	movs	r7, r1
     c36:	9201      	str	r2, [sp, #4]
     c38:	001d      	movs	r5, r3
	configASSERT( pxQueue );
     c3a:	2800      	cmp	r0, #0
     c3c:	d00c      	beq.n	c58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     c3e:	2900      	cmp	r1, #0
     c40:	d00c      	beq.n	c5c <xQueueGenericSend+0x34>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     c42:	2d02      	cmp	r5, #2
     c44:	d00f      	beq.n	c66 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     c46:	4b48      	ldr	r3, [pc, #288]	; (d68 <xQueueGenericSend+0x140>)
     c48:	4798      	blx	r3
     c4a:	2800      	cmp	r0, #0
     c4c:	d110      	bne.n	c70 <xQueueGenericSend+0x48>
     c4e:	9b01      	ldr	r3, [sp, #4]
     c50:	2b00      	cmp	r3, #0
     c52:	d011      	beq.n	c78 <xQueueGenericSend+0x50>
     c54:	b672      	cpsid	i
     c56:	e7fe      	b.n	c56 <xQueueGenericSend+0x2e>
	configASSERT( pxQueue );
     c58:	b672      	cpsid	i
     c5a:	e7fe      	b.n	c5a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     c5c:	6c03      	ldr	r3, [r0, #64]	; 0x40
     c5e:	2b00      	cmp	r3, #0
     c60:	d0ef      	beq.n	c42 <xQueueGenericSend+0x1a>
     c62:	b672      	cpsid	i
     c64:	e7fe      	b.n	c64 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     c66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     c68:	2b01      	cmp	r3, #1
     c6a:	d0ec      	beq.n	c46 <xQueueGenericSend+0x1e>
     c6c:	b672      	cpsid	i
     c6e:	e7fe      	b.n	c6e <xQueueGenericSend+0x46>
     c70:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
     c72:	4b3e      	ldr	r3, [pc, #248]	; (d6c <xQueueGenericSend+0x144>)
     c74:	4698      	mov	r8, r3
     c76:	e047      	b.n	d08 <xQueueGenericSend+0xe0>
     c78:	2600      	movs	r6, #0
     c7a:	e7fa      	b.n	c72 <xQueueGenericSend+0x4a>
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     c7c:	002a      	movs	r2, r5
     c7e:	0039      	movs	r1, r7
     c80:	0020      	movs	r0, r4
     c82:	4b3b      	ldr	r3, [pc, #236]	; (d70 <xQueueGenericSend+0x148>)
     c84:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
     c86:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     c88:	2b00      	cmp	r3, #0
     c8a:	d00f      	beq.n	cac <xQueueGenericSend+0x84>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
     c8c:	0029      	movs	r1, r5
     c8e:	0020      	movs	r0, r4
     c90:	4b38      	ldr	r3, [pc, #224]	; (d74 <xQueueGenericSend+0x14c>)
     c92:	4798      	blx	r3
     c94:	2801      	cmp	r0, #1
     c96:	d101      	bne.n	c9c <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
     c98:	4b37      	ldr	r3, [pc, #220]	; (d78 <xQueueGenericSend+0x150>)
     c9a:	4798      	blx	r3
				taskEXIT_CRITICAL();
     c9c:	4b37      	ldr	r3, [pc, #220]	; (d7c <xQueueGenericSend+0x154>)
     c9e:	4798      	blx	r3
				return pdPASS;
     ca0:	2001      	movs	r0, #1
}
     ca2:	b005      	add	sp, #20
     ca4:	bc0c      	pop	{r2, r3}
     ca6:	4690      	mov	r8, r2
     ca8:	4699      	mov	r9, r3
     caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     cac:	6a63      	ldr	r3, [r4, #36]	; 0x24
     cae:	2b00      	cmp	r3, #0
     cb0:	d0f4      	beq.n	c9c <xQueueGenericSend+0x74>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
     cb2:	0020      	movs	r0, r4
     cb4:	3024      	adds	r0, #36	; 0x24
     cb6:	4b32      	ldr	r3, [pc, #200]	; (d80 <xQueueGenericSend+0x158>)
     cb8:	4798      	blx	r3
     cba:	2801      	cmp	r0, #1
     cbc:	d1ee      	bne.n	c9c <xQueueGenericSend+0x74>
								queueYIELD_IF_USING_PREEMPTION();
     cbe:	4b2e      	ldr	r3, [pc, #184]	; (d78 <xQueueGenericSend+0x150>)
     cc0:	4798      	blx	r3
     cc2:	e7eb      	b.n	c9c <xQueueGenericSend+0x74>
					taskEXIT_CRITICAL();
     cc4:	4b2d      	ldr	r3, [pc, #180]	; (d7c <xQueueGenericSend+0x154>)
     cc6:	4798      	blx	r3
					return errQUEUE_FULL;
     cc8:	2000      	movs	r0, #0
     cca:	e7ea      	b.n	ca2 <xQueueGenericSend+0x7a>
		prvLockQueue( pxQueue );
     ccc:	4b2b      	ldr	r3, [pc, #172]	; (d7c <xQueueGenericSend+0x154>)
     cce:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     cd0:	a901      	add	r1, sp, #4
     cd2:	a802      	add	r0, sp, #8
     cd4:	4b2b      	ldr	r3, [pc, #172]	; (d84 <xQueueGenericSend+0x15c>)
     cd6:	4798      	blx	r3
     cd8:	2800      	cmp	r0, #0
     cda:	d13e      	bne.n	d5a <xQueueGenericSend+0x132>
	taskENTER_CRITICAL();
     cdc:	4b23      	ldr	r3, [pc, #140]	; (d6c <xQueueGenericSend+0x144>)
     cde:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
     ce0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     ce2:	4699      	mov	r9, r3
     ce4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
     ce6:	4b25      	ldr	r3, [pc, #148]	; (d7c <xQueueGenericSend+0x154>)
     ce8:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     cea:	45b1      	cmp	r9, r6
     cec:	d12f      	bne.n	d4e <xQueueGenericSend+0x126>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     cee:	0020      	movs	r0, r4
     cf0:	3010      	adds	r0, #16
     cf2:	9901      	ldr	r1, [sp, #4]
     cf4:	4b24      	ldr	r3, [pc, #144]	; (d88 <xQueueGenericSend+0x160>)
     cf6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
     cf8:	0020      	movs	r0, r4
     cfa:	4b24      	ldr	r3, [pc, #144]	; (d8c <xQueueGenericSend+0x164>)
     cfc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
     cfe:	4b24      	ldr	r3, [pc, #144]	; (d90 <xQueueGenericSend+0x168>)
     d00:	4798      	blx	r3
     d02:	2800      	cmp	r0, #0
     d04:	d020      	beq.n	d48 <xQueueGenericSend+0x120>
     d06:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
     d08:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     d0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     d0c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     d0e:	4293      	cmp	r3, r2
     d10:	d3b4      	bcc.n	c7c <xQueueGenericSend+0x54>
     d12:	2d02      	cmp	r5, #2
     d14:	d0b2      	beq.n	c7c <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
     d16:	9b01      	ldr	r3, [sp, #4]
     d18:	2b00      	cmp	r3, #0
     d1a:	d0d3      	beq.n	cc4 <xQueueGenericSend+0x9c>
				else if( xEntryTimeSet == pdFALSE )
     d1c:	2e00      	cmp	r6, #0
     d1e:	d102      	bne.n	d26 <xQueueGenericSend+0xfe>
					vTaskSetTimeOutState( &xTimeOut );
     d20:	a802      	add	r0, sp, #8
     d22:	4b1c      	ldr	r3, [pc, #112]	; (d94 <xQueueGenericSend+0x16c>)
     d24:	4798      	blx	r3
		taskEXIT_CRITICAL();
     d26:	4b15      	ldr	r3, [pc, #84]	; (d7c <xQueueGenericSend+0x154>)
     d28:	4798      	blx	r3
		vTaskSuspendAll();
     d2a:	4b1b      	ldr	r3, [pc, #108]	; (d98 <xQueueGenericSend+0x170>)
     d2c:	4798      	blx	r3
		prvLockQueue( pxQueue );
     d2e:	4b0f      	ldr	r3, [pc, #60]	; (d6c <xQueueGenericSend+0x144>)
     d30:	4798      	blx	r3
     d32:	6c63      	ldr	r3, [r4, #68]	; 0x44
     d34:	3301      	adds	r3, #1
     d36:	d101      	bne.n	d3c <xQueueGenericSend+0x114>
     d38:	2300      	movs	r3, #0
     d3a:	6463      	str	r3, [r4, #68]	; 0x44
     d3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     d3e:	3301      	adds	r3, #1
     d40:	d1c4      	bne.n	ccc <xQueueGenericSend+0xa4>
     d42:	2300      	movs	r3, #0
     d44:	64a3      	str	r3, [r4, #72]	; 0x48
     d46:	e7c1      	b.n	ccc <xQueueGenericSend+0xa4>
					portYIELD_WITHIN_API();
     d48:	4b0b      	ldr	r3, [pc, #44]	; (d78 <xQueueGenericSend+0x150>)
     d4a:	4798      	blx	r3
     d4c:	e7db      	b.n	d06 <xQueueGenericSend+0xde>
				prvUnlockQueue( pxQueue );
     d4e:	0020      	movs	r0, r4
     d50:	4b0e      	ldr	r3, [pc, #56]	; (d8c <xQueueGenericSend+0x164>)
     d52:	4798      	blx	r3
				( void ) xTaskResumeAll();
     d54:	4b0e      	ldr	r3, [pc, #56]	; (d90 <xQueueGenericSend+0x168>)
     d56:	4798      	blx	r3
     d58:	e7d5      	b.n	d06 <xQueueGenericSend+0xde>
			prvUnlockQueue( pxQueue );
     d5a:	0020      	movs	r0, r4
     d5c:	4b0b      	ldr	r3, [pc, #44]	; (d8c <xQueueGenericSend+0x164>)
     d5e:	4798      	blx	r3
			( void ) xTaskResumeAll();
     d60:	4b0b      	ldr	r3, [pc, #44]	; (d90 <xQueueGenericSend+0x168>)
     d62:	4798      	blx	r3
			return errQUEUE_FULL;
     d64:	2000      	movs	r0, #0
     d66:	e79c      	b.n	ca2 <xQueueGenericSend+0x7a>
     d68:	00001869 	.word	0x00001869
     d6c:	0000080d 	.word	0x0000080d
     d70:	000009b9 	.word	0x000009b9
     d74:	00000a35 	.word	0x00000a35
     d78:	000007f5 	.word	0x000007f5
     d7c:	00000825 	.word	0x00000825
     d80:	00001739 	.word	0x00001739
     d84:	000017e1 	.word	0x000017e1
     d88:	000016a1 	.word	0x000016a1
     d8c:	00000aad 	.word	0x00000aad
     d90:	00001461 	.word	0x00001461
     d94:	000017c1 	.word	0x000017c1
     d98:	0000130d 	.word	0x0000130d

00000d9c <xQueueGenericSendFromISR>:
{
     d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d9e:	b083      	sub	sp, #12
     da0:	0004      	movs	r4, r0
     da2:	000f      	movs	r7, r1
     da4:	0016      	movs	r6, r2
     da6:	001d      	movs	r5, r3
	configASSERT( pxQueue );
     da8:	2800      	cmp	r0, #0
     daa:	d011      	beq.n	dd0 <xQueueGenericSendFromISR+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     dac:	2900      	cmp	r1, #0
     dae:	d011      	beq.n	dd4 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     db0:	2d02      	cmp	r5, #2
     db2:	d014      	beq.n	dde <xQueueGenericSendFromISR+0x42>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     db4:	4b26      	ldr	r3, [pc, #152]	; (e50 <xQueueGenericSendFromISR+0xb4>)
     db6:	4798      	blx	r3
     db8:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     dba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     dbc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     dbe:	429a      	cmp	r2, r3
     dc0:	d82e      	bhi.n	e20 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
     dc2:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
     dc4:	9801      	ldr	r0, [sp, #4]
     dc6:	4b23      	ldr	r3, [pc, #140]	; (e54 <xQueueGenericSendFromISR+0xb8>)
     dc8:	4798      	blx	r3
}
     dca:	0028      	movs	r0, r5
     dcc:	b003      	add	sp, #12
     dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
     dd0:	b672      	cpsid	i
     dd2:	e7fe      	b.n	dd2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     dd4:	6c03      	ldr	r3, [r0, #64]	; 0x40
     dd6:	2b00      	cmp	r3, #0
     dd8:	d0ea      	beq.n	db0 <xQueueGenericSendFromISR+0x14>
     dda:	b672      	cpsid	i
     ddc:	e7fe      	b.n	ddc <xQueueGenericSendFromISR+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     dde:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     de0:	2b01      	cmp	r3, #1
     de2:	d019      	beq.n	e18 <xQueueGenericSendFromISR+0x7c>
     de4:	b672      	cpsid	i
     de6:	e7fe      	b.n	de6 <xQueueGenericSendFromISR+0x4a>
			xReturn = pdPASS;
     de8:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
     dec:	2b00      	cmp	r3, #0
     dee:	d0e9      	beq.n	dc4 <xQueueGenericSendFromISR+0x28>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     df0:	0020      	movs	r0, r4
     df2:	3024      	adds	r0, #36	; 0x24
     df4:	4b18      	ldr	r3, [pc, #96]	; (e58 <xQueueGenericSendFromISR+0xbc>)
     df6:	4798      	blx	r3
     df8:	2800      	cmp	r0, #0
     dfa:	d0e3      	beq.n	dc4 <xQueueGenericSendFromISR+0x28>
								if( pxHigherPriorityTaskWoken != NULL )
     dfc:	2e00      	cmp	r6, #0
     dfe:	d009      	beq.n	e14 <xQueueGenericSendFromISR+0x78>
									*pxHigherPriorityTaskWoken = pdTRUE;
     e00:	2301      	movs	r3, #1
     e02:	6033      	str	r3, [r6, #0]
     e04:	e7de      	b.n	dc4 <xQueueGenericSendFromISR+0x28>
				++( pxQueue->xTxLock );
     e06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     e08:	3301      	adds	r3, #1
     e0a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
     e0c:	2501      	movs	r5, #1
     e0e:	e7d9      	b.n	dc4 <xQueueGenericSendFromISR+0x28>
     e10:	2501      	movs	r5, #1
     e12:	e7d7      	b.n	dc4 <xQueueGenericSendFromISR+0x28>
     e14:	2501      	movs	r5, #1
     e16:	e7d5      	b.n	dc4 <xQueueGenericSendFromISR+0x28>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     e18:	4b0d      	ldr	r3, [pc, #52]	; (e50 <xQueueGenericSendFromISR+0xb4>)
     e1a:	4798      	blx	r3
     e1c:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     e1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     e20:	002a      	movs	r2, r5
     e22:	0039      	movs	r1, r7
     e24:	0020      	movs	r0, r4
     e26:	4b0d      	ldr	r3, [pc, #52]	; (e5c <xQueueGenericSendFromISR+0xc0>)
     e28:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
     e2a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     e2c:	3301      	adds	r3, #1
     e2e:	d1ea      	bne.n	e06 <xQueueGenericSendFromISR+0x6a>
					if( pxQueue->pxQueueSetContainer != NULL )
     e30:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     e32:	2b00      	cmp	r3, #0
     e34:	d0d8      	beq.n	de8 <xQueueGenericSendFromISR+0x4c>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
     e36:	0029      	movs	r1, r5
     e38:	0020      	movs	r0, r4
     e3a:	4b09      	ldr	r3, [pc, #36]	; (e60 <xQueueGenericSendFromISR+0xc4>)
     e3c:	4798      	blx	r3
			xReturn = pdPASS;
     e3e:	2501      	movs	r5, #1
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
     e40:	2801      	cmp	r0, #1
     e42:	d1bf      	bne.n	dc4 <xQueueGenericSendFromISR+0x28>
							if( pxHigherPriorityTaskWoken != NULL )
     e44:	2e00      	cmp	r6, #0
     e46:	d0e3      	beq.n	e10 <xQueueGenericSendFromISR+0x74>
								*pxHigherPriorityTaskWoken = pdTRUE;
     e48:	2301      	movs	r3, #1
     e4a:	6033      	str	r3, [r6, #0]
     e4c:	e7ba      	b.n	dc4 <xQueueGenericSendFromISR+0x28>
     e4e:	46c0      	nop			; (mov r8, r8)
     e50:	00000845 	.word	0x00000845
     e54:	0000084f 	.word	0x0000084f
     e58:	00001739 	.word	0x00001739
     e5c:	000009b9 	.word	0x000009b9
     e60:	00000a35 	.word	0x00000a35

00000e64 <xQueueGenericReceive>:
{
     e64:	b5f0      	push	{r4, r5, r6, r7, lr}
     e66:	46c6      	mov	lr, r8
     e68:	b500      	push	{lr}
     e6a:	b084      	sub	sp, #16
     e6c:	0004      	movs	r4, r0
     e6e:	000e      	movs	r6, r1
     e70:	9201      	str	r2, [sp, #4]
     e72:	001f      	movs	r7, r3
	configASSERT( pxQueue );
     e74:	2800      	cmp	r0, #0
     e76:	d00a      	beq.n	e8e <xQueueGenericReceive+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     e78:	2900      	cmp	r1, #0
     e7a:	d00a      	beq.n	e92 <xQueueGenericReceive+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     e7c:	4b4d      	ldr	r3, [pc, #308]	; (fb4 <xQueueGenericReceive+0x150>)
     e7e:	4798      	blx	r3
     e80:	2800      	cmp	r0, #0
     e82:	d10b      	bne.n	e9c <xQueueGenericReceive+0x38>
     e84:	9b01      	ldr	r3, [sp, #4]
     e86:	2b00      	cmp	r3, #0
     e88:	d00c      	beq.n	ea4 <xQueueGenericReceive+0x40>
     e8a:	b672      	cpsid	i
     e8c:	e7fe      	b.n	e8c <xQueueGenericReceive+0x28>
	configASSERT( pxQueue );
     e8e:	b672      	cpsid	i
     e90:	e7fe      	b.n	e90 <xQueueGenericReceive+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     e92:	6c03      	ldr	r3, [r0, #64]	; 0x40
     e94:	2b00      	cmp	r3, #0
     e96:	d0f1      	beq.n	e7c <xQueueGenericReceive+0x18>
     e98:	b672      	cpsid	i
     e9a:	e7fe      	b.n	e9a <xQueueGenericReceive+0x36>
     e9c:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
     e9e:	4b46      	ldr	r3, [pc, #280]	; (fb8 <xQueueGenericReceive+0x154>)
     ea0:	4698      	mov	r8, r3
     ea2:	e042      	b.n	f2a <xQueueGenericReceive+0xc6>
     ea4:	2500      	movs	r5, #0
     ea6:	e7fa      	b.n	e9e <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
     ea8:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
     eaa:	0031      	movs	r1, r6
     eac:	0020      	movs	r0, r4
     eae:	4b43      	ldr	r3, [pc, #268]	; (fbc <xQueueGenericReceive+0x158>)
     eb0:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
     eb2:	2f00      	cmp	r7, #0
     eb4:	d11a      	bne.n	eec <xQueueGenericReceive+0x88>
					--( pxQueue->uxMessagesWaiting );
     eb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     eb8:	3b01      	subs	r3, #1
     eba:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     ebc:	6823      	ldr	r3, [r4, #0]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d102      	bne.n	ec8 <xQueueGenericReceive+0x64>
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
     ec2:	4b3f      	ldr	r3, [pc, #252]	; (fc0 <xQueueGenericReceive+0x15c>)
     ec4:	4798      	blx	r3
     ec6:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     ec8:	6923      	ldr	r3, [r4, #16]
     eca:	2b00      	cmp	r3, #0
     ecc:	d007      	beq.n	ede <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     ece:	0020      	movs	r0, r4
     ed0:	3010      	adds	r0, #16
     ed2:	4b3c      	ldr	r3, [pc, #240]	; (fc4 <xQueueGenericReceive+0x160>)
     ed4:	4798      	blx	r3
     ed6:	2801      	cmp	r0, #1
     ed8:	d101      	bne.n	ede <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
     eda:	4b3b      	ldr	r3, [pc, #236]	; (fc8 <xQueueGenericReceive+0x164>)
     edc:	4798      	blx	r3
				taskEXIT_CRITICAL();
     ede:	4b3b      	ldr	r3, [pc, #236]	; (fcc <xQueueGenericReceive+0x168>)
     ee0:	4798      	blx	r3
				return pdPASS;
     ee2:	2001      	movs	r0, #1
}
     ee4:	b004      	add	sp, #16
     ee6:	bc04      	pop	{r2}
     ee8:	4690      	mov	r8, r2
     eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
     eec:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
     ef0:	2b00      	cmp	r3, #0
     ef2:	d0f4      	beq.n	ede <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     ef4:	0020      	movs	r0, r4
     ef6:	3024      	adds	r0, #36	; 0x24
     ef8:	4b32      	ldr	r3, [pc, #200]	; (fc4 <xQueueGenericReceive+0x160>)
     efa:	4798      	blx	r3
     efc:	2800      	cmp	r0, #0
     efe:	d0ee      	beq.n	ede <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
     f00:	4b31      	ldr	r3, [pc, #196]	; (fc8 <xQueueGenericReceive+0x164>)
     f02:	4798      	blx	r3
     f04:	e7eb      	b.n	ede <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
     f06:	4b31      	ldr	r3, [pc, #196]	; (fcc <xQueueGenericReceive+0x168>)
     f08:	4798      	blx	r3
					return errQUEUE_EMPTY;
     f0a:	2000      	movs	r0, #0
     f0c:	e7ea      	b.n	ee4 <xQueueGenericReceive+0x80>
						taskENTER_CRITICAL();
     f0e:	4b2a      	ldr	r3, [pc, #168]	; (fb8 <xQueueGenericReceive+0x154>)
     f10:	4798      	blx	r3
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
     f12:	6860      	ldr	r0, [r4, #4]
     f14:	4b2e      	ldr	r3, [pc, #184]	; (fd0 <xQueueGenericReceive+0x16c>)
     f16:	4798      	blx	r3
						taskEXIT_CRITICAL();
     f18:	4b2c      	ldr	r3, [pc, #176]	; (fcc <xQueueGenericReceive+0x168>)
     f1a:	4798      	blx	r3
     f1c:	e033      	b.n	f86 <xQueueGenericReceive+0x122>
				prvUnlockQueue( pxQueue );
     f1e:	0020      	movs	r0, r4
     f20:	4b2c      	ldr	r3, [pc, #176]	; (fd4 <xQueueGenericReceive+0x170>)
     f22:	4798      	blx	r3
				( void ) xTaskResumeAll();
     f24:	4b2c      	ldr	r3, [pc, #176]	; (fd8 <xQueueGenericReceive+0x174>)
     f26:	4798      	blx	r3
     f28:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
     f2a:	47c0      	blx	r8
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
     f2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     f2e:	2b00      	cmp	r3, #0
     f30:	d1ba      	bne.n	ea8 <xQueueGenericReceive+0x44>
				if( xTicksToWait == ( TickType_t ) 0 )
     f32:	9b01      	ldr	r3, [sp, #4]
     f34:	2b00      	cmp	r3, #0
     f36:	d0e6      	beq.n	f06 <xQueueGenericReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
     f38:	2d00      	cmp	r5, #0
     f3a:	d102      	bne.n	f42 <xQueueGenericReceive+0xde>
					vTaskSetTimeOutState( &xTimeOut );
     f3c:	a802      	add	r0, sp, #8
     f3e:	4b27      	ldr	r3, [pc, #156]	; (fdc <xQueueGenericReceive+0x178>)
     f40:	4798      	blx	r3
		taskEXIT_CRITICAL();
     f42:	4b22      	ldr	r3, [pc, #136]	; (fcc <xQueueGenericReceive+0x168>)
     f44:	4798      	blx	r3
		vTaskSuspendAll();
     f46:	4b26      	ldr	r3, [pc, #152]	; (fe0 <xQueueGenericReceive+0x17c>)
     f48:	4798      	blx	r3
		prvLockQueue( pxQueue );
     f4a:	4b1b      	ldr	r3, [pc, #108]	; (fb8 <xQueueGenericReceive+0x154>)
     f4c:	4798      	blx	r3
     f4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
     f50:	3301      	adds	r3, #1
     f52:	d101      	bne.n	f58 <xQueueGenericReceive+0xf4>
     f54:	2300      	movs	r3, #0
     f56:	6463      	str	r3, [r4, #68]	; 0x44
     f58:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     f5a:	3301      	adds	r3, #1
     f5c:	d101      	bne.n	f62 <xQueueGenericReceive+0xfe>
     f5e:	2300      	movs	r3, #0
     f60:	64a3      	str	r3, [r4, #72]	; 0x48
     f62:	4b1a      	ldr	r3, [pc, #104]	; (fcc <xQueueGenericReceive+0x168>)
     f64:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     f66:	a901      	add	r1, sp, #4
     f68:	a802      	add	r0, sp, #8
     f6a:	4b1e      	ldr	r3, [pc, #120]	; (fe4 <xQueueGenericReceive+0x180>)
     f6c:	4798      	blx	r3
     f6e:	2800      	cmp	r0, #0
     f70:	d118      	bne.n	fa4 <xQueueGenericReceive+0x140>
	taskENTER_CRITICAL();
     f72:	4b11      	ldr	r3, [pc, #68]	; (fb8 <xQueueGenericReceive+0x154>)
     f74:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     f76:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
     f78:	4b14      	ldr	r3, [pc, #80]	; (fcc <xQueueGenericReceive+0x168>)
     f7a:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     f7c:	2d00      	cmp	r5, #0
     f7e:	d1ce      	bne.n	f1e <xQueueGenericReceive+0xba>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     f80:	6823      	ldr	r3, [r4, #0]
     f82:	2b00      	cmp	r3, #0
     f84:	d0c3      	beq.n	f0e <xQueueGenericReceive+0xaa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     f86:	0020      	movs	r0, r4
     f88:	3024      	adds	r0, #36	; 0x24
     f8a:	9901      	ldr	r1, [sp, #4]
     f8c:	4b16      	ldr	r3, [pc, #88]	; (fe8 <xQueueGenericReceive+0x184>)
     f8e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
     f90:	0020      	movs	r0, r4
     f92:	4b10      	ldr	r3, [pc, #64]	; (fd4 <xQueueGenericReceive+0x170>)
     f94:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
     f96:	4b10      	ldr	r3, [pc, #64]	; (fd8 <xQueueGenericReceive+0x174>)
     f98:	4798      	blx	r3
     f9a:	2800      	cmp	r0, #0
     f9c:	d1c4      	bne.n	f28 <xQueueGenericReceive+0xc4>
					portYIELD_WITHIN_API();
     f9e:	4b0a      	ldr	r3, [pc, #40]	; (fc8 <xQueueGenericReceive+0x164>)
     fa0:	4798      	blx	r3
     fa2:	e7c1      	b.n	f28 <xQueueGenericReceive+0xc4>
			prvUnlockQueue( pxQueue );
     fa4:	0020      	movs	r0, r4
     fa6:	4b0b      	ldr	r3, [pc, #44]	; (fd4 <xQueueGenericReceive+0x170>)
     fa8:	4798      	blx	r3
			( void ) xTaskResumeAll();
     faa:	4b0b      	ldr	r3, [pc, #44]	; (fd8 <xQueueGenericReceive+0x174>)
     fac:	4798      	blx	r3
			return errQUEUE_EMPTY;
     fae:	2000      	movs	r0, #0
     fb0:	e798      	b.n	ee4 <xQueueGenericReceive+0x80>
     fb2:	46c0      	nop			; (mov r8, r8)
     fb4:	00001869 	.word	0x00001869
     fb8:	0000080d 	.word	0x0000080d
     fbc:	00000a85 	.word	0x00000a85
     fc0:	0000185d 	.word	0x0000185d
     fc4:	00001739 	.word	0x00001739
     fc8:	000007f5 	.word	0x000007f5
     fcc:	00000825 	.word	0x00000825
     fd0:	00001889 	.word	0x00001889
     fd4:	00000aad 	.word	0x00000aad
     fd8:	00001461 	.word	0x00001461
     fdc:	000017c1 	.word	0x000017c1
     fe0:	0000130d 	.word	0x0000130d
     fe4:	000017e1 	.word	0x000017e1
     fe8:	000016a1 	.word	0x000016a1

00000fec <vQueueWaitForMessageRestricted>:
	{
     fec:	b570      	push	{r4, r5, r6, lr}
     fee:	0004      	movs	r4, r0
     ff0:	000d      	movs	r5, r1
		prvLockQueue( pxQueue );
     ff2:	4b0e      	ldr	r3, [pc, #56]	; (102c <vQueueWaitForMessageRestricted+0x40>)
     ff4:	4798      	blx	r3
     ff6:	6c63      	ldr	r3, [r4, #68]	; 0x44
     ff8:	3301      	adds	r3, #1
     ffa:	d00b      	beq.n	1014 <vQueueWaitForMessageRestricted+0x28>
     ffc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     ffe:	3301      	adds	r3, #1
    1000:	d00b      	beq.n	101a <vQueueWaitForMessageRestricted+0x2e>
    1002:	4b0b      	ldr	r3, [pc, #44]	; (1030 <vQueueWaitForMessageRestricted+0x44>)
    1004:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1006:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1008:	2b00      	cmp	r3, #0
    100a:	d009      	beq.n	1020 <vQueueWaitForMessageRestricted+0x34>
		prvUnlockQueue( pxQueue );
    100c:	0020      	movs	r0, r4
    100e:	4b09      	ldr	r3, [pc, #36]	; (1034 <vQueueWaitForMessageRestricted+0x48>)
    1010:	4798      	blx	r3
	}
    1012:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
    1014:	2300      	movs	r3, #0
    1016:	6463      	str	r3, [r4, #68]	; 0x44
    1018:	e7f0      	b.n	ffc <vQueueWaitForMessageRestricted+0x10>
    101a:	2300      	movs	r3, #0
    101c:	64a3      	str	r3, [r4, #72]	; 0x48
    101e:	e7f0      	b.n	1002 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1020:	0020      	movs	r0, r4
    1022:	3024      	adds	r0, #36	; 0x24
    1024:	0029      	movs	r1, r5
    1026:	4b04      	ldr	r3, [pc, #16]	; (1038 <vQueueWaitForMessageRestricted+0x4c>)
    1028:	4798      	blx	r3
    102a:	e7ef      	b.n	100c <vQueueWaitForMessageRestricted+0x20>
    102c:	0000080d 	.word	0x0000080d
    1030:	00000825 	.word	0x00000825
    1034:	00000aad 	.word	0x00000aad
    1038:	000016f9 	.word	0x000016f9

0000103c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    103c:	4b08      	ldr	r3, [pc, #32]	; (1060 <prvResetNextTaskUnblockTime+0x24>)
    103e:	681b      	ldr	r3, [r3, #0]
    1040:	681b      	ldr	r3, [r3, #0]
    1042:	2b00      	cmp	r3, #0
    1044:	d007      	beq.n	1056 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1046:	4b06      	ldr	r3, [pc, #24]	; (1060 <prvResetNextTaskUnblockTime+0x24>)
    1048:	681b      	ldr	r3, [r3, #0]
    104a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    104c:	68db      	ldr	r3, [r3, #12]
    104e:	685a      	ldr	r2, [r3, #4]
    1050:	4b04      	ldr	r3, [pc, #16]	; (1064 <prvResetNextTaskUnblockTime+0x28>)
    1052:	601a      	str	r2, [r3, #0]
	}
}
    1054:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    1056:	2201      	movs	r2, #1
    1058:	4252      	negs	r2, r2
    105a:	4b02      	ldr	r3, [pc, #8]	; (1064 <prvResetNextTaskUnblockTime+0x28>)
    105c:	601a      	str	r2, [r3, #0]
    105e:	e7f9      	b.n	1054 <prvResetNextTaskUnblockTime+0x18>
    1060:	20003b04 	.word	0x20003b04
    1064:	20000008 	.word	0x20000008

00001068 <prvAddCurrentTaskToDelayedList>:
{
    1068:	b510      	push	{r4, lr}
    106a:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    106c:	4b0e      	ldr	r3, [pc, #56]	; (10a8 <prvAddCurrentTaskToDelayedList+0x40>)
    106e:	681b      	ldr	r3, [r3, #0]
    1070:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
    1072:	4b0e      	ldr	r3, [pc, #56]	; (10ac <prvAddCurrentTaskToDelayedList+0x44>)
    1074:	681b      	ldr	r3, [r3, #0]
    1076:	4298      	cmp	r0, r3
    1078:	d30d      	bcc.n	1096 <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    107a:	4b0d      	ldr	r3, [pc, #52]	; (10b0 <prvAddCurrentTaskToDelayedList+0x48>)
    107c:	6818      	ldr	r0, [r3, #0]
    107e:	4b0a      	ldr	r3, [pc, #40]	; (10a8 <prvAddCurrentTaskToDelayedList+0x40>)
    1080:	6819      	ldr	r1, [r3, #0]
    1082:	3104      	adds	r1, #4
    1084:	4b0b      	ldr	r3, [pc, #44]	; (10b4 <prvAddCurrentTaskToDelayedList+0x4c>)
    1086:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
    1088:	4b0b      	ldr	r3, [pc, #44]	; (10b8 <prvAddCurrentTaskToDelayedList+0x50>)
    108a:	681b      	ldr	r3, [r3, #0]
    108c:	429c      	cmp	r4, r3
    108e:	d209      	bcs.n	10a4 <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
    1090:	4b09      	ldr	r3, [pc, #36]	; (10b8 <prvAddCurrentTaskToDelayedList+0x50>)
    1092:	601c      	str	r4, [r3, #0]
}
    1094:	e006      	b.n	10a4 <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    1096:	4b09      	ldr	r3, [pc, #36]	; (10bc <prvAddCurrentTaskToDelayedList+0x54>)
    1098:	6818      	ldr	r0, [r3, #0]
    109a:	4b03      	ldr	r3, [pc, #12]	; (10a8 <prvAddCurrentTaskToDelayedList+0x40>)
    109c:	6819      	ldr	r1, [r3, #0]
    109e:	3104      	adds	r1, #4
    10a0:	4b04      	ldr	r3, [pc, #16]	; (10b4 <prvAddCurrentTaskToDelayedList+0x4c>)
    10a2:	4798      	blx	r3
}
    10a4:	bd10      	pop	{r4, pc}
    10a6:	46c0      	nop			; (mov r8, r8)
    10a8:	20003b00 	.word	0x20003b00
    10ac:	20003bf4 	.word	0x20003bf4
    10b0:	20003b04 	.word	0x20003b04
    10b4:	00000749 	.word	0x00000749
    10b8:	20000008 	.word	0x20000008
    10bc:	20003b08 	.word	0x20003b08

000010c0 <xTaskGenericCreate>:
{
    10c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10c2:	46d6      	mov	lr, sl
    10c4:	b500      	push	{lr}
    10c6:	b082      	sub	sp, #8
    10c8:	0005      	movs	r5, r0
    10ca:	000f      	movs	r7, r1
    10cc:	0016      	movs	r6, r2
    10ce:	9301      	str	r3, [sp, #4]
    10d0:	9b08      	ldr	r3, [sp, #32]
    10d2:	469a      	mov	sl, r3
	configASSERT( pxTaskCode );
    10d4:	2800      	cmp	r0, #0
    10d6:	d003      	beq.n	10e0 <xTaskGenericCreate+0x20>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    10d8:	2b04      	cmp	r3, #4
    10da:	d903      	bls.n	10e4 <xTaskGenericCreate+0x24>
    10dc:	b672      	cpsid	i
    10de:	e7fe      	b.n	10de <xTaskGenericCreate+0x1e>
	configASSERT( pxTaskCode );
    10e0:	b672      	cpsid	i
    10e2:	e7fe      	b.n	10e2 <xTaskGenericCreate+0x22>
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    10e4:	2040      	movs	r0, #64	; 0x40
    10e6:	4b5a      	ldr	r3, [pc, #360]	; (1250 <xTaskGenericCreate+0x190>)
    10e8:	4798      	blx	r3
    10ea:	1e04      	subs	r4, r0, #0
	if( pxNewTCB != NULL )
    10ec:	d00d      	beq.n	110a <xTaskGenericCreate+0x4a>
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    10ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    10f0:	2b00      	cmp	r3, #0
    10f2:	d000      	beq.n	10f6 <xTaskGenericCreate+0x36>
    10f4:	e094      	b.n	1220 <xTaskGenericCreate+0x160>
    10f6:	00b0      	lsls	r0, r6, #2
    10f8:	4b55      	ldr	r3, [pc, #340]	; (1250 <xTaskGenericCreate+0x190>)
    10fa:	4798      	blx	r3
    10fc:	6320      	str	r0, [r4, #48]	; 0x30
		if( pxNewTCB->pxStack == NULL )
    10fe:	2800      	cmp	r0, #0
    1100:	d000      	beq.n	1104 <xTaskGenericCreate+0x44>
    1102:	e08f      	b.n	1224 <xTaskGenericCreate+0x164>
			vPortFree( pxNewTCB );
    1104:	0020      	movs	r0, r4
    1106:	4b53      	ldr	r3, [pc, #332]	; (1254 <xTaskGenericCreate+0x194>)
    1108:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    110a:	2001      	movs	r0, #1
    110c:	4240      	negs	r0, r0
    110e:	e077      	b.n	1200 <xTaskGenericCreate+0x140>
    1110:	3701      	adds	r7, #1
    1112:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1114:	428b      	cmp	r3, r1
    1116:	d004      	beq.n	1122 <xTaskGenericCreate+0x62>
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    1118:	7838      	ldrb	r0, [r7, #0]
    111a:	7018      	strb	r0, [r3, #0]
		if( pcName[ x ] == 0x00 )
    111c:	7838      	ldrb	r0, [r7, #0]
    111e:	2800      	cmp	r0, #0
    1120:	d1f6      	bne.n	1110 <xTaskGenericCreate+0x50>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    1122:	2200      	movs	r2, #0
    1124:	233b      	movs	r3, #59	; 0x3b
    1126:	54e2      	strb	r2, [r4, r3]
	pxTCB->uxPriority = uxPriority;
    1128:	4653      	mov	r3, sl
    112a:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
    112c:	63e3      	str	r3, [r4, #60]	; 0x3c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    112e:	1d23      	adds	r3, r4, #4
    1130:	9300      	str	r3, [sp, #0]
    1132:	0018      	movs	r0, r3
    1134:	4f48      	ldr	r7, [pc, #288]	; (1258 <xTaskGenericCreate+0x198>)
    1136:	47b8      	blx	r7
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    1138:	0020      	movs	r0, r4
    113a:	3018      	adds	r0, #24
    113c:	47b8      	blx	r7
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    113e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1140:	2305      	movs	r3, #5
    1142:	4652      	mov	r2, sl
    1144:	1a9b      	subs	r3, r3, r2
    1146:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    1148:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    114a:	9a01      	ldr	r2, [sp, #4]
    114c:	0029      	movs	r1, r5
    114e:	0030      	movs	r0, r6
    1150:	4b42      	ldr	r3, [pc, #264]	; (125c <xTaskGenericCreate+0x19c>)
    1152:	4798      	blx	r3
    1154:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
    1156:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1158:	2b00      	cmp	r3, #0
    115a:	d000      	beq.n	115e <xTaskGenericCreate+0x9e>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    115c:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
    115e:	4b40      	ldr	r3, [pc, #256]	; (1260 <xTaskGenericCreate+0x1a0>)
    1160:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
    1162:	4a40      	ldr	r2, [pc, #256]	; (1264 <xTaskGenericCreate+0x1a4>)
    1164:	6813      	ldr	r3, [r2, #0]
    1166:	3301      	adds	r3, #1
    1168:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
    116a:	4b3f      	ldr	r3, [pc, #252]	; (1268 <xTaskGenericCreate+0x1a8>)
    116c:	681b      	ldr	r3, [r3, #0]
    116e:	2b00      	cmp	r3, #0
    1170:	d14a      	bne.n	1208 <xTaskGenericCreate+0x148>
				pxCurrentTCB =  pxNewTCB;
    1172:	4b3d      	ldr	r3, [pc, #244]	; (1268 <xTaskGenericCreate+0x1a8>)
    1174:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    1176:	6813      	ldr	r3, [r2, #0]
    1178:	2b01      	cmp	r3, #1
    117a:	d11f      	bne.n	11bc <xTaskGenericCreate+0xfc>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    117c:	4e3b      	ldr	r6, [pc, #236]	; (126c <xTaskGenericCreate+0x1ac>)
    117e:	0030      	movs	r0, r6
    1180:	4d3b      	ldr	r5, [pc, #236]	; (1270 <xTaskGenericCreate+0x1b0>)
    1182:	47a8      	blx	r5
    1184:	0030      	movs	r0, r6
    1186:	3014      	adds	r0, #20
    1188:	47a8      	blx	r5
    118a:	0030      	movs	r0, r6
    118c:	3028      	adds	r0, #40	; 0x28
    118e:	47a8      	blx	r5
    1190:	0030      	movs	r0, r6
    1192:	303c      	adds	r0, #60	; 0x3c
    1194:	47a8      	blx	r5
    1196:	0030      	movs	r0, r6
    1198:	3050      	adds	r0, #80	; 0x50
    119a:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
    119c:	4f35      	ldr	r7, [pc, #212]	; (1274 <xTaskGenericCreate+0x1b4>)
    119e:	0038      	movs	r0, r7
    11a0:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
    11a2:	4e35      	ldr	r6, [pc, #212]	; (1278 <xTaskGenericCreate+0x1b8>)
    11a4:	0030      	movs	r0, r6
    11a6:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
    11a8:	4834      	ldr	r0, [pc, #208]	; (127c <xTaskGenericCreate+0x1bc>)
    11aa:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
    11ac:	4834      	ldr	r0, [pc, #208]	; (1280 <xTaskGenericCreate+0x1c0>)
    11ae:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
    11b0:	4834      	ldr	r0, [pc, #208]	; (1284 <xTaskGenericCreate+0x1c4>)
    11b2:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
    11b4:	4b34      	ldr	r3, [pc, #208]	; (1288 <xTaskGenericCreate+0x1c8>)
    11b6:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    11b8:	4b34      	ldr	r3, [pc, #208]	; (128c <xTaskGenericCreate+0x1cc>)
    11ba:	601e      	str	r6, [r3, #0]
			uxTaskNumber++;
    11bc:	4a34      	ldr	r2, [pc, #208]	; (1290 <xTaskGenericCreate+0x1d0>)
    11be:	6813      	ldr	r3, [r2, #0]
    11c0:	3301      	adds	r3, #1
    11c2:	6013      	str	r3, [r2, #0]
			prvAddTaskToReadyList( pxNewTCB );
    11c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    11c6:	4a33      	ldr	r2, [pc, #204]	; (1294 <xTaskGenericCreate+0x1d4>)
    11c8:	6812      	ldr	r2, [r2, #0]
    11ca:	4293      	cmp	r3, r2
    11cc:	d901      	bls.n	11d2 <xTaskGenericCreate+0x112>
    11ce:	4a31      	ldr	r2, [pc, #196]	; (1294 <xTaskGenericCreate+0x1d4>)
    11d0:	6013      	str	r3, [r2, #0]
    11d2:	0098      	lsls	r0, r3, #2
    11d4:	18c0      	adds	r0, r0, r3
    11d6:	0080      	lsls	r0, r0, #2
    11d8:	4b24      	ldr	r3, [pc, #144]	; (126c <xTaskGenericCreate+0x1ac>)
    11da:	1818      	adds	r0, r3, r0
    11dc:	9900      	ldr	r1, [sp, #0]
    11de:	4b2e      	ldr	r3, [pc, #184]	; (1298 <xTaskGenericCreate+0x1d8>)
    11e0:	4798      	blx	r3
		taskEXIT_CRITICAL();
    11e2:	4b2e      	ldr	r3, [pc, #184]	; (129c <xTaskGenericCreate+0x1dc>)
    11e4:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
    11e6:	4b2e      	ldr	r3, [pc, #184]	; (12a0 <xTaskGenericCreate+0x1e0>)
    11e8:	681b      	ldr	r3, [r3, #0]
    11ea:	2001      	movs	r0, #1
    11ec:	2b00      	cmp	r3, #0
    11ee:	d007      	beq.n	1200 <xTaskGenericCreate+0x140>
			if( pxCurrentTCB->uxPriority < uxPriority )
    11f0:	4b1d      	ldr	r3, [pc, #116]	; (1268 <xTaskGenericCreate+0x1a8>)
    11f2:	681b      	ldr	r3, [r3, #0]
    11f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    11f6:	459a      	cmp	sl, r3
    11f8:	d902      	bls.n	1200 <xTaskGenericCreate+0x140>
				taskYIELD_IF_USING_PREEMPTION();
    11fa:	4b2a      	ldr	r3, [pc, #168]	; (12a4 <xTaskGenericCreate+0x1e4>)
    11fc:	4798      	blx	r3
    11fe:	2001      	movs	r0, #1
}
    1200:	b002      	add	sp, #8
    1202:	bc04      	pop	{r2}
    1204:	4692      	mov	sl, r2
    1206:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( xSchedulerRunning == pdFALSE )
    1208:	4b25      	ldr	r3, [pc, #148]	; (12a0 <xTaskGenericCreate+0x1e0>)
    120a:	681b      	ldr	r3, [r3, #0]
    120c:	2b00      	cmp	r3, #0
    120e:	d1d5      	bne.n	11bc <xTaskGenericCreate+0xfc>
					if( pxCurrentTCB->uxPriority <= uxPriority )
    1210:	4b15      	ldr	r3, [pc, #84]	; (1268 <xTaskGenericCreate+0x1a8>)
    1212:	681b      	ldr	r3, [r3, #0]
    1214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1216:	459a      	cmp	sl, r3
    1218:	d3d0      	bcc.n	11bc <xTaskGenericCreate+0xfc>
						pxCurrentTCB = pxNewTCB;
    121a:	4b13      	ldr	r3, [pc, #76]	; (1268 <xTaskGenericCreate+0x1a8>)
    121c:	601c      	str	r4, [r3, #0]
    121e:	e7cd      	b.n	11bc <xTaskGenericCreate+0xfc>
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1222:	6303      	str	r3, [r0, #48]	; 0x30
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    1224:	4b20      	ldr	r3, [pc, #128]	; (12a8 <xTaskGenericCreate+0x1e8>)
    1226:	18f3      	adds	r3, r6, r3
    1228:	009b      	lsls	r3, r3, #2
    122a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    122c:	4694      	mov	ip, r2
    122e:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    1230:	2207      	movs	r2, #7
    1232:	4393      	bics	r3, r2
    1234:	001e      	movs	r6, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    1236:	783a      	ldrb	r2, [r7, #0]
    1238:	2334      	movs	r3, #52	; 0x34
    123a:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
    123c:	783b      	ldrb	r3, [r7, #0]
    123e:	2b00      	cmp	r3, #0
    1240:	d100      	bne.n	1244 <xTaskGenericCreate+0x184>
    1242:	e76e      	b.n	1122 <xTaskGenericCreate+0x62>
    1244:	3701      	adds	r7, #1
    1246:	0023      	movs	r3, r4
    1248:	3335      	adds	r3, #53	; 0x35
    124a:	0021      	movs	r1, r4
    124c:	313c      	adds	r1, #60	; 0x3c
    124e:	e763      	b.n	1118 <xTaskGenericCreate+0x58>
    1250:	00000941 	.word	0x00000941
    1254:	000009ad 	.word	0x000009ad
    1258:	0000072b 	.word	0x0000072b
    125c:	000007d1 	.word	0x000007d1
    1260:	0000080d 	.word	0x0000080d
    1264:	20003b70 	.word	0x20003b70
    1268:	20003b00 	.word	0x20003b00
    126c:	20003b0c 	.word	0x20003b0c
    1270:	00000715 	.word	0x00000715
    1274:	20003b88 	.word	0x20003b88
    1278:	20003b9c 	.word	0x20003b9c
    127c:	20003bb4 	.word	0x20003bb4
    1280:	20003be0 	.word	0x20003be0
    1284:	20003bcc 	.word	0x20003bcc
    1288:	20003b04 	.word	0x20003b04
    128c:	20003b08 	.word	0x20003b08
    1290:	20003b7c 	.word	0x20003b7c
    1294:	20003b84 	.word	0x20003b84
    1298:	00000731 	.word	0x00000731
    129c:	00000825 	.word	0x00000825
    12a0:	20003bc8 	.word	0x20003bc8
    12a4:	000007f5 	.word	0x000007f5
    12a8:	3fffffff 	.word	0x3fffffff

000012ac <vTaskStartScheduler>:
{
    12ac:	b510      	push	{r4, lr}
    12ae:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    12b0:	2300      	movs	r3, #0
    12b2:	9303      	str	r3, [sp, #12]
    12b4:	9302      	str	r3, [sp, #8]
    12b6:	9301      	str	r3, [sp, #4]
    12b8:	9300      	str	r3, [sp, #0]
    12ba:	2264      	movs	r2, #100	; 0x64
    12bc:	490c      	ldr	r1, [pc, #48]	; (12f0 <vTaskStartScheduler+0x44>)
    12be:	480d      	ldr	r0, [pc, #52]	; (12f4 <vTaskStartScheduler+0x48>)
    12c0:	4c0d      	ldr	r4, [pc, #52]	; (12f8 <vTaskStartScheduler+0x4c>)
    12c2:	47a0      	blx	r4
		if( xReturn == pdPASS )
    12c4:	2801      	cmp	r0, #1
    12c6:	d003      	beq.n	12d0 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
    12c8:	2800      	cmp	r0, #0
    12ca:	d10e      	bne.n	12ea <vTaskStartScheduler+0x3e>
    12cc:	b672      	cpsid	i
    12ce:	e7fe      	b.n	12ce <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
    12d0:	4b0a      	ldr	r3, [pc, #40]	; (12fc <vTaskStartScheduler+0x50>)
    12d2:	4798      	blx	r3
	if( xReturn == pdPASS )
    12d4:	2801      	cmp	r0, #1
    12d6:	d1f7      	bne.n	12c8 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
    12d8:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
    12da:	2201      	movs	r2, #1
    12dc:	4b08      	ldr	r3, [pc, #32]	; (1300 <vTaskStartScheduler+0x54>)
    12de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    12e0:	2200      	movs	r2, #0
    12e2:	4b08      	ldr	r3, [pc, #32]	; (1304 <vTaskStartScheduler+0x58>)
    12e4:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    12e6:	4b08      	ldr	r3, [pc, #32]	; (1308 <vTaskStartScheduler+0x5c>)
    12e8:	4798      	blx	r3
}
    12ea:	b004      	add	sp, #16
    12ec:	bd10      	pop	{r4, pc}
    12ee:	46c0      	nop			; (mov r8, r8)
    12f0:	00001f00 	.word	0x00001f00
    12f4:	00001561 	.word	0x00001561
    12f8:	000010c1 	.word	0x000010c1
    12fc:	00001a0d 	.word	0x00001a0d
    1300:	20003bc8 	.word	0x20003bc8
    1304:	20003bf4 	.word	0x20003bf4
    1308:	00000901 	.word	0x00000901

0000130c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    130c:	4a02      	ldr	r2, [pc, #8]	; (1318 <vTaskSuspendAll+0xc>)
    130e:	6813      	ldr	r3, [r2, #0]
    1310:	3301      	adds	r3, #1
    1312:	6013      	str	r3, [r2, #0]
}
    1314:	4770      	bx	lr
    1316:	46c0      	nop			; (mov r8, r8)
    1318:	20003b78 	.word	0x20003b78

0000131c <xTaskGetTickCount>:
{
    131c:	b510      	push	{r4, lr}
	taskENTER_CRITICAL();
    131e:	4b04      	ldr	r3, [pc, #16]	; (1330 <xTaskGetTickCount+0x14>)
    1320:	4798      	blx	r3
		xTicks = xTickCount;
    1322:	4b04      	ldr	r3, [pc, #16]	; (1334 <xTaskGetTickCount+0x18>)
    1324:	681c      	ldr	r4, [r3, #0]
	taskEXIT_CRITICAL();
    1326:	4b04      	ldr	r3, [pc, #16]	; (1338 <xTaskGetTickCount+0x1c>)
    1328:	4798      	blx	r3
}
    132a:	0020      	movs	r0, r4
    132c:	bd10      	pop	{r4, pc}
    132e:	46c0      	nop			; (mov r8, r8)
    1330:	0000080d 	.word	0x0000080d
    1334:	20003bf4 	.word	0x20003bf4
    1338:	00000825 	.word	0x00000825

0000133c <xTaskIncrementTick>:
{
    133c:	b5f0      	push	{r4, r5, r6, r7, lr}
    133e:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1340:	4b39      	ldr	r3, [pc, #228]	; (1428 <xTaskIncrementTick+0xec>)
    1342:	681b      	ldr	r3, [r3, #0]
    1344:	2b00      	cmp	r3, #0
    1346:	d161      	bne.n	140c <xTaskIncrementTick+0xd0>
		++xTickCount;
    1348:	4b38      	ldr	r3, [pc, #224]	; (142c <xTaskIncrementTick+0xf0>)
    134a:	681a      	ldr	r2, [r3, #0]
    134c:	3201      	adds	r2, #1
    134e:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
    1350:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
    1352:	2e00      	cmp	r6, #0
    1354:	d112      	bne.n	137c <xTaskIncrementTick+0x40>
				taskSWITCH_DELAYED_LISTS();
    1356:	4b36      	ldr	r3, [pc, #216]	; (1430 <xTaskIncrementTick+0xf4>)
    1358:	681b      	ldr	r3, [r3, #0]
    135a:	681b      	ldr	r3, [r3, #0]
    135c:	2b00      	cmp	r3, #0
    135e:	d001      	beq.n	1364 <xTaskIncrementTick+0x28>
    1360:	b672      	cpsid	i
    1362:	e7fe      	b.n	1362 <xTaskIncrementTick+0x26>
    1364:	4a32      	ldr	r2, [pc, #200]	; (1430 <xTaskIncrementTick+0xf4>)
    1366:	6811      	ldr	r1, [r2, #0]
    1368:	4b32      	ldr	r3, [pc, #200]	; (1434 <xTaskIncrementTick+0xf8>)
    136a:	6818      	ldr	r0, [r3, #0]
    136c:	6010      	str	r0, [r2, #0]
    136e:	6019      	str	r1, [r3, #0]
    1370:	4a31      	ldr	r2, [pc, #196]	; (1438 <xTaskIncrementTick+0xfc>)
    1372:	6813      	ldr	r3, [r2, #0]
    1374:	3301      	adds	r3, #1
    1376:	6013      	str	r3, [r2, #0]
    1378:	4b30      	ldr	r3, [pc, #192]	; (143c <xTaskIncrementTick+0x100>)
    137a:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
    137c:	4b30      	ldr	r3, [pc, #192]	; (1440 <xTaskIncrementTick+0x104>)
    137e:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
    1380:	2400      	movs	r4, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
    1382:	429e      	cmp	r6, r3
    1384:	d333      	bcc.n	13ee <xTaskIncrementTick+0xb2>
    1386:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1388:	4f29      	ldr	r7, [pc, #164]	; (1430 <xTaskIncrementTick+0xf4>)
    138a:	683b      	ldr	r3, [r7, #0]
    138c:	681b      	ldr	r3, [r3, #0]
    138e:	2b00      	cmp	r3, #0
    1390:	d029      	beq.n	13e6 <xTaskIncrementTick+0xaa>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1392:	4b27      	ldr	r3, [pc, #156]	; (1430 <xTaskIncrementTick+0xf4>)
    1394:	681b      	ldr	r3, [r3, #0]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    139a:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
    139c:	429e      	cmp	r6, r3
    139e:	d332      	bcc.n	1406 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    13a0:	1d2b      	adds	r3, r5, #4
    13a2:	9301      	str	r3, [sp, #4]
    13a4:	0018      	movs	r0, r3
    13a6:	4b27      	ldr	r3, [pc, #156]	; (1444 <xTaskIncrementTick+0x108>)
    13a8:	4798      	blx	r3
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    13aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    13ac:	2b00      	cmp	r3, #0
    13ae:	d003      	beq.n	13b8 <xTaskIncrementTick+0x7c>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    13b0:	0028      	movs	r0, r5
    13b2:	3018      	adds	r0, #24
    13b4:	4b23      	ldr	r3, [pc, #140]	; (1444 <xTaskIncrementTick+0x108>)
    13b6:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
    13b8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    13ba:	4a23      	ldr	r2, [pc, #140]	; (1448 <xTaskIncrementTick+0x10c>)
    13bc:	6812      	ldr	r2, [r2, #0]
    13be:	4293      	cmp	r3, r2
    13c0:	d901      	bls.n	13c6 <xTaskIncrementTick+0x8a>
    13c2:	4a21      	ldr	r2, [pc, #132]	; (1448 <xTaskIncrementTick+0x10c>)
    13c4:	6013      	str	r3, [r2, #0]
    13c6:	0098      	lsls	r0, r3, #2
    13c8:	18c0      	adds	r0, r0, r3
    13ca:	0080      	lsls	r0, r0, #2
    13cc:	4b1f      	ldr	r3, [pc, #124]	; (144c <xTaskIncrementTick+0x110>)
    13ce:	1818      	adds	r0, r3, r0
    13d0:	9901      	ldr	r1, [sp, #4]
    13d2:	4b1f      	ldr	r3, [pc, #124]	; (1450 <xTaskIncrementTick+0x114>)
    13d4:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    13d6:	4b1f      	ldr	r3, [pc, #124]	; (1454 <xTaskIncrementTick+0x118>)
    13d8:	681b      	ldr	r3, [r3, #0]
    13da:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    13dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    13de:	429a      	cmp	r2, r3
    13e0:	d3d3      	bcc.n	138a <xTaskIncrementTick+0x4e>
								xSwitchRequired = pdTRUE;
    13e2:	2401      	movs	r4, #1
    13e4:	e7d1      	b.n	138a <xTaskIncrementTick+0x4e>
						xNextTaskUnblockTime = portMAX_DELAY;
    13e6:	2201      	movs	r2, #1
    13e8:	4252      	negs	r2, r2
    13ea:	4b15      	ldr	r3, [pc, #84]	; (1440 <xTaskIncrementTick+0x104>)
    13ec:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    13ee:	4b19      	ldr	r3, [pc, #100]	; (1454 <xTaskIncrementTick+0x118>)
    13f0:	681b      	ldr	r3, [r3, #0]
    13f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    13f4:	0093      	lsls	r3, r2, #2
    13f6:	189b      	adds	r3, r3, r2
    13f8:	009b      	lsls	r3, r3, #2
    13fa:	4a14      	ldr	r2, [pc, #80]	; (144c <xTaskIncrementTick+0x110>)
    13fc:	589b      	ldr	r3, [r3, r2]
    13fe:	2b01      	cmp	r3, #1
    1400:	d909      	bls.n	1416 <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
    1402:	2401      	movs	r4, #1
    1404:	e007      	b.n	1416 <xTaskIncrementTick+0xda>
							xNextTaskUnblockTime = xItemValue;
    1406:	4a0e      	ldr	r2, [pc, #56]	; (1440 <xTaskIncrementTick+0x104>)
    1408:	6013      	str	r3, [r2, #0]
							break;
    140a:	e7f0      	b.n	13ee <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
    140c:	4a12      	ldr	r2, [pc, #72]	; (1458 <xTaskIncrementTick+0x11c>)
    140e:	6813      	ldr	r3, [r2, #0]
    1410:	3301      	adds	r3, #1
    1412:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
    1414:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
    1416:	4b11      	ldr	r3, [pc, #68]	; (145c <xTaskIncrementTick+0x120>)
    1418:	681b      	ldr	r3, [r3, #0]
    141a:	2b00      	cmp	r3, #0
    141c:	d000      	beq.n	1420 <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
    141e:	2401      	movs	r4, #1
}
    1420:	0020      	movs	r0, r4
    1422:	b003      	add	sp, #12
    1424:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1426:	46c0      	nop			; (mov r8, r8)
    1428:	20003b78 	.word	0x20003b78
    142c:	20003bf4 	.word	0x20003bf4
    1430:	20003b04 	.word	0x20003b04
    1434:	20003b08 	.word	0x20003b08
    1438:	20003bb0 	.word	0x20003bb0
    143c:	0000103d 	.word	0x0000103d
    1440:	20000008 	.word	0x20000008
    1444:	00000777 	.word	0x00000777
    1448:	20003b84 	.word	0x20003b84
    144c:	20003b0c 	.word	0x20003b0c
    1450:	00000731 	.word	0x00000731
    1454:	20003b00 	.word	0x20003b00
    1458:	20003b74 	.word	0x20003b74
    145c:	20003bf8 	.word	0x20003bf8

00001460 <xTaskResumeAll>:
{
    1460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    1462:	4b31      	ldr	r3, [pc, #196]	; (1528 <xTaskResumeAll+0xc8>)
    1464:	681b      	ldr	r3, [r3, #0]
    1466:	2b00      	cmp	r3, #0
    1468:	d101      	bne.n	146e <xTaskResumeAll+0xe>
    146a:	b672      	cpsid	i
    146c:	e7fe      	b.n	146c <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    146e:	4b2f      	ldr	r3, [pc, #188]	; (152c <xTaskResumeAll+0xcc>)
    1470:	4798      	blx	r3
		--uxSchedulerSuspended;
    1472:	4b2d      	ldr	r3, [pc, #180]	; (1528 <xTaskResumeAll+0xc8>)
    1474:	681a      	ldr	r2, [r3, #0]
    1476:	3a01      	subs	r2, #1
    1478:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    147a:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    147c:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    147e:	2b00      	cmp	r3, #0
    1480:	d103      	bne.n	148a <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1482:	4b2b      	ldr	r3, [pc, #172]	; (1530 <xTaskResumeAll+0xd0>)
    1484:	681b      	ldr	r3, [r3, #0]
    1486:	2b00      	cmp	r3, #0
    1488:	d12a      	bne.n	14e0 <xTaskResumeAll+0x80>
	taskEXIT_CRITICAL();
    148a:	4b2a      	ldr	r3, [pc, #168]	; (1534 <xTaskResumeAll+0xd4>)
    148c:	4798      	blx	r3
}
    148e:	0020      	movs	r0, r4
    1490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
    1492:	0098      	lsls	r0, r3, #2
    1494:	18c0      	adds	r0, r0, r3
    1496:	0080      	lsls	r0, r0, #2
    1498:	4b27      	ldr	r3, [pc, #156]	; (1538 <xTaskResumeAll+0xd8>)
    149a:	1818      	adds	r0, r3, r0
    149c:	0029      	movs	r1, r5
    149e:	4b27      	ldr	r3, [pc, #156]	; (153c <xTaskResumeAll+0xdc>)
    14a0:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    14a2:	4b27      	ldr	r3, [pc, #156]	; (1540 <xTaskResumeAll+0xe0>)
    14a4:	681b      	ldr	r3, [r3, #0]
    14a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    14a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    14aa:	429a      	cmp	r2, r3
    14ac:	d214      	bcs.n	14d8 <xTaskResumeAll+0x78>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    14ae:	6833      	ldr	r3, [r6, #0]
    14b0:	2b00      	cmp	r3, #0
    14b2:	d018      	beq.n	14e6 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    14b4:	68e3      	ldr	r3, [r4, #12]
    14b6:	68df      	ldr	r7, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    14b8:	0038      	movs	r0, r7
    14ba:	3018      	adds	r0, #24
    14bc:	4b21      	ldr	r3, [pc, #132]	; (1544 <xTaskResumeAll+0xe4>)
    14be:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    14c0:	1d3d      	adds	r5, r7, #4
    14c2:	0028      	movs	r0, r5
    14c4:	4b1f      	ldr	r3, [pc, #124]	; (1544 <xTaskResumeAll+0xe4>)
    14c6:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    14c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    14ca:	4a1f      	ldr	r2, [pc, #124]	; (1548 <xTaskResumeAll+0xe8>)
    14cc:	6812      	ldr	r2, [r2, #0]
    14ce:	4293      	cmp	r3, r2
    14d0:	d9df      	bls.n	1492 <xTaskResumeAll+0x32>
    14d2:	4a1d      	ldr	r2, [pc, #116]	; (1548 <xTaskResumeAll+0xe8>)
    14d4:	6013      	str	r3, [r2, #0]
    14d6:	e7dc      	b.n	1492 <xTaskResumeAll+0x32>
						xYieldPending = pdTRUE;
    14d8:	2201      	movs	r2, #1
    14da:	4b1c      	ldr	r3, [pc, #112]	; (154c <xTaskResumeAll+0xec>)
    14dc:	601a      	str	r2, [r3, #0]
    14de:	e7e6      	b.n	14ae <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    14e0:	4e1b      	ldr	r6, [pc, #108]	; (1550 <xTaskResumeAll+0xf0>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    14e2:	0034      	movs	r4, r6
    14e4:	e7e3      	b.n	14ae <xTaskResumeAll+0x4e>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    14e6:	4b1b      	ldr	r3, [pc, #108]	; (1554 <xTaskResumeAll+0xf4>)
    14e8:	681b      	ldr	r3, [r3, #0]
    14ea:	2b00      	cmp	r3, #0
    14ec:	d013      	beq.n	1516 <xTaskResumeAll+0xb6>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    14ee:	4b19      	ldr	r3, [pc, #100]	; (1554 <xTaskResumeAll+0xf4>)
    14f0:	681b      	ldr	r3, [r3, #0]
    14f2:	2b00      	cmp	r3, #0
    14f4:	d00f      	beq.n	1516 <xTaskResumeAll+0xb6>
						if( xTaskIncrementTick() != pdFALSE )
    14f6:	4e18      	ldr	r6, [pc, #96]	; (1558 <xTaskResumeAll+0xf8>)
							xYieldPending = pdTRUE;
    14f8:	4d14      	ldr	r5, [pc, #80]	; (154c <xTaskResumeAll+0xec>)
						--uxPendedTicks;
    14fa:	4c16      	ldr	r4, [pc, #88]	; (1554 <xTaskResumeAll+0xf4>)
    14fc:	e005      	b.n	150a <xTaskResumeAll+0xaa>
    14fe:	6823      	ldr	r3, [r4, #0]
    1500:	3b01      	subs	r3, #1
    1502:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    1504:	6823      	ldr	r3, [r4, #0]
    1506:	2b00      	cmp	r3, #0
    1508:	d005      	beq.n	1516 <xTaskResumeAll+0xb6>
						if( xTaskIncrementTick() != pdFALSE )
    150a:	47b0      	blx	r6
    150c:	2800      	cmp	r0, #0
    150e:	d0f6      	beq.n	14fe <xTaskResumeAll+0x9e>
							xYieldPending = pdTRUE;
    1510:	2301      	movs	r3, #1
    1512:	602b      	str	r3, [r5, #0]
    1514:	e7f3      	b.n	14fe <xTaskResumeAll+0x9e>
				if( xYieldPending == pdTRUE )
    1516:	4b0d      	ldr	r3, [pc, #52]	; (154c <xTaskResumeAll+0xec>)
    1518:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    151a:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
    151c:	2b01      	cmp	r3, #1
    151e:	d1b4      	bne.n	148a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
    1520:	4b0e      	ldr	r3, [pc, #56]	; (155c <xTaskResumeAll+0xfc>)
    1522:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    1524:	3401      	adds	r4, #1
    1526:	e7b0      	b.n	148a <xTaskResumeAll+0x2a>
    1528:	20003b78 	.word	0x20003b78
    152c:	0000080d 	.word	0x0000080d
    1530:	20003b70 	.word	0x20003b70
    1534:	00000825 	.word	0x00000825
    1538:	20003b0c 	.word	0x20003b0c
    153c:	00000731 	.word	0x00000731
    1540:	20003b00 	.word	0x20003b00
    1544:	00000777 	.word	0x00000777
    1548:	20003b84 	.word	0x20003b84
    154c:	20003bf8 	.word	0x20003bf8
    1550:	20003bb4 	.word	0x20003bb4
    1554:	20003b74 	.word	0x20003b74
    1558:	0000133d 	.word	0x0000133d
    155c:	000007f5 	.word	0x000007f5

00001560 <prvIdleTask>:
{
    1560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1562:	46ce      	mov	lr, r9
    1564:	4647      	mov	r7, r8
    1566:	b580      	push	{r7, lr}
			vTaskSuspendAll();
    1568:	4b16      	ldr	r3, [pc, #88]	; (15c4 <prvIdleTask+0x64>)
    156a:	4698      	mov	r8, r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    156c:	4f16      	ldr	r7, [pc, #88]	; (15c8 <prvIdleTask+0x68>)
			( void ) xTaskResumeAll();
    156e:	4e17      	ldr	r6, [pc, #92]	; (15cc <prvIdleTask+0x6c>)
    1570:	e026      	b.n	15c0 <prvIdleTask+0x60>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1572:	4b17      	ldr	r3, [pc, #92]	; (15d0 <prvIdleTask+0x70>)
    1574:	681b      	ldr	r3, [r3, #0]
    1576:	2b01      	cmp	r3, #1
    1578:	d820      	bhi.n	15bc <prvIdleTask+0x5c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    157a:	682b      	ldr	r3, [r5, #0]
    157c:	2b00      	cmp	r3, #0
    157e:	d0f8      	beq.n	1572 <prvIdleTask+0x12>
			vTaskSuspendAll();
    1580:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1582:	683c      	ldr	r4, [r7, #0]
			( void ) xTaskResumeAll();
    1584:	47b0      	blx	r6
			if( xListIsEmpty == pdFALSE )
    1586:	2c00      	cmp	r4, #0
    1588:	d0f7      	beq.n	157a <prvIdleTask+0x1a>
				taskENTER_CRITICAL();
    158a:	4b12      	ldr	r3, [pc, #72]	; (15d4 <prvIdleTask+0x74>)
    158c:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    158e:	4b0e      	ldr	r3, [pc, #56]	; (15c8 <prvIdleTask+0x68>)
    1590:	68db      	ldr	r3, [r3, #12]
    1592:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    1594:	1d20      	adds	r0, r4, #4
    1596:	4b10      	ldr	r3, [pc, #64]	; (15d8 <prvIdleTask+0x78>)
    1598:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    159a:	4a10      	ldr	r2, [pc, #64]	; (15dc <prvIdleTask+0x7c>)
    159c:	6813      	ldr	r3, [r2, #0]
    159e:	3b01      	subs	r3, #1
    15a0:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
    15a2:	4a0f      	ldr	r2, [pc, #60]	; (15e0 <prvIdleTask+0x80>)
    15a4:	6813      	ldr	r3, [r2, #0]
    15a6:	3b01      	subs	r3, #1
    15a8:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
    15aa:	4b0e      	ldr	r3, [pc, #56]	; (15e4 <prvIdleTask+0x84>)
    15ac:	4798      	blx	r3
		vPortFreeAligned( pxTCB->pxStack );
    15ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
    15b0:	4b0d      	ldr	r3, [pc, #52]	; (15e8 <prvIdleTask+0x88>)
    15b2:	4699      	mov	r9, r3
    15b4:	4798      	blx	r3
		vPortFree( pxTCB );
    15b6:	0020      	movs	r0, r4
    15b8:	47c8      	blx	r9
    15ba:	e7de      	b.n	157a <prvIdleTask+0x1a>
				taskYIELD();
    15bc:	4b0b      	ldr	r3, [pc, #44]	; (15ec <prvIdleTask+0x8c>)
    15be:	4798      	blx	r3
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    15c0:	4d07      	ldr	r5, [pc, #28]	; (15e0 <prvIdleTask+0x80>)
    15c2:	e7da      	b.n	157a <prvIdleTask+0x1a>
    15c4:	0000130d 	.word	0x0000130d
    15c8:	20003be0 	.word	0x20003be0
    15cc:	00001461 	.word	0x00001461
    15d0:	20003b0c 	.word	0x20003b0c
    15d4:	0000080d 	.word	0x0000080d
    15d8:	00000777 	.word	0x00000777
    15dc:	20003b70 	.word	0x20003b70
    15e0:	20003b80 	.word	0x20003b80
    15e4:	00000825 	.word	0x00000825
    15e8:	000009ad 	.word	0x000009ad
    15ec:	000007f5 	.word	0x000007f5

000015f0 <vTaskSwitchContext>:
{
    15f0:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    15f2:	4b26      	ldr	r3, [pc, #152]	; (168c <vTaskSwitchContext+0x9c>)
    15f4:	681b      	ldr	r3, [r3, #0]
    15f6:	2b00      	cmp	r3, #0
    15f8:	d121      	bne.n	163e <vTaskSwitchContext+0x4e>
		xYieldPending = pdFALSE;
    15fa:	2200      	movs	r2, #0
    15fc:	4b24      	ldr	r3, [pc, #144]	; (1690 <vTaskSwitchContext+0xa0>)
    15fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1600:	4b24      	ldr	r3, [pc, #144]	; (1694 <vTaskSwitchContext+0xa4>)
    1602:	681a      	ldr	r2, [r3, #0]
    1604:	0093      	lsls	r3, r2, #2
    1606:	189b      	adds	r3, r3, r2
    1608:	009b      	lsls	r3, r3, #2
    160a:	4a23      	ldr	r2, [pc, #140]	; (1698 <vTaskSwitchContext+0xa8>)
    160c:	589b      	ldr	r3, [r3, r2]
    160e:	2b00      	cmp	r3, #0
    1610:	d119      	bne.n	1646 <vTaskSwitchContext+0x56>
    1612:	4b20      	ldr	r3, [pc, #128]	; (1694 <vTaskSwitchContext+0xa4>)
    1614:	681b      	ldr	r3, [r3, #0]
    1616:	2b00      	cmp	r3, #0
    1618:	d00f      	beq.n	163a <vTaskSwitchContext+0x4a>
    161a:	4a1e      	ldr	r2, [pc, #120]	; (1694 <vTaskSwitchContext+0xa4>)
    161c:	4c1e      	ldr	r4, [pc, #120]	; (1698 <vTaskSwitchContext+0xa8>)
    161e:	0010      	movs	r0, r2
    1620:	6813      	ldr	r3, [r2, #0]
    1622:	3b01      	subs	r3, #1
    1624:	6013      	str	r3, [r2, #0]
    1626:	6811      	ldr	r1, [r2, #0]
    1628:	008b      	lsls	r3, r1, #2
    162a:	185b      	adds	r3, r3, r1
    162c:	009b      	lsls	r3, r3, #2
    162e:	591b      	ldr	r3, [r3, r4]
    1630:	2b00      	cmp	r3, #0
    1632:	d108      	bne.n	1646 <vTaskSwitchContext+0x56>
    1634:	6803      	ldr	r3, [r0, #0]
    1636:	2b00      	cmp	r3, #0
    1638:	d1f2      	bne.n	1620 <vTaskSwitchContext+0x30>
    163a:	b672      	cpsid	i
    163c:	e7fe      	b.n	163c <vTaskSwitchContext+0x4c>
		xYieldPending = pdTRUE;
    163e:	2201      	movs	r2, #1
    1640:	4b13      	ldr	r3, [pc, #76]	; (1690 <vTaskSwitchContext+0xa0>)
    1642:	601a      	str	r2, [r3, #0]
}
    1644:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1646:	4b13      	ldr	r3, [pc, #76]	; (1694 <vTaskSwitchContext+0xa4>)
    1648:	681a      	ldr	r2, [r3, #0]
    164a:	4813      	ldr	r0, [pc, #76]	; (1698 <vTaskSwitchContext+0xa8>)
    164c:	0093      	lsls	r3, r2, #2
    164e:	1899      	adds	r1, r3, r2
    1650:	0089      	lsls	r1, r1, #2
    1652:	1841      	adds	r1, r0, r1
    1654:	684c      	ldr	r4, [r1, #4]
    1656:	6864      	ldr	r4, [r4, #4]
    1658:	604c      	str	r4, [r1, #4]
    165a:	189b      	adds	r3, r3, r2
    165c:	009b      	lsls	r3, r3, #2
    165e:	3308      	adds	r3, #8
    1660:	18c3      	adds	r3, r0, r3
    1662:	429c      	cmp	r4, r3
    1664:	d009      	beq.n	167a <vTaskSwitchContext+0x8a>
    1666:	0093      	lsls	r3, r2, #2
    1668:	189a      	adds	r2, r3, r2
    166a:	0092      	lsls	r2, r2, #2
    166c:	4b0a      	ldr	r3, [pc, #40]	; (1698 <vTaskSwitchContext+0xa8>)
    166e:	189a      	adds	r2, r3, r2
    1670:	6853      	ldr	r3, [r2, #4]
    1672:	68da      	ldr	r2, [r3, #12]
    1674:	4b09      	ldr	r3, [pc, #36]	; (169c <vTaskSwitchContext+0xac>)
    1676:	601a      	str	r2, [r3, #0]
}
    1678:	e7e4      	b.n	1644 <vTaskSwitchContext+0x54>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    167a:	6860      	ldr	r0, [r4, #4]
    167c:	0093      	lsls	r3, r2, #2
    167e:	189b      	adds	r3, r3, r2
    1680:	009b      	lsls	r3, r3, #2
    1682:	4905      	ldr	r1, [pc, #20]	; (1698 <vTaskSwitchContext+0xa8>)
    1684:	18cb      	adds	r3, r1, r3
    1686:	6058      	str	r0, [r3, #4]
    1688:	e7ed      	b.n	1666 <vTaskSwitchContext+0x76>
    168a:	46c0      	nop			; (mov r8, r8)
    168c:	20003b78 	.word	0x20003b78
    1690:	20003bf8 	.word	0x20003bf8
    1694:	20003b84 	.word	0x20003b84
    1698:	20003b0c 	.word	0x20003b0c
    169c:	20003b00 	.word	0x20003b00

000016a0 <vTaskPlaceOnEventList>:
{
    16a0:	b570      	push	{r4, r5, r6, lr}
    16a2:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    16a4:	2800      	cmp	r0, #0
    16a6:	d010      	beq.n	16ca <vTaskPlaceOnEventList+0x2a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    16a8:	4d0c      	ldr	r5, [pc, #48]	; (16dc <vTaskPlaceOnEventList+0x3c>)
    16aa:	6829      	ldr	r1, [r5, #0]
    16ac:	3118      	adds	r1, #24
    16ae:	4b0c      	ldr	r3, [pc, #48]	; (16e0 <vTaskPlaceOnEventList+0x40>)
    16b0:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    16b2:	6828      	ldr	r0, [r5, #0]
    16b4:	3004      	adds	r0, #4
    16b6:	4b0b      	ldr	r3, [pc, #44]	; (16e4 <vTaskPlaceOnEventList+0x44>)
    16b8:	4798      	blx	r3
		if( xTicksToWait == portMAX_DELAY )
    16ba:	1c63      	adds	r3, r4, #1
    16bc:	d007      	beq.n	16ce <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
    16be:	4b0a      	ldr	r3, [pc, #40]	; (16e8 <vTaskPlaceOnEventList+0x48>)
    16c0:	6818      	ldr	r0, [r3, #0]
    16c2:	1820      	adds	r0, r4, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    16c4:	4b09      	ldr	r3, [pc, #36]	; (16ec <vTaskPlaceOnEventList+0x4c>)
    16c6:	4798      	blx	r3
}
    16c8:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxEventList );
    16ca:	b672      	cpsid	i
    16cc:	e7fe      	b.n	16cc <vTaskPlaceOnEventList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    16ce:	4b03      	ldr	r3, [pc, #12]	; (16dc <vTaskPlaceOnEventList+0x3c>)
    16d0:	6819      	ldr	r1, [r3, #0]
    16d2:	3104      	adds	r1, #4
    16d4:	4806      	ldr	r0, [pc, #24]	; (16f0 <vTaskPlaceOnEventList+0x50>)
    16d6:	4b07      	ldr	r3, [pc, #28]	; (16f4 <vTaskPlaceOnEventList+0x54>)
    16d8:	4798      	blx	r3
    16da:	e7f5      	b.n	16c8 <vTaskPlaceOnEventList+0x28>
    16dc:	20003b00 	.word	0x20003b00
    16e0:	00000749 	.word	0x00000749
    16e4:	00000777 	.word	0x00000777
    16e8:	20003bf4 	.word	0x20003bf4
    16ec:	00001069 	.word	0x00001069
    16f0:	20003bcc 	.word	0x20003bcc
    16f4:	00000731 	.word	0x00000731

000016f8 <vTaskPlaceOnEventListRestricted>:
	{
    16f8:	b570      	push	{r4, r5, r6, lr}
    16fa:	000d      	movs	r5, r1
		configASSERT( pxEventList );
    16fc:	2800      	cmp	r0, #0
    16fe:	d101      	bne.n	1704 <vTaskPlaceOnEventListRestricted+0xc>
    1700:	b672      	cpsid	i
    1702:	e7fe      	b.n	1702 <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1704:	4c07      	ldr	r4, [pc, #28]	; (1724 <vTaskPlaceOnEventListRestricted+0x2c>)
    1706:	6821      	ldr	r1, [r4, #0]
    1708:	3118      	adds	r1, #24
    170a:	4b07      	ldr	r3, [pc, #28]	; (1728 <vTaskPlaceOnEventListRestricted+0x30>)
    170c:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    170e:	6820      	ldr	r0, [r4, #0]
    1710:	3004      	adds	r0, #4
    1712:	4b06      	ldr	r3, [pc, #24]	; (172c <vTaskPlaceOnEventListRestricted+0x34>)
    1714:	4798      	blx	r3
		xTimeToWake = xTickCount + xTicksToWait;
    1716:	4b06      	ldr	r3, [pc, #24]	; (1730 <vTaskPlaceOnEventListRestricted+0x38>)
    1718:	6818      	ldr	r0, [r3, #0]
    171a:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    171c:	4b05      	ldr	r3, [pc, #20]	; (1734 <vTaskPlaceOnEventListRestricted+0x3c>)
    171e:	4798      	blx	r3
	}
    1720:	bd70      	pop	{r4, r5, r6, pc}
    1722:	46c0      	nop			; (mov r8, r8)
    1724:	20003b00 	.word	0x20003b00
    1728:	00000731 	.word	0x00000731
    172c:	00000777 	.word	0x00000777
    1730:	20003bf4 	.word	0x20003bf4
    1734:	00001069 	.word	0x00001069

00001738 <xTaskRemoveFromEventList>:
{
    1738:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    173a:	68c3      	ldr	r3, [r0, #12]
    173c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    173e:	2c00      	cmp	r4, #0
    1740:	d027      	beq.n	1792 <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    1742:	0025      	movs	r5, r4
    1744:	3518      	adds	r5, #24
    1746:	0028      	movs	r0, r5
    1748:	4b15      	ldr	r3, [pc, #84]	; (17a0 <xTaskRemoveFromEventList+0x68>)
    174a:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    174c:	4b15      	ldr	r3, [pc, #84]	; (17a4 <xTaskRemoveFromEventList+0x6c>)
    174e:	681b      	ldr	r3, [r3, #0]
    1750:	2b00      	cmp	r3, #0
    1752:	d120      	bne.n	1796 <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    1754:	1d25      	adds	r5, r4, #4
    1756:	0028      	movs	r0, r5
    1758:	4b11      	ldr	r3, [pc, #68]	; (17a0 <xTaskRemoveFromEventList+0x68>)
    175a:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    175c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    175e:	4a12      	ldr	r2, [pc, #72]	; (17a8 <xTaskRemoveFromEventList+0x70>)
    1760:	6812      	ldr	r2, [r2, #0]
    1762:	4293      	cmp	r3, r2
    1764:	d901      	bls.n	176a <xTaskRemoveFromEventList+0x32>
    1766:	4a10      	ldr	r2, [pc, #64]	; (17a8 <xTaskRemoveFromEventList+0x70>)
    1768:	6013      	str	r3, [r2, #0]
    176a:	0098      	lsls	r0, r3, #2
    176c:	18c0      	adds	r0, r0, r3
    176e:	0080      	lsls	r0, r0, #2
    1770:	4b0e      	ldr	r3, [pc, #56]	; (17ac <xTaskRemoveFromEventList+0x74>)
    1772:	1818      	adds	r0, r3, r0
    1774:	0029      	movs	r1, r5
    1776:	4b0e      	ldr	r3, [pc, #56]	; (17b0 <xTaskRemoveFromEventList+0x78>)
    1778:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    177a:	4b0e      	ldr	r3, [pc, #56]	; (17b4 <xTaskRemoveFromEventList+0x7c>)
    177c:	681b      	ldr	r3, [r3, #0]
    177e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    1782:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1784:	429a      	cmp	r2, r3
    1786:	d903      	bls.n	1790 <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
    1788:	2201      	movs	r2, #1
    178a:	4b0b      	ldr	r3, [pc, #44]	; (17b8 <xTaskRemoveFromEventList+0x80>)
    178c:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    178e:	3001      	adds	r0, #1
}
    1790:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    1792:	b672      	cpsid	i
    1794:	e7fe      	b.n	1794 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    1796:	0029      	movs	r1, r5
    1798:	4808      	ldr	r0, [pc, #32]	; (17bc <xTaskRemoveFromEventList+0x84>)
    179a:	4b05      	ldr	r3, [pc, #20]	; (17b0 <xTaskRemoveFromEventList+0x78>)
    179c:	4798      	blx	r3
    179e:	e7ec      	b.n	177a <xTaskRemoveFromEventList+0x42>
    17a0:	00000777 	.word	0x00000777
    17a4:	20003b78 	.word	0x20003b78
    17a8:	20003b84 	.word	0x20003b84
    17ac:	20003b0c 	.word	0x20003b0c
    17b0:	00000731 	.word	0x00000731
    17b4:	20003b00 	.word	0x20003b00
    17b8:	20003bf8 	.word	0x20003bf8
    17bc:	20003bb4 	.word	0x20003bb4

000017c0 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
    17c0:	2800      	cmp	r0, #0
    17c2:	d006      	beq.n	17d2 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    17c4:	4b04      	ldr	r3, [pc, #16]	; (17d8 <vTaskSetTimeOutState+0x18>)
    17c6:	681b      	ldr	r3, [r3, #0]
    17c8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    17ca:	4b04      	ldr	r3, [pc, #16]	; (17dc <vTaskSetTimeOutState+0x1c>)
    17cc:	681b      	ldr	r3, [r3, #0]
    17ce:	6043      	str	r3, [r0, #4]
}
    17d0:	4770      	bx	lr
	configASSERT( pxTimeOut );
    17d2:	b672      	cpsid	i
    17d4:	e7fe      	b.n	17d4 <vTaskSetTimeOutState+0x14>
    17d6:	46c0      	nop			; (mov r8, r8)
    17d8:	20003bb0 	.word	0x20003bb0
    17dc:	20003bf4 	.word	0x20003bf4

000017e0 <xTaskCheckForTimeOut>:
{
    17e0:	b570      	push	{r4, r5, r6, lr}
    17e2:	0004      	movs	r4, r0
    17e4:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
    17e6:	2800      	cmp	r0, #0
    17e8:	d01a      	beq.n	1820 <xTaskCheckForTimeOut+0x40>
	configASSERT( pxTicksToWait );
    17ea:	2900      	cmp	r1, #0
    17ec:	d01a      	beq.n	1824 <xTaskCheckForTimeOut+0x44>
	taskENTER_CRITICAL();
    17ee:	4b13      	ldr	r3, [pc, #76]	; (183c <xTaskCheckForTimeOut+0x5c>)
    17f0:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    17f2:	4b13      	ldr	r3, [pc, #76]	; (1840 <xTaskCheckForTimeOut+0x60>)
    17f4:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
    17f6:	6833      	ldr	r3, [r6, #0]
    17f8:	1c59      	adds	r1, r3, #1
    17fa:	d01d      	beq.n	1838 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    17fc:	4911      	ldr	r1, [pc, #68]	; (1844 <xTaskCheckForTimeOut+0x64>)
    17fe:	6809      	ldr	r1, [r1, #0]
    1800:	6820      	ldr	r0, [r4, #0]
    1802:	4288      	cmp	r0, r1
    1804:	d003      	beq.n	180e <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    1806:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1808:	6861      	ldr	r1, [r4, #4]
    180a:	428a      	cmp	r2, r1
    180c:	d204      	bcs.n	1818 <xTaskCheckForTimeOut+0x38>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    180e:	6861      	ldr	r1, [r4, #4]
    1810:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
    1812:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    1814:	4283      	cmp	r3, r0
    1816:	d807      	bhi.n	1828 <xTaskCheckForTimeOut+0x48>
	taskEXIT_CRITICAL();
    1818:	4b0b      	ldr	r3, [pc, #44]	; (1848 <xTaskCheckForTimeOut+0x68>)
    181a:	4798      	blx	r3
}
    181c:	0028      	movs	r0, r5
    181e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    1820:	b672      	cpsid	i
    1822:	e7fe      	b.n	1822 <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    1824:	b672      	cpsid	i
    1826:	e7fe      	b.n	1826 <xTaskCheckForTimeOut+0x46>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    1828:	1a9b      	subs	r3, r3, r2
    182a:	185b      	adds	r3, r3, r1
    182c:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
    182e:	0020      	movs	r0, r4
    1830:	4b06      	ldr	r3, [pc, #24]	; (184c <xTaskCheckForTimeOut+0x6c>)
    1832:	4798      	blx	r3
			xReturn = pdFALSE;
    1834:	2500      	movs	r5, #0
    1836:	e7ef      	b.n	1818 <xTaskCheckForTimeOut+0x38>
				xReturn = pdFALSE;
    1838:	2500      	movs	r5, #0
    183a:	e7ed      	b.n	1818 <xTaskCheckForTimeOut+0x38>
    183c:	0000080d 	.word	0x0000080d
    1840:	20003bf4 	.word	0x20003bf4
    1844:	20003bb0 	.word	0x20003bb0
    1848:	00000825 	.word	0x00000825
    184c:	000017c1 	.word	0x000017c1

00001850 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    1850:	2201      	movs	r2, #1
    1852:	4b01      	ldr	r3, [pc, #4]	; (1858 <vTaskMissedYield+0x8>)
    1854:	601a      	str	r2, [r3, #0]
}
    1856:	4770      	bx	lr
    1858:	20003bf8 	.word	0x20003bf8

0000185c <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    185c:	4b01      	ldr	r3, [pc, #4]	; (1864 <xTaskGetCurrentTaskHandle+0x8>)
    185e:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    1860:	4770      	bx	lr
    1862:	46c0      	nop			; (mov r8, r8)
    1864:	20003b00 	.word	0x20003b00

00001868 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1868:	4b05      	ldr	r3, [pc, #20]	; (1880 <xTaskGetSchedulerState+0x18>)
    186a:	681b      	ldr	r3, [r3, #0]
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    186c:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    186e:	2b00      	cmp	r3, #0
    1870:	d004      	beq.n	187c <xTaskGetSchedulerState+0x14>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1872:	4b04      	ldr	r3, [pc, #16]	; (1884 <xTaskGetSchedulerState+0x1c>)
    1874:	6818      	ldr	r0, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1876:	4243      	negs	r3, r0
    1878:	4158      	adcs	r0, r3
    187a:	0040      	lsls	r0, r0, #1
			}
		}

		return xReturn;
	}
    187c:	4770      	bx	lr
    187e:	46c0      	nop			; (mov r8, r8)
    1880:	20003bc8 	.word	0x20003bc8
    1884:	20003b78 	.word	0x20003b78

00001888 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    1888:	b570      	push	{r4, r5, r6, lr}
    188a:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    188c:	d01a      	beq.n	18c4 <vTaskPriorityInherit+0x3c>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    188e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    1890:	4b18      	ldr	r3, [pc, #96]	; (18f4 <vTaskPriorityInherit+0x6c>)
    1892:	681b      	ldr	r3, [r3, #0]
    1894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1896:	429a      	cmp	r2, r3
    1898:	d214      	bcs.n	18c4 <vTaskPriorityInherit+0x3c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    189a:	6983      	ldr	r3, [r0, #24]
    189c:	2b00      	cmp	r3, #0
    189e:	db05      	blt.n	18ac <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    18a0:	4b14      	ldr	r3, [pc, #80]	; (18f4 <vTaskPriorityInherit+0x6c>)
    18a2:	681b      	ldr	r3, [r3, #0]
    18a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    18a6:	2305      	movs	r3, #5
    18a8:	1a5b      	subs	r3, r3, r1
    18aa:	6183      	str	r3, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    18ac:	0093      	lsls	r3, r2, #2
    18ae:	189b      	adds	r3, r3, r2
    18b0:	009b      	lsls	r3, r3, #2
    18b2:	4a11      	ldr	r2, [pc, #68]	; (18f8 <vTaskPriorityInherit+0x70>)
    18b4:	18d3      	adds	r3, r2, r3
    18b6:	6962      	ldr	r2, [r4, #20]
    18b8:	429a      	cmp	r2, r3
    18ba:	d004      	beq.n	18c6 <vTaskPriorityInherit+0x3e>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    18bc:	4b0d      	ldr	r3, [pc, #52]	; (18f4 <vTaskPriorityInherit+0x6c>)
    18be:	681b      	ldr	r3, [r3, #0]
    18c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    18c2:	62e3      	str	r3, [r4, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    18c4:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    18c6:	1d25      	adds	r5, r4, #4
    18c8:	0028      	movs	r0, r5
    18ca:	4b0c      	ldr	r3, [pc, #48]	; (18fc <vTaskPriorityInherit+0x74>)
    18cc:	4798      	blx	r3
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    18ce:	4b09      	ldr	r3, [pc, #36]	; (18f4 <vTaskPriorityInherit+0x6c>)
    18d0:	681b      	ldr	r3, [r3, #0]
    18d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    18d4:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    18d6:	4a0a      	ldr	r2, [pc, #40]	; (1900 <vTaskPriorityInherit+0x78>)
    18d8:	6812      	ldr	r2, [r2, #0]
    18da:	4293      	cmp	r3, r2
    18dc:	d901      	bls.n	18e2 <vTaskPriorityInherit+0x5a>
    18de:	4a08      	ldr	r2, [pc, #32]	; (1900 <vTaskPriorityInherit+0x78>)
    18e0:	6013      	str	r3, [r2, #0]
    18e2:	0098      	lsls	r0, r3, #2
    18e4:	18c0      	adds	r0, r0, r3
    18e6:	0080      	lsls	r0, r0, #2
    18e8:	4b03      	ldr	r3, [pc, #12]	; (18f8 <vTaskPriorityInherit+0x70>)
    18ea:	1818      	adds	r0, r3, r0
    18ec:	0029      	movs	r1, r5
    18ee:	4b05      	ldr	r3, [pc, #20]	; (1904 <vTaskPriorityInherit+0x7c>)
    18f0:	4798      	blx	r3
    18f2:	e7e7      	b.n	18c4 <vTaskPriorityInherit+0x3c>
    18f4:	20003b00 	.word	0x20003b00
    18f8:	20003b0c 	.word	0x20003b0c
    18fc:	00000777 	.word	0x00000777
    1900:	20003b84 	.word	0x20003b84
    1904:	00000731 	.word	0x00000731

00001908 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    1908:	b570      	push	{r4, r5, r6, lr}
    190a:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    190c:	d01d      	beq.n	194a <vTaskPriorityDisinherit+0x42>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    190e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    1910:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    1912:	4293      	cmp	r3, r2
    1914:	d019      	beq.n	194a <vTaskPriorityDisinherit+0x42>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1916:	1d05      	adds	r5, r0, #4
    1918:	0028      	movs	r0, r5
    191a:	4b0c      	ldr	r3, [pc, #48]	; (194c <vTaskPriorityDisinherit+0x44>)
    191c:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    191e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    1920:	62e0      	str	r0, [r4, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1922:	69a3      	ldr	r3, [r4, #24]
    1924:	2b00      	cmp	r3, #0
    1926:	db02      	blt.n	192e <vTaskPriorityDisinherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1928:	2305      	movs	r3, #5
    192a:	1a1b      	subs	r3, r3, r0
    192c:	61a3      	str	r3, [r4, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
    192e:	4b08      	ldr	r3, [pc, #32]	; (1950 <vTaskPriorityDisinherit+0x48>)
    1930:	681b      	ldr	r3, [r3, #0]
    1932:	4298      	cmp	r0, r3
    1934:	d901      	bls.n	193a <vTaskPriorityDisinherit+0x32>
    1936:	4b06      	ldr	r3, [pc, #24]	; (1950 <vTaskPriorityDisinherit+0x48>)
    1938:	6018      	str	r0, [r3, #0]
    193a:	0083      	lsls	r3, r0, #2
    193c:	1818      	adds	r0, r3, r0
    193e:	0080      	lsls	r0, r0, #2
    1940:	4b04      	ldr	r3, [pc, #16]	; (1954 <vTaskPriorityDisinherit+0x4c>)
    1942:	1818      	adds	r0, r3, r0
    1944:	0029      	movs	r1, r5
    1946:	4b04      	ldr	r3, [pc, #16]	; (1958 <vTaskPriorityDisinherit+0x50>)
    1948:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    194a:	bd70      	pop	{r4, r5, r6, pc}
    194c:	00000777 	.word	0x00000777
    1950:	20003b84 	.word	0x20003b84
    1954:	20003b0c 	.word	0x20003b0c
    1958:	00000731 	.word	0x00000731

0000195c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    195c:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    195e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1960:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    1962:	4291      	cmp	r1, r2
    1964:	d80b      	bhi.n	197e <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    1966:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    1968:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    196a:	6983      	ldr	r3, [r0, #24]
    196c:	429a      	cmp	r2, r3
    196e:	d211      	bcs.n	1994 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    1970:	1d01      	adds	r1, r0, #4
    1972:	4b09      	ldr	r3, [pc, #36]	; (1998 <prvInsertTimerInActiveList+0x3c>)
    1974:	6818      	ldr	r0, [r3, #0]
    1976:	4b09      	ldr	r3, [pc, #36]	; (199c <prvInsertTimerInActiveList+0x40>)
    1978:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    197a:	2400      	movs	r4, #0
    197c:	e00a      	b.n	1994 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    197e:	429a      	cmp	r2, r3
    1980:	d202      	bcs.n	1988 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    1982:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    1984:	4299      	cmp	r1, r3
    1986:	d205      	bcs.n	1994 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1988:	1d01      	adds	r1, r0, #4
    198a:	4b05      	ldr	r3, [pc, #20]	; (19a0 <prvInsertTimerInActiveList+0x44>)
    198c:	6818      	ldr	r0, [r3, #0]
    198e:	4b03      	ldr	r3, [pc, #12]	; (199c <prvInsertTimerInActiveList+0x40>)
    1990:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    1992:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    1994:	0020      	movs	r0, r4
    1996:	bd10      	pop	{r4, pc}
    1998:	20003c00 	.word	0x20003c00
    199c:	00000749 	.word	0x00000749
    19a0:	20003bfc 	.word	0x20003bfc

000019a4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    19a4:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    19a6:	4b10      	ldr	r3, [pc, #64]	; (19e8 <prvCheckForValidListAndQueue+0x44>)
    19a8:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    19aa:	4b10      	ldr	r3, [pc, #64]	; (19ec <prvCheckForValidListAndQueue+0x48>)
    19ac:	681b      	ldr	r3, [r3, #0]
    19ae:	2b00      	cmp	r3, #0
    19b0:	d002      	beq.n	19b8 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    19b2:	4b0f      	ldr	r3, [pc, #60]	; (19f0 <prvCheckForValidListAndQueue+0x4c>)
    19b4:	4798      	blx	r3
}
    19b6:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    19b8:	4d0e      	ldr	r5, [pc, #56]	; (19f4 <prvCheckForValidListAndQueue+0x50>)
    19ba:	0028      	movs	r0, r5
    19bc:	4e0e      	ldr	r6, [pc, #56]	; (19f8 <prvCheckForValidListAndQueue+0x54>)
    19be:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    19c0:	4c0e      	ldr	r4, [pc, #56]	; (19fc <prvCheckForValidListAndQueue+0x58>)
    19c2:	0020      	movs	r0, r4
    19c4:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    19c6:	4b0e      	ldr	r3, [pc, #56]	; (1a00 <prvCheckForValidListAndQueue+0x5c>)
    19c8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    19ca:	4b0e      	ldr	r3, [pc, #56]	; (1a04 <prvCheckForValidListAndQueue+0x60>)
    19cc:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    19ce:	2200      	movs	r2, #0
    19d0:	210c      	movs	r1, #12
    19d2:	2002      	movs	r0, #2
    19d4:	4b0c      	ldr	r3, [pc, #48]	; (1a08 <prvCheckForValidListAndQueue+0x64>)
    19d6:	4798      	blx	r3
			configASSERT( xTimerQueue );
    19d8:	2800      	cmp	r0, #0
    19da:	d002      	beq.n	19e2 <prvCheckForValidListAndQueue+0x3e>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    19dc:	4b03      	ldr	r3, [pc, #12]	; (19ec <prvCheckForValidListAndQueue+0x48>)
    19de:	6018      	str	r0, [r3, #0]
    19e0:	e7e7      	b.n	19b2 <prvCheckForValidListAndQueue+0xe>
			configASSERT( xTimerQueue );
    19e2:	b672      	cpsid	i
    19e4:	e7fe      	b.n	19e4 <prvCheckForValidListAndQueue+0x40>
    19e6:	46c0      	nop			; (mov r8, r8)
    19e8:	0000080d 	.word	0x0000080d
    19ec:	20003c30 	.word	0x20003c30
    19f0:	00000825 	.word	0x00000825
    19f4:	20003c04 	.word	0x20003c04
    19f8:	00000715 	.word	0x00000715
    19fc:	20003c18 	.word	0x20003c18
    1a00:	20003bfc 	.word	0x20003bfc
    1a04:	20003c00 	.word	0x20003c00
    1a08:	00000bd9 	.word	0x00000bd9

00001a0c <xTimerCreateTimerTask>:
{
    1a0c:	b510      	push	{r4, lr}
    1a0e:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
    1a10:	4b0b      	ldr	r3, [pc, #44]	; (1a40 <xTimerCreateTimerTask+0x34>)
    1a12:	4798      	blx	r3
	if( xTimerQueue != NULL )
    1a14:	4b0b      	ldr	r3, [pc, #44]	; (1a44 <xTimerCreateTimerTask+0x38>)
    1a16:	681b      	ldr	r3, [r3, #0]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d00f      	beq.n	1a3c <xTimerCreateTimerTask+0x30>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    1a1c:	2300      	movs	r3, #0
    1a1e:	9303      	str	r3, [sp, #12]
    1a20:	9302      	str	r3, [sp, #8]
    1a22:	9301      	str	r3, [sp, #4]
    1a24:	3302      	adds	r3, #2
    1a26:	9300      	str	r3, [sp, #0]
    1a28:	2300      	movs	r3, #0
    1a2a:	2250      	movs	r2, #80	; 0x50
    1a2c:	4906      	ldr	r1, [pc, #24]	; (1a48 <xTimerCreateTimerTask+0x3c>)
    1a2e:	4807      	ldr	r0, [pc, #28]	; (1a4c <xTimerCreateTimerTask+0x40>)
    1a30:	4c07      	ldr	r4, [pc, #28]	; (1a50 <xTimerCreateTimerTask+0x44>)
    1a32:	47a0      	blx	r4
	configASSERT( xReturn );
    1a34:	2800      	cmp	r0, #0
    1a36:	d001      	beq.n	1a3c <xTimerCreateTimerTask+0x30>
}
    1a38:	b004      	add	sp, #16
    1a3a:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    1a3c:	b672      	cpsid	i
    1a3e:	e7fe      	b.n	1a3e <xTimerCreateTimerTask+0x32>
    1a40:	000019a5 	.word	0x000019a5
    1a44:	20003c30 	.word	0x20003c30
    1a48:	00001f30 	.word	0x00001f30
    1a4c:	00001b71 	.word	0x00001b71
    1a50:	000010c1 	.word	0x000010c1

00001a54 <xTimerGenericCommand>:
{
    1a54:	b530      	push	{r4, r5, lr}
    1a56:	b085      	sub	sp, #20
    1a58:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
    1a5a:	4b13      	ldr	r3, [pc, #76]	; (1aa8 <xTimerGenericCommand+0x54>)
    1a5c:	681c      	ldr	r4, [r3, #0]
    1a5e:	2c00      	cmp	r4, #0
    1a60:	d020      	beq.n	1aa4 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
    1a62:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1a64:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    1a66:	9003      	str	r0, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1a68:	2905      	cmp	r1, #5
    1a6a:	dc13      	bgt.n	1a94 <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1a6c:	4b0f      	ldr	r3, [pc, #60]	; (1aac <xTimerGenericCommand+0x58>)
    1a6e:	4798      	blx	r3
    1a70:	2802      	cmp	r0, #2
    1a72:	d007      	beq.n	1a84 <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1a74:	4b0c      	ldr	r3, [pc, #48]	; (1aa8 <xTimerGenericCommand+0x54>)
    1a76:	6818      	ldr	r0, [r3, #0]
    1a78:	2300      	movs	r3, #0
    1a7a:	2200      	movs	r2, #0
    1a7c:	a901      	add	r1, sp, #4
    1a7e:	4c0c      	ldr	r4, [pc, #48]	; (1ab0 <xTimerGenericCommand+0x5c>)
    1a80:	47a0      	blx	r4
    1a82:	e00d      	b.n	1aa0 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1a84:	4b08      	ldr	r3, [pc, #32]	; (1aa8 <xTimerGenericCommand+0x54>)
    1a86:	6818      	ldr	r0, [r3, #0]
    1a88:	2300      	movs	r3, #0
    1a8a:	9a08      	ldr	r2, [sp, #32]
    1a8c:	a901      	add	r1, sp, #4
    1a8e:	4c08      	ldr	r4, [pc, #32]	; (1ab0 <xTimerGenericCommand+0x5c>)
    1a90:	47a0      	blx	r4
    1a92:	e005      	b.n	1aa0 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1a94:	2300      	movs	r3, #0
    1a96:	002a      	movs	r2, r5
    1a98:	a901      	add	r1, sp, #4
    1a9a:	0020      	movs	r0, r4
    1a9c:	4c05      	ldr	r4, [pc, #20]	; (1ab4 <xTimerGenericCommand+0x60>)
    1a9e:	47a0      	blx	r4
}
    1aa0:	b005      	add	sp, #20
    1aa2:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    1aa4:	2000      	movs	r0, #0
	return xReturn;
    1aa6:	e7fb      	b.n	1aa0 <xTimerGenericCommand+0x4c>
    1aa8:	20003c30 	.word	0x20003c30
    1aac:	00001869 	.word	0x00001869
    1ab0:	00000c29 	.word	0x00000c29
    1ab4:	00000d9d 	.word	0x00000d9d

00001ab8 <prvSampleTimeNow>:
{
    1ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aba:	46d6      	mov	lr, sl
    1abc:	464f      	mov	r7, r9
    1abe:	4646      	mov	r6, r8
    1ac0:	b5c0      	push	{r6, r7, lr}
    1ac2:	b082      	sub	sp, #8
    1ac4:	4681      	mov	r9, r0
	xTimeNow = xTaskGetTickCount();
    1ac6:	4b23      	ldr	r3, [pc, #140]	; (1b54 <prvSampleTimeNow+0x9c>)
    1ac8:	4798      	blx	r3
    1aca:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
    1acc:	4b22      	ldr	r3, [pc, #136]	; (1b58 <prvSampleTimeNow+0xa0>)
    1ace:	681b      	ldr	r3, [r3, #0]
    1ad0:	4298      	cmp	r0, r3
    1ad2:	d317      	bcc.n	1b04 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    1ad4:	2300      	movs	r3, #0
    1ad6:	464a      	mov	r2, r9
    1ad8:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    1ada:	4b1f      	ldr	r3, [pc, #124]	; (1b58 <prvSampleTimeNow+0xa0>)
    1adc:	4642      	mov	r2, r8
    1ade:	601a      	str	r2, [r3, #0]
}
    1ae0:	4640      	mov	r0, r8
    1ae2:	b002      	add	sp, #8
    1ae4:	bc1c      	pop	{r2, r3, r4}
    1ae6:	4690      	mov	r8, r2
    1ae8:	4699      	mov	r9, r3
    1aea:	46a2      	mov	sl, r4
    1aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1aee:	2300      	movs	r3, #0
    1af0:	9300      	str	r3, [sp, #0]
    1af2:	4652      	mov	r2, sl
    1af4:	2100      	movs	r1, #0
    1af6:	0020      	movs	r0, r4
    1af8:	4c18      	ldr	r4, [pc, #96]	; (1b5c <prvSampleTimeNow+0xa4>)
    1afa:	47a0      	blx	r4
				configASSERT( xResult );
    1afc:	2800      	cmp	r0, #0
    1afe:	d103      	bne.n	1b08 <prvSampleTimeNow+0x50>
    1b00:	b672      	cpsid	i
    1b02:	e7fe      	b.n	1b02 <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1b04:	4e16      	ldr	r6, [pc, #88]	; (1b60 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1b06:	4f17      	ldr	r7, [pc, #92]	; (1b64 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1b08:	6833      	ldr	r3, [r6, #0]
    1b0a:	681a      	ldr	r2, [r3, #0]
    1b0c:	2a00      	cmp	r2, #0
    1b0e:	d018      	beq.n	1b42 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1b10:	68db      	ldr	r3, [r3, #12]
    1b12:	681a      	ldr	r2, [r3, #0]
    1b14:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    1b16:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1b18:	1d25      	adds	r5, r4, #4
    1b1a:	0028      	movs	r0, r5
    1b1c:	47b8      	blx	r7
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1b1e:	0020      	movs	r0, r4
    1b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1b22:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    1b24:	69e3      	ldr	r3, [r4, #28]
    1b26:	2b01      	cmp	r3, #1
    1b28:	d1ee      	bne.n	1b08 <prvSampleTimeNow+0x50>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1b2a:	69a3      	ldr	r3, [r4, #24]
    1b2c:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
    1b2e:	459a      	cmp	sl, r3
    1b30:	d2dd      	bcs.n	1aee <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1b32:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1b34:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1b36:	4b0a      	ldr	r3, [pc, #40]	; (1b60 <prvSampleTimeNow+0xa8>)
    1b38:	6818      	ldr	r0, [r3, #0]
    1b3a:	0029      	movs	r1, r5
    1b3c:	4b0a      	ldr	r3, [pc, #40]	; (1b68 <prvSampleTimeNow+0xb0>)
    1b3e:	4798      	blx	r3
    1b40:	e7e2      	b.n	1b08 <prvSampleTimeNow+0x50>
	pxCurrentTimerList = pxOverflowTimerList;
    1b42:	4a0a      	ldr	r2, [pc, #40]	; (1b6c <prvSampleTimeNow+0xb4>)
    1b44:	4906      	ldr	r1, [pc, #24]	; (1b60 <prvSampleTimeNow+0xa8>)
    1b46:	6810      	ldr	r0, [r2, #0]
    1b48:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    1b4a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    1b4c:	2301      	movs	r3, #1
    1b4e:	464a      	mov	r2, r9
    1b50:	6013      	str	r3, [r2, #0]
    1b52:	e7c2      	b.n	1ada <prvSampleTimeNow+0x22>
    1b54:	0000131d 	.word	0x0000131d
    1b58:	20003c2c 	.word	0x20003c2c
    1b5c:	00001a55 	.word	0x00001a55
    1b60:	20003bfc 	.word	0x20003bfc
    1b64:	00000777 	.word	0x00000777
    1b68:	00000749 	.word	0x00000749
    1b6c:	20003c00 	.word	0x20003c00

00001b70 <prvTimerTask>:
{
    1b70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b72:	b089      	sub	sp, #36	; 0x24
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1b74:	4f50      	ldr	r7, [pc, #320]	; (1cb8 <prvTimerTask+0x148>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    1b76:	4b51      	ldr	r3, [pc, #324]	; (1cbc <prvTimerTask+0x14c>)
    1b78:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    1b7a:	681a      	ldr	r2, [r3, #0]
    1b7c:	2a00      	cmp	r2, #0
    1b7e:	d100      	bne.n	1b82 <prvTimerTask+0x12>
    1b80:	e08c      	b.n	1c9c <prvTimerTask+0x12c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1b82:	68db      	ldr	r3, [r3, #12]
    1b84:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
    1b86:	4b4e      	ldr	r3, [pc, #312]	; (1cc0 <prvTimerTask+0x150>)
    1b88:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1b8a:	a805      	add	r0, sp, #20
    1b8c:	4b4d      	ldr	r3, [pc, #308]	; (1cc4 <prvTimerTask+0x154>)
    1b8e:	4798      	blx	r3
    1b90:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
    1b92:	9b05      	ldr	r3, [sp, #20]
    1b94:	2b00      	cmp	r3, #0
    1b96:	d000      	beq.n	1b9a <prvTimerTask+0x2a>
    1b98:	e08b      	b.n	1cb2 <prvTimerTask+0x142>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    1b9a:	42a8      	cmp	r0, r5
    1b9c:	d225      	bcs.n	1bea <prvTimerTask+0x7a>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    1b9e:	1b29      	subs	r1, r5, r4
    1ba0:	4b49      	ldr	r3, [pc, #292]	; (1cc8 <prvTimerTask+0x158>)
    1ba2:	6818      	ldr	r0, [r3, #0]
    1ba4:	4b49      	ldr	r3, [pc, #292]	; (1ccc <prvTimerTask+0x15c>)
    1ba6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    1ba8:	4b49      	ldr	r3, [pc, #292]	; (1cd0 <prvTimerTask+0x160>)
    1baa:	4798      	blx	r3
    1bac:	2800      	cmp	r0, #0
    1bae:	d040      	beq.n	1c32 <prvTimerTask+0xc2>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    1bb0:	4d45      	ldr	r5, [pc, #276]	; (1cc8 <prvTimerTask+0x158>)
    1bb2:	4c48      	ldr	r4, [pc, #288]	; (1cd4 <prvTimerTask+0x164>)
    1bb4:	2300      	movs	r3, #0
    1bb6:	2200      	movs	r2, #0
    1bb8:	a905      	add	r1, sp, #20
    1bba:	6828      	ldr	r0, [r5, #0]
    1bbc:	47a0      	blx	r4
    1bbe:	2800      	cmp	r0, #0
    1bc0:	d0d9      	beq.n	1b76 <prvTimerTask+0x6>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    1bc2:	9b05      	ldr	r3, [sp, #20]
    1bc4:	9303      	str	r3, [sp, #12]
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	dbf4      	blt.n	1bb4 <prvTimerTask+0x44>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    1bca:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    1bcc:	6973      	ldr	r3, [r6, #20]
    1bce:	2b00      	cmp	r3, #0
    1bd0:	d001      	beq.n	1bd6 <prvTimerTask+0x66>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1bd2:	1d30      	adds	r0, r6, #4
    1bd4:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1bd6:	a804      	add	r0, sp, #16
    1bd8:	4b3a      	ldr	r3, [pc, #232]	; (1cc4 <prvTimerTask+0x154>)
    1bda:	4798      	blx	r3
			switch( xMessage.xMessageID )
    1bdc:	9b05      	ldr	r3, [sp, #20]
    1bde:	2b09      	cmp	r3, #9
    1be0:	d8e8      	bhi.n	1bb4 <prvTimerTask+0x44>
    1be2:	009b      	lsls	r3, r3, #2
    1be4:	4a3c      	ldr	r2, [pc, #240]	; (1cd8 <prvTimerTask+0x168>)
    1be6:	58d3      	ldr	r3, [r2, r3]
    1be8:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
    1bea:	4b39      	ldr	r3, [pc, #228]	; (1cd0 <prvTimerTask+0x160>)
    1bec:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    1bee:	4b33      	ldr	r3, [pc, #204]	; (1cbc <prvTimerTask+0x14c>)
    1bf0:	681b      	ldr	r3, [r3, #0]
    1bf2:	68db      	ldr	r3, [r3, #12]
    1bf4:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1bf6:	1d30      	adds	r0, r6, #4
    1bf8:	4b2f      	ldr	r3, [pc, #188]	; (1cb8 <prvTimerTask+0x148>)
    1bfa:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    1bfc:	69f3      	ldr	r3, [r6, #28]
    1bfe:	2b01      	cmp	r3, #1
    1c00:	d003      	beq.n	1c0a <prvTimerTask+0x9a>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1c02:	6a73      	ldr	r3, [r6, #36]	; 0x24
    1c04:	0030      	movs	r0, r6
    1c06:	4798      	blx	r3
    1c08:	e7d2      	b.n	1bb0 <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    1c0a:	69b3      	ldr	r3, [r6, #24]
    1c0c:	18e9      	adds	r1, r5, r3
    1c0e:	002b      	movs	r3, r5
    1c10:	0022      	movs	r2, r4
    1c12:	0030      	movs	r0, r6
    1c14:	4c31      	ldr	r4, [pc, #196]	; (1cdc <prvTimerTask+0x16c>)
    1c16:	47a0      	blx	r4
    1c18:	2801      	cmp	r0, #1
    1c1a:	d1f2      	bne.n	1c02 <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1c1c:	2300      	movs	r3, #0
    1c1e:	9300      	str	r3, [sp, #0]
    1c20:	002a      	movs	r2, r5
    1c22:	2100      	movs	r1, #0
    1c24:	0030      	movs	r0, r6
    1c26:	4c2e      	ldr	r4, [pc, #184]	; (1ce0 <prvTimerTask+0x170>)
    1c28:	47a0      	blx	r4
			configASSERT( xResult );
    1c2a:	2800      	cmp	r0, #0
    1c2c:	d1e9      	bne.n	1c02 <prvTimerTask+0x92>
    1c2e:	b672      	cpsid	i
    1c30:	e7fe      	b.n	1c30 <prvTimerTask+0xc0>
					portYIELD_WITHIN_API();
    1c32:	4b2c      	ldr	r3, [pc, #176]	; (1ce4 <prvTimerTask+0x174>)
    1c34:	4798      	blx	r3
    1c36:	e7bb      	b.n	1bb0 <prvTimerTask+0x40>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    1c38:	9b06      	ldr	r3, [sp, #24]
    1c3a:	69b2      	ldr	r2, [r6, #24]
    1c3c:	4694      	mov	ip, r2
    1c3e:	4463      	add	r3, ip
    1c40:	0019      	movs	r1, r3
    1c42:	9b06      	ldr	r3, [sp, #24]
    1c44:	0002      	movs	r2, r0
    1c46:	0030      	movs	r0, r6
    1c48:	4c24      	ldr	r4, [pc, #144]	; (1cdc <prvTimerTask+0x16c>)
    1c4a:	47a0      	blx	r4
    1c4c:	2801      	cmp	r0, #1
    1c4e:	d1b0      	bne.n	1bb2 <prvTimerTask+0x42>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1c50:	0030      	movs	r0, r6
    1c52:	6a73      	ldr	r3, [r6, #36]	; 0x24
    1c54:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    1c56:	69f3      	ldr	r3, [r6, #28]
    1c58:	2b01      	cmp	r3, #1
    1c5a:	d1aa      	bne.n	1bb2 <prvTimerTask+0x42>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    1c5c:	9b06      	ldr	r3, [sp, #24]
    1c5e:	69b1      	ldr	r1, [r6, #24]
    1c60:	468c      	mov	ip, r1
    1c62:	4463      	add	r3, ip
    1c64:	001a      	movs	r2, r3
    1c66:	2300      	movs	r3, #0
    1c68:	9300      	str	r3, [sp, #0]
    1c6a:	2100      	movs	r1, #0
    1c6c:	0030      	movs	r0, r6
    1c6e:	4c1c      	ldr	r4, [pc, #112]	; (1ce0 <prvTimerTask+0x170>)
    1c70:	47a0      	blx	r4
							configASSERT( xResult );
    1c72:	2800      	cmp	r0, #0
    1c74:	d19d      	bne.n	1bb2 <prvTimerTask+0x42>
    1c76:	b672      	cpsid	i
    1c78:	e7fe      	b.n	1c78 <prvTimerTask+0x108>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    1c7a:	9906      	ldr	r1, [sp, #24]
    1c7c:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    1c7e:	2900      	cmp	r1, #0
    1c80:	d006      	beq.n	1c90 <prvTimerTask+0x120>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    1c82:	1841      	adds	r1, r0, r1
    1c84:	0003      	movs	r3, r0
    1c86:	0002      	movs	r2, r0
    1c88:	0030      	movs	r0, r6
    1c8a:	4c14      	ldr	r4, [pc, #80]	; (1cdc <prvTimerTask+0x16c>)
    1c8c:	47a0      	blx	r4
    1c8e:	e790      	b.n	1bb2 <prvTimerTask+0x42>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    1c90:	b672      	cpsid	i
    1c92:	e7fe      	b.n	1c92 <prvTimerTask+0x122>
					vPortFree( pxTimer );
    1c94:	0030      	movs	r0, r6
    1c96:	4b14      	ldr	r3, [pc, #80]	; (1ce8 <prvTimerTask+0x178>)
    1c98:	4798      	blx	r3
    1c9a:	e78a      	b.n	1bb2 <prvTimerTask+0x42>
	vTaskSuspendAll();
    1c9c:	4b08      	ldr	r3, [pc, #32]	; (1cc0 <prvTimerTask+0x150>)
    1c9e:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1ca0:	a805      	add	r0, sp, #20
    1ca2:	4b08      	ldr	r3, [pc, #32]	; (1cc4 <prvTimerTask+0x154>)
    1ca4:	4798      	blx	r3
    1ca6:	0004      	movs	r4, r0
		xNextExpireTime = ( TickType_t ) 0U;
    1ca8:	2500      	movs	r5, #0
		if( xTimerListsWereSwitched == pdFALSE )
    1caa:	9b05      	ldr	r3, [sp, #20]
    1cac:	2b00      	cmp	r3, #0
    1cae:	d100      	bne.n	1cb2 <prvTimerTask+0x142>
    1cb0:	e775      	b.n	1b9e <prvTimerTask+0x2e>
			( void ) xTaskResumeAll();
    1cb2:	4b07      	ldr	r3, [pc, #28]	; (1cd0 <prvTimerTask+0x160>)
    1cb4:	4798      	blx	r3
    1cb6:	e77b      	b.n	1bb0 <prvTimerTask+0x40>
    1cb8:	00000777 	.word	0x00000777
    1cbc:	20003bfc 	.word	0x20003bfc
    1cc0:	0000130d 	.word	0x0000130d
    1cc4:	00001ab9 	.word	0x00001ab9
    1cc8:	20003c30 	.word	0x20003c30
    1ccc:	00000fed 	.word	0x00000fed
    1cd0:	00001461 	.word	0x00001461
    1cd4:	00000e65 	.word	0x00000e65
    1cd8:	00001f08 	.word	0x00001f08
    1cdc:	0000195d 	.word	0x0000195d
    1ce0:	00001a55 	.word	0x00001a55
    1ce4:	000007f5 	.word	0x000007f5
    1ce8:	000009ad 	.word	0x000009ad

00001cec <led_toggle>:
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1cec:	4b02      	ldr	r3, [pc, #8]	; (1cf8 <led_toggle+0xc>)
    1cee:	2280      	movs	r2, #128	; 0x80
    1cf0:	00d2      	lsls	r2, r2, #3
    1cf2:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    1cf4:	619a      	str	r2, [r3, #24]
static void led_toggle(void){

port_pin_set_output_level(LED_0_PIN,LED_0_ACTIVE);
port_pin_set_output_level(LED_0_PIN,!LED_0_ACTIVE);

}
    1cf6:	4770      	bx	lr
    1cf8:	40002880 	.word	0x40002880

00001cfc <sleep>:
  __ASM volatile ("dsb");
    1cfc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    1d00:	bf30      	wfi
static void sleep(void){
system_sleep();



}
    1d02:	4770      	bx	lr

00001d04 <main>:

int main (void)
{
    1d04:	b530      	push	{r4, r5, lr}
    1d06:	b085      	sub	sp, #20
	system_init();
    1d08:	4b10      	ldr	r3, [pc, #64]	; (1d4c <main+0x48>)
    1d0a:	4798      	blx	r3
	PM->SLEEPCFG.reg = sleep_mode;
    1d0c:	2202      	movs	r2, #2
    1d0e:	2380      	movs	r3, #128	; 0x80
    1d10:	05db      	lsls	r3, r3, #23
    1d12:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    1d14:	785a      	ldrb	r2, [r3, #1]
    1d16:	2a02      	cmp	r2, #2
    1d18:	d1fc      	bne.n	1d14 <main+0x10>
	system_set_sleepmode(SYSTEM_SLEEPMODE_IDLE);

	// Initialize the demo..
	//demotasks_init();
	xTaskCreate(sleep,(const char *)"sleep",	configMINIMAL_STACK_SIZE,	NULL,	SLEEP_TASK_PRIORITY,	NULL);
    1d1a:	2400      	movs	r4, #0
    1d1c:	9403      	str	r4, [sp, #12]
    1d1e:	9402      	str	r4, [sp, #8]
    1d20:	9401      	str	r4, [sp, #4]
    1d22:	2301      	movs	r3, #1
    1d24:	9300      	str	r3, [sp, #0]
    1d26:	2300      	movs	r3, #0
    1d28:	3262      	adds	r2, #98	; 0x62
    1d2a:	4909      	ldr	r1, [pc, #36]	; (1d50 <main+0x4c>)
    1d2c:	4809      	ldr	r0, [pc, #36]	; (1d54 <main+0x50>)
    1d2e:	4d0a      	ldr	r5, [pc, #40]	; (1d58 <main+0x54>)
    1d30:	47a8      	blx	r5

	xTaskCreate(led_toggle,(const char *)"toggle led",	configMINIMAL_STACK_SIZE,	NULL,	LED_TASK_PRIORITY,	NULL);
    1d32:	9403      	str	r4, [sp, #12]
    1d34:	9402      	str	r4, [sp, #8]
    1d36:	9401      	str	r4, [sp, #4]
    1d38:	2302      	movs	r3, #2
    1d3a:	9300      	str	r3, [sp, #0]
    1d3c:	2300      	movs	r3, #0
    1d3e:	2264      	movs	r2, #100	; 0x64
    1d40:	4906      	ldr	r1, [pc, #24]	; (1d5c <main+0x58>)
    1d42:	4807      	ldr	r0, [pc, #28]	; (1d60 <main+0x5c>)
    1d44:	47a8      	blx	r5

	// ..and let FreeRTOS run tasks!
	vTaskStartScheduler();
    1d46:	4b07      	ldr	r3, [pc, #28]	; (1d64 <main+0x60>)
    1d48:	4798      	blx	r3
    1d4a:	e7fe      	b.n	1d4a <main+0x46>
    1d4c:	0000064d 	.word	0x0000064d
    1d50:	00001f38 	.word	0x00001f38
    1d54:	00001cfd 	.word	0x00001cfd
    1d58:	000010c1 	.word	0x000010c1
    1d5c:	00001f40 	.word	0x00001f40
    1d60:	00001ced 	.word	0x00001ced
    1d64:	000012ad 	.word	0x000012ad

00001d68 <__udivsi3>:
    1d68:	2200      	movs	r2, #0
    1d6a:	0843      	lsrs	r3, r0, #1
    1d6c:	428b      	cmp	r3, r1
    1d6e:	d374      	bcc.n	1e5a <__udivsi3+0xf2>
    1d70:	0903      	lsrs	r3, r0, #4
    1d72:	428b      	cmp	r3, r1
    1d74:	d35f      	bcc.n	1e36 <__udivsi3+0xce>
    1d76:	0a03      	lsrs	r3, r0, #8
    1d78:	428b      	cmp	r3, r1
    1d7a:	d344      	bcc.n	1e06 <__udivsi3+0x9e>
    1d7c:	0b03      	lsrs	r3, r0, #12
    1d7e:	428b      	cmp	r3, r1
    1d80:	d328      	bcc.n	1dd4 <__udivsi3+0x6c>
    1d82:	0c03      	lsrs	r3, r0, #16
    1d84:	428b      	cmp	r3, r1
    1d86:	d30d      	bcc.n	1da4 <__udivsi3+0x3c>
    1d88:	22ff      	movs	r2, #255	; 0xff
    1d8a:	0209      	lsls	r1, r1, #8
    1d8c:	ba12      	rev	r2, r2
    1d8e:	0c03      	lsrs	r3, r0, #16
    1d90:	428b      	cmp	r3, r1
    1d92:	d302      	bcc.n	1d9a <__udivsi3+0x32>
    1d94:	1212      	asrs	r2, r2, #8
    1d96:	0209      	lsls	r1, r1, #8
    1d98:	d065      	beq.n	1e66 <__udivsi3+0xfe>
    1d9a:	0b03      	lsrs	r3, r0, #12
    1d9c:	428b      	cmp	r3, r1
    1d9e:	d319      	bcc.n	1dd4 <__udivsi3+0x6c>
    1da0:	e000      	b.n	1da4 <__udivsi3+0x3c>
    1da2:	0a09      	lsrs	r1, r1, #8
    1da4:	0bc3      	lsrs	r3, r0, #15
    1da6:	428b      	cmp	r3, r1
    1da8:	d301      	bcc.n	1dae <__udivsi3+0x46>
    1daa:	03cb      	lsls	r3, r1, #15
    1dac:	1ac0      	subs	r0, r0, r3
    1dae:	4152      	adcs	r2, r2
    1db0:	0b83      	lsrs	r3, r0, #14
    1db2:	428b      	cmp	r3, r1
    1db4:	d301      	bcc.n	1dba <__udivsi3+0x52>
    1db6:	038b      	lsls	r3, r1, #14
    1db8:	1ac0      	subs	r0, r0, r3
    1dba:	4152      	adcs	r2, r2
    1dbc:	0b43      	lsrs	r3, r0, #13
    1dbe:	428b      	cmp	r3, r1
    1dc0:	d301      	bcc.n	1dc6 <__udivsi3+0x5e>
    1dc2:	034b      	lsls	r3, r1, #13
    1dc4:	1ac0      	subs	r0, r0, r3
    1dc6:	4152      	adcs	r2, r2
    1dc8:	0b03      	lsrs	r3, r0, #12
    1dca:	428b      	cmp	r3, r1
    1dcc:	d301      	bcc.n	1dd2 <__udivsi3+0x6a>
    1dce:	030b      	lsls	r3, r1, #12
    1dd0:	1ac0      	subs	r0, r0, r3
    1dd2:	4152      	adcs	r2, r2
    1dd4:	0ac3      	lsrs	r3, r0, #11
    1dd6:	428b      	cmp	r3, r1
    1dd8:	d301      	bcc.n	1dde <__udivsi3+0x76>
    1dda:	02cb      	lsls	r3, r1, #11
    1ddc:	1ac0      	subs	r0, r0, r3
    1dde:	4152      	adcs	r2, r2
    1de0:	0a83      	lsrs	r3, r0, #10
    1de2:	428b      	cmp	r3, r1
    1de4:	d301      	bcc.n	1dea <__udivsi3+0x82>
    1de6:	028b      	lsls	r3, r1, #10
    1de8:	1ac0      	subs	r0, r0, r3
    1dea:	4152      	adcs	r2, r2
    1dec:	0a43      	lsrs	r3, r0, #9
    1dee:	428b      	cmp	r3, r1
    1df0:	d301      	bcc.n	1df6 <__udivsi3+0x8e>
    1df2:	024b      	lsls	r3, r1, #9
    1df4:	1ac0      	subs	r0, r0, r3
    1df6:	4152      	adcs	r2, r2
    1df8:	0a03      	lsrs	r3, r0, #8
    1dfa:	428b      	cmp	r3, r1
    1dfc:	d301      	bcc.n	1e02 <__udivsi3+0x9a>
    1dfe:	020b      	lsls	r3, r1, #8
    1e00:	1ac0      	subs	r0, r0, r3
    1e02:	4152      	adcs	r2, r2
    1e04:	d2cd      	bcs.n	1da2 <__udivsi3+0x3a>
    1e06:	09c3      	lsrs	r3, r0, #7
    1e08:	428b      	cmp	r3, r1
    1e0a:	d301      	bcc.n	1e10 <__udivsi3+0xa8>
    1e0c:	01cb      	lsls	r3, r1, #7
    1e0e:	1ac0      	subs	r0, r0, r3
    1e10:	4152      	adcs	r2, r2
    1e12:	0983      	lsrs	r3, r0, #6
    1e14:	428b      	cmp	r3, r1
    1e16:	d301      	bcc.n	1e1c <__udivsi3+0xb4>
    1e18:	018b      	lsls	r3, r1, #6
    1e1a:	1ac0      	subs	r0, r0, r3
    1e1c:	4152      	adcs	r2, r2
    1e1e:	0943      	lsrs	r3, r0, #5
    1e20:	428b      	cmp	r3, r1
    1e22:	d301      	bcc.n	1e28 <__udivsi3+0xc0>
    1e24:	014b      	lsls	r3, r1, #5
    1e26:	1ac0      	subs	r0, r0, r3
    1e28:	4152      	adcs	r2, r2
    1e2a:	0903      	lsrs	r3, r0, #4
    1e2c:	428b      	cmp	r3, r1
    1e2e:	d301      	bcc.n	1e34 <__udivsi3+0xcc>
    1e30:	010b      	lsls	r3, r1, #4
    1e32:	1ac0      	subs	r0, r0, r3
    1e34:	4152      	adcs	r2, r2
    1e36:	08c3      	lsrs	r3, r0, #3
    1e38:	428b      	cmp	r3, r1
    1e3a:	d301      	bcc.n	1e40 <__udivsi3+0xd8>
    1e3c:	00cb      	lsls	r3, r1, #3
    1e3e:	1ac0      	subs	r0, r0, r3
    1e40:	4152      	adcs	r2, r2
    1e42:	0883      	lsrs	r3, r0, #2
    1e44:	428b      	cmp	r3, r1
    1e46:	d301      	bcc.n	1e4c <__udivsi3+0xe4>
    1e48:	008b      	lsls	r3, r1, #2
    1e4a:	1ac0      	subs	r0, r0, r3
    1e4c:	4152      	adcs	r2, r2
    1e4e:	0843      	lsrs	r3, r0, #1
    1e50:	428b      	cmp	r3, r1
    1e52:	d301      	bcc.n	1e58 <__udivsi3+0xf0>
    1e54:	004b      	lsls	r3, r1, #1
    1e56:	1ac0      	subs	r0, r0, r3
    1e58:	4152      	adcs	r2, r2
    1e5a:	1a41      	subs	r1, r0, r1
    1e5c:	d200      	bcs.n	1e60 <__udivsi3+0xf8>
    1e5e:	4601      	mov	r1, r0
    1e60:	4152      	adcs	r2, r2
    1e62:	4610      	mov	r0, r2
    1e64:	4770      	bx	lr
    1e66:	e7ff      	b.n	1e68 <__udivsi3+0x100>
    1e68:	b501      	push	{r0, lr}
    1e6a:	2000      	movs	r0, #0
    1e6c:	f000 f806 	bl	1e7c <__aeabi_idiv0>
    1e70:	bd02      	pop	{r1, pc}
    1e72:	46c0      	nop			; (mov r8, r8)

00001e74 <__aeabi_uidivmod>:
    1e74:	2900      	cmp	r1, #0
    1e76:	d0f7      	beq.n	1e68 <__udivsi3+0x100>
    1e78:	e776      	b.n	1d68 <__udivsi3>
    1e7a:	4770      	bx	lr

00001e7c <__aeabi_idiv0>:
    1e7c:	4770      	bx	lr
    1e7e:	46c0      	nop			; (mov r8, r8)

00001e80 <__libc_init_array>:
    1e80:	b570      	push	{r4, r5, r6, lr}
    1e82:	2600      	movs	r6, #0
    1e84:	4d0c      	ldr	r5, [pc, #48]	; (1eb8 <__libc_init_array+0x38>)
    1e86:	4c0d      	ldr	r4, [pc, #52]	; (1ebc <__libc_init_array+0x3c>)
    1e88:	1b64      	subs	r4, r4, r5
    1e8a:	10a4      	asrs	r4, r4, #2
    1e8c:	42a6      	cmp	r6, r4
    1e8e:	d109      	bne.n	1ea4 <__libc_init_array+0x24>
    1e90:	2600      	movs	r6, #0
    1e92:	f000 f85b 	bl	1f4c <_init>
    1e96:	4d0a      	ldr	r5, [pc, #40]	; (1ec0 <__libc_init_array+0x40>)
    1e98:	4c0a      	ldr	r4, [pc, #40]	; (1ec4 <__libc_init_array+0x44>)
    1e9a:	1b64      	subs	r4, r4, r5
    1e9c:	10a4      	asrs	r4, r4, #2
    1e9e:	42a6      	cmp	r6, r4
    1ea0:	d105      	bne.n	1eae <__libc_init_array+0x2e>
    1ea2:	bd70      	pop	{r4, r5, r6, pc}
    1ea4:	00b3      	lsls	r3, r6, #2
    1ea6:	58eb      	ldr	r3, [r5, r3]
    1ea8:	4798      	blx	r3
    1eaa:	3601      	adds	r6, #1
    1eac:	e7ee      	b.n	1e8c <__libc_init_array+0xc>
    1eae:	00b3      	lsls	r3, r6, #2
    1eb0:	58eb      	ldr	r3, [r5, r3]
    1eb2:	4798      	blx	r3
    1eb4:	3601      	adds	r6, #1
    1eb6:	e7f2      	b.n	1e9e <__libc_init_array+0x1e>
    1eb8:	00001f58 	.word	0x00001f58
    1ebc:	00001f58 	.word	0x00001f58
    1ec0:	00001f58 	.word	0x00001f58
    1ec4:	00001f5c 	.word	0x00001f5c

00001ec8 <memcpy>:
    1ec8:	2300      	movs	r3, #0
    1eca:	b510      	push	{r4, lr}
    1ecc:	429a      	cmp	r2, r3
    1ece:	d100      	bne.n	1ed2 <memcpy+0xa>
    1ed0:	bd10      	pop	{r4, pc}
    1ed2:	5ccc      	ldrb	r4, [r1, r3]
    1ed4:	54c4      	strb	r4, [r0, r3]
    1ed6:	3301      	adds	r3, #1
    1ed8:	e7f8      	b.n	1ecc <memcpy+0x4>
    1eda:	0000      	movs	r0, r0
    1edc:	00000252 	.word	0x00000252
    1ee0:	0000024e 	.word	0x0000024e
    1ee4:	0000024e 	.word	0x0000024e
    1ee8:	000002b4 	.word	0x000002b4
    1eec:	000002b4 	.word	0x000002b4
    1ef0:	00000268 	.word	0x00000268
    1ef4:	00000258 	.word	0x00000258
    1ef8:	0000026e 	.word	0x0000026e
    1efc:	000002a2 	.word	0x000002a2
    1f00:	454c4449 	.word	0x454c4449
    1f04:	00000000 	.word	0x00000000
    1f08:	00001c38 	.word	0x00001c38
    1f0c:	00001c38 	.word	0x00001c38
    1f10:	00001c38 	.word	0x00001c38
    1f14:	00001bb4 	.word	0x00001bb4
    1f18:	00001c7a 	.word	0x00001c7a
    1f1c:	00001c94 	.word	0x00001c94
    1f20:	00001c38 	.word	0x00001c38
    1f24:	00001c38 	.word	0x00001c38
    1f28:	00001bb4 	.word	0x00001bb4
    1f2c:	00001c7a 	.word	0x00001c7a
    1f30:	20726d54 	.word	0x20726d54
    1f34:	00637653 	.word	0x00637653
    1f38:	65656c73 	.word	0x65656c73
    1f3c:	00000070 	.word	0x00000070
    1f40:	67676f74 	.word	0x67676f74
    1f44:	6c20656c 	.word	0x6c20656c
    1f48:	00006465 	.word	0x00006465

00001f4c <_init>:
    1f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f4e:	46c0      	nop			; (mov r8, r8)
    1f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f52:	bc08      	pop	{r3}
    1f54:	469e      	mov	lr, r3
    1f56:	4770      	bx	lr

00001f58 <__init_array_start>:
    1f58:	000000dd 	.word	0x000000dd

00001f5c <_fini>:
    1f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f5e:	46c0      	nop			; (mov r8, r8)
    1f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f62:	bc08      	pop	{r3}
    1f64:	469e      	mov	lr, r3
    1f66:	4770      	bx	lr

00001f68 <__fini_array_start>:
    1f68:	000000b5 	.word	0x000000b5
