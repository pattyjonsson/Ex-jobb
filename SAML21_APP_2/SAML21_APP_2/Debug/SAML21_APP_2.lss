
SAML21_APP_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000114c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  0000114c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020004  2**0
                  CONTENTS
  3 .bss          00000814  20000004  00001150  00020004  2**2
                  ALLOC
  4 .stack        00002000  20000818  00001964  00020004  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00012025  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000021b1  00000000  00000000  000320aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000021d9  00000000  00000000  0003425b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000288  00000000  00000000  00036434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a0  00000000  00000000  000366bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b09e  00000000  00000000  0003695c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000077ac  00000000  00000000  000519fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000989b0  00000000  00000000  000591a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000005d0  00000000  00000000  000f1b58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 28 00 20 79 0c 00 00 75 0c 00 00 75 0c 00 00     .(. y...u...u...
	...
      2c:	75 0c 00 00 00 00 00 00 00 00 00 00 75 0c 00 00     u...........u...
      3c:	75 0c 00 00 75 0c 00 00 75 0c 00 00 75 0c 00 00     u...u...u...u...
      4c:	75 0c 00 00 75 0c 00 00 75 0c 00 00 75 0c 00 00     u...u...u...u...
      5c:	75 0c 00 00 75 0c 00 00 75 0c 00 00 75 0c 00 00     u...u...u...u...
      6c:	75 0c 00 00 75 0c 00 00 75 0c 00 00 75 0c 00 00     u...u...u...u...
      7c:	75 0c 00 00 75 0c 00 00 75 0c 00 00 75 0c 00 00     u...u...u...u...
      8c:	75 0c 00 00 75 0c 00 00 75 0c 00 00 75 0c 00 00     u...u...u...u...
      9c:	75 0c 00 00 75 0c 00 00 75 0c 00 00 75 0c 00 00     u...u...u...u...
      ac:	75 0c 00 00 00 00 00 00                             u.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000004 	.word	0x20000004
      d4:	00000000 	.word	0x00000000
      d8:	0000114c 	.word	0x0000114c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000008 	.word	0x20000008
     108:	0000114c 	.word	0x0000114c
     10c:	0000114c 	.word	0x0000114c
     110:	00000000 	.word	0x00000000

00000114 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     114:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     116:	2300      	movs	r3, #0
     118:	2200      	movs	r2, #0
     11a:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     11c:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     11e:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     120:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     122:	2100      	movs	r1, #0
     124:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     126:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     128:	61c3      	str	r3, [r0, #28]
#if SAMR30
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
     12a:	2401      	movs	r4, #1
     12c:	7104      	strb	r4, [r0, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     12e:	24c0      	movs	r4, #192	; 0xc0
     130:	0164      	lsls	r4, r4, #5
     132:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     134:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     136:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
     138:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
     13a:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
     13c:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     13e:	242a      	movs	r4, #42	; 0x2a
     140:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
     142:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
     144:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
     146:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
     148:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
     14a:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
     14c:	3c06      	subs	r4, #6
     14e:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     150:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     152:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     154:	7541      	strb	r1, [r0, #21]
}
     156:	bd10      	pop	{r4, pc}

00000158 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     158:	b5f0      	push	{r4, r5, r6, r7, lr}
     15a:	46ce      	mov	lr, r9
     15c:	b500      	push	{lr}
     15e:	b09a      	sub	sp, #104	; 0x68
     160:	0005      	movs	r5, r0
     162:	0016      	movs	r6, r2

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     164:	6001      	str	r1, [r0, #0]

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     166:	4ab5      	ldr	r2, [pc, #724]	; (43c <adc_init+0x2e4>)
     168:	6a13      	ldr	r3, [r2, #32]
     16a:	2008      	movs	r0, #8
     16c:	4303      	orrs	r3, r0
     16e:	6213      	str	r3, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     170:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     172:	3803      	subs	r0, #3
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     174:	07db      	lsls	r3, r3, #31
     176:	d503      	bpl.n	180 <adc_init+0x28>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
     178:	b01a      	add	sp, #104	; 0x68
     17a:	bc04      	pop	{r2}
     17c:	4691      	mov	r9, r2
     17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     180:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     182:	8c13      	ldrh	r3, [r2, #32]
     184:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     186:	2b00      	cmp	r3, #0
     188:	d1fb      	bne.n	182 <adc_init+0x2a>
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     18a:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     18c:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     18e:	079b      	lsls	r3, r3, #30
     190:	d4f2      	bmi.n	178 <adc_init+0x20>
	module_inst->reference = config->reference;
     192:	7873      	ldrb	r3, [r6, #1]
     194:	712b      	strb	r3, [r5, #4]
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     196:	2b00      	cmp	r3, #0
     198:	d104      	bne.n	1a4 <adc_init+0x4c>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     19a:	4aa9      	ldr	r2, [pc, #676]	; (440 <adc_init+0x2e8>)
     19c:	69d3      	ldr	r3, [r2, #28]
     19e:	2104      	movs	r1, #4
     1a0:	430b      	orrs	r3, r1
     1a2:	61d3      	str	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     1a4:	682f      	ldr	r7, [r5, #0]
	gclk_chan_conf.source_generator = config->clock_source;
     1a6:	7833      	ldrb	r3, [r6, #0]
     1a8:	466a      	mov	r2, sp
     1aa:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     1ac:	4669      	mov	r1, sp
     1ae:	201e      	movs	r0, #30
     1b0:	4ba4      	ldr	r3, [pc, #656]	; (444 <adc_init+0x2ec>)
     1b2:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     1b4:	201e      	movs	r0, #30
     1b6:	4ba4      	ldr	r3, [pc, #656]	; (448 <adc_init+0x2f0>)
     1b8:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->positive_input);
     1ba:	7934      	ldrb	r4, [r6, #4]
	const uint32_t pinmapping[] = {
     1bc:	2260      	movs	r2, #96	; 0x60
     1be:	49a3      	ldr	r1, [pc, #652]	; (44c <adc_init+0x2f4>)
     1c0:	a802      	add	r0, sp, #8
     1c2:	4ba3      	ldr	r3, [pc, #652]	; (450 <adc_init+0x2f8>)
     1c4:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     1c6:	2c13      	cmp	r4, #19
     1c8:	d90b      	bls.n	1e2 <adc_init+0x8a>
	_adc_configure_ain_pin(index, config->negative_input);
     1ca:	88f4      	ldrh	r4, [r6, #6]
	const uint32_t pinmapping[] = {
     1cc:	2260      	movs	r2, #96	; 0x60
     1ce:	499f      	ldr	r1, [pc, #636]	; (44c <adc_init+0x2f4>)
     1d0:	a802      	add	r0, sp, #8
     1d2:	4b9f      	ldr	r3, [pc, #636]	; (450 <adc_init+0x2f8>)
     1d4:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     1d6:	2c13      	cmp	r4, #19
     1d8:	d911      	bls.n	1fe <adc_init+0xa6>
     1da:	2400      	movs	r4, #0
	const uint32_t pinmapping[] = {
     1dc:	4b9c      	ldr	r3, [pc, #624]	; (450 <adc_init+0x2f8>)
     1de:	4699      	mov	r9, r3
     1e0:	e01e      	b.n	220 <adc_init+0xc8>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     1e2:	00a4      	lsls	r4, r4, #2
     1e4:	ab02      	add	r3, sp, #8
     1e6:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1e8:	a901      	add	r1, sp, #4
     1ea:	2300      	movs	r3, #0
     1ec:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     1ee:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     1f0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     1f2:	3301      	adds	r3, #1
     1f4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     1f6:	b2c0      	uxtb	r0, r0
     1f8:	4b96      	ldr	r3, [pc, #600]	; (454 <adc_init+0x2fc>)
     1fa:	4798      	blx	r3
     1fc:	e7e5      	b.n	1ca <adc_init+0x72>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     1fe:	00a4      	lsls	r4, r4, #2
     200:	ab02      	add	r3, sp, #8
     202:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     204:	a901      	add	r1, sp, #4
     206:	2300      	movs	r3, #0
     208:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     20a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     20c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     20e:	3301      	adds	r3, #1
     210:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     212:	b2c0      	uxtb	r0, r0
     214:	4b8f      	ldr	r3, [pc, #572]	; (454 <adc_init+0x2fc>)
     216:	4798      	blx	r3
     218:	e7df      	b.n	1da <adc_init+0x82>
     21a:	3401      	adds	r4, #1
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     21c:	2c14      	cmp	r4, #20
     21e:	d018      	beq.n	252 <adc_init+0xfa>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     220:	2301      	movs	r3, #1
     222:	40a3      	lsls	r3, r4
     224:	6932      	ldr	r2, [r6, #16]
     226:	421a      	tst	r2, r3
     228:	d0f7      	beq.n	21a <adc_init+0xc2>
	const uint32_t pinmapping[] = {
     22a:	2260      	movs	r2, #96	; 0x60
     22c:	4987      	ldr	r1, [pc, #540]	; (44c <adc_init+0x2f4>)
     22e:	a802      	add	r0, sp, #8
     230:	47c8      	blx	r9
	if (pin <= _adc_extchannel_msb[index]) {
     232:	2c13      	cmp	r4, #19
     234:	d8f1      	bhi.n	21a <adc_init+0xc2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     236:	00a3      	lsls	r3, r4, #2
     238:	aa02      	add	r2, sp, #8
     23a:	5898      	ldr	r0, [r3, r2]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     23c:	a901      	add	r1, sp, #4
     23e:	2300      	movs	r3, #0
     240:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     242:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     244:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     246:	3301      	adds	r3, #1
     248:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     24a:	b2c0      	uxtb	r0, r0
     24c:	4b81      	ldr	r3, [pc, #516]	; (454 <adc_init+0x2fc>)
     24e:	4798      	blx	r3
     250:	e7e3      	b.n	21a <adc_init+0xc2>
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     252:	7b73      	ldrb	r3, [r6, #13]
     254:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     256:	7bb2      	ldrb	r2, [r6, #14]
     258:	01d2      	lsls	r2, r2, #7
     25a:	4313      	orrs	r3, r2
     25c:	b2db      	uxtb	r3, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     25e:	703b      	strb	r3, [r7, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     260:	7d33      	ldrb	r3, [r6, #20]
     262:	01db      	lsls	r3, r3, #7
			| (config->reference);
     264:	7872      	ldrb	r2, [r6, #1]
     266:	4313      	orrs	r3, r2
     268:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     26a:	70bb      	strb	r3, [r7, #2]
	switch (config->resolution) {
     26c:	78f3      	ldrb	r3, [r6, #3]
     26e:	2b34      	cmp	r3, #52	; 0x34
     270:	d900      	bls.n	274 <adc_init+0x11c>
     272:	e133      	b.n	4dc <adc_init+0x384>
     274:	009b      	lsls	r3, r3, #2
     276:	4a78      	ldr	r2, [pc, #480]	; (458 <adc_init+0x300>)
     278:	58d3      	ldr	r3, [r2, r3]
     27a:	469f      	mov	pc, r3
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     27c:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     27e:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     280:	2102      	movs	r1, #2
     282:	e01a      	b.n	2ba <adc_init+0x162>
		adjres = config->divide_result;
     284:	7a71      	ldrb	r1, [r6, #9]
		accumulate = config->accumulate_samples;
     286:	7a32      	ldrb	r2, [r6, #8]
		resolution = ADC_RESOLUTION_16BIT;
     288:	2410      	movs	r4, #16
     28a:	e016      	b.n	2ba <adc_init+0x162>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     28c:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
     28e:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     290:	2101      	movs	r1, #1
     292:	e012      	b.n	2ba <adc_init+0x162>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     294:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
     296:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     298:	2100      	movs	r1, #0
     29a:	e00e      	b.n	2ba <adc_init+0x162>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     29c:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
     29e:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     2a0:	2100      	movs	r1, #0
     2a2:	e00a      	b.n	2ba <adc_init+0x162>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     2a4:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
     2a6:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     2a8:	2100      	movs	r1, #0
     2aa:	e006      	b.n	2ba <adc_init+0x162>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     2ac:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
     2ae:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     2b0:	2100      	movs	r1, #0
     2b2:	e002      	b.n	2ba <adc_init+0x162>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     2b4:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
     2b6:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     2b8:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     2ba:	0109      	lsls	r1, r1, #4
     2bc:	2370      	movs	r3, #112	; 0x70
     2be:	400b      	ands	r3, r1
     2c0:	4313      	orrs	r3, r2
     2c2:	733b      	strb	r3, [r7, #12]
	Adc *const adc_module = module_inst->hw;
     2c4:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     2c6:	8c13      	ldrh	r3, [r2, #32]
     2c8:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     2ca:	2b00      	cmp	r3, #0
     2cc:	d1fb      	bne.n	2c6 <adc_init+0x16e>
	if (config->sample_length > 63) {
     2ce:	7d73      	ldrb	r3, [r6, #21]
		return STATUS_ERR_INVALID_ARG;
     2d0:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     2d2:	2b3f      	cmp	r3, #63	; 0x3f
     2d4:	d900      	bls.n	2d8 <adc_init+0x180>
     2d6:	e74f      	b.n	178 <adc_init+0x20>
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     2d8:	7bf2      	ldrb	r2, [r6, #15]
     2da:	01d2      	lsls	r2, r2, #7
     2dc:	4313      	orrs	r3, r2
     2de:	b2db      	uxtb	r3, r3
		adc_module->SAMPCTRL.reg =
     2e0:	737b      	strb	r3, [r7, #13]
	Adc *const adc_module = module_inst->hw;
     2e2:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     2e4:	8c13      	ldrh	r3, [r2, #32]
     2e6:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     2e8:	2b00      	cmp	r3, #0
     2ea:	d1fb      	bne.n	2e4 <adc_init+0x18c>
			config->clock_prescaler;
     2ec:	78b3      	ldrb	r3, [r6, #2]
	adc_module->CTRLB.reg =
     2ee:	707b      	strb	r3, [r7, #1]
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     2f0:	2324      	movs	r3, #36	; 0x24
     2f2:	5cf3      	ldrb	r3, [r6, r3]
     2f4:	00db      	lsls	r3, r3, #3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     2f6:	7b32      	ldrb	r2, [r6, #12]
     2f8:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     2fa:	431a      	orrs	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     2fc:	7af3      	ldrb	r3, [r6, #11]
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     2fe:	4313      	orrs	r3, r2
     300:	7ab2      	ldrb	r2, [r6, #10]
     302:	0052      	lsls	r2, r2, #1
     304:	4313      	orrs	r3, r2
     306:	4323      	orrs	r3, r4
	adc_module->CTRLC.reg =
     308:	817b      	strh	r3, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     30a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     30c:	8c13      	ldrh	r3, [r2, #32]
     30e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     310:	2b00      	cmp	r3, #0
     312:	d1fb      	bne.n	30c <adc_init+0x1b4>
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     314:	8b33      	ldrh	r3, [r6, #24]
     316:	2b00      	cmp	r3, #0
     318:	d01f      	beq.n	35a <adc_init+0x202>
		switch (resolution) {
     31a:	2c10      	cmp	r4, #16
     31c:	d100      	bne.n	320 <adc_init+0x1c8>
     31e:	e0bf      	b.n	4a0 <adc_init+0x348>
     320:	d96b      	bls.n	3fa <adc_init+0x2a2>
     322:	2c20      	cmp	r4, #32
     324:	d100      	bne.n	328 <adc_init+0x1d0>
     326:	e09d      	b.n	464 <adc_init+0x30c>
     328:	2c30      	cmp	r4, #48	; 0x30
     32a:	d116      	bne.n	35a <adc_init+0x202>
			if (config->differential_mode &&
     32c:	7af2      	ldrb	r2, [r6, #11]
     32e:	2a00      	cmp	r2, #0
     330:	d00a      	beq.n	348 <adc_init+0x1f0>
					(config->window.window_lower_value > 127 ||
     332:	69f2      	ldr	r2, [r6, #28]
     334:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     336:	2017      	movs	r0, #23
			if (config->differential_mode &&
     338:	2aff      	cmp	r2, #255	; 0xff
     33a:	d900      	bls.n	33e <adc_init+0x1e6>
     33c:	e71c      	b.n	178 <adc_init+0x20>
					config->window.window_lower_value < -128 ||
     33e:	6a32      	ldr	r2, [r6, #32]
     340:	3280      	adds	r2, #128	; 0x80
     342:	2aff      	cmp	r2, #255	; 0xff
     344:	d900      	bls.n	348 <adc_init+0x1f0>
     346:	e717      	b.n	178 <adc_init+0x20>
				return STATUS_ERR_INVALID_ARG;
     348:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     34a:	69f2      	ldr	r2, [r6, #28]
     34c:	2aff      	cmp	r2, #255	; 0xff
     34e:	dd00      	ble.n	352 <adc_init+0x1fa>
     350:	e712      	b.n	178 <adc_init+0x20>
     352:	6a32      	ldr	r2, [r6, #32]
     354:	2aff      	cmp	r2, #255	; 0xff
     356:	dd00      	ble.n	35a <adc_init+0x202>
     358:	e70e      	b.n	178 <adc_init+0x20>
	adc_module->CTRLC.reg |= config->window.window_mode;
     35a:	897a      	ldrh	r2, [r7, #10]
     35c:	4313      	orrs	r3, r2
     35e:	817b      	strh	r3, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     360:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     362:	8c13      	ldrh	r3, [r2, #32]
     364:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     366:	2b00      	cmp	r3, #0
     368:	d1fb      	bne.n	362 <adc_init+0x20a>
	adc_module->WINLT.reg =
     36a:	8bb3      	ldrh	r3, [r6, #28]
     36c:	81fb      	strh	r3, [r7, #14]
	Adc *const adc_module = module_inst->hw;
     36e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     370:	8c13      	ldrh	r3, [r2, #32]
     372:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     374:	2b00      	cmp	r3, #0
     376:	d1fb      	bne.n	370 <adc_init+0x218>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     378:	8c33      	ldrh	r3, [r6, #32]
     37a:	823b      	strh	r3, [r7, #16]
	Adc *const adc_module = module_inst->hw;
     37c:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     37e:	8c13      	ldrh	r3, [r2, #32]
     380:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     382:	2b00      	cmp	r3, #0
     384:	d1fb      	bne.n	37e <adc_init+0x226>
			config->positive_input;
     386:	7933      	ldrb	r3, [r6, #4]
			config->negative_input |
     388:	88f2      	ldrh	r2, [r6, #6]
     38a:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     38c:	813b      	strh	r3, [r7, #8]
	Adc *const adc_module = module_inst->hw;
     38e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     390:	8c13      	ldrh	r3, [r2, #32]
     392:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     394:	2b00      	cmp	r3, #0
     396:	d1fb      	bne.n	390 <adc_init+0x238>
	adc_module->EVCTRL.reg = config->event_action;
     398:	332a      	adds	r3, #42	; 0x2a
     39a:	5cf3      	ldrb	r3, [r6, r3]
     39c:	70fb      	strb	r3, [r7, #3]
	adc_module->INTENCLR.reg =
     39e:	2307      	movs	r3, #7
     3a0:	713b      	strb	r3, [r7, #4]
	if (config->correction.correction_enable){
     3a2:	331d      	adds	r3, #29
     3a4:	5cf3      	ldrb	r3, [r6, r3]
     3a6:	2b00      	cmp	r3, #0
     3a8:	d01b      	beq.n	3e2 <adc_init+0x28a>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     3aa:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     3ac:	4a2b      	ldr	r2, [pc, #172]	; (45c <adc_init+0x304>)
			return STATUS_ERR_INVALID_ARG;
     3ae:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     3b0:	4293      	cmp	r3, r2
     3b2:	d900      	bls.n	3b6 <adc_init+0x25e>
     3b4:	e6e0      	b.n	178 <adc_init+0x20>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     3b6:	827b      	strh	r3, [r7, #18]
	Adc *const adc_module = module_inst->hw;
     3b8:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     3ba:	8c13      	ldrh	r3, [r2, #32]
     3bc:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     3be:	2b00      	cmp	r3, #0
     3c0:	d1fb      	bne.n	3ba <adc_init+0x262>
		if (config->correction.offset_correction > 2047 ||
     3c2:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     3c4:	2380      	movs	r3, #128	; 0x80
     3c6:	011b      	lsls	r3, r3, #4
     3c8:	18d3      	adds	r3, r2, r3
     3ca:	4924      	ldr	r1, [pc, #144]	; (45c <adc_init+0x304>)
     3cc:	b29b      	uxth	r3, r3
			return STATUS_ERR_INVALID_ARG;
     3ce:	2017      	movs	r0, #23
		if (config->correction.offset_correction > 2047 ||
     3d0:	428b      	cmp	r3, r1
     3d2:	d900      	bls.n	3d6 <adc_init+0x27e>
     3d4:	e6d0      	b.n	178 <adc_init+0x20>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     3d6:	82ba      	strh	r2, [r7, #20]
	Adc *const adc_module = module_inst->hw;
     3d8:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     3da:	8c13      	ldrh	r3, [r2, #32]
     3dc:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     3de:	2b00      	cmp	r3, #0
     3e0:	d1fb      	bne.n	3da <adc_init+0x282>
			ADC_CALIB_BIASREFBUF(
     3e2:	4b1f      	ldr	r3, [pc, #124]	; (460 <adc_init+0x308>)
     3e4:	681b      	ldr	r3, [r3, #0]
     3e6:	021a      	lsls	r2, r3, #8
     3e8:	21e0      	movs	r1, #224	; 0xe0
     3ea:	00c9      	lsls	r1, r1, #3
     3ec:	400a      	ands	r2, r1
			ADC_CALIB_BIASCOMP(
     3ee:	069b      	lsls	r3, r3, #26
     3f0:	0f5b      	lsrs	r3, r3, #29
			) |
     3f2:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     3f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
	return STATUS_OK;
     3f6:	2000      	movs	r0, #0
     3f8:	e6be      	b.n	178 <adc_init+0x20>
		switch (resolution) {
     3fa:	2c00      	cmp	r4, #0
     3fc:	d1ad      	bne.n	35a <adc_init+0x202>
			if (config->differential_mode &&
     3fe:	7af2      	ldrb	r2, [r6, #11]
     400:	2a00      	cmp	r2, #0
     402:	d00f      	beq.n	424 <adc_init+0x2cc>
					(config->window.window_lower_value > 2047 ||
     404:	69f2      	ldr	r2, [r6, #28]
     406:	2180      	movs	r1, #128	; 0x80
     408:	0109      	lsls	r1, r1, #4
     40a:	468c      	mov	ip, r1
     40c:	4462      	add	r2, ip
			if (config->differential_mode &&
     40e:	4913      	ldr	r1, [pc, #76]	; (45c <adc_init+0x304>)
				return STATUS_ERR_INVALID_ARG;
     410:	2017      	movs	r0, #23
			if (config->differential_mode &&
     412:	428a      	cmp	r2, r1
     414:	d900      	bls.n	418 <adc_init+0x2c0>
     416:	e6af      	b.n	178 <adc_init+0x20>
					config->window.window_lower_value < -2048 ||
     418:	6a32      	ldr	r2, [r6, #32]
     41a:	4462      	add	r2, ip
     41c:	490f      	ldr	r1, [pc, #60]	; (45c <adc_init+0x304>)
     41e:	428a      	cmp	r2, r1
     420:	d900      	bls.n	424 <adc_init+0x2cc>
     422:	e6a9      	b.n	178 <adc_init+0x20>
			} else if (config->window.window_lower_value > 4095 ||
     424:	4a0d      	ldr	r2, [pc, #52]	; (45c <adc_init+0x304>)
				return STATUS_ERR_INVALID_ARG;
     426:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     428:	69f1      	ldr	r1, [r6, #28]
     42a:	4291      	cmp	r1, r2
     42c:	dd00      	ble.n	430 <adc_init+0x2d8>
     42e:	e6a3      	b.n	178 <adc_init+0x20>
     430:	6a31      	ldr	r1, [r6, #32]
     432:	4291      	cmp	r1, r2
     434:	dd00      	ble.n	438 <adc_init+0x2e0>
     436:	e69f      	b.n	178 <adc_init+0x20>
     438:	e78f      	b.n	35a <adc_init+0x202>
     43a:	46c0      	nop			; (mov r8, r8)
     43c:	40000400 	.word	0x40000400
     440:	40001400 	.word	0x40001400
     444:	00000b19 	.word	0x00000b19
     448:	00000aa9 	.word	0x00000aa9
     44c:	00001084 	.word	0x00001084
     450:	00000f9d 	.word	0x00000f9d
     454:	00000c15 	.word	0x00000c15
     458:	00000fb0 	.word	0x00000fb0
     45c:	00000fff 	.word	0x00000fff
     460:	00806020 	.word	0x00806020
			if (config->differential_mode &&
     464:	7af2      	ldrb	r2, [r6, #11]
     466:	2a00      	cmp	r2, #0
     468:	d00f      	beq.n	48a <adc_init+0x332>
					(config->window.window_lower_value > 511 ||
     46a:	69f2      	ldr	r2, [r6, #28]
     46c:	2180      	movs	r1, #128	; 0x80
     46e:	0089      	lsls	r1, r1, #2
     470:	468c      	mov	ip, r1
     472:	4462      	add	r2, ip
			if (config->differential_mode &&
     474:	491a      	ldr	r1, [pc, #104]	; (4e0 <adc_init+0x388>)
				return STATUS_ERR_INVALID_ARG;
     476:	2017      	movs	r0, #23
			if (config->differential_mode &&
     478:	428a      	cmp	r2, r1
     47a:	d900      	bls.n	47e <adc_init+0x326>
     47c:	e67c      	b.n	178 <adc_init+0x20>
					config->window.window_lower_value < -512 ||
     47e:	6a32      	ldr	r2, [r6, #32]
     480:	4462      	add	r2, ip
     482:	4917      	ldr	r1, [pc, #92]	; (4e0 <adc_init+0x388>)
     484:	428a      	cmp	r2, r1
     486:	d900      	bls.n	48a <adc_init+0x332>
     488:	e676      	b.n	178 <adc_init+0x20>
			} else if (config->window.window_lower_value > 1023 ||
     48a:	4a15      	ldr	r2, [pc, #84]	; (4e0 <adc_init+0x388>)
				return STATUS_ERR_INVALID_ARG;
     48c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     48e:	69f1      	ldr	r1, [r6, #28]
     490:	4291      	cmp	r1, r2
     492:	dd00      	ble.n	496 <adc_init+0x33e>
     494:	e670      	b.n	178 <adc_init+0x20>
     496:	6a31      	ldr	r1, [r6, #32]
     498:	4291      	cmp	r1, r2
     49a:	dd00      	ble.n	49e <adc_init+0x346>
     49c:	e66c      	b.n	178 <adc_init+0x20>
     49e:	e75c      	b.n	35a <adc_init+0x202>
			if (config->differential_mode &&
     4a0:	7af2      	ldrb	r2, [r6, #11]
     4a2:	2a00      	cmp	r2, #0
     4a4:	d00f      	beq.n	4c6 <adc_init+0x36e>
					(config->window.window_lower_value > 32767 ||
     4a6:	69f2      	ldr	r2, [r6, #28]
     4a8:	2180      	movs	r1, #128	; 0x80
     4aa:	0209      	lsls	r1, r1, #8
     4ac:	468c      	mov	ip, r1
     4ae:	4462      	add	r2, ip
			if (config->differential_mode &&
     4b0:	490c      	ldr	r1, [pc, #48]	; (4e4 <adc_init+0x38c>)
				return STATUS_ERR_INVALID_ARG;
     4b2:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4b4:	428a      	cmp	r2, r1
     4b6:	d900      	bls.n	4ba <adc_init+0x362>
     4b8:	e65e      	b.n	178 <adc_init+0x20>
					config->window.window_lower_value < -32768 ||
     4ba:	6a32      	ldr	r2, [r6, #32]
     4bc:	4462      	add	r2, ip
     4be:	4909      	ldr	r1, [pc, #36]	; (4e4 <adc_init+0x38c>)
     4c0:	428a      	cmp	r2, r1
     4c2:	d900      	bls.n	4c6 <adc_init+0x36e>
     4c4:	e658      	b.n	178 <adc_init+0x20>
			} else if (config->window.window_lower_value > 65535 ||
     4c6:	4a07      	ldr	r2, [pc, #28]	; (4e4 <adc_init+0x38c>)
				return STATUS_ERR_INVALID_ARG;
     4c8:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     4ca:	69f1      	ldr	r1, [r6, #28]
     4cc:	4291      	cmp	r1, r2
     4ce:	dd00      	ble.n	4d2 <adc_init+0x37a>
     4d0:	e652      	b.n	178 <adc_init+0x20>
     4d2:	6a31      	ldr	r1, [r6, #32]
     4d4:	4291      	cmp	r1, r2
     4d6:	dd00      	ble.n	4da <adc_init+0x382>
     4d8:	e64e      	b.n	178 <adc_init+0x20>
     4da:	e73e      	b.n	35a <adc_init+0x202>
		return STATUS_ERR_INVALID_ARG;
     4dc:	2017      	movs	r0, #23
     4de:	e64b      	b.n	178 <adc_init+0x20>
     4e0:	000003ff 	.word	0x000003ff
     4e4:	0000ffff 	.word	0x0000ffff

000004e8 <delay>:


 void delay (uint16_t length)
 {
	 // Simple delay loop
	 for (uint16_t i=0; i<length; i++) {
     4e8:	2200      	movs	r2, #0
 {
     4ea:	21ff      	movs	r1, #255	; 0xff
	 for (uint16_t i=0; i<length; i++) {
     4ec:	2800      	cmp	r0, #0
     4ee:	d009      	beq.n	504 <delay+0x1c>
 {
     4f0:	000b      	movs	r3, r1
		 for (uint8_t j=0; j<255; j++) {
			 asm volatile("nop");
     4f2:	46c0      	nop			; (mov r8, r8)
     4f4:	3b01      	subs	r3, #1
     4f6:	b2db      	uxtb	r3, r3
		 for (uint8_t j=0; j<255; j++) {
     4f8:	2b00      	cmp	r3, #0
     4fa:	d1fa      	bne.n	4f2 <delay+0xa>
	 for (uint16_t i=0; i<length; i++) {
     4fc:	3201      	adds	r2, #1
     4fe:	b292      	uxth	r2, r2
     500:	4290      	cmp	r0, r2
     502:	d1f5      	bne.n	4f0 <delay+0x8>
		 }
	 }
     504:	4770      	bx	lr
	...

00000508 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     508:	4b0c      	ldr	r3, [pc, #48]	; (53c <cpu_irq_enter_critical+0x34>)
     50a:	681b      	ldr	r3, [r3, #0]
     50c:	2b00      	cmp	r3, #0
     50e:	d106      	bne.n	51e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     510:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     514:	2b00      	cmp	r3, #0
     516:	d007      	beq.n	528 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     518:	2200      	movs	r2, #0
     51a:	4b09      	ldr	r3, [pc, #36]	; (540 <cpu_irq_enter_critical+0x38>)
     51c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     51e:	4a07      	ldr	r2, [pc, #28]	; (53c <cpu_irq_enter_critical+0x34>)
     520:	6813      	ldr	r3, [r2, #0]
     522:	3301      	adds	r3, #1
     524:	6013      	str	r3, [r2, #0]
}
     526:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     528:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     52a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     52e:	2200      	movs	r2, #0
     530:	4b04      	ldr	r3, [pc, #16]	; (544 <cpu_irq_enter_critical+0x3c>)
     532:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     534:	3201      	adds	r2, #1
     536:	4b02      	ldr	r3, [pc, #8]	; (540 <cpu_irq_enter_critical+0x38>)
     538:	701a      	strb	r2, [r3, #0]
     53a:	e7f0      	b.n	51e <cpu_irq_enter_critical+0x16>
     53c:	20000020 	.word	0x20000020
     540:	20000024 	.word	0x20000024
     544:	20000000 	.word	0x20000000

00000548 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     548:	4b08      	ldr	r3, [pc, #32]	; (56c <cpu_irq_leave_critical+0x24>)
     54a:	681a      	ldr	r2, [r3, #0]
     54c:	3a01      	subs	r2, #1
     54e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     550:	681b      	ldr	r3, [r3, #0]
     552:	2b00      	cmp	r3, #0
     554:	d109      	bne.n	56a <cpu_irq_leave_critical+0x22>
     556:	4b06      	ldr	r3, [pc, #24]	; (570 <cpu_irq_leave_critical+0x28>)
     558:	781b      	ldrb	r3, [r3, #0]
     55a:	2b00      	cmp	r3, #0
     55c:	d005      	beq.n	56a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     55e:	2201      	movs	r2, #1
     560:	4b04      	ldr	r3, [pc, #16]	; (574 <cpu_irq_leave_critical+0x2c>)
     562:	701a      	strb	r2, [r3, #0]
     564:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     568:	b662      	cpsie	i
	}
}
     56a:	4770      	bx	lr
     56c:	20000020 	.word	0x20000020
     570:	20000024 	.word	0x20000024
     574:	20000000 	.word	0x20000000

00000578 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     578:	b5f0      	push	{r4, r5, r6, r7, lr}
     57a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     57c:	ac01      	add	r4, sp, #4
     57e:	2501      	movs	r5, #1
     580:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     582:	2700      	movs	r7, #0
     584:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     586:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     588:	0021      	movs	r1, r4
     58a:	202a      	movs	r0, #42	; 0x2a
     58c:	4e06      	ldr	r6, [pc, #24]	; (5a8 <system_board_init+0x30>)
     58e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     590:	2280      	movs	r2, #128	; 0x80
     592:	00d2      	lsls	r2, r2, #3
     594:	4b05      	ldr	r3, [pc, #20]	; (5ac <system_board_init+0x34>)
     596:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     598:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     59a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     59c:	0021      	movs	r1, r4
     59e:	2002      	movs	r0, #2
     5a0:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     5a2:	b003      	add	sp, #12
     5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5a6:	46c0      	nop			; (mov r8, r8)
     5a8:	000005b1 	.word	0x000005b1
     5ac:	40002880 	.word	0x40002880

000005b0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     5b0:	b500      	push	{lr}
     5b2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     5b4:	ab01      	add	r3, sp, #4
     5b6:	2280      	movs	r2, #128	; 0x80
     5b8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     5ba:	780a      	ldrb	r2, [r1, #0]
     5bc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     5be:	784a      	ldrb	r2, [r1, #1]
     5c0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     5c2:	788a      	ldrb	r2, [r1, #2]
     5c4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     5c6:	0019      	movs	r1, r3
     5c8:	4b01      	ldr	r3, [pc, #4]	; (5d0 <port_pin_set_config+0x20>)
     5ca:	4798      	blx	r3
}
     5cc:	b003      	add	sp, #12
     5ce:	bd00      	pop	{pc}
     5d0:	00000c15 	.word	0x00000c15

000005d4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     5d4:	b510      	push	{r4, lr}
	switch (clock_source) {
     5d6:	2808      	cmp	r0, #8
     5d8:	d803      	bhi.n	5e2 <system_clock_source_get_hz+0xe>
     5da:	0080      	lsls	r0, r0, #2
     5dc:	4b1c      	ldr	r3, [pc, #112]	; (650 <system_clock_source_get_hz+0x7c>)
     5de:	581b      	ldr	r3, [r3, r0]
     5e0:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
     5e2:	2000      	movs	r0, #0
     5e4:	e032      	b.n	64c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     5e6:	4b1b      	ldr	r3, [pc, #108]	; (654 <system_clock_source_get_hz+0x80>)
     5e8:	6918      	ldr	r0, [r3, #16]
     5ea:	e02f      	b.n	64c <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
     5ec:	4b1a      	ldr	r3, [pc, #104]	; (658 <system_clock_source_get_hz+0x84>)
     5ee:	7d18      	ldrb	r0, [r3, #20]
     5f0:	0700      	lsls	r0, r0, #28
     5f2:	0f80      	lsrs	r0, r0, #30
     5f4:	1c43      	adds	r3, r0, #1
     5f6:	4819      	ldr	r0, [pc, #100]	; (65c <system_clock_source_get_hz+0x88>)
     5f8:	4358      	muls	r0, r3
     5fa:	e027      	b.n	64c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     5fc:	4b15      	ldr	r3, [pc, #84]	; (654 <system_clock_source_get_hz+0x80>)
     5fe:	6958      	ldr	r0, [r3, #20]
     600:	e024      	b.n	64c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
     602:	4b14      	ldr	r3, [pc, #80]	; (654 <system_clock_source_get_hz+0x80>)
     604:	681b      	ldr	r3, [r3, #0]
			return 0;
     606:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
     608:	079b      	lsls	r3, r3, #30
     60a:	d51f      	bpl.n	64c <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
     60c:	4912      	ldr	r1, [pc, #72]	; (658 <system_clock_source_get_hz+0x84>)
     60e:	2280      	movs	r2, #128	; 0x80
     610:	0052      	lsls	r2, r2, #1
     612:	68cb      	ldr	r3, [r1, #12]
     614:	4213      	tst	r3, r2
     616:	d0fc      	beq.n	612 <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
     618:	4b0e      	ldr	r3, [pc, #56]	; (654 <system_clock_source_get_hz+0x80>)
     61a:	681b      	ldr	r3, [r3, #0]
     61c:	075b      	lsls	r3, r3, #29
     61e:	d401      	bmi.n	624 <system_clock_source_get_hz+0x50>
		return 48000000UL;
     620:	480f      	ldr	r0, [pc, #60]	; (660 <system_clock_source_get_hz+0x8c>)
     622:	e013      	b.n	64c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     624:	2000      	movs	r0, #0
     626:	4b0f      	ldr	r3, [pc, #60]	; (664 <system_clock_source_get_hz+0x90>)
     628:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     62a:	4b0a      	ldr	r3, [pc, #40]	; (654 <system_clock_source_get_hz+0x80>)
     62c:	689b      	ldr	r3, [r3, #8]
     62e:	041b      	lsls	r3, r3, #16
     630:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     632:	4358      	muls	r0, r3
     634:	e00a      	b.n	64c <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     636:	2328      	movs	r3, #40	; 0x28
     638:	4a07      	ldr	r2, [pc, #28]	; (658 <system_clock_source_get_hz+0x84>)
     63a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     63c:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     63e:	079b      	lsls	r3, r3, #30
     640:	d504      	bpl.n	64c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     642:	4b04      	ldr	r3, [pc, #16]	; (654 <system_clock_source_get_hz+0x80>)
     644:	68d8      	ldr	r0, [r3, #12]
     646:	e001      	b.n	64c <system_clock_source_get_hz+0x78>
		return 32768UL;
     648:	2080      	movs	r0, #128	; 0x80
     64a:	0200      	lsls	r0, r0, #8
	}
}
     64c:	bd10      	pop	{r4, pc}
     64e:	46c0      	nop			; (mov r8, r8)
     650:	000010e4 	.word	0x000010e4
     654:	20000028 	.word	0x20000028
     658:	40000c00 	.word	0x40000c00
     65c:	003d0900 	.word	0x003d0900
     660:	02dc6c00 	.word	0x02dc6c00
     664:	00000b3d 	.word	0x00000b3d

00000668 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
     668:	b5f0      	push	{r4, r5, r6, r7, lr}
     66a:	46d6      	mov	lr, sl
     66c:	464f      	mov	r7, r9
     66e:	4646      	mov	r6, r8
     670:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
     672:	4b20      	ldr	r3, [pc, #128]	; (6f4 <system_clock_source_xosc32k_set_config+0x8c>)
     674:	469a      	mov	sl, r3
     676:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
     678:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
     67a:	7801      	ldrb	r1, [r0, #0]
     67c:	424c      	negs	r4, r1
     67e:	414c      	adcs	r4, r1
     680:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
     682:	7881      	ldrb	r1, [r0, #2]
     684:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
     686:	78c1      	ldrb	r1, [r0, #3]
     688:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
     68a:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
     68c:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
     68e:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
     690:	6840      	ldr	r0, [r0, #4]
     692:	4919      	ldr	r1, [pc, #100]	; (6f8 <system_clock_source_xosc32k_set_config+0x90>)
     694:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
     696:	2101      	movs	r1, #1
     698:	4648      	mov	r0, r9
     69a:	0080      	lsls	r0, r0, #2
     69c:	2204      	movs	r2, #4
     69e:	4393      	bics	r3, r2
     6a0:	4303      	orrs	r3, r0
     6a2:	4640      	mov	r0, r8
     6a4:	4008      	ands	r0, r1
     6a6:	00c0      	lsls	r0, r0, #3
     6a8:	3204      	adds	r2, #4
     6aa:	4393      	bics	r3, r2
     6ac:	4303      	orrs	r3, r0
     6ae:	4660      	mov	r0, ip
     6b0:	4008      	ands	r0, r1
     6b2:	0100      	lsls	r0, r0, #4
     6b4:	3208      	adds	r2, #8
     6b6:	4393      	bics	r3, r2
     6b8:	4303      	orrs	r3, r0
     6ba:	400f      	ands	r7, r1
     6bc:	01bf      	lsls	r7, r7, #6
     6be:	2040      	movs	r0, #64	; 0x40
     6c0:	4383      	bics	r3, r0
     6c2:	433b      	orrs	r3, r7
     6c4:	400e      	ands	r6, r1
     6c6:	01f6      	lsls	r6, r6, #7
     6c8:	3040      	adds	r0, #64	; 0x40
     6ca:	4383      	bics	r3, r0
     6cc:	4333      	orrs	r3, r6
     6ce:	3879      	subs	r0, #121	; 0x79
     6d0:	4005      	ands	r5, r0
     6d2:	022d      	lsls	r5, r5, #8
     6d4:	4809      	ldr	r0, [pc, #36]	; (6fc <system_clock_source_xosc32k_set_config+0x94>)
     6d6:	4003      	ands	r3, r0
     6d8:	432b      	orrs	r3, r5
     6da:	4021      	ands	r1, r4
     6dc:	0309      	lsls	r1, r1, #12
     6de:	4808      	ldr	r0, [pc, #32]	; (700 <system_clock_source_xosc32k_set_config+0x98>)
     6e0:	4003      	ands	r3, r0
     6e2:	430b      	orrs	r3, r1
     6e4:	4652      	mov	r2, sl
     6e6:	6153      	str	r3, [r2, #20]
}
     6e8:	bc1c      	pop	{r2, r3, r4}
     6ea:	4690      	mov	r8, r2
     6ec:	4699      	mov	r9, r3
     6ee:	46a2      	mov	sl, r4
     6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6f2:	46c0      	nop			; (mov r8, r8)
     6f4:	40001000 	.word	0x40001000
     6f8:	20000028 	.word	0x20000028
     6fc:	fffff8ff 	.word	0xfffff8ff
     700:	ffffefff 	.word	0xffffefff

00000704 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     704:	2808      	cmp	r0, #8
     706:	d803      	bhi.n	710 <system_clock_source_enable+0xc>
     708:	0080      	lsls	r0, r0, #2
     70a:	4b2d      	ldr	r3, [pc, #180]	; (7c0 <system_clock_source_enable+0xbc>)
     70c:	581b      	ldr	r3, [r3, r0]
     70e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     710:	2017      	movs	r0, #23
     712:	e054      	b.n	7be <system_clock_source_enable+0xba>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
     714:	4a2b      	ldr	r2, [pc, #172]	; (7c4 <system_clock_source_enable+0xc0>)
     716:	7d13      	ldrb	r3, [r2, #20]
     718:	2102      	movs	r1, #2
     71a:	430b      	orrs	r3, r1
     71c:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
     71e:	2000      	movs	r0, #0
     720:	e04d      	b.n	7be <system_clock_source_enable+0xba>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
     722:	4a29      	ldr	r2, [pc, #164]	; (7c8 <system_clock_source_enable+0xc4>)
     724:	6993      	ldr	r3, [r2, #24]
     726:	2102      	movs	r1, #2
     728:	430b      	orrs	r3, r1
     72a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     72c:	2000      	movs	r0, #0
		break;
     72e:	e046      	b.n	7be <system_clock_source_enable+0xba>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
     730:	4a24      	ldr	r2, [pc, #144]	; (7c4 <system_clock_source_enable+0xc0>)
     732:	8a13      	ldrh	r3, [r2, #16]
     734:	2102      	movs	r1, #2
     736:	430b      	orrs	r3, r1
     738:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     73a:	2000      	movs	r0, #0
		break;
     73c:	e03f      	b.n	7be <system_clock_source_enable+0xba>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
     73e:	4a22      	ldr	r2, [pc, #136]	; (7c8 <system_clock_source_enable+0xc4>)
     740:	6953      	ldr	r3, [r2, #20]
     742:	2102      	movs	r1, #2
     744:	430b      	orrs	r3, r1
     746:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
     748:	2000      	movs	r0, #0
		break;
     74a:	e038      	b.n	7be <system_clock_source_enable+0xba>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
     74c:	491f      	ldr	r1, [pc, #124]	; (7cc <system_clock_source_enable+0xc8>)
     74e:	680b      	ldr	r3, [r1, #0]
     750:	2202      	movs	r2, #2
     752:	4313      	orrs	r3, r2
     754:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
     756:	4b1b      	ldr	r3, [pc, #108]	; (7c4 <system_clock_source_enable+0xc0>)
     758:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
     75a:	0019      	movs	r1, r3
     75c:	32fe      	adds	r2, #254	; 0xfe
     75e:	68cb      	ldr	r3, [r1, #12]
     760:	4213      	tst	r3, r2
     762:	d0fc      	beq.n	75e <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     764:	4b19      	ldr	r3, [pc, #100]	; (7cc <system_clock_source_enable+0xc8>)
     766:	689a      	ldr	r2, [r3, #8]
     768:	4b16      	ldr	r3, [pc, #88]	; (7c4 <system_clock_source_enable+0xc0>)
     76a:	621a      	str	r2, [r3, #32]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
     76c:	2202      	movs	r2, #2
     76e:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
     770:	0019      	movs	r1, r3
     772:	32fe      	adds	r2, #254	; 0xfe
     774:	68cb      	ldr	r3, [r1, #12]
     776:	4213      	tst	r3, r2
     778:	d0fc      	beq.n	774 <system_clock_source_enable+0x70>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     77a:	4b14      	ldr	r3, [pc, #80]	; (7cc <system_clock_source_enable+0xc8>)
     77c:	685a      	ldr	r2, [r3, #4]
     77e:	4b11      	ldr	r3, [pc, #68]	; (7c4 <system_clock_source_enable+0xc0>)
     780:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
     782:	2200      	movs	r2, #0
     784:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
     786:	0019      	movs	r1, r3
     788:	3201      	adds	r2, #1
     78a:	32ff      	adds	r2, #255	; 0xff
     78c:	68cb      	ldr	r3, [r1, #12]
     78e:	4213      	tst	r3, r2
     790:	d0fc      	beq.n	78c <system_clock_source_enable+0x88>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     792:	4b0e      	ldr	r3, [pc, #56]	; (7cc <system_clock_source_enable+0xc8>)
     794:	681b      	ldr	r3, [r3, #0]
     796:	b29b      	uxth	r3, r3
     798:	4a0a      	ldr	r2, [pc, #40]	; (7c4 <system_clock_source_enable+0xc0>)
     79a:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
     79c:	2000      	movs	r0, #0
     79e:	e00e      	b.n	7be <system_clock_source_enable+0xba>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
     7a0:	4908      	ldr	r1, [pc, #32]	; (7c4 <system_clock_source_enable+0xc0>)
     7a2:	2228      	movs	r2, #40	; 0x28
     7a4:	5c8b      	ldrb	r3, [r1, r2]
     7a6:	2002      	movs	r0, #2
     7a8:	4303      	orrs	r3, r0
     7aa:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
     7ac:	0008      	movs	r0, r1
     7ae:	2138      	movs	r1, #56	; 0x38
     7b0:	3a26      	subs	r2, #38	; 0x26
     7b2:	5c43      	ldrb	r3, [r0, r1]
     7b4:	4213      	tst	r3, r2
     7b6:	d1fc      	bne.n	7b2 <system_clock_source_enable+0xae>
	return STATUS_OK;
     7b8:	2000      	movs	r0, #0
     7ba:	e000      	b.n	7be <system_clock_source_enable+0xba>
		return STATUS_OK;
     7bc:	2000      	movs	r0, #0
}
     7be:	4770      	bx	lr
     7c0:	00001108 	.word	0x00001108
     7c4:	40000c00 	.word	0x40000c00
     7c8:	40001000 	.word	0x40001000
     7cc:	20000028 	.word	0x20000028

000007d0 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7d2:	46c6      	mov	lr, r8
     7d4:	b500      	push	{lr}
     7d6:	b086      	sub	sp, #24
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
     7d8:	2280      	movs	r2, #128	; 0x80
     7da:	0052      	lsls	r2, r2, #1
     7dc:	4b46      	ldr	r3, [pc, #280]	; (8f8 <system_clock_init+0x128>)
     7de:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
     7e0:	3afd      	subs	r2, #253	; 0xfd
     7e2:	4b46      	ldr	r3, [pc, #280]	; (8fc <system_clock_init+0x12c>)
     7e4:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     7e6:	4a46      	ldr	r2, [pc, #280]	; (900 <system_clock_init+0x130>)
     7e8:	6853      	ldr	r3, [r2, #4]
     7ea:	211e      	movs	r1, #30
     7ec:	438b      	bics	r3, r1
     7ee:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
     7f0:	2380      	movs	r3, #128	; 0x80
     7f2:	05db      	lsls	r3, r3, #23
     7f4:	789b      	ldrb	r3, [r3, #2]
     7f6:	2b02      	cmp	r3, #2
     7f8:	d00f      	beq.n	81a <system_clock_init+0x4a>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
     7fa:	2380      	movs	r3, #128	; 0x80
     7fc:	05db      	lsls	r3, r3, #23
     7fe:	789b      	ldrb	r3, [r3, #2]
     800:	b25b      	sxtb	r3, r3
     802:	2b00      	cmp	r3, #0
     804:	db09      	blt.n	81a <system_clock_init+0x4a>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
     806:	2380      	movs	r3, #128	; 0x80
     808:	05db      	lsls	r3, r3, #23
     80a:	2201      	movs	r2, #1
     80c:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
     80e:	3201      	adds	r2, #1
     810:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
     812:	001a      	movs	r2, r3
     814:	7993      	ldrb	r3, [r2, #6]
     816:	2b00      	cmp	r3, #0
     818:	d0fc      	beq.n	814 <system_clock_init+0x44>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
     81a:	a803      	add	r0, sp, #12
     81c:	2300      	movs	r3, #0
     81e:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
     820:	2280      	movs	r2, #128	; 0x80
     822:	0212      	lsls	r2, r2, #8
     824:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
     826:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
     828:	2201      	movs	r2, #1
     82a:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
     82c:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
     82e:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
     830:	3203      	adds	r2, #3
     832:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
     834:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
     836:	4b33      	ldr	r3, [pc, #204]	; (904 <system_clock_init+0x134>)
     838:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
     83a:	2005      	movs	r0, #5
     83c:	4b32      	ldr	r3, [pc, #200]	; (908 <system_clock_init+0x138>)
     83e:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
     840:	4932      	ldr	r1, [pc, #200]	; (90c <system_clock_init+0x13c>)
     842:	2201      	movs	r2, #1
     844:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
     846:	421a      	tst	r2, r3
     848:	d0fc      	beq.n	844 <system_clock_init+0x74>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
     84a:	4a30      	ldr	r2, [pc, #192]	; (90c <system_clock_init+0x13c>)
     84c:	6953      	ldr	r3, [r2, #20]
     84e:	2180      	movs	r1, #128	; 0x80
     850:	430b      	orrs	r3, r1
     852:	6153      	str	r3, [r2, #20]
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
     854:	4b28      	ldr	r3, [pc, #160]	; (8f8 <system_clock_init+0x128>)
     856:	7d19      	ldrb	r1, [r3, #20]
     858:	2280      	movs	r2, #128	; 0x80
     85a:	4252      	negs	r2, r2
     85c:	430a      	orrs	r2, r1
     85e:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
     860:	7d1a      	ldrb	r2, [r3, #20]
     862:	2140      	movs	r1, #64	; 0x40
     864:	438a      	bics	r2, r1
     866:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     868:	4b29      	ldr	r3, [pc, #164]	; (910 <system_clock_init+0x140>)
     86a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     86c:	2501      	movs	r5, #1
     86e:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     870:	2400      	movs	r4, #0
     872:	466b      	mov	r3, sp
     874:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     876:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
     878:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     87a:	2305      	movs	r3, #5
     87c:	466a      	mov	r2, sp
     87e:	7013      	strb	r3, [r2, #0]
     880:	4669      	mov	r1, sp
     882:	2001      	movs	r0, #1
     884:	4b23      	ldr	r3, [pc, #140]	; (914 <system_clock_init+0x144>)
     886:	4698      	mov	r8, r3
     888:	4798      	blx	r3
     88a:	2001      	movs	r0, #1
     88c:	4f22      	ldr	r7, [pc, #136]	; (918 <system_clock_init+0x148>)
     88e:	47b8      	blx	r7
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
     890:	4e22      	ldr	r6, [pc, #136]	; (91c <system_clock_init+0x14c>)
     892:	71b5      	strb	r5, [r6, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
     894:	7175      	strb	r5, [r6, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
     896:	7135      	strb	r5, [r6, #4]
	config->division_factor    = 1;
     898:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     89a:	466b      	mov	r3, sp
     89c:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
     89e:	2306      	movs	r3, #6
     8a0:	466a      	mov	r2, sp
     8a2:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
     8a4:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     8a6:	7254      	strb	r4, [r2, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     8a8:	4669      	mov	r1, sp
     8aa:	2000      	movs	r0, #0
     8ac:	47c0      	blx	r8
     8ae:	2000      	movs	r0, #0
     8b0:	47b8      	blx	r7
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
     8b2:	2000      	movs	r0, #0
     8b4:	4b1a      	ldr	r3, [pc, #104]	; (920 <system_clock_init+0x150>)
     8b6:	4798      	blx	r3
     8b8:	7931      	ldrb	r1, [r6, #4]
     8ba:	b2c9      	uxtb	r1, r1
     8bc:	4b19      	ldr	r3, [pc, #100]	; (924 <system_clock_init+0x154>)
     8be:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
     8c0:	4b19      	ldr	r3, [pc, #100]	; (928 <system_clock_init+0x158>)
     8c2:	4298      	cmp	r0, r3
     8c4:	d814      	bhi.n	8f0 <system_clock_init+0x120>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
     8c6:	2380      	movs	r3, #128	; 0x80
     8c8:	05db      	lsls	r3, r3, #23
     8ca:	789b      	ldrb	r3, [r3, #2]
     8cc:	2b00      	cmp	r3, #0
     8ce:	d00f      	beq.n	8f0 <system_clock_init+0x120>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
     8d0:	2380      	movs	r3, #128	; 0x80
     8d2:	05db      	lsls	r3, r3, #23
     8d4:	789b      	ldrb	r3, [r3, #2]
     8d6:	b25b      	sxtb	r3, r3
     8d8:	2b00      	cmp	r3, #0
     8da:	db09      	blt.n	8f0 <system_clock_init+0x120>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
     8dc:	2380      	movs	r3, #128	; 0x80
     8de:	05db      	lsls	r3, r3, #23
     8e0:	2201      	movs	r2, #1
     8e2:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
     8e4:	2200      	movs	r2, #0
     8e6:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
     8e8:	001a      	movs	r2, r3
     8ea:	7993      	ldrb	r3, [r2, #6]
     8ec:	2b00      	cmp	r3, #0
     8ee:	d0fc      	beq.n	8ea <system_clock_init+0x11a>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
     8f0:	b006      	add	sp, #24
     8f2:	bc04      	pop	{r2}
     8f4:	4690      	mov	r8, r2
     8f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8f8:	40000c00 	.word	0x40000c00
     8fc:	40001400 	.word	0x40001400
     900:	41004000 	.word	0x41004000
     904:	00000669 	.word	0x00000669
     908:	00000705 	.word	0x00000705
     90c:	40001000 	.word	0x40001000
     910:	0000092d 	.word	0x0000092d
     914:	00000951 	.word	0x00000951
     918:	000009fd 	.word	0x000009fd
     91c:	40000400 	.word	0x40000400
     920:	00000a3d 	.word	0x00000a3d
     924:	00000e3d 	.word	0x00000e3d
     928:	00b71b00 	.word	0x00b71b00

0000092c <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
     92c:	4a06      	ldr	r2, [pc, #24]	; (948 <system_gclk_init+0x1c>)
     92e:	6953      	ldr	r3, [r2, #20]
     930:	2140      	movs	r1, #64	; 0x40
     932:	430b      	orrs	r3, r1
     934:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
     936:	2201      	movs	r2, #1
     938:	4b04      	ldr	r3, [pc, #16]	; (94c <system_gclk_init+0x20>)
     93a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
     93c:	0019      	movs	r1, r3
     93e:	780b      	ldrb	r3, [r1, #0]
     940:	4213      	tst	r3, r2
     942:	d1fc      	bne.n	93e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     944:	4770      	bx	lr
     946:	46c0      	nop			; (mov r8, r8)
     948:	40000400 	.word	0x40000400
     94c:	40001800 	.word	0x40001800

00000950 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     950:	b570      	push	{r4, r5, r6, lr}
     952:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
     954:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     956:	784b      	ldrb	r3, [r1, #1]
     958:	2b00      	cmp	r3, #0
     95a:	d002      	beq.n	962 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     95c:	2380      	movs	r3, #128	; 0x80
     95e:	00db      	lsls	r3, r3, #3
     960:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     962:	7a4b      	ldrb	r3, [r1, #9]
     964:	2b00      	cmp	r3, #0
     966:	d002      	beq.n	96e <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     968:	2380      	movs	r3, #128	; 0x80
     96a:	011b      	lsls	r3, r3, #4
     96c:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     96e:	6848      	ldr	r0, [r1, #4]
     970:	2801      	cmp	r0, #1
     972:	d90f      	bls.n	994 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     974:	1e43      	subs	r3, r0, #1
     976:	4218      	tst	r0, r3
     978:	d131      	bne.n	9de <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     97a:	2802      	cmp	r0, #2
     97c:	d92d      	bls.n	9da <system_gclk_gen_set_config+0x8a>
     97e:	2302      	movs	r3, #2
     980:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     982:	3201      	adds	r2, #1
						mask <<= 1) {
     984:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     986:	4298      	cmp	r0, r3
     988:	d8fb      	bhi.n	982 <system_gclk_gen_set_config+0x32>
     98a:	2380      	movs	r3, #128	; 0x80
     98c:	015b      	lsls	r3, r3, #5
     98e:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
     990:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     992:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     994:	7a0b      	ldrb	r3, [r1, #8]
     996:	2b00      	cmp	r3, #0
     998:	d002      	beq.n	9a0 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     99a:	2380      	movs	r3, #128	; 0x80
     99c:	019b      	lsls	r3, r3, #6
     99e:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     9a0:	2604      	movs	r6, #4
     9a2:	40a6      	lsls	r6, r4
     9a4:	4911      	ldr	r1, [pc, #68]	; (9ec <system_gclk_gen_set_config+0x9c>)
     9a6:	4a12      	ldr	r2, [pc, #72]	; (9f0 <system_gclk_gen_set_config+0xa0>)
     9a8:	684b      	ldr	r3, [r1, #4]
     9aa:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
     9ac:	421e      	tst	r6, r3
     9ae:	d1fb      	bne.n	9a8 <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     9b0:	4b10      	ldr	r3, [pc, #64]	; (9f4 <system_gclk_gen_set_config+0xa4>)
     9b2:	4798      	blx	r3
     9b4:	00a4      	lsls	r4, r4, #2
     9b6:	4b0d      	ldr	r3, [pc, #52]	; (9ec <system_gclk_gen_set_config+0x9c>)
     9b8:	469c      	mov	ip, r3
     9ba:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
     9bc:	6a22      	ldr	r2, [r4, #32]
     9be:	2380      	movs	r3, #128	; 0x80
     9c0:	005b      	lsls	r3, r3, #1
     9c2:	401a      	ands	r2, r3
     9c4:	432a      	orrs	r2, r5
     9c6:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     9c8:	4661      	mov	r1, ip
     9ca:	4a09      	ldr	r2, [pc, #36]	; (9f0 <system_gclk_gen_set_config+0xa0>)
     9cc:	684b      	ldr	r3, [r1, #4]
     9ce:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
     9d0:	421e      	tst	r6, r3
     9d2:	d1fb      	bne.n	9cc <system_gclk_gen_set_config+0x7c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     9d4:	4b08      	ldr	r3, [pc, #32]	; (9f8 <system_gclk_gen_set_config+0xa8>)
     9d6:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
     9d8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     9da:	2200      	movs	r2, #0
     9dc:	e7d5      	b.n	98a <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
     9de:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     9e0:	2380      	movs	r3, #128	; 0x80
     9e2:	009b      	lsls	r3, r3, #2
     9e4:	4318      	orrs	r0, r3
     9e6:	4305      	orrs	r5, r0
     9e8:	e7d4      	b.n	994 <system_gclk_gen_set_config+0x44>
     9ea:	46c0      	nop			; (mov r8, r8)
     9ec:	40001800 	.word	0x40001800
     9f0:	000007fc 	.word	0x000007fc
     9f4:	00000509 	.word	0x00000509
     9f8:	00000549 	.word	0x00000549

000009fc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     9fc:	b510      	push	{r4, lr}
     9fe:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     a00:	2204      	movs	r2, #4
     a02:	4082      	lsls	r2, r0
     a04:	4809      	ldr	r0, [pc, #36]	; (a2c <system_gclk_gen_enable+0x30>)
     a06:	490a      	ldr	r1, [pc, #40]	; (a30 <system_gclk_gen_enable+0x34>)
     a08:	6843      	ldr	r3, [r0, #4]
     a0a:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
     a0c:	421a      	tst	r2, r3
     a0e:	d1fb      	bne.n	a08 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
     a10:	4b08      	ldr	r3, [pc, #32]	; (a34 <system_gclk_gen_enable+0x38>)
     a12:	4798      	blx	r3
     a14:	00a4      	lsls	r4, r4, #2
     a16:	4b05      	ldr	r3, [pc, #20]	; (a2c <system_gclk_gen_enable+0x30>)
     a18:	469c      	mov	ip, r3
     a1a:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
     a1c:	6a22      	ldr	r2, [r4, #32]
     a1e:	2380      	movs	r3, #128	; 0x80
     a20:	005b      	lsls	r3, r3, #1
     a22:	4313      	orrs	r3, r2
     a24:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
     a26:	4b04      	ldr	r3, [pc, #16]	; (a38 <system_gclk_gen_enable+0x3c>)
     a28:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     a2a:	bd10      	pop	{r4, pc}
     a2c:	40001800 	.word	0x40001800
     a30:	000007fc 	.word	0x000007fc
     a34:	00000509 	.word	0x00000509
     a38:	00000549 	.word	0x00000549

00000a3c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a3e:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     a40:	2204      	movs	r2, #4
     a42:	4082      	lsls	r2, r0
     a44:	4812      	ldr	r0, [pc, #72]	; (a90 <system_gclk_gen_get_hz+0x54>)
     a46:	4913      	ldr	r1, [pc, #76]	; (a94 <system_gclk_gen_get_hz+0x58>)
     a48:	6843      	ldr	r3, [r0, #4]
     a4a:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
     a4c:	421a      	tst	r2, r3
     a4e:	d1fb      	bne.n	a48 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
     a50:	4b11      	ldr	r3, [pc, #68]	; (a98 <system_gclk_gen_get_hz+0x5c>)
     a52:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
     a54:	4f0e      	ldr	r7, [pc, #56]	; (a90 <system_gclk_gen_get_hz+0x54>)
     a56:	3408      	adds	r4, #8
     a58:	00a4      	lsls	r4, r4, #2
     a5a:	59e0      	ldr	r0, [r4, r7]
     a5c:	0700      	lsls	r0, r0, #28
     a5e:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
     a60:	4b0e      	ldr	r3, [pc, #56]	; (a9c <system_gclk_gen_get_hz+0x60>)
     a62:	4798      	blx	r3
     a64:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
     a66:	59e5      	ldr	r5, [r4, r7]
     a68:	04ed      	lsls	r5, r5, #19
     a6a:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
     a6c:	59e4      	ldr	r4, [r4, r7]
     a6e:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     a70:	4b0b      	ldr	r3, [pc, #44]	; (aa0 <system_gclk_gen_get_hz+0x64>)
     a72:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     a74:	2d00      	cmp	r5, #0
     a76:	d107      	bne.n	a88 <system_gclk_gen_get_hz+0x4c>
     a78:	2c01      	cmp	r4, #1
     a7a:	d907      	bls.n	a8c <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
     a7c:	0021      	movs	r1, r4
     a7e:	0030      	movs	r0, r6
     a80:	4b08      	ldr	r3, [pc, #32]	; (aa4 <system_gclk_gen_get_hz+0x68>)
     a82:	4798      	blx	r3
     a84:	0006      	movs	r6, r0
     a86:	e001      	b.n	a8c <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     a88:	3401      	adds	r4, #1
     a8a:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
     a8c:	0030      	movs	r0, r6
     a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a90:	40001800 	.word	0x40001800
     a94:	000007fc 	.word	0x000007fc
     a98:	00000509 	.word	0x00000509
     a9c:	000005d5 	.word	0x000005d5
     aa0:	00000549 	.word	0x00000549
     aa4:	00000e3d 	.word	0x00000e3d

00000aa8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     aa8:	b510      	push	{r4, lr}
     aaa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     aac:	4b09      	ldr	r3, [pc, #36]	; (ad4 <system_gclk_chan_enable+0x2c>)
     aae:	4798      	blx	r3
     ab0:	00a0      	lsls	r0, r4, #2
     ab2:	4b09      	ldr	r3, [pc, #36]	; (ad8 <system_gclk_chan_enable+0x30>)
     ab4:	469c      	mov	ip, r3
     ab6:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
     ab8:	2280      	movs	r2, #128	; 0x80
     aba:	5883      	ldr	r3, [r0, r2]
     abc:	2140      	movs	r1, #64	; 0x40
     abe:	430b      	orrs	r3, r1
     ac0:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
     ac2:	3140      	adds	r1, #64	; 0x40
     ac4:	3a40      	subs	r2, #64	; 0x40
     ac6:	5843      	ldr	r3, [r0, r1]
     ac8:	421a      	tst	r2, r3
     aca:	d0fc      	beq.n	ac6 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
     acc:	4b03      	ldr	r3, [pc, #12]	; (adc <system_gclk_chan_enable+0x34>)
     ace:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
     ad0:	bd10      	pop	{r4, pc}
     ad2:	46c0      	nop			; (mov r8, r8)
     ad4:	00000509 	.word	0x00000509
     ad8:	40001800 	.word	0x40001800
     adc:	00000549 	.word	0x00000549

00000ae0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     ae0:	b510      	push	{r4, lr}
     ae2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     ae4:	4b09      	ldr	r3, [pc, #36]	; (b0c <system_gclk_chan_disable+0x2c>)
     ae6:	4798      	blx	r3
     ae8:	00a0      	lsls	r0, r4, #2
     aea:	4b09      	ldr	r3, [pc, #36]	; (b10 <system_gclk_chan_disable+0x30>)
     aec:	469c      	mov	ip, r3
     aee:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
     af0:	2280      	movs	r2, #128	; 0x80
     af2:	5883      	ldr	r3, [r0, r2]
     af4:	2140      	movs	r1, #64	; 0x40
     af6:	438b      	bics	r3, r1
     af8:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
     afa:	3140      	adds	r1, #64	; 0x40
     afc:	3a40      	subs	r2, #64	; 0x40
     afe:	5843      	ldr	r3, [r0, r1]
     b00:	421a      	tst	r2, r3
     b02:	d1fc      	bne.n	afe <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
     b04:	4b03      	ldr	r3, [pc, #12]	; (b14 <system_gclk_chan_disable+0x34>)
     b06:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
     b08:	bd10      	pop	{r4, pc}
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	00000509 	.word	0x00000509
     b10:	40001800 	.word	0x40001800
     b14:	00000549 	.word	0x00000549

00000b18 <system_gclk_chan_set_config>:
{
     b18:	b570      	push	{r4, r5, r6, lr}
     b1a:	0004      	movs	r4, r0
     b1c:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
     b1e:	4b05      	ldr	r3, [pc, #20]	; (b34 <system_gclk_chan_set_config+0x1c>)
     b20:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
     b22:	782a      	ldrb	r2, [r5, #0]
     b24:	230f      	movs	r3, #15
     b26:	4013      	ands	r3, r2
     b28:	3420      	adds	r4, #32
     b2a:	00a4      	lsls	r4, r4, #2
     b2c:	4a02      	ldr	r2, [pc, #8]	; (b38 <system_gclk_chan_set_config+0x20>)
     b2e:	50a3      	str	r3, [r4, r2]
}
     b30:	bd70      	pop	{r4, r5, r6, pc}
     b32:	46c0      	nop			; (mov r8, r8)
     b34:	00000ae1 	.word	0x00000ae1
     b38:	40001800 	.word	0x40001800

00000b3c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     b3c:	b510      	push	{r4, lr}
     b3e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     b40:	4b06      	ldr	r3, [pc, #24]	; (b5c <system_gclk_chan_get_hz+0x20>)
     b42:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
     b44:	3420      	adds	r4, #32
     b46:	00a4      	lsls	r4, r4, #2
     b48:	4b05      	ldr	r3, [pc, #20]	; (b60 <system_gclk_chan_get_hz+0x24>)
     b4a:	58e4      	ldr	r4, [r4, r3]
     b4c:	0724      	lsls	r4, r4, #28
     b4e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     b50:	4b04      	ldr	r3, [pc, #16]	; (b64 <system_gclk_chan_get_hz+0x28>)
     b52:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     b54:	0020      	movs	r0, r4
     b56:	4b04      	ldr	r3, [pc, #16]	; (b68 <system_gclk_chan_get_hz+0x2c>)
     b58:	4798      	blx	r3
}
     b5a:	bd10      	pop	{r4, pc}
     b5c:	00000509 	.word	0x00000509
     b60:	40001800 	.word	0x40001800
     b64:	00000549 	.word	0x00000549
     b68:	00000a3d 	.word	0x00000a3d

00000b6c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     b6c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     b6e:	78d3      	ldrb	r3, [r2, #3]
     b70:	2b00      	cmp	r3, #0
     b72:	d135      	bne.n	be0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     b74:	7813      	ldrb	r3, [r2, #0]
     b76:	2b80      	cmp	r3, #128	; 0x80
     b78:	d029      	beq.n	bce <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     b7a:	061b      	lsls	r3, r3, #24
     b7c:	2480      	movs	r4, #128	; 0x80
     b7e:	0264      	lsls	r4, r4, #9
     b80:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     b82:	7854      	ldrb	r4, [r2, #1]
     b84:	2502      	movs	r5, #2
     b86:	43ac      	bics	r4, r5
     b88:	d106      	bne.n	b98 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     b8a:	7894      	ldrb	r4, [r2, #2]
     b8c:	2c00      	cmp	r4, #0
     b8e:	d120      	bne.n	bd2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     b90:	2480      	movs	r4, #128	; 0x80
     b92:	02a4      	lsls	r4, r4, #10
     b94:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     b96:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     b98:	7854      	ldrb	r4, [r2, #1]
     b9a:	3c01      	subs	r4, #1
     b9c:	2c01      	cmp	r4, #1
     b9e:	d91c      	bls.n	bda <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     ba0:	040d      	lsls	r5, r1, #16
     ba2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     ba4:	24a0      	movs	r4, #160	; 0xa0
     ba6:	05e4      	lsls	r4, r4, #23
     ba8:	432c      	orrs	r4, r5
     baa:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     bac:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     bae:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     bb0:	24d0      	movs	r4, #208	; 0xd0
     bb2:	0624      	lsls	r4, r4, #24
     bb4:	432c      	orrs	r4, r5
     bb6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     bb8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     bba:	78d4      	ldrb	r4, [r2, #3]
     bbc:	2c00      	cmp	r4, #0
     bbe:	d122      	bne.n	c06 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     bc0:	035b      	lsls	r3, r3, #13
     bc2:	d51c      	bpl.n	bfe <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     bc4:	7893      	ldrb	r3, [r2, #2]
     bc6:	2b01      	cmp	r3, #1
     bc8:	d01e      	beq.n	c08 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     bca:	6141      	str	r1, [r0, #20]
     bcc:	e017      	b.n	bfe <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
     bce:	2300      	movs	r3, #0
     bd0:	e7d7      	b.n	b82 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     bd2:	24c0      	movs	r4, #192	; 0xc0
     bd4:	02e4      	lsls	r4, r4, #11
     bd6:	4323      	orrs	r3, r4
     bd8:	e7dd      	b.n	b96 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     bda:	4c0d      	ldr	r4, [pc, #52]	; (c10 <_system_pinmux_config+0xa4>)
     bdc:	4023      	ands	r3, r4
     bde:	e7df      	b.n	ba0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
     be0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     be2:	040c      	lsls	r4, r1, #16
     be4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     be6:	23a0      	movs	r3, #160	; 0xa0
     be8:	05db      	lsls	r3, r3, #23
     bea:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     bec:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     bee:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     bf0:	23d0      	movs	r3, #208	; 0xd0
     bf2:	061b      	lsls	r3, r3, #24
     bf4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     bf6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
     bf8:	78d3      	ldrb	r3, [r2, #3]
     bfa:	2b00      	cmp	r3, #0
     bfc:	d103      	bne.n	c06 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     bfe:	7853      	ldrb	r3, [r2, #1]
     c00:	3b01      	subs	r3, #1
     c02:	2b01      	cmp	r3, #1
     c04:	d902      	bls.n	c0c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
     c06:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
     c08:	6181      	str	r1, [r0, #24]
     c0a:	e7f8      	b.n	bfe <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
     c0c:	6081      	str	r1, [r0, #8]
}
     c0e:	e7fa      	b.n	c06 <_system_pinmux_config+0x9a>
     c10:	fffbffff 	.word	0xfffbffff

00000c14 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     c14:	b510      	push	{r4, lr}
     c16:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c18:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     c1a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     c1c:	2900      	cmp	r1, #0
     c1e:	d104      	bne.n	c2a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     c20:	0943      	lsrs	r3, r0, #5
     c22:	01db      	lsls	r3, r3, #7
     c24:	4905      	ldr	r1, [pc, #20]	; (c3c <system_pinmux_pin_set_config+0x28>)
     c26:	468c      	mov	ip, r1
     c28:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     c2a:	241f      	movs	r4, #31
     c2c:	4020      	ands	r0, r4
     c2e:	2101      	movs	r1, #1
     c30:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
     c32:	0018      	movs	r0, r3
     c34:	4b02      	ldr	r3, [pc, #8]	; (c40 <system_pinmux_pin_set_config+0x2c>)
     c36:	4798      	blx	r3
}
     c38:	bd10      	pop	{r4, pc}
     c3a:	46c0      	nop			; (mov r8, r8)
     c3c:	40002800 	.word	0x40002800
     c40:	00000b6d 	.word	0x00000b6d

00000c44 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     c44:	4770      	bx	lr
	...

00000c48 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     c48:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     c4a:	4b05      	ldr	r3, [pc, #20]	; (c60 <system_init+0x18>)
     c4c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
     c4e:	4b05      	ldr	r3, [pc, #20]	; (c64 <system_init+0x1c>)
     c50:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
     c52:	4b05      	ldr	r3, [pc, #20]	; (c68 <system_init+0x20>)
     c54:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     c56:	4b05      	ldr	r3, [pc, #20]	; (c6c <system_init+0x24>)
     c58:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
     c5a:	4b05      	ldr	r3, [pc, #20]	; (c70 <system_init+0x28>)
     c5c:	4798      	blx	r3
}
     c5e:	bd10      	pop	{r4, pc}
     c60:	000007d1 	.word	0x000007d1
     c64:	00000579 	.word	0x00000579
     c68:	00000c45 	.word	0x00000c45
     c6c:	00000c45 	.word	0x00000c45
     c70:	00000c45 	.word	0x00000c45

00000c74 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     c74:	e7fe      	b.n	c74 <Dummy_Handler>
	...

00000c78 <Reset_Handler>:
{
     c78:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     c7a:	4a1a      	ldr	r2, [pc, #104]	; (ce4 <Reset_Handler+0x6c>)
     c7c:	4b1a      	ldr	r3, [pc, #104]	; (ce8 <Reset_Handler+0x70>)
     c7e:	429a      	cmp	r2, r3
     c80:	d011      	beq.n	ca6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     c82:	001a      	movs	r2, r3
     c84:	4b19      	ldr	r3, [pc, #100]	; (cec <Reset_Handler+0x74>)
     c86:	429a      	cmp	r2, r3
     c88:	d20d      	bcs.n	ca6 <Reset_Handler+0x2e>
     c8a:	4a19      	ldr	r2, [pc, #100]	; (cf0 <Reset_Handler+0x78>)
     c8c:	3303      	adds	r3, #3
     c8e:	1a9b      	subs	r3, r3, r2
     c90:	089b      	lsrs	r3, r3, #2
     c92:	3301      	adds	r3, #1
     c94:	009b      	lsls	r3, r3, #2
     c96:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     c98:	4813      	ldr	r0, [pc, #76]	; (ce8 <Reset_Handler+0x70>)
     c9a:	4912      	ldr	r1, [pc, #72]	; (ce4 <Reset_Handler+0x6c>)
     c9c:	588c      	ldr	r4, [r1, r2]
     c9e:	5084      	str	r4, [r0, r2]
     ca0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     ca2:	429a      	cmp	r2, r3
     ca4:	d1fa      	bne.n	c9c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     ca6:	4a13      	ldr	r2, [pc, #76]	; (cf4 <Reset_Handler+0x7c>)
     ca8:	4b13      	ldr	r3, [pc, #76]	; (cf8 <Reset_Handler+0x80>)
     caa:	429a      	cmp	r2, r3
     cac:	d20a      	bcs.n	cc4 <Reset_Handler+0x4c>
     cae:	43d3      	mvns	r3, r2
     cb0:	4911      	ldr	r1, [pc, #68]	; (cf8 <Reset_Handler+0x80>)
     cb2:	185b      	adds	r3, r3, r1
     cb4:	2103      	movs	r1, #3
     cb6:	438b      	bics	r3, r1
     cb8:	3304      	adds	r3, #4
     cba:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     cbc:	2100      	movs	r1, #0
     cbe:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     cc0:	4293      	cmp	r3, r2
     cc2:	d1fc      	bne.n	cbe <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     cc4:	4a0d      	ldr	r2, [pc, #52]	; (cfc <Reset_Handler+0x84>)
     cc6:	21ff      	movs	r1, #255	; 0xff
     cc8:	4b0d      	ldr	r3, [pc, #52]	; (d00 <Reset_Handler+0x88>)
     cca:	438b      	bics	r3, r1
     ccc:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     cce:	4a0d      	ldr	r2, [pc, #52]	; (d04 <Reset_Handler+0x8c>)
     cd0:	6853      	ldr	r3, [r2, #4]
     cd2:	397f      	subs	r1, #127	; 0x7f
     cd4:	430b      	orrs	r3, r1
     cd6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     cd8:	4b0b      	ldr	r3, [pc, #44]	; (d08 <Reset_Handler+0x90>)
     cda:	4798      	blx	r3
        main();
     cdc:	4b0b      	ldr	r3, [pc, #44]	; (d0c <Reset_Handler+0x94>)
     cde:	4798      	blx	r3
     ce0:	e7fe      	b.n	ce0 <Reset_Handler+0x68>
     ce2:	46c0      	nop			; (mov r8, r8)
     ce4:	0000114c 	.word	0x0000114c
     ce8:	20000000 	.word	0x20000000
     cec:	20000004 	.word	0x20000004
     cf0:	20000004 	.word	0x20000004
     cf4:	20000004 	.word	0x20000004
     cf8:	20000818 	.word	0x20000818
     cfc:	e000ed00 	.word	0xe000ed00
     d00:	00000000 	.word	0x00000000
     d04:	41004000 	.word	0x41004000
     d08:	00000f55 	.word	0x00000f55
     d0c:	00000e11 	.word	0x00000e11

00000d10 <configure_adc>:
void read_adc(void);

uint16_t adc_value[1000];

void configure_adc(void)
{
     d10:	b530      	push	{r4, r5, lr}
     d12:	b08d      	sub	sp, #52	; 0x34

	 struct adc_config conf_adc;

	 adc_get_config_defaults(&conf_adc);
     d14:	ac01      	add	r4, sp, #4
     d16:	0020      	movs	r0, r4
     d18:	4b12      	ldr	r3, [pc, #72]	; (d64 <configure_adc+0x54>)
     d1a:	4798      	blx	r3

	 conf_adc.clock_source = GCLK_GENERATOR_1;
     d1c:	2301      	movs	r3, #1
     d1e:	7023      	strb	r3, [r4, #0]
	 conf_adc.reference = ADC_REFERENCE_INTVCC1;
     d20:	3301      	adds	r3, #1
     d22:	7063      	strb	r3, [r4, #1]
	 conf_adc.clock_prescaler = ADC_CTRLB_PRESCALER_DIV16;
     d24:	3301      	adds	r3, #1
     d26:	70a3      	strb	r3, [r4, #2]
	// conf_adc.differential_mode = true;
	// conf_adc.positive_input = ADC_POSITIVE_INPUT_PIN0;
	// conf_adc.negative_input = ADC_NEGATIVE_INPUT_PIN4;

	 adc_init(&adc_instance, ADC, &conf_adc);
     d28:	4d0f      	ldr	r5, [pc, #60]	; (d68 <configure_adc+0x58>)
     d2a:	0022      	movs	r2, r4
     d2c:	490f      	ldr	r1, [pc, #60]	; (d6c <configure_adc+0x5c>)
     d2e:	0028      	movs	r0, r5
     d30:	4b0f      	ldr	r3, [pc, #60]	; (d70 <configure_adc+0x60>)
     d32:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     d34:	682a      	ldr	r2, [r5, #0]
     d36:	8c13      	ldrh	r3, [r2, #32]
     d38:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     d3a:	2b00      	cmp	r3, #0
     d3c:	d1fb      	bne.n	d36 <configure_adc+0x26>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     d3e:	3307      	adds	r3, #7
     d40:	7113      	strb	r3, [r2, #4]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     d42:	7193      	strb	r3, [r2, #6]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     d44:	7813      	ldrb	r3, [r2, #0]
     d46:	2102      	movs	r1, #2
     d48:	430b      	orrs	r3, r1
     d4a:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
     d4c:	4b06      	ldr	r3, [pc, #24]	; (d68 <configure_adc+0x58>)
     d4e:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
     d50:	8c13      	ldrh	r3, [r2, #32]
     d52:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     d54:	2b00      	cmp	r3, #0
     d56:	d1fb      	bne.n	d50 <configure_adc+0x40>

	 adc_enable(&adc_instance);
	 delay(50);
     d58:	2032      	movs	r0, #50	; 0x32
     d5a:	4b06      	ldr	r3, [pc, #24]	; (d74 <configure_adc+0x64>)
     d5c:	4798      	blx	r3

}
     d5e:	b00d      	add	sp, #52	; 0x34
     d60:	bd30      	pop	{r4, r5, pc}
     d62:	46c0      	nop			; (mov r8, r8)
     d64:	00000115 	.word	0x00000115
     d68:	20000810 	.word	0x20000810
     d6c:	43000c00 	.word	0x43000c00
     d70:	00000159 	.word	0x00000159
     d74:	000004e9 	.word	0x000004e9

00000d78 <read_adc>:

//volatile uint16_t r;

void read_adc(void)
{
     d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     d7a:	4b22      	ldr	r3, [pc, #136]	; (e04 <read_adc+0x8c>)
     d7c:	681d      	ldr	r5, [r3, #0]
     d7e:	8c2b      	ldrh	r3, [r5, #32]
     d80:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     d82:	2b00      	cmp	r3, #0
     d84:	d1fb      	bne.n	d7e <read_adc+0x6>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     d86:	7e2b      	ldrb	r3, [r5, #24]
     d88:	2202      	movs	r2, #2
     d8a:	4313      	orrs	r3, r2
     d8c:	762b      	strb	r3, [r5, #24]
     d8e:	8c2b      	ldrh	r3, [r5, #32]
     d90:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     d92:	2b00      	cmp	r3, #0
     d94:	d1fb      	bne.n	d8e <read_adc+0x16>
     d96:	4a1c      	ldr	r2, [pc, #112]	; (e08 <read_adc+0x90>)
     d98:	23fa      	movs	r3, #250	; 0xfa
     d9a:	00db      	lsls	r3, r3, #3
     d9c:	469c      	mov	ip, r3
     d9e:	4494      	add	ip, r2
     da0:	2700      	movs	r7, #0
	if (int_flags & ADC_INTFLAG_RESRDY) {
     da2:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
     da4:	2404      	movs	r4, #4
		status_flags |= ADC_STATUS_WINDOW;
     da6:	2602      	movs	r6, #2
     da8:	e005      	b.n	db6 <read_adc+0x3e>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
     daa:	4208      	tst	r0, r1
     dac:	d10e      	bne.n	dcc <read_adc+0x54>
	for(int i=0; i<1000; i++){
		//delay(50);
		adc_read(&adc_instance, &result);
		//delay(50);
		//r=result;
		adc_value[i]=result;		
     dae:	8017      	strh	r7, [r2, #0]
     db0:	3202      	adds	r2, #2
	for(int i=0; i<1000; i++){
     db2:	4594      	cmp	ip, r2
     db4:	d01b      	beq.n	dee <read_adc+0x76>
	uint32_t int_flags = adc_module->INTFLAG.reg;
     db6:	79ab      	ldrb	r3, [r5, #6]
     db8:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
     dba:	0001      	movs	r1, r0
     dbc:	4019      	ands	r1, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
     dbe:	421c      	tst	r4, r3
     dc0:	d000      	beq.n	dc4 <read_adc+0x4c>
		status_flags |= ADC_STATUS_WINDOW;
     dc2:	4331      	orrs	r1, r6
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     dc4:	421e      	tst	r6, r3
     dc6:	d0f0      	beq.n	daa <read_adc+0x32>
		status_flags |= ADC_STATUS_OVERRUN;
     dc8:	4321      	orrs	r1, r4
     dca:	e7ee      	b.n	daa <read_adc+0x32>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
     dcc:	8caf      	ldrh	r7, [r5, #36]	; 0x24
     dce:	b2bf      	uxth	r7, r7
	adc_module->INTFLAG.reg = int_flags;
     dd0:	71a8      	strb	r0, [r5, #6]
	uint32_t int_flags = adc_module->INTFLAG.reg;
     dd2:	79ab      	ldrb	r3, [r5, #6]
     dd4:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
     dd6:	0001      	movs	r1, r0
     dd8:	4019      	ands	r1, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
     dda:	421c      	tst	r4, r3
     ddc:	d000      	beq.n	de0 <read_adc+0x68>
		status_flags |= ADC_STATUS_WINDOW;
     dde:	4331      	orrs	r1, r6
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     de0:	421e      	tst	r6, r3
     de2:	d000      	beq.n	de6 <read_adc+0x6e>
		status_flags |= ADC_STATUS_OVERRUN;
     de4:	4321      	orrs	r1, r4

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
     de6:	420c      	tst	r4, r1
     de8:	d0e1      	beq.n	dae <read_adc+0x36>
	adc_module->INTFLAG.reg = int_flags;
     dea:	71ae      	strb	r6, [r5, #6]
     dec:	e7df      	b.n	dae <read_adc+0x36>
     dee:	23fa      	movs	r3, #250	; 0xfa
     df0:	009b      	lsls	r3, r3, #2
     df2:	3b01      	subs	r3, #1
	}
	for(int i=0; i<1000; i++){
     df4:	2b00      	cmp	r3, #0
     df6:	d1fc      	bne.n	df2 <read_adc+0x7a>
		sum = sum +adc_value[i];
	}
	send_value = sum/1000;
	delay(500);
     df8:	20fa      	movs	r0, #250	; 0xfa
     dfa:	0040      	lsls	r0, r0, #1
     dfc:	4b03      	ldr	r3, [pc, #12]	; (e0c <read_adc+0x94>)
     dfe:	4798      	blx	r3
}
     e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e02:	46c0      	nop			; (mov r8, r8)
     e04:	20000810 	.word	0x20000810
     e08:	20000040 	.word	0x20000040
     e0c:	000004e9 	.word	0x000004e9

00000e10 <main>:


int main (void)
{
     e10:	b510      	push	{r4, lr}
	system_init();
     e12:	4b06      	ldr	r3, [pc, #24]	; (e2c <main+0x1c>)
     e14:	4798      	blx	r3

	configure_adc();
     e16:	4b06      	ldr	r3, [pc, #24]	; (e30 <main+0x20>)
     e18:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     e1a:	2201      	movs	r2, #1
     e1c:	4b05      	ldr	r3, [pc, #20]	; (e34 <main+0x24>)
     e1e:	701a      	strb	r2, [r3, #0]
     e20:	f3bf 8f5f 	dmb	sy
     e24:	b662      	cpsie	i
	



	while (1) {
	read_adc();
     e26:	4c04      	ldr	r4, [pc, #16]	; (e38 <main+0x28>)
     e28:	47a0      	blx	r4
     e2a:	e7fd      	b.n	e28 <main+0x18>
     e2c:	00000c49 	.word	0x00000c49
     e30:	00000d11 	.word	0x00000d11
     e34:	20000000 	.word	0x20000000
     e38:	00000d79 	.word	0x00000d79

00000e3c <__udivsi3>:
     e3c:	2200      	movs	r2, #0
     e3e:	0843      	lsrs	r3, r0, #1
     e40:	428b      	cmp	r3, r1
     e42:	d374      	bcc.n	f2e <__udivsi3+0xf2>
     e44:	0903      	lsrs	r3, r0, #4
     e46:	428b      	cmp	r3, r1
     e48:	d35f      	bcc.n	f0a <__udivsi3+0xce>
     e4a:	0a03      	lsrs	r3, r0, #8
     e4c:	428b      	cmp	r3, r1
     e4e:	d344      	bcc.n	eda <__udivsi3+0x9e>
     e50:	0b03      	lsrs	r3, r0, #12
     e52:	428b      	cmp	r3, r1
     e54:	d328      	bcc.n	ea8 <__udivsi3+0x6c>
     e56:	0c03      	lsrs	r3, r0, #16
     e58:	428b      	cmp	r3, r1
     e5a:	d30d      	bcc.n	e78 <__udivsi3+0x3c>
     e5c:	22ff      	movs	r2, #255	; 0xff
     e5e:	0209      	lsls	r1, r1, #8
     e60:	ba12      	rev	r2, r2
     e62:	0c03      	lsrs	r3, r0, #16
     e64:	428b      	cmp	r3, r1
     e66:	d302      	bcc.n	e6e <__udivsi3+0x32>
     e68:	1212      	asrs	r2, r2, #8
     e6a:	0209      	lsls	r1, r1, #8
     e6c:	d065      	beq.n	f3a <__udivsi3+0xfe>
     e6e:	0b03      	lsrs	r3, r0, #12
     e70:	428b      	cmp	r3, r1
     e72:	d319      	bcc.n	ea8 <__udivsi3+0x6c>
     e74:	e000      	b.n	e78 <__udivsi3+0x3c>
     e76:	0a09      	lsrs	r1, r1, #8
     e78:	0bc3      	lsrs	r3, r0, #15
     e7a:	428b      	cmp	r3, r1
     e7c:	d301      	bcc.n	e82 <__udivsi3+0x46>
     e7e:	03cb      	lsls	r3, r1, #15
     e80:	1ac0      	subs	r0, r0, r3
     e82:	4152      	adcs	r2, r2
     e84:	0b83      	lsrs	r3, r0, #14
     e86:	428b      	cmp	r3, r1
     e88:	d301      	bcc.n	e8e <__udivsi3+0x52>
     e8a:	038b      	lsls	r3, r1, #14
     e8c:	1ac0      	subs	r0, r0, r3
     e8e:	4152      	adcs	r2, r2
     e90:	0b43      	lsrs	r3, r0, #13
     e92:	428b      	cmp	r3, r1
     e94:	d301      	bcc.n	e9a <__udivsi3+0x5e>
     e96:	034b      	lsls	r3, r1, #13
     e98:	1ac0      	subs	r0, r0, r3
     e9a:	4152      	adcs	r2, r2
     e9c:	0b03      	lsrs	r3, r0, #12
     e9e:	428b      	cmp	r3, r1
     ea0:	d301      	bcc.n	ea6 <__udivsi3+0x6a>
     ea2:	030b      	lsls	r3, r1, #12
     ea4:	1ac0      	subs	r0, r0, r3
     ea6:	4152      	adcs	r2, r2
     ea8:	0ac3      	lsrs	r3, r0, #11
     eaa:	428b      	cmp	r3, r1
     eac:	d301      	bcc.n	eb2 <__udivsi3+0x76>
     eae:	02cb      	lsls	r3, r1, #11
     eb0:	1ac0      	subs	r0, r0, r3
     eb2:	4152      	adcs	r2, r2
     eb4:	0a83      	lsrs	r3, r0, #10
     eb6:	428b      	cmp	r3, r1
     eb8:	d301      	bcc.n	ebe <__udivsi3+0x82>
     eba:	028b      	lsls	r3, r1, #10
     ebc:	1ac0      	subs	r0, r0, r3
     ebe:	4152      	adcs	r2, r2
     ec0:	0a43      	lsrs	r3, r0, #9
     ec2:	428b      	cmp	r3, r1
     ec4:	d301      	bcc.n	eca <__udivsi3+0x8e>
     ec6:	024b      	lsls	r3, r1, #9
     ec8:	1ac0      	subs	r0, r0, r3
     eca:	4152      	adcs	r2, r2
     ecc:	0a03      	lsrs	r3, r0, #8
     ece:	428b      	cmp	r3, r1
     ed0:	d301      	bcc.n	ed6 <__udivsi3+0x9a>
     ed2:	020b      	lsls	r3, r1, #8
     ed4:	1ac0      	subs	r0, r0, r3
     ed6:	4152      	adcs	r2, r2
     ed8:	d2cd      	bcs.n	e76 <__udivsi3+0x3a>
     eda:	09c3      	lsrs	r3, r0, #7
     edc:	428b      	cmp	r3, r1
     ede:	d301      	bcc.n	ee4 <__udivsi3+0xa8>
     ee0:	01cb      	lsls	r3, r1, #7
     ee2:	1ac0      	subs	r0, r0, r3
     ee4:	4152      	adcs	r2, r2
     ee6:	0983      	lsrs	r3, r0, #6
     ee8:	428b      	cmp	r3, r1
     eea:	d301      	bcc.n	ef0 <__udivsi3+0xb4>
     eec:	018b      	lsls	r3, r1, #6
     eee:	1ac0      	subs	r0, r0, r3
     ef0:	4152      	adcs	r2, r2
     ef2:	0943      	lsrs	r3, r0, #5
     ef4:	428b      	cmp	r3, r1
     ef6:	d301      	bcc.n	efc <__udivsi3+0xc0>
     ef8:	014b      	lsls	r3, r1, #5
     efa:	1ac0      	subs	r0, r0, r3
     efc:	4152      	adcs	r2, r2
     efe:	0903      	lsrs	r3, r0, #4
     f00:	428b      	cmp	r3, r1
     f02:	d301      	bcc.n	f08 <__udivsi3+0xcc>
     f04:	010b      	lsls	r3, r1, #4
     f06:	1ac0      	subs	r0, r0, r3
     f08:	4152      	adcs	r2, r2
     f0a:	08c3      	lsrs	r3, r0, #3
     f0c:	428b      	cmp	r3, r1
     f0e:	d301      	bcc.n	f14 <__udivsi3+0xd8>
     f10:	00cb      	lsls	r3, r1, #3
     f12:	1ac0      	subs	r0, r0, r3
     f14:	4152      	adcs	r2, r2
     f16:	0883      	lsrs	r3, r0, #2
     f18:	428b      	cmp	r3, r1
     f1a:	d301      	bcc.n	f20 <__udivsi3+0xe4>
     f1c:	008b      	lsls	r3, r1, #2
     f1e:	1ac0      	subs	r0, r0, r3
     f20:	4152      	adcs	r2, r2
     f22:	0843      	lsrs	r3, r0, #1
     f24:	428b      	cmp	r3, r1
     f26:	d301      	bcc.n	f2c <__udivsi3+0xf0>
     f28:	004b      	lsls	r3, r1, #1
     f2a:	1ac0      	subs	r0, r0, r3
     f2c:	4152      	adcs	r2, r2
     f2e:	1a41      	subs	r1, r0, r1
     f30:	d200      	bcs.n	f34 <__udivsi3+0xf8>
     f32:	4601      	mov	r1, r0
     f34:	4152      	adcs	r2, r2
     f36:	4610      	mov	r0, r2
     f38:	4770      	bx	lr
     f3a:	e7ff      	b.n	f3c <__udivsi3+0x100>
     f3c:	b501      	push	{r0, lr}
     f3e:	2000      	movs	r0, #0
     f40:	f000 f806 	bl	f50 <__aeabi_idiv0>
     f44:	bd02      	pop	{r1, pc}
     f46:	46c0      	nop			; (mov r8, r8)

00000f48 <__aeabi_uidivmod>:
     f48:	2900      	cmp	r1, #0
     f4a:	d0f7      	beq.n	f3c <__udivsi3+0x100>
     f4c:	e776      	b.n	e3c <__udivsi3>
     f4e:	4770      	bx	lr

00000f50 <__aeabi_idiv0>:
     f50:	4770      	bx	lr
     f52:	46c0      	nop			; (mov r8, r8)

00000f54 <__libc_init_array>:
     f54:	b570      	push	{r4, r5, r6, lr}
     f56:	2600      	movs	r6, #0
     f58:	4d0c      	ldr	r5, [pc, #48]	; (f8c <__libc_init_array+0x38>)
     f5a:	4c0d      	ldr	r4, [pc, #52]	; (f90 <__libc_init_array+0x3c>)
     f5c:	1b64      	subs	r4, r4, r5
     f5e:	10a4      	asrs	r4, r4, #2
     f60:	42a6      	cmp	r6, r4
     f62:	d109      	bne.n	f78 <__libc_init_array+0x24>
     f64:	2600      	movs	r6, #0
     f66:	f000 f8e1 	bl	112c <_init>
     f6a:	4d0a      	ldr	r5, [pc, #40]	; (f94 <__libc_init_array+0x40>)
     f6c:	4c0a      	ldr	r4, [pc, #40]	; (f98 <__libc_init_array+0x44>)
     f6e:	1b64      	subs	r4, r4, r5
     f70:	10a4      	asrs	r4, r4, #2
     f72:	42a6      	cmp	r6, r4
     f74:	d105      	bne.n	f82 <__libc_init_array+0x2e>
     f76:	bd70      	pop	{r4, r5, r6, pc}
     f78:	00b3      	lsls	r3, r6, #2
     f7a:	58eb      	ldr	r3, [r5, r3]
     f7c:	4798      	blx	r3
     f7e:	3601      	adds	r6, #1
     f80:	e7ee      	b.n	f60 <__libc_init_array+0xc>
     f82:	00b3      	lsls	r3, r6, #2
     f84:	58eb      	ldr	r3, [r5, r3]
     f86:	4798      	blx	r3
     f88:	3601      	adds	r6, #1
     f8a:	e7f2      	b.n	f72 <__libc_init_array+0x1e>
     f8c:	00001138 	.word	0x00001138
     f90:	00001138 	.word	0x00001138
     f94:	00001138 	.word	0x00001138
     f98:	0000113c 	.word	0x0000113c

00000f9c <memcpy>:
     f9c:	2300      	movs	r3, #0
     f9e:	b510      	push	{r4, lr}
     fa0:	429a      	cmp	r2, r3
     fa2:	d100      	bne.n	fa6 <memcpy+0xa>
     fa4:	bd10      	pop	{r4, pc}
     fa6:	5ccc      	ldrb	r4, [r1, r3]
     fa8:	54c4      	strb	r4, [r0, r3]
     faa:	3301      	adds	r3, #1
     fac:	e7f8      	b.n	fa0 <memcpy+0x4>
     fae:	0000      	movs	r0, r0
     fb0:	000002ac 	.word	0x000002ac
     fb4:	000004dc 	.word	0x000004dc
     fb8:	000004dc 	.word	0x000004dc
     fbc:	000004dc 	.word	0x000004dc
     fc0:	000004dc 	.word	0x000004dc
     fc4:	000004dc 	.word	0x000004dc
     fc8:	000004dc 	.word	0x000004dc
     fcc:	000004dc 	.word	0x000004dc
     fd0:	000004dc 	.word	0x000004dc
     fd4:	000004dc 	.word	0x000004dc
     fd8:	000004dc 	.word	0x000004dc
     fdc:	000004dc 	.word	0x000004dc
     fe0:	000004dc 	.word	0x000004dc
     fe4:	000004dc 	.word	0x000004dc
     fe8:	000004dc 	.word	0x000004dc
     fec:	000004dc 	.word	0x000004dc
     ff0:	00000294 	.word	0x00000294
     ff4:	000004dc 	.word	0x000004dc
     ff8:	000004dc 	.word	0x000004dc
     ffc:	000004dc 	.word	0x000004dc
    1000:	000004dc 	.word	0x000004dc
    1004:	000004dc 	.word	0x000004dc
    1008:	000004dc 	.word	0x000004dc
    100c:	000004dc 	.word	0x000004dc
    1010:	000004dc 	.word	0x000004dc
    1014:	000004dc 	.word	0x000004dc
    1018:	000004dc 	.word	0x000004dc
    101c:	000004dc 	.word	0x000004dc
    1020:	000004dc 	.word	0x000004dc
    1024:	000004dc 	.word	0x000004dc
    1028:	000004dc 	.word	0x000004dc
    102c:	000004dc 	.word	0x000004dc
    1030:	000002a4 	.word	0x000002a4
    1034:	000004dc 	.word	0x000004dc
    1038:	000004dc 	.word	0x000004dc
    103c:	000004dc 	.word	0x000004dc
    1040:	000004dc 	.word	0x000004dc
    1044:	000004dc 	.word	0x000004dc
    1048:	000004dc 	.word	0x000004dc
    104c:	000004dc 	.word	0x000004dc
    1050:	000004dc 	.word	0x000004dc
    1054:	000004dc 	.word	0x000004dc
    1058:	000004dc 	.word	0x000004dc
    105c:	000004dc 	.word	0x000004dc
    1060:	000004dc 	.word	0x000004dc
    1064:	000004dc 	.word	0x000004dc
    1068:	000004dc 	.word	0x000004dc
    106c:	000004dc 	.word	0x000004dc
    1070:	0000029c 	.word	0x0000029c
    1074:	000002b4 	.word	0x000002b4
    1078:	0000027c 	.word	0x0000027c
    107c:	0000028c 	.word	0x0000028c
    1080:	00000284 	.word	0x00000284
    1084:	00000002 	.word	0x00000002
    1088:	00000003 	.word	0x00000003
    108c:	00000028 	.word	0x00000028
    1090:	00000029 	.word	0x00000029
    1094:	00000004 	.word	0x00000004
    1098:	00000005 	.word	0x00000005
    109c:	00000006 	.word	0x00000006
    10a0:	00000007 	.word	0x00000007
    10a4:	00000020 	.word	0x00000020
    10a8:	00000021 	.word	0x00000021
    10ac:	00000022 	.word	0x00000022
    10b0:	00000023 	.word	0x00000023
    10b4:	00000024 	.word	0x00000024
    10b8:	00000025 	.word	0x00000025
    10bc:	00000026 	.word	0x00000026
    10c0:	00000027 	.word	0x00000027
    10c4:	00000008 	.word	0x00000008
    10c8:	00000009 	.word	0x00000009
    10cc:	0000000a 	.word	0x0000000a
    10d0:	0000000b 	.word	0x0000000b
    10d4:	0000ffff 	.word	0x0000ffff
    10d8:	0000ffff 	.word	0x0000ffff
    10dc:	0000ffff 	.word	0x0000ffff
    10e0:	0000ffff 	.word	0x0000ffff
    10e4:	000005e6 	.word	0x000005e6
    10e8:	000005e2 	.word	0x000005e2
    10ec:	000005e2 	.word	0x000005e2
    10f0:	00000648 	.word	0x00000648
    10f4:	00000648 	.word	0x00000648
    10f8:	000005fc 	.word	0x000005fc
    10fc:	000005ec 	.word	0x000005ec
    1100:	00000602 	.word	0x00000602
    1104:	00000636 	.word	0x00000636
    1108:	00000730 	.word	0x00000730
    110c:	00000710 	.word	0x00000710
    1110:	00000710 	.word	0x00000710
    1114:	000007bc 	.word	0x000007bc
    1118:	00000722 	.word	0x00000722
    111c:	0000073e 	.word	0x0000073e
    1120:	00000714 	.word	0x00000714
    1124:	0000074c 	.word	0x0000074c
    1128:	000007a0 	.word	0x000007a0

0000112c <_init>:
    112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    112e:	46c0      	nop			; (mov r8, r8)
    1130:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1132:	bc08      	pop	{r3}
    1134:	469e      	mov	lr, r3
    1136:	4770      	bx	lr

00001138 <__init_array_start>:
    1138:	000000dd 	.word	0x000000dd

0000113c <_fini>:
    113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    113e:	46c0      	nop			; (mov r8, r8)
    1140:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1142:	bc08      	pop	{r3}
    1144:	469e      	mov	lr, r3
    1146:	4770      	bx	lr

00001148 <__fini_array_start>:
    1148:	000000b5 	.word	0x000000b5
