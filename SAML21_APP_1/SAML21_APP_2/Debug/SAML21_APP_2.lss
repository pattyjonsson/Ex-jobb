
SAML21_APP_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000167c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  0000167c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020004  2**0
                  CONTENTS
  3 .bss          0000007c  20000004  00001680  00020004  2**2
                  ALLOC
  4 .stack        00002000  20000080  000016fc  00020004  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001d6b9  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002dc8  00000000  00000000  0003d73e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000363e  00000000  00000000  00040506  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000358  00000000  00000000  00043b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000340  00000000  00000000  00043e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001c57e  00000000  00000000  000441dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00009fd4  00000000  00000000  0006075a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009a07c  00000000  00000000  0006a72e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000774  00000000  00000000  001047ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 20 00 20 0d 12 00 00 09 12 00 00 09 12 00 00     . . ............
	...
      2c:	09 12 00 00 00 00 00 00 00 00 00 00 09 12 00 00     ................
      3c:	09 12 00 00 09 12 00 00 09 12 00 00 09 12 00 00     ................
      4c:	09 12 00 00 09 12 00 00 09 12 00 00 09 12 00 00     ................
      5c:	09 12 00 00 09 12 00 00 09 12 00 00 09 12 00 00     ................
      6c:	09 12 00 00 09 12 00 00 09 12 00 00 09 12 00 00     ................
      7c:	09 12 00 00 09 12 00 00 d1 05 00 00 e1 05 00 00     ................
      8c:	f1 05 00 00 01 06 00 00 11 06 00 00 09 12 00 00     ................
      9c:	09 12 00 00 09 12 00 00 09 12 00 00 09 12 00 00     ................
      ac:	09 12 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000004 	.word	0x20000004
      d4:	00000000 	.word	0x00000000
      d8:	0000167c 	.word	0x0000167c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000008 	.word	0x20000008
     108:	0000167c 	.word	0x0000167c
     10c:	0000167c 	.word	0x0000167c
     110:	00000000 	.word	0x00000000

00000114 <configure_adc>:

 #include "asf.h"
 #include "ADC/configure_adc.h"

 void configure_adc(void)
 {
     114:	b510      	push	{r4, lr}
     116:	b08c      	sub	sp, #48	; 0x30
	 struct adc_config config_adc;
	 adc_get_config_defaults(&config_adc);
     118:	a801      	add	r0, sp, #4
     11a:	4b0e      	ldr	r3, [pc, #56]	; (154 <configure_adc+0x40>)
     11c:	4798      	blx	r3
	 adc_init(&adc_instance, ADC, &config_adc);
     11e:	4c0e      	ldr	r4, [pc, #56]	; (158 <configure_adc+0x44>)
     120:	aa01      	add	r2, sp, #4
     122:	490e      	ldr	r1, [pc, #56]	; (15c <configure_adc+0x48>)
     124:	0020      	movs	r0, r4
     126:	4b0e      	ldr	r3, [pc, #56]	; (160 <configure_adc+0x4c>)
     128:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     12a:	6822      	ldr	r2, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->SYNCBUSY.reg) {
     12c:	8c13      	ldrh	r3, [r2, #32]
     12e:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     130:	2b00      	cmp	r3, #0
     132:	d1fb      	bne.n	12c <configure_adc+0x18>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     134:	3307      	adds	r3, #7
     136:	7113      	strb	r3, [r2, #4]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     138:	7193      	strb	r3, [r2, #6]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     13a:	7813      	ldrb	r3, [r2, #0]
     13c:	2102      	movs	r1, #2
     13e:	430b      	orrs	r3, r1
     140:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
     142:	4b05      	ldr	r3, [pc, #20]	; (158 <configure_adc+0x44>)
     144:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
     146:	8c13      	ldrh	r3, [r2, #32]
     148:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     14a:	2b00      	cmp	r3, #0
     14c:	d1fb      	bne.n	146 <configure_adc+0x32>
	 adc_enable(&adc_instance);
     14e:	b00c      	add	sp, #48	; 0x30
     150:	bd10      	pop	{r4, pc}
     152:	46c0      	nop			; (mov r8, r8)
     154:	00000165 	.word	0x00000165
     158:	20000048 	.word	0x20000048
     15c:	43000c00 	.word	0x43000c00
     160:	000001a9 	.word	0x000001a9

00000164 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     164:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     166:	2300      	movs	r3, #0
     168:	2200      	movs	r2, #0
     16a:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     16c:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     16e:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     170:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     172:	2100      	movs	r1, #0
     174:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     176:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     178:	61c3      	str	r3, [r0, #28]
#if SAMR30
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
     17a:	2401      	movs	r4, #1
     17c:	7104      	strb	r4, [r0, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     17e:	24c0      	movs	r4, #192	; 0xc0
     180:	0164      	lsls	r4, r4, #5
     182:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     184:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     186:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
     188:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
     18a:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
     18c:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     18e:	242a      	movs	r4, #42	; 0x2a
     190:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
     192:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
     194:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
     196:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
     198:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
     19a:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
     19c:	3c06      	subs	r4, #6
     19e:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     1a0:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     1a2:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     1a4:	7541      	strb	r1, [r0, #21]
}
     1a6:	bd10      	pop	{r4, pc}

000001a8 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1aa:	46ce      	mov	lr, r9
     1ac:	b500      	push	{lr}
     1ae:	b09a      	sub	sp, #104	; 0x68
     1b0:	0005      	movs	r5, r0
     1b2:	0016      	movs	r6, r2

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     1b4:	6001      	str	r1, [r0, #0]

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     1b6:	4ab5      	ldr	r2, [pc, #724]	; (48c <adc_init+0x2e4>)
     1b8:	6a13      	ldr	r3, [r2, #32]
     1ba:	2008      	movs	r0, #8
     1bc:	4303      	orrs	r3, r0
     1be:	6213      	str	r3, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1c0:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     1c2:	3803      	subs	r0, #3
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1c4:	07db      	lsls	r3, r3, #31
     1c6:	d503      	bpl.n	1d0 <adc_init+0x28>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
     1c8:	b01a      	add	sp, #104	; 0x68
     1ca:	bc04      	pop	{r2}
     1cc:	4691      	mov	r9, r2
     1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Adc *const adc_module = module_inst->hw;
     1d0:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     1d2:	8c13      	ldrh	r3, [r2, #32]
     1d4:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     1d6:	2b00      	cmp	r3, #0
     1d8:	d1fb      	bne.n	1d2 <adc_init+0x2a>
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1da:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     1dc:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1de:	079b      	lsls	r3, r3, #30
     1e0:	d4f2      	bmi.n	1c8 <adc_init+0x20>
	module_inst->reference = config->reference;
     1e2:	7873      	ldrb	r3, [r6, #1]
     1e4:	712b      	strb	r3, [r5, #4]
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     1e6:	2b00      	cmp	r3, #0
     1e8:	d104      	bne.n	1f4 <adc_init+0x4c>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     1ea:	4aa9      	ldr	r2, [pc, #676]	; (490 <adc_init+0x2e8>)
     1ec:	69d3      	ldr	r3, [r2, #28]
     1ee:	2104      	movs	r1, #4
     1f0:	430b      	orrs	r3, r1
     1f2:	61d3      	str	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     1f4:	682f      	ldr	r7, [r5, #0]
	gclk_chan_conf.source_generator = config->clock_source;
     1f6:	7833      	ldrb	r3, [r6, #0]
     1f8:	466a      	mov	r2, sp
     1fa:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     1fc:	4669      	mov	r1, sp
     1fe:	201e      	movs	r0, #30
     200:	4ba4      	ldr	r3, [pc, #656]	; (494 <adc_init+0x2ec>)
     202:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     204:	201e      	movs	r0, #30
     206:	4ba4      	ldr	r3, [pc, #656]	; (498 <adc_init+0x2f0>)
     208:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->positive_input);
     20a:	7934      	ldrb	r4, [r6, #4]
	const uint32_t pinmapping[] = {
     20c:	2260      	movs	r2, #96	; 0x60
     20e:	49a3      	ldr	r1, [pc, #652]	; (49c <adc_init+0x2f4>)
     210:	a802      	add	r0, sp, #8
     212:	4ba3      	ldr	r3, [pc, #652]	; (4a0 <adc_init+0x2f8>)
     214:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     216:	2c13      	cmp	r4, #19
     218:	d90b      	bls.n	232 <adc_init+0x8a>
	_adc_configure_ain_pin(index, config->negative_input);
     21a:	88f4      	ldrh	r4, [r6, #6]
	const uint32_t pinmapping[] = {
     21c:	2260      	movs	r2, #96	; 0x60
     21e:	499f      	ldr	r1, [pc, #636]	; (49c <adc_init+0x2f4>)
     220:	a802      	add	r0, sp, #8
     222:	4b9f      	ldr	r3, [pc, #636]	; (4a0 <adc_init+0x2f8>)
     224:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     226:	2c13      	cmp	r4, #19
     228:	d911      	bls.n	24e <adc_init+0xa6>
     22a:	2400      	movs	r4, #0
	const uint32_t pinmapping[] = {
     22c:	4b9c      	ldr	r3, [pc, #624]	; (4a0 <adc_init+0x2f8>)
     22e:	4699      	mov	r9, r3
     230:	e01e      	b.n	270 <adc_init+0xc8>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     232:	00a4      	lsls	r4, r4, #2
     234:	ab02      	add	r3, sp, #8
     236:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     238:	a901      	add	r1, sp, #4
     23a:	2300      	movs	r3, #0
     23c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     23e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     240:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     242:	3301      	adds	r3, #1
     244:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     246:	b2c0      	uxtb	r0, r0
     248:	4b96      	ldr	r3, [pc, #600]	; (4a4 <adc_init+0x2fc>)
     24a:	4798      	blx	r3
     24c:	e7e5      	b.n	21a <adc_init+0x72>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     24e:	00a4      	lsls	r4, r4, #2
     250:	ab02      	add	r3, sp, #8
     252:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     254:	a901      	add	r1, sp, #4
     256:	2300      	movs	r3, #0
     258:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     25a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     25c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     25e:	3301      	adds	r3, #1
     260:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     262:	b2c0      	uxtb	r0, r0
     264:	4b8f      	ldr	r3, [pc, #572]	; (4a4 <adc_init+0x2fc>)
     266:	4798      	blx	r3
     268:	e7df      	b.n	22a <adc_init+0x82>
     26a:	3401      	adds	r4, #1
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     26c:	2c14      	cmp	r4, #20
     26e:	d018      	beq.n	2a2 <adc_init+0xfa>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     270:	2301      	movs	r3, #1
     272:	40a3      	lsls	r3, r4
     274:	6932      	ldr	r2, [r6, #16]
     276:	421a      	tst	r2, r3
     278:	d0f7      	beq.n	26a <adc_init+0xc2>
	const uint32_t pinmapping[] = {
     27a:	2260      	movs	r2, #96	; 0x60
     27c:	4987      	ldr	r1, [pc, #540]	; (49c <adc_init+0x2f4>)
     27e:	a802      	add	r0, sp, #8
     280:	47c8      	blx	r9
	if (pin <= _adc_extchannel_msb[index]) {
     282:	2c13      	cmp	r4, #19
     284:	d8f1      	bhi.n	26a <adc_init+0xc2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     286:	00a3      	lsls	r3, r4, #2
     288:	aa02      	add	r2, sp, #8
     28a:	5898      	ldr	r0, [r3, r2]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     28c:	a901      	add	r1, sp, #4
     28e:	2300      	movs	r3, #0
     290:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     292:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     294:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     296:	3301      	adds	r3, #1
     298:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     29a:	b2c0      	uxtb	r0, r0
     29c:	4b81      	ldr	r3, [pc, #516]	; (4a4 <adc_init+0x2fc>)
     29e:	4798      	blx	r3
     2a0:	e7e3      	b.n	26a <adc_init+0xc2>
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     2a2:	7b73      	ldrb	r3, [r6, #13]
     2a4:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     2a6:	7bb2      	ldrb	r2, [r6, #14]
     2a8:	01d2      	lsls	r2, r2, #7
     2aa:	4313      	orrs	r3, r2
     2ac:	b2db      	uxtb	r3, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     2ae:	703b      	strb	r3, [r7, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     2b0:	7d33      	ldrb	r3, [r6, #20]
     2b2:	01db      	lsls	r3, r3, #7
			| (config->reference);
     2b4:	7872      	ldrb	r2, [r6, #1]
     2b6:	4313      	orrs	r3, r2
     2b8:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     2ba:	70bb      	strb	r3, [r7, #2]
	switch (config->resolution) {
     2bc:	78f3      	ldrb	r3, [r6, #3]
     2be:	2b34      	cmp	r3, #52	; 0x34
     2c0:	d900      	bls.n	2c4 <adc_init+0x11c>
     2c2:	e133      	b.n	52c <adc_init+0x384>
     2c4:	009b      	lsls	r3, r3, #2
     2c6:	4a78      	ldr	r2, [pc, #480]	; (4a8 <adc_init+0x300>)
     2c8:	58d3      	ldr	r3, [r2, r3]
     2ca:	469f      	mov	pc, r3
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     2cc:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     2ce:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     2d0:	2102      	movs	r1, #2
     2d2:	e01a      	b.n	30a <adc_init+0x162>
		adjres = config->divide_result;
     2d4:	7a71      	ldrb	r1, [r6, #9]
		accumulate = config->accumulate_samples;
     2d6:	7a32      	ldrb	r2, [r6, #8]
		resolution = ADC_RESOLUTION_16BIT;
     2d8:	2410      	movs	r4, #16
     2da:	e016      	b.n	30a <adc_init+0x162>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     2dc:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
     2de:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     2e0:	2101      	movs	r1, #1
     2e2:	e012      	b.n	30a <adc_init+0x162>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     2e4:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
     2e6:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     2e8:	2100      	movs	r1, #0
     2ea:	e00e      	b.n	30a <adc_init+0x162>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     2ec:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
     2ee:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     2f0:	2100      	movs	r1, #0
     2f2:	e00a      	b.n	30a <adc_init+0x162>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     2f4:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
     2f6:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     2f8:	2100      	movs	r1, #0
     2fa:	e006      	b.n	30a <adc_init+0x162>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     2fc:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
     2fe:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     300:	2100      	movs	r1, #0
     302:	e002      	b.n	30a <adc_init+0x162>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     304:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
     306:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     308:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     30a:	0109      	lsls	r1, r1, #4
     30c:	2370      	movs	r3, #112	; 0x70
     30e:	400b      	ands	r3, r1
     310:	4313      	orrs	r3, r2
     312:	733b      	strb	r3, [r7, #12]
	Adc *const adc_module = module_inst->hw;
     314:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     316:	8c13      	ldrh	r3, [r2, #32]
     318:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     31a:	2b00      	cmp	r3, #0
     31c:	d1fb      	bne.n	316 <adc_init+0x16e>
	if (config->sample_length > 63) {
     31e:	7d73      	ldrb	r3, [r6, #21]
		return STATUS_ERR_INVALID_ARG;
     320:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     322:	2b3f      	cmp	r3, #63	; 0x3f
     324:	d900      	bls.n	328 <adc_init+0x180>
     326:	e74f      	b.n	1c8 <adc_init+0x20>
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     328:	7bf2      	ldrb	r2, [r6, #15]
     32a:	01d2      	lsls	r2, r2, #7
     32c:	4313      	orrs	r3, r2
     32e:	b2db      	uxtb	r3, r3
		adc_module->SAMPCTRL.reg =
     330:	737b      	strb	r3, [r7, #13]
	Adc *const adc_module = module_inst->hw;
     332:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     334:	8c13      	ldrh	r3, [r2, #32]
     336:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     338:	2b00      	cmp	r3, #0
     33a:	d1fb      	bne.n	334 <adc_init+0x18c>
			config->clock_prescaler;
     33c:	78b3      	ldrb	r3, [r6, #2]
	adc_module->CTRLB.reg =
     33e:	707b      	strb	r3, [r7, #1]
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     340:	2324      	movs	r3, #36	; 0x24
     342:	5cf3      	ldrb	r3, [r6, r3]
     344:	00db      	lsls	r3, r3, #3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     346:	7b32      	ldrb	r2, [r6, #12]
     348:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     34a:	431a      	orrs	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     34c:	7af3      	ldrb	r3, [r6, #11]
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     34e:	4313      	orrs	r3, r2
     350:	7ab2      	ldrb	r2, [r6, #10]
     352:	0052      	lsls	r2, r2, #1
     354:	4313      	orrs	r3, r2
     356:	4323      	orrs	r3, r4
	adc_module->CTRLC.reg =
     358:	817b      	strh	r3, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     35a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     35c:	8c13      	ldrh	r3, [r2, #32]
     35e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     360:	2b00      	cmp	r3, #0
     362:	d1fb      	bne.n	35c <adc_init+0x1b4>
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     364:	8b33      	ldrh	r3, [r6, #24]
     366:	2b00      	cmp	r3, #0
     368:	d01f      	beq.n	3aa <adc_init+0x202>
		switch (resolution) {
     36a:	2c10      	cmp	r4, #16
     36c:	d100      	bne.n	370 <adc_init+0x1c8>
     36e:	e0bf      	b.n	4f0 <adc_init+0x348>
     370:	d96b      	bls.n	44a <adc_init+0x2a2>
     372:	2c20      	cmp	r4, #32
     374:	d100      	bne.n	378 <adc_init+0x1d0>
     376:	e09d      	b.n	4b4 <adc_init+0x30c>
     378:	2c30      	cmp	r4, #48	; 0x30
     37a:	d116      	bne.n	3aa <adc_init+0x202>
			if (config->differential_mode &&
     37c:	7af2      	ldrb	r2, [r6, #11]
     37e:	2a00      	cmp	r2, #0
     380:	d00a      	beq.n	398 <adc_init+0x1f0>
					(config->window.window_lower_value > 127 ||
     382:	69f2      	ldr	r2, [r6, #28]
     384:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     386:	2017      	movs	r0, #23
			if (config->differential_mode &&
     388:	2aff      	cmp	r2, #255	; 0xff
     38a:	d900      	bls.n	38e <adc_init+0x1e6>
     38c:	e71c      	b.n	1c8 <adc_init+0x20>
					config->window.window_lower_value < -128 ||
     38e:	6a32      	ldr	r2, [r6, #32]
     390:	3280      	adds	r2, #128	; 0x80
     392:	2aff      	cmp	r2, #255	; 0xff
     394:	d900      	bls.n	398 <adc_init+0x1f0>
     396:	e717      	b.n	1c8 <adc_init+0x20>
				return STATUS_ERR_INVALID_ARG;
     398:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     39a:	69f2      	ldr	r2, [r6, #28]
     39c:	2aff      	cmp	r2, #255	; 0xff
     39e:	dd00      	ble.n	3a2 <adc_init+0x1fa>
     3a0:	e712      	b.n	1c8 <adc_init+0x20>
     3a2:	6a32      	ldr	r2, [r6, #32]
     3a4:	2aff      	cmp	r2, #255	; 0xff
     3a6:	dd00      	ble.n	3aa <adc_init+0x202>
     3a8:	e70e      	b.n	1c8 <adc_init+0x20>
	adc_module->CTRLC.reg |= config->window.window_mode;
     3aa:	897a      	ldrh	r2, [r7, #10]
     3ac:	4313      	orrs	r3, r2
     3ae:	817b      	strh	r3, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     3b0:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     3b2:	8c13      	ldrh	r3, [r2, #32]
     3b4:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     3b6:	2b00      	cmp	r3, #0
     3b8:	d1fb      	bne.n	3b2 <adc_init+0x20a>
	adc_module->WINLT.reg =
     3ba:	8bb3      	ldrh	r3, [r6, #28]
     3bc:	81fb      	strh	r3, [r7, #14]
	Adc *const adc_module = module_inst->hw;
     3be:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     3c0:	8c13      	ldrh	r3, [r2, #32]
     3c2:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     3c4:	2b00      	cmp	r3, #0
     3c6:	d1fb      	bne.n	3c0 <adc_init+0x218>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     3c8:	8c33      	ldrh	r3, [r6, #32]
     3ca:	823b      	strh	r3, [r7, #16]
	Adc *const adc_module = module_inst->hw;
     3cc:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     3ce:	8c13      	ldrh	r3, [r2, #32]
     3d0:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     3d2:	2b00      	cmp	r3, #0
     3d4:	d1fb      	bne.n	3ce <adc_init+0x226>
			config->positive_input;
     3d6:	7933      	ldrb	r3, [r6, #4]
			config->negative_input |
     3d8:	88f2      	ldrh	r2, [r6, #6]
     3da:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     3dc:	813b      	strh	r3, [r7, #8]
	Adc *const adc_module = module_inst->hw;
     3de:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     3e0:	8c13      	ldrh	r3, [r2, #32]
     3e2:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     3e4:	2b00      	cmp	r3, #0
     3e6:	d1fb      	bne.n	3e0 <adc_init+0x238>
	adc_module->EVCTRL.reg = config->event_action;
     3e8:	332a      	adds	r3, #42	; 0x2a
     3ea:	5cf3      	ldrb	r3, [r6, r3]
     3ec:	70fb      	strb	r3, [r7, #3]
	adc_module->INTENCLR.reg =
     3ee:	2307      	movs	r3, #7
     3f0:	713b      	strb	r3, [r7, #4]
	if (config->correction.correction_enable){
     3f2:	331d      	adds	r3, #29
     3f4:	5cf3      	ldrb	r3, [r6, r3]
     3f6:	2b00      	cmp	r3, #0
     3f8:	d01b      	beq.n	432 <adc_init+0x28a>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     3fa:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     3fc:	4a2b      	ldr	r2, [pc, #172]	; (4ac <adc_init+0x304>)
			return STATUS_ERR_INVALID_ARG;
     3fe:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     400:	4293      	cmp	r3, r2
     402:	d900      	bls.n	406 <adc_init+0x25e>
     404:	e6e0      	b.n	1c8 <adc_init+0x20>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     406:	827b      	strh	r3, [r7, #18]
	Adc *const adc_module = module_inst->hw;
     408:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     40a:	8c13      	ldrh	r3, [r2, #32]
     40c:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     40e:	2b00      	cmp	r3, #0
     410:	d1fb      	bne.n	40a <adc_init+0x262>
		if (config->correction.offset_correction > 2047 ||
     412:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     414:	2380      	movs	r3, #128	; 0x80
     416:	011b      	lsls	r3, r3, #4
     418:	18d3      	adds	r3, r2, r3
     41a:	4924      	ldr	r1, [pc, #144]	; (4ac <adc_init+0x304>)
     41c:	b29b      	uxth	r3, r3
			return STATUS_ERR_INVALID_ARG;
     41e:	2017      	movs	r0, #23
		if (config->correction.offset_correction > 2047 ||
     420:	428b      	cmp	r3, r1
     422:	d900      	bls.n	426 <adc_init+0x27e>
     424:	e6d0      	b.n	1c8 <adc_init+0x20>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     426:	82ba      	strh	r2, [r7, #20]
	Adc *const adc_module = module_inst->hw;
     428:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     42a:	8c13      	ldrh	r3, [r2, #32]
     42c:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     42e:	2b00      	cmp	r3, #0
     430:	d1fb      	bne.n	42a <adc_init+0x282>
			ADC_CALIB_BIASREFBUF(
     432:	4b1f      	ldr	r3, [pc, #124]	; (4b0 <adc_init+0x308>)
     434:	681b      	ldr	r3, [r3, #0]
     436:	021a      	lsls	r2, r3, #8
     438:	21e0      	movs	r1, #224	; 0xe0
     43a:	00c9      	lsls	r1, r1, #3
     43c:	400a      	ands	r2, r1
			ADC_CALIB_BIASCOMP(
     43e:	069b      	lsls	r3, r3, #26
     440:	0f5b      	lsrs	r3, r3, #29
			) |
     442:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     444:	85bb      	strh	r3, [r7, #44]	; 0x2c
	return STATUS_OK;
     446:	2000      	movs	r0, #0
     448:	e6be      	b.n	1c8 <adc_init+0x20>
		switch (resolution) {
     44a:	2c00      	cmp	r4, #0
     44c:	d1ad      	bne.n	3aa <adc_init+0x202>
			if (config->differential_mode &&
     44e:	7af2      	ldrb	r2, [r6, #11]
     450:	2a00      	cmp	r2, #0
     452:	d00f      	beq.n	474 <adc_init+0x2cc>
					(config->window.window_lower_value > 2047 ||
     454:	69f2      	ldr	r2, [r6, #28]
     456:	2180      	movs	r1, #128	; 0x80
     458:	0109      	lsls	r1, r1, #4
     45a:	468c      	mov	ip, r1
     45c:	4462      	add	r2, ip
			if (config->differential_mode &&
     45e:	4913      	ldr	r1, [pc, #76]	; (4ac <adc_init+0x304>)
				return STATUS_ERR_INVALID_ARG;
     460:	2017      	movs	r0, #23
			if (config->differential_mode &&
     462:	428a      	cmp	r2, r1
     464:	d900      	bls.n	468 <adc_init+0x2c0>
     466:	e6af      	b.n	1c8 <adc_init+0x20>
					config->window.window_lower_value < -2048 ||
     468:	6a32      	ldr	r2, [r6, #32]
     46a:	4462      	add	r2, ip
     46c:	490f      	ldr	r1, [pc, #60]	; (4ac <adc_init+0x304>)
     46e:	428a      	cmp	r2, r1
     470:	d900      	bls.n	474 <adc_init+0x2cc>
     472:	e6a9      	b.n	1c8 <adc_init+0x20>
			} else if (config->window.window_lower_value > 4095 ||
     474:	4a0d      	ldr	r2, [pc, #52]	; (4ac <adc_init+0x304>)
				return STATUS_ERR_INVALID_ARG;
     476:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     478:	69f1      	ldr	r1, [r6, #28]
     47a:	4291      	cmp	r1, r2
     47c:	dd00      	ble.n	480 <adc_init+0x2d8>
     47e:	e6a3      	b.n	1c8 <adc_init+0x20>
     480:	6a31      	ldr	r1, [r6, #32]
     482:	4291      	cmp	r1, r2
     484:	dd00      	ble.n	488 <adc_init+0x2e0>
     486:	e69f      	b.n	1c8 <adc_init+0x20>
     488:	e78f      	b.n	3aa <adc_init+0x202>
     48a:	46c0      	nop			; (mov r8, r8)
     48c:	40000400 	.word	0x40000400
     490:	40001400 	.word	0x40001400
     494:	000010ad 	.word	0x000010ad
     498:	0000103d 	.word	0x0000103d
     49c:	00001548 	.word	0x00001548
     4a0:	00001461 	.word	0x00001461
     4a4:	000011a9 	.word	0x000011a9
     4a8:	00001474 	.word	0x00001474
     4ac:	00000fff 	.word	0x00000fff
     4b0:	00806020 	.word	0x00806020
			if (config->differential_mode &&
     4b4:	7af2      	ldrb	r2, [r6, #11]
     4b6:	2a00      	cmp	r2, #0
     4b8:	d00f      	beq.n	4da <adc_init+0x332>
					(config->window.window_lower_value > 511 ||
     4ba:	69f2      	ldr	r2, [r6, #28]
     4bc:	2180      	movs	r1, #128	; 0x80
     4be:	0089      	lsls	r1, r1, #2
     4c0:	468c      	mov	ip, r1
     4c2:	4462      	add	r2, ip
			if (config->differential_mode &&
     4c4:	491a      	ldr	r1, [pc, #104]	; (530 <adc_init+0x388>)
				return STATUS_ERR_INVALID_ARG;
     4c6:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4c8:	428a      	cmp	r2, r1
     4ca:	d900      	bls.n	4ce <adc_init+0x326>
     4cc:	e67c      	b.n	1c8 <adc_init+0x20>
					config->window.window_lower_value < -512 ||
     4ce:	6a32      	ldr	r2, [r6, #32]
     4d0:	4462      	add	r2, ip
     4d2:	4917      	ldr	r1, [pc, #92]	; (530 <adc_init+0x388>)
     4d4:	428a      	cmp	r2, r1
     4d6:	d900      	bls.n	4da <adc_init+0x332>
     4d8:	e676      	b.n	1c8 <adc_init+0x20>
			} else if (config->window.window_lower_value > 1023 ||
     4da:	4a15      	ldr	r2, [pc, #84]	; (530 <adc_init+0x388>)
				return STATUS_ERR_INVALID_ARG;
     4dc:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     4de:	69f1      	ldr	r1, [r6, #28]
     4e0:	4291      	cmp	r1, r2
     4e2:	dd00      	ble.n	4e6 <adc_init+0x33e>
     4e4:	e670      	b.n	1c8 <adc_init+0x20>
     4e6:	6a31      	ldr	r1, [r6, #32]
     4e8:	4291      	cmp	r1, r2
     4ea:	dd00      	ble.n	4ee <adc_init+0x346>
     4ec:	e66c      	b.n	1c8 <adc_init+0x20>
     4ee:	e75c      	b.n	3aa <adc_init+0x202>
			if (config->differential_mode &&
     4f0:	7af2      	ldrb	r2, [r6, #11]
     4f2:	2a00      	cmp	r2, #0
     4f4:	d00f      	beq.n	516 <adc_init+0x36e>
					(config->window.window_lower_value > 32767 ||
     4f6:	69f2      	ldr	r2, [r6, #28]
     4f8:	2180      	movs	r1, #128	; 0x80
     4fa:	0209      	lsls	r1, r1, #8
     4fc:	468c      	mov	ip, r1
     4fe:	4462      	add	r2, ip
			if (config->differential_mode &&
     500:	490c      	ldr	r1, [pc, #48]	; (534 <adc_init+0x38c>)
				return STATUS_ERR_INVALID_ARG;
     502:	2017      	movs	r0, #23
			if (config->differential_mode &&
     504:	428a      	cmp	r2, r1
     506:	d900      	bls.n	50a <adc_init+0x362>
     508:	e65e      	b.n	1c8 <adc_init+0x20>
					config->window.window_lower_value < -32768 ||
     50a:	6a32      	ldr	r2, [r6, #32]
     50c:	4462      	add	r2, ip
     50e:	4909      	ldr	r1, [pc, #36]	; (534 <adc_init+0x38c>)
     510:	428a      	cmp	r2, r1
     512:	d900      	bls.n	516 <adc_init+0x36e>
     514:	e658      	b.n	1c8 <adc_init+0x20>
			} else if (config->window.window_lower_value > 65535 ||
     516:	4a07      	ldr	r2, [pc, #28]	; (534 <adc_init+0x38c>)
				return STATUS_ERR_INVALID_ARG;
     518:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     51a:	69f1      	ldr	r1, [r6, #28]
     51c:	4291      	cmp	r1, r2
     51e:	dd00      	ble.n	522 <adc_init+0x37a>
     520:	e652      	b.n	1c8 <adc_init+0x20>
     522:	6a31      	ldr	r1, [r6, #32]
     524:	4291      	cmp	r1, r2
     526:	dd00      	ble.n	52a <adc_init+0x382>
     528:	e64e      	b.n	1c8 <adc_init+0x20>
     52a:	e73e      	b.n	3aa <adc_init+0x202>
		return STATUS_ERR_INVALID_ARG;
     52c:	2017      	movs	r0, #23
     52e:	e64b      	b.n	1c8 <adc_init+0x20>
     530:	000003ff 	.word	0x000003ff
     534:	0000ffff 	.word	0x0000ffff

00000538 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     538:	1c93      	adds	r3, r2, #2
     53a:	009b      	lsls	r3, r3, #2
     53c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     53e:	2a02      	cmp	r2, #2
     540:	d009      	beq.n	556 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     542:	2a03      	cmp	r2, #3
     544:	d00c      	beq.n	560 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     546:	2301      	movs	r3, #1
     548:	4093      	lsls	r3, r2
     54a:	001a      	movs	r2, r3
     54c:	7e03      	ldrb	r3, [r0, #24]
     54e:	4313      	orrs	r3, r2
     550:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     552:	2000      	movs	r0, #0
     554:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     556:	7e03      	ldrb	r3, [r0, #24]
     558:	2210      	movs	r2, #16
     55a:	4313      	orrs	r3, r2
     55c:	7603      	strb	r3, [r0, #24]
     55e:	e7f8      	b.n	552 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     560:	7e03      	ldrb	r3, [r0, #24]
     562:	2220      	movs	r2, #32
     564:	4313      	orrs	r3, r2
     566:	7603      	strb	r3, [r0, #24]
     568:	e7f3      	b.n	552 <tc_register_callback+0x1a>
	...

0000056c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     56c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     56e:	0080      	lsls	r0, r0, #2
     570:	4b16      	ldr	r3, [pc, #88]	; (5cc <_tc_interrupt_handler+0x60>)
     572:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     574:	6823      	ldr	r3, [r4, #0]
     576:	7a9d      	ldrb	r5, [r3, #10]
     578:	7e22      	ldrb	r2, [r4, #24]
     57a:	7e63      	ldrb	r3, [r4, #25]
     57c:	4013      	ands	r3, r2
     57e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     580:	07eb      	lsls	r3, r5, #31
     582:	d406      	bmi.n	592 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     584:	07ab      	lsls	r3, r5, #30
     586:	d40b      	bmi.n	5a0 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     588:	06eb      	lsls	r3, r5, #27
     58a:	d410      	bmi.n	5ae <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     58c:	06ab      	lsls	r3, r5, #26
     58e:	d415      	bmi.n	5bc <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     590:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     592:	0020      	movs	r0, r4
     594:	68a3      	ldr	r3, [r4, #8]
     596:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     598:	2301      	movs	r3, #1
     59a:	6822      	ldr	r2, [r4, #0]
     59c:	7293      	strb	r3, [r2, #10]
     59e:	e7f1      	b.n	584 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     5a0:	0020      	movs	r0, r4
     5a2:	68e3      	ldr	r3, [r4, #12]
     5a4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     5a6:	2302      	movs	r3, #2
     5a8:	6822      	ldr	r2, [r4, #0]
     5aa:	7293      	strb	r3, [r2, #10]
     5ac:	e7ec      	b.n	588 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     5ae:	0020      	movs	r0, r4
     5b0:	6923      	ldr	r3, [r4, #16]
     5b2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     5b4:	2310      	movs	r3, #16
     5b6:	6822      	ldr	r2, [r4, #0]
     5b8:	7293      	strb	r3, [r2, #10]
     5ba:	e7e7      	b.n	58c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     5bc:	0020      	movs	r0, r4
     5be:	6963      	ldr	r3, [r4, #20]
     5c0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     5c2:	6823      	ldr	r3, [r4, #0]
     5c4:	2220      	movs	r2, #32
     5c6:	729a      	strb	r2, [r3, #10]
}
     5c8:	e7e2      	b.n	590 <_tc_interrupt_handler+0x24>
     5ca:	46c0      	nop			; (mov r8, r8)
     5cc:	20000050 	.word	0x20000050

000005d0 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     5d0:	b510      	push	{r4, lr}
     5d2:	2000      	movs	r0, #0
     5d4:	4b01      	ldr	r3, [pc, #4]	; (5dc <TC0_Handler+0xc>)
     5d6:	4798      	blx	r3
     5d8:	bd10      	pop	{r4, pc}
     5da:	46c0      	nop			; (mov r8, r8)
     5dc:	0000056d 	.word	0x0000056d

000005e0 <TC1_Handler>:
     5e0:	b510      	push	{r4, lr}
     5e2:	2001      	movs	r0, #1
     5e4:	4b01      	ldr	r3, [pc, #4]	; (5ec <TC1_Handler+0xc>)
     5e6:	4798      	blx	r3
     5e8:	bd10      	pop	{r4, pc}
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	0000056d 	.word	0x0000056d

000005f0 <TC2_Handler>:
     5f0:	b510      	push	{r4, lr}
     5f2:	2002      	movs	r0, #2
     5f4:	4b01      	ldr	r3, [pc, #4]	; (5fc <TC2_Handler+0xc>)
     5f6:	4798      	blx	r3
     5f8:	bd10      	pop	{r4, pc}
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	0000056d 	.word	0x0000056d

00000600 <TC3_Handler>:
     600:	b510      	push	{r4, lr}
     602:	2003      	movs	r0, #3
     604:	4b01      	ldr	r3, [pc, #4]	; (60c <TC3_Handler+0xc>)
     606:	4798      	blx	r3
     608:	bd10      	pop	{r4, pc}
     60a:	46c0      	nop			; (mov r8, r8)
     60c:	0000056d 	.word	0x0000056d

00000610 <TC4_Handler>:
     610:	b510      	push	{r4, lr}
     612:	2004      	movs	r0, #4
     614:	4b01      	ldr	r3, [pc, #4]	; (61c <TC4_Handler+0xc>)
     616:	4798      	blx	r3
     618:	bd10      	pop	{r4, pc}
     61a:	46c0      	nop			; (mov r8, r8)
     61c:	0000056d 	.word	0x0000056d

00000620 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     620:	b530      	push	{r4, r5, lr}
     622:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     624:	a901      	add	r1, sp, #4
     626:	4b0c      	ldr	r3, [pc, #48]	; (658 <_tc_get_inst_index+0x38>)
     628:	000a      	movs	r2, r1
     62a:	cb32      	ldmia	r3!, {r1, r4, r5}
     62c:	c232      	stmia	r2!, {r1, r4, r5}
     62e:	cb12      	ldmia	r3!, {r1, r4}
     630:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     632:	9b01      	ldr	r3, [sp, #4]
     634:	4298      	cmp	r0, r3
     636:	d00b      	beq.n	650 <_tc_get_inst_index+0x30>
     638:	2301      	movs	r3, #1
     63a:	a901      	add	r1, sp, #4
     63c:	009a      	lsls	r2, r3, #2
     63e:	5852      	ldr	r2, [r2, r1]
     640:	4282      	cmp	r2, r0
     642:	d006      	beq.n	652 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     644:	3301      	adds	r3, #1
     646:	2b05      	cmp	r3, #5
     648:	d1f8      	bne.n	63c <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     64a:	2000      	movs	r0, #0
}
     64c:	b007      	add	sp, #28
     64e:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     650:	2300      	movs	r3, #0
			return i;
     652:	b2d8      	uxtb	r0, r3
     654:	e7fa      	b.n	64c <_tc_get_inst_index+0x2c>
     656:	46c0      	nop			; (mov r8, r8)
     658:	000015d0 	.word	0x000015d0

0000065c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     65c:	b5f0      	push	{r4, r5, r6, r7, lr}
     65e:	46c6      	mov	lr, r8
     660:	b500      	push	{lr}
     662:	b08e      	sub	sp, #56	; 0x38
     664:	0004      	movs	r4, r0
     666:	000d      	movs	r5, r1
     668:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     66a:	0008      	movs	r0, r1
     66c:	4bae      	ldr	r3, [pc, #696]	; (928 <tc_init+0x2cc>)
     66e:	4798      	blx	r3
     670:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
     672:	ab0c      	add	r3, sp, #48	; 0x30
     674:	221b      	movs	r2, #27
     676:	701a      	strb	r2, [r3, #0]
     678:	705a      	strb	r2, [r3, #1]
     67a:	3201      	adds	r2, #1
     67c:	709a      	strb	r2, [r3, #2]
     67e:	70da      	strb	r2, [r3, #3]
     680:	3201      	adds	r2, #1
     682:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
     684:	a902      	add	r1, sp, #8
     686:	4ba9      	ldr	r3, [pc, #676]	; (92c <tc_init+0x2d0>)
     688:	3314      	adds	r3, #20
     68a:	000a      	movs	r2, r1
     68c:	cb83      	ldmia	r3!, {r0, r1, r7}
     68e:	c283      	stmia	r2!, {r0, r1, r7}
     690:	cb83      	ldmia	r3!, {r0, r1, r7}
     692:	c283      	stmia	r2!, {r0, r1, r7}
     694:	cb83      	ldmia	r3!, {r0, r1, r7}
     696:	c283      	stmia	r2!, {r0, r1, r7}
     698:	681b      	ldr	r3, [r3, #0]
     69a:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     69c:	2300      	movs	r3, #0
     69e:	60a3      	str	r3, [r4, #8]
     6a0:	60e3      	str	r3, [r4, #12]
     6a2:	6123      	str	r3, [r4, #16]
     6a4:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     6a6:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     6a8:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     6aa:	4643      	mov	r3, r8
     6ac:	009a      	lsls	r2, r3, #2
     6ae:	4ba0      	ldr	r3, [pc, #640]	; (930 <tc_init+0x2d4>)
     6b0:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     6b2:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     6b4:	2334      	movs	r3, #52	; 0x34
     6b6:	5cf3      	ldrb	r3, [r6, r3]
     6b8:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     6ba:	78f3      	ldrb	r3, [r6, #3]
     6bc:	2b08      	cmp	r3, #8
     6be:	d008      	beq.n	6d2 <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     6c0:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     6c2:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     6c4:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     6c6:	07db      	lsls	r3, r3, #31
     6c8:	d508      	bpl.n	6dc <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     6ca:	b00e      	add	sp, #56	; 0x38
     6cc:	bc04      	pop	{r2}
     6ce:	4690      	mov	r8, r2
     6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     6d2:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     6d4:	4642      	mov	r2, r8
     6d6:	07d2      	lsls	r2, r2, #31
     6d8:	d4f7      	bmi.n	6ca <tc_init+0x6e>
     6da:	e7f1      	b.n	6c0 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     6dc:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
     6de:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     6e0:	079b      	lsls	r3, r3, #30
     6e2:	d4f2      	bmi.n	6ca <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     6e4:	682b      	ldr	r3, [r5, #0]
     6e6:	079b      	lsls	r3, r3, #30
     6e8:	d4ef      	bmi.n	6ca <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
     6ea:	7c33      	ldrb	r3, [r6, #16]
     6ec:	2b00      	cmp	r3, #0
     6ee:	d112      	bne.n	716 <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
     6f0:	7f33      	ldrb	r3, [r6, #28]
     6f2:	2b00      	cmp	r3, #0
     6f4:	d11b      	bne.n	72e <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
     6f6:	4643      	mov	r3, r8
     6f8:	005a      	lsls	r2, r3, #1
     6fa:	a902      	add	r1, sp, #8
     6fc:	1c53      	adds	r3, r2, #1
     6fe:	009b      	lsls	r3, r3, #2
     700:	5858      	ldr	r0, [r3, r1]
     702:	4643      	mov	r3, r8
     704:	00db      	lsls	r3, r3, #3
     706:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
     708:	b2d9      	uxtb	r1, r3
     70a:	2904      	cmp	r1, #4
     70c:	d823      	bhi.n	756 <tc_init+0xfa>
     70e:	008b      	lsls	r3, r1, #2
     710:	4988      	ldr	r1, [pc, #544]	; (934 <tc_init+0x2d8>)
     712:	58cb      	ldr	r3, [r1, r3]
     714:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     716:	a901      	add	r1, sp, #4
     718:	2301      	movs	r3, #1
     71a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     71c:	2200      	movs	r2, #0
     71e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     720:	7e32      	ldrb	r2, [r6, #24]
     722:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     724:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     726:	7d30      	ldrb	r0, [r6, #20]
     728:	4b83      	ldr	r3, [pc, #524]	; (938 <tc_init+0x2dc>)
     72a:	4798      	blx	r3
     72c:	e7e0      	b.n	6f0 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     72e:	a901      	add	r1, sp, #4
     730:	2301      	movs	r3, #1
     732:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     734:	2200      	movs	r2, #0
     736:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     738:	3224      	adds	r2, #36	; 0x24
     73a:	18b2      	adds	r2, r6, r2
     73c:	7812      	ldrb	r2, [r2, #0]
     73e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     740:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     742:	331f      	adds	r3, #31
     744:	18f3      	adds	r3, r6, r3
     746:	7818      	ldrb	r0, [r3, #0]
     748:	4b7b      	ldr	r3, [pc, #492]	; (938 <tc_init+0x2dc>)
     74a:	4798      	blx	r3
     74c:	e7d3      	b.n	6f6 <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
     74e:	497b      	ldr	r1, [pc, #492]	; (93c <tc_init+0x2e0>)
     750:	694b      	ldr	r3, [r1, #20]
     752:	4318      	orrs	r0, r3
     754:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
     756:	78f3      	ldrb	r3, [r6, #3]
     758:	2b08      	cmp	r3, #8
     75a:	d100      	bne.n	75e <tc_init+0x102>
     75c:	e086      	b.n	86c <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
     75e:	7833      	ldrb	r3, [r6, #0]
     760:	466a      	mov	r2, sp
     762:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     764:	ab0c      	add	r3, sp, #48	; 0x30
     766:	4642      	mov	r2, r8
     768:	5c9f      	ldrb	r7, [r3, r2]
     76a:	4669      	mov	r1, sp
     76c:	0038      	movs	r0, r7
     76e:	4b74      	ldr	r3, [pc, #464]	; (940 <tc_init+0x2e4>)
     770:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     772:	0038      	movs	r0, r7
     774:	4b73      	ldr	r3, [pc, #460]	; (944 <tc_init+0x2e8>)
     776:	4798      	blx	r3
			(uint32_t)config->counter_size |
     778:	78f3      	ldrb	r3, [r6, #3]
     77a:	79f2      	ldrb	r2, [r6, #7]
     77c:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
     77e:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
     780:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
     782:	7a72      	ldrb	r2, [r6, #9]
     784:	2a00      	cmp	r2, #0
     786:	d002      	beq.n	78e <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
     788:	2280      	movs	r2, #128	; 0x80
     78a:	0252      	lsls	r2, r2, #9
     78c:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
     78e:	7ab2      	ldrb	r2, [r6, #10]
     790:	2a00      	cmp	r2, #0
     792:	d002      	beq.n	79a <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
     794:	2280      	movs	r2, #128	; 0x80
     796:	0292      	lsls	r2, r2, #10
     798:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
     79a:	7af2      	ldrb	r2, [r6, #11]
     79c:	2a00      	cmp	r2, #0
     79e:	d002      	beq.n	7a6 <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
     7a0:	2280      	movs	r2, #128	; 0x80
     7a2:	0352      	lsls	r2, r2, #13
     7a4:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
     7a6:	7b32      	ldrb	r2, [r6, #12]
     7a8:	2a00      	cmp	r2, #0
     7aa:	d002      	beq.n	7b2 <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
     7ac:	2280      	movs	r2, #128	; 0x80
     7ae:	0392      	lsls	r2, r2, #14
     7b0:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
     7b2:	7871      	ldrb	r1, [r6, #1]
     7b4:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
     7b6:	78b2      	ldrb	r2, [r6, #2]
     7b8:	01d2      	lsls	r2, r2, #7
     7ba:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
     7bc:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7be:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
     7c0:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
     7c2:	2b00      	cmp	r3, #0
     7c4:	d1fc      	bne.n	7c0 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     7c6:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7c8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     7ca:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
     7cc:	2b00      	cmp	r3, #0
     7ce:	d1fc      	bne.n	7ca <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
     7d0:	79b3      	ldrb	r3, [r6, #6]
     7d2:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
     7d4:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     7d6:	1e4b      	subs	r3, r1, #1
     7d8:	4199      	sbcs	r1, r3
     7da:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     7dc:	7bb3      	ldrb	r3, [r6, #14]
     7de:	2b00      	cmp	r3, #0
     7e0:	d001      	beq.n	7e6 <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     7e2:	2301      	movs	r3, #1
     7e4:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7e6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     7e8:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
     7ea:	2b00      	cmp	r3, #0
     7ec:	d1fc      	bne.n	7e8 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     7ee:	33ff      	adds	r3, #255	; 0xff
     7f0:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     7f2:	2900      	cmp	r1, #0
     7f4:	d004      	beq.n	800 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7f6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     7f8:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
     7fa:	2b00      	cmp	r3, #0
     7fc:	d1fc      	bne.n	7f8 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     7fe:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
     800:	7a33      	ldrb	r3, [r6, #8]
     802:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     804:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     806:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
     808:	2b00      	cmp	r3, #0
     80a:	d1fc      	bne.n	806 <tc_init+0x1aa>
	switch (module_inst->counter_size) {
     80c:	7923      	ldrb	r3, [r4, #4]
     80e:	2b04      	cmp	r3, #4
     810:	d059      	beq.n	8c6 <tc_init+0x26a>
     812:	2b08      	cmp	r3, #8
     814:	d074      	beq.n	900 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
     816:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     818:	2b00      	cmp	r3, #0
     81a:	d000      	beq.n	81e <tc_init+0x1c2>
     81c:	e755      	b.n	6ca <tc_init+0x6e>
     81e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     820:	2b00      	cmp	r3, #0
     822:	d1fc      	bne.n	81e <tc_init+0x1c2>
				= config->counter_16_bit.value;
     824:	8d33      	ldrh	r3, [r6, #40]	; 0x28
     826:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     828:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     82a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     82c:	2b00      	cmp	r3, #0
     82e:	d1fc      	bne.n	82a <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
     830:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     832:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     834:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     836:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     838:	2b00      	cmp	r3, #0
     83a:	d1fc      	bne.n	836 <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
     83c:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     83e:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
     840:	2000      	movs	r0, #0
     842:	e742      	b.n	6ca <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
     844:	493d      	ldr	r1, [pc, #244]	; (93c <tc_init+0x2e0>)
     846:	698b      	ldr	r3, [r1, #24]
     848:	4318      	orrs	r0, r3
     84a:	6188      	str	r0, [r1, #24]
     84c:	e783      	b.n	756 <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
     84e:	493b      	ldr	r1, [pc, #236]	; (93c <tc_init+0x2e0>)
     850:	69cb      	ldr	r3, [r1, #28]
     852:	4318      	orrs	r0, r3
     854:	61c8      	str	r0, [r1, #28]
     856:	e77e      	b.n	756 <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
     858:	4938      	ldr	r1, [pc, #224]	; (93c <tc_init+0x2e0>)
     85a:	6a0b      	ldr	r3, [r1, #32]
     85c:	4318      	orrs	r0, r3
     85e:	6208      	str	r0, [r1, #32]
     860:	e779      	b.n	756 <tc_init+0xfa>
			break;
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
     862:	4b36      	ldr	r3, [pc, #216]	; (93c <tc_init+0x2e0>)
     864:	6a59      	ldr	r1, [r3, #36]	; 0x24
     866:	4308      	orrs	r0, r1
     868:	6258      	str	r0, [r3, #36]	; 0x24
     86a:	e774      	b.n	756 <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
     86c:	4643      	mov	r3, r8
     86e:	3301      	adds	r3, #1
     870:	2b04      	cmp	r3, #4
     872:	dd00      	ble.n	876 <tc_init+0x21a>
     874:	e773      	b.n	75e <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
     876:	ab02      	add	r3, sp, #8
     878:	1cd1      	adds	r1, r2, #3
     87a:	0089      	lsls	r1, r1, #2
     87c:	58c9      	ldr	r1, [r1, r3]
     87e:	3202      	adds	r2, #2
     880:	0092      	lsls	r2, r2, #2
     882:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
     884:	b2da      	uxtb	r2, r3
     886:	2a04      	cmp	r2, #4
     888:	d900      	bls.n	88c <tc_init+0x230>
     88a:	e768      	b.n	75e <tc_init+0x102>
     88c:	0093      	lsls	r3, r2, #2
     88e:	4a2e      	ldr	r2, [pc, #184]	; (948 <tc_init+0x2ec>)
     890:	58d3      	ldr	r3, [r2, r3]
     892:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
     894:	4a29      	ldr	r2, [pc, #164]	; (93c <tc_init+0x2e0>)
     896:	6953      	ldr	r3, [r2, #20]
     898:	4319      	orrs	r1, r3
     89a:	6151      	str	r1, [r2, #20]
     89c:	e75f      	b.n	75e <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
     89e:	4a27      	ldr	r2, [pc, #156]	; (93c <tc_init+0x2e0>)
     8a0:	6993      	ldr	r3, [r2, #24]
     8a2:	4319      	orrs	r1, r3
     8a4:	6191      	str	r1, [r2, #24]
     8a6:	e75a      	b.n	75e <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
     8a8:	4a24      	ldr	r2, [pc, #144]	; (93c <tc_init+0x2e0>)
     8aa:	69d3      	ldr	r3, [r2, #28]
     8ac:	4319      	orrs	r1, r3
     8ae:	61d1      	str	r1, [r2, #28]
     8b0:	e755      	b.n	75e <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
     8b2:	4a22      	ldr	r2, [pc, #136]	; (93c <tc_init+0x2e0>)
     8b4:	6a13      	ldr	r3, [r2, #32]
     8b6:	4319      	orrs	r1, r3
     8b8:	6211      	str	r1, [r2, #32]
     8ba:	e750      	b.n	75e <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
     8bc:	4b1f      	ldr	r3, [pc, #124]	; (93c <tc_init+0x2e0>)
     8be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     8c0:	4311      	orrs	r1, r2
     8c2:	6259      	str	r1, [r3, #36]	; 0x24
     8c4:	e74b      	b.n	75e <tc_init+0x102>
     8c6:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     8c8:	2b00      	cmp	r3, #0
     8ca:	d1fc      	bne.n	8c6 <tc_init+0x26a>
					config->counter_8_bit.value;
     8cc:	3328      	adds	r3, #40	; 0x28
     8ce:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
     8d0:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     8d2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     8d4:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     8d6:	2b00      	cmp	r3, #0
     8d8:	d1fc      	bne.n	8d4 <tc_init+0x278>
					config->counter_8_bit.period;
     8da:	3329      	adds	r3, #41	; 0x29
     8dc:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
     8de:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     8e0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     8e2:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     8e4:	2b00      	cmp	r3, #0
     8e6:	d1fc      	bne.n	8e2 <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
     8e8:	332a      	adds	r3, #42	; 0x2a
     8ea:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
     8ec:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     8ee:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     8f0:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     8f2:	2b00      	cmp	r3, #0
     8f4:	d1fc      	bne.n	8f0 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
     8f6:	332b      	adds	r3, #43	; 0x2b
     8f8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
     8fa:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
     8fc:	2000      	movs	r0, #0
     8fe:	e6e4      	b.n	6ca <tc_init+0x6e>
     900:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     902:	2b00      	cmp	r3, #0
     904:	d1fc      	bne.n	900 <tc_init+0x2a4>
				= config->counter_32_bit.value;
     906:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     908:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     90a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     90c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     90e:	2b00      	cmp	r3, #0
     910:	d1fc      	bne.n	90c <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
     912:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     914:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     916:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     918:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     91a:	2b00      	cmp	r3, #0
     91c:	d1fc      	bne.n	918 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
     91e:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     920:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
     922:	2000      	movs	r0, #0
     924:	e6d1      	b.n	6ca <tc_init+0x6e>
     926:	46c0      	nop			; (mov r8, r8)
     928:	00000621 	.word	0x00000621
     92c:	000015d0 	.word	0x000015d0
     930:	20000050 	.word	0x20000050
     934:	000015a8 	.word	0x000015a8
     938:	000011a9 	.word	0x000011a9
     93c:	40000400 	.word	0x40000400
     940:	000010ad 	.word	0x000010ad
     944:	0000103d 	.word	0x0000103d
     948:	000015bc 	.word	0x000015bc

0000094c <tc_callback>:
 /* Interrupt function that reads from the ADC and adds	     */
 /*  them up. After 1000 reads they are divided by 1000.	 */						 
 /************************************************************/
 void tc_callback(
 struct tc_module *const module_inst)
 {
     94c:	b530      	push	{r4, r5, lr}
	
	if(counter==0){
     94e:	4b26      	ldr	r3, [pc, #152]	; (9e8 <tc_callback+0x9c>)
     950:	881a      	ldrh	r2, [r3, #0]
     952:	2a00      	cmp	r2, #0
     954:	d102      	bne.n	95c <tc_callback+0x10>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     956:	2120      	movs	r1, #32
     958:	4b24      	ldr	r3, [pc, #144]	; (9ec <tc_callback+0xa0>)
     95a:	6199      	str	r1, [r3, #24]
		port_pin_set_output_level(PIN_PB05,1);
	}
	counter++;
     95c:	3201      	adds	r2, #1
     95e:	b292      	uxth	r2, r2
     960:	4b21      	ldr	r3, [pc, #132]	; (9e8 <tc_callback+0x9c>)
     962:	801a      	strh	r2, [r3, #0]
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     964:	4b22      	ldr	r3, [pc, #136]	; (9f0 <tc_callback+0xa4>)
     966:	681b      	ldr	r3, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->SYNCBUSY.reg) {
     968:	8c19      	ldrh	r1, [r3, #32]
     96a:	b289      	uxth	r1, r1

	while (adc_is_syncing(module_inst)) {
     96c:	2900      	cmp	r1, #0
     96e:	d1fb      	bne.n	968 <tc_callback+0x1c>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     970:	7e19      	ldrb	r1, [r3, #24]
     972:	2002      	movs	r0, #2
     974:	4301      	orrs	r1, r0
     976:	7619      	strb	r1, [r3, #24]
     978:	8c19      	ldrh	r1, [r3, #32]
     97a:	b289      	uxth	r1, r1

	while (adc_is_syncing(module_inst)) {
     97c:	2900      	cmp	r1, #0
     97e:	d1fb      	bne.n	978 <tc_callback+0x2c>
	uint32_t int_flags = adc_module->INTFLAG.reg;
     980:	7998      	ldrb	r0, [r3, #6]
     982:	b2c0      	uxtb	r0, r0
	if (int_flags & ADC_INTFLAG_RESRDY) {
     984:	3101      	adds	r1, #1
     986:	4001      	ands	r1, r0
	if (int_flags & ADC_INTFLAG_WINMON) {
     988:	0745      	lsls	r5, r0, #29
     98a:	d501      	bpl.n	990 <tc_callback+0x44>
		status_flags |= ADC_STATUS_WINDOW;
     98c:	2502      	movs	r5, #2
     98e:	4329      	orrs	r1, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     990:	0780      	lsls	r0, r0, #30
     992:	d501      	bpl.n	998 <tc_callback+0x4c>
		status_flags |= ADC_STATUS_OVERRUN;
     994:	2004      	movs	r0, #4
     996:	4301      	orrs	r1, r0
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
     998:	07c9      	lsls	r1, r1, #31
     99a:	d409      	bmi.n	9b0 <tc_callback+0x64>
	uint16_t result;
	uint32_t outvalue;
	
	adc_start_conversion(&adc_instance);
	adc_read(&adc_instance, &result);
	sum= sum + result;
     99c:	4915      	ldr	r1, [pc, #84]	; (9f4 <tc_callback+0xa8>)
     99e:	680b      	ldr	r3, [r1, #0]
     9a0:	469c      	mov	ip, r3
     9a2:	4464      	add	r4, ip
     9a4:	600c      	str	r4, [r1, #0]

	if(counter==1000){
     9a6:	23fa      	movs	r3, #250	; 0xfa
     9a8:	009b      	lsls	r3, r3, #2
     9aa:	429a      	cmp	r2, r3
     9ac:	d014      	beq.n	9d8 <tc_callback+0x8c>
		outvalue=sum/1000;
		counter=0;
		port_pin_set_output_level(PIN_PB05,0);
	}
 }
     9ae:	bd30      	pop	{r4, r5, pc}
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
     9b0:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
     9b2:	b2a4      	uxth	r4, r4
	adc_module->INTFLAG.reg = int_flags;
     9b4:	2101      	movs	r1, #1
     9b6:	7199      	strb	r1, [r3, #6]
	uint32_t int_flags = adc_module->INTFLAG.reg;
     9b8:	7998      	ldrb	r0, [r3, #6]
     9ba:	b2c0      	uxtb	r0, r0
	if (int_flags & ADC_INTFLAG_RESRDY) {
     9bc:	4001      	ands	r1, r0
	if (int_flags & ADC_INTFLAG_WINMON) {
     9be:	0745      	lsls	r5, r0, #29
     9c0:	d501      	bpl.n	9c6 <tc_callback+0x7a>
		status_flags |= ADC_STATUS_WINDOW;
     9c2:	2502      	movs	r5, #2
     9c4:	4329      	orrs	r1, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     9c6:	0780      	lsls	r0, r0, #30
     9c8:	d501      	bpl.n	9ce <tc_callback+0x82>
		status_flags |= ADC_STATUS_OVERRUN;
     9ca:	2004      	movs	r0, #4
     9cc:	4301      	orrs	r1, r0

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
     9ce:	0749      	lsls	r1, r1, #29
     9d0:	d5e4      	bpl.n	99c <tc_callback+0x50>
	adc_module->INTFLAG.reg = int_flags;
     9d2:	2102      	movs	r1, #2
     9d4:	7199      	strb	r1, [r3, #6]
     9d6:	e7e1      	b.n	99c <tc_callback+0x50>
		counter=0;
     9d8:	2200      	movs	r2, #0
     9da:	4b03      	ldr	r3, [pc, #12]	; (9e8 <tc_callback+0x9c>)
     9dc:	801a      	strh	r2, [r3, #0]
	} else {
		port_base->OUTCLR.reg = pin_mask;
     9de:	3220      	adds	r2, #32
     9e0:	4b02      	ldr	r3, [pc, #8]	; (9ec <tc_callback+0xa0>)
     9e2:	615a      	str	r2, [r3, #20]
 }
     9e4:	e7e3      	b.n	9ae <tc_callback+0x62>
     9e6:	46c0      	nop			; (mov r8, r8)
     9e8:	20000020 	.word	0x20000020
     9ec:	40002880 	.word	0x40002880
     9f0:	20000048 	.word	0x20000048
     9f4:	20000024 	.word	0x20000024

000009f8 <configure_tc>:

 /************************************************************/
 /*	TC-timer interrupt every 10 ms							 */
 /************************************************************/
 void configure_tc(void)
 {
     9f8:	b510      	push	{r4, lr}
     9fa:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     9fc:	2300      	movs	r3, #0
     9fe:	466a      	mov	r2, sp
     a00:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     a02:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     a04:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
     a06:	7053      	strb	r3, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
     a08:	7093      	strb	r3, [r2, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     a0a:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     a0c:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     a0e:	7293      	strb	r3, [r2, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     a10:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     a12:	7313      	strb	r3, [r2, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     a14:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
     a16:	7353      	strb	r3, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     a18:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     a1a:	9305      	str	r3, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     a1c:	9306      	str	r3, [sp, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     a1e:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     a20:	9308      	str	r3, [sp, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     a22:	9309      	str	r3, [sp, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     a24:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     a26:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     a28:	8593      	strh	r3, [r2, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
     a2a:	3334      	adds	r3, #52	; 0x34
     a2c:	2200      	movs	r2, #0
     a2e:	4669      	mov	r1, sp
     a30:	54ca      	strb	r2, [r1, r3]
	 struct tc_config config_tc;
	 tc_get_config_defaults(&config_tc);
	 config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
     a32:	3b30      	subs	r3, #48	; 0x30
     a34:	70cb      	strb	r3, [r1, #3]
	 config_tc.clock_source = GCLK_GENERATOR_0;
	 config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV256;
     a36:	23c0      	movs	r3, #192	; 0xc0
     a38:	00db      	lsls	r3, r3, #3
     a3a:	808b      	strh	r3, [r1, #4]
	 config_tc.counter_8_bit.period = 159;
     a3c:	229f      	movs	r2, #159	; 0x9f
     a3e:	2329      	movs	r3, #41	; 0x29
     a40:	54ca      	strb	r2, [r1, r3]
	 config_tc.counter_8_bit.compare_capture_channel[0] = 1;	
     a42:	3a9e      	subs	r2, #158	; 0x9e
     a44:	3301      	adds	r3, #1
     a46:	54ca      	strb	r2, [r1, r3]
	 tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
     a48:	4c07      	ldr	r4, [pc, #28]	; (a68 <configure_tc+0x70>)
     a4a:	466a      	mov	r2, sp
     a4c:	4907      	ldr	r1, [pc, #28]	; (a6c <configure_tc+0x74>)
     a4e:	0020      	movs	r0, r4
     a50:	4b07      	ldr	r3, [pc, #28]	; (a70 <configure_tc+0x78>)
     a52:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     a54:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     a56:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
     a58:	2b00      	cmp	r3, #0
     a5a:	d1fc      	bne.n	a56 <configure_tc+0x5e>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     a5c:	6813      	ldr	r3, [r2, #0]
     a5e:	2102      	movs	r1, #2
     a60:	430b      	orrs	r3, r1
     a62:	6013      	str	r3, [r2, #0]
	 tc_enable(&tc_instance);
	

 }
     a64:	b00e      	add	sp, #56	; 0x38
     a66:	bd10      	pop	{r4, pc}
     a68:	20000064 	.word	0x20000064
     a6c:	42002c00 	.word	0x42002c00
     a70:	0000065d 	.word	0x0000065d

00000a74 <configure_tc_callbacks>:

 /************************************************************/
 /*	Enable callbacks										 */
 /************************************************************/
 void configure_tc_callbacks(void)
 {
     a74:	b510      	push	{r4, lr}
	 tc_register_callback(&tc_instance, tc_callback,
     a76:	4c0c      	ldr	r4, [pc, #48]	; (aa8 <configure_tc_callbacks+0x34>)
     a78:	2202      	movs	r2, #2
     a7a:	490c      	ldr	r1, [pc, #48]	; (aac <configure_tc_callbacks+0x38>)
     a7c:	0020      	movs	r0, r4
     a7e:	4b0c      	ldr	r3, [pc, #48]	; (ab0 <configure_tc_callbacks+0x3c>)
     a80:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     a82:	6820      	ldr	r0, [r4, #0]
     a84:	4b0b      	ldr	r3, [pc, #44]	; (ab4 <configure_tc_callbacks+0x40>)
     a86:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     a88:	4b0b      	ldr	r3, [pc, #44]	; (ab8 <configure_tc_callbacks+0x44>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     a8a:	5c1b      	ldrb	r3, [r3, r0]
     a8c:	221f      	movs	r2, #31
     a8e:	401a      	ands	r2, r3
     a90:	2301      	movs	r3, #1
     a92:	4093      	lsls	r3, r2
     a94:	4a09      	ldr	r2, [pc, #36]	; (abc <configure_tc_callbacks+0x48>)
     a96:	6013      	str	r3, [r2, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
     a98:	7e63      	ldrb	r3, [r4, #25]
     a9a:	2210      	movs	r2, #16
     a9c:	4313      	orrs	r3, r2
     a9e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
     aa0:	6823      	ldr	r3, [r4, #0]
     aa2:	2210      	movs	r2, #16
     aa4:	725a      	strb	r2, [r3, #9]
	 TC_CALLBACK_CC_CHANNEL0);
	 tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);
     aa6:	bd10      	pop	{r4, pc}
     aa8:	20000064 	.word	0x20000064
     aac:	0000094d 	.word	0x0000094d
     ab0:	00000539 	.word	0x00000539
     ab4:	00000621 	.word	0x00000621
     ab8:	0000160c 	.word	0x0000160c
     abc:	e000e100 	.word	0xe000e100

00000ac0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     ac0:	4b0c      	ldr	r3, [pc, #48]	; (af4 <cpu_irq_enter_critical+0x34>)
     ac2:	681b      	ldr	r3, [r3, #0]
     ac4:	2b00      	cmp	r3, #0
     ac6:	d106      	bne.n	ad6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     ac8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     acc:	2b00      	cmp	r3, #0
     ace:	d007      	beq.n	ae0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     ad0:	2200      	movs	r2, #0
     ad2:	4b09      	ldr	r3, [pc, #36]	; (af8 <cpu_irq_enter_critical+0x38>)
     ad4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     ad6:	4a07      	ldr	r2, [pc, #28]	; (af4 <cpu_irq_enter_critical+0x34>)
     ad8:	6813      	ldr	r3, [r2, #0]
     ada:	3301      	adds	r3, #1
     adc:	6013      	str	r3, [r2, #0]
}
     ade:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     ae0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     ae2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     ae6:	2200      	movs	r2, #0
     ae8:	4b04      	ldr	r3, [pc, #16]	; (afc <cpu_irq_enter_critical+0x3c>)
     aea:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     aec:	3201      	adds	r2, #1
     aee:	4b02      	ldr	r3, [pc, #8]	; (af8 <cpu_irq_enter_critical+0x38>)
     af0:	701a      	strb	r2, [r3, #0]
     af2:	e7f0      	b.n	ad6 <cpu_irq_enter_critical+0x16>
     af4:	20000028 	.word	0x20000028
     af8:	2000002c 	.word	0x2000002c
     afc:	20000000 	.word	0x20000000

00000b00 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     b00:	4b08      	ldr	r3, [pc, #32]	; (b24 <cpu_irq_leave_critical+0x24>)
     b02:	681a      	ldr	r2, [r3, #0]
     b04:	3a01      	subs	r2, #1
     b06:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     b08:	681b      	ldr	r3, [r3, #0]
     b0a:	2b00      	cmp	r3, #0
     b0c:	d109      	bne.n	b22 <cpu_irq_leave_critical+0x22>
     b0e:	4b06      	ldr	r3, [pc, #24]	; (b28 <cpu_irq_leave_critical+0x28>)
     b10:	781b      	ldrb	r3, [r3, #0]
     b12:	2b00      	cmp	r3, #0
     b14:	d005      	beq.n	b22 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     b16:	2201      	movs	r2, #1
     b18:	4b04      	ldr	r3, [pc, #16]	; (b2c <cpu_irq_leave_critical+0x2c>)
     b1a:	701a      	strb	r2, [r3, #0]
     b1c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     b20:	b662      	cpsie	i
	}
}
     b22:	4770      	bx	lr
     b24:	20000028 	.word	0x20000028
     b28:	2000002c 	.word	0x2000002c
     b2c:	20000000 	.word	0x20000000

00000b30 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     b30:	b5f0      	push	{r4, r5, r6, r7, lr}
     b32:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     b34:	ac01      	add	r4, sp, #4
     b36:	2501      	movs	r5, #1
     b38:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     b3a:	2700      	movs	r7, #0
     b3c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     b3e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     b40:	0021      	movs	r1, r4
     b42:	202a      	movs	r0, #42	; 0x2a
     b44:	4e06      	ldr	r6, [pc, #24]	; (b60 <system_board_init+0x30>)
     b46:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     b48:	2280      	movs	r2, #128	; 0x80
     b4a:	00d2      	lsls	r2, r2, #3
     b4c:	4b05      	ldr	r3, [pc, #20]	; (b64 <system_board_init+0x34>)
     b4e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     b50:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     b52:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     b54:	0021      	movs	r1, r4
     b56:	2002      	movs	r0, #2
     b58:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     b5a:	b003      	add	sp, #12
     b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b5e:	46c0      	nop			; (mov r8, r8)
     b60:	00000b69 	.word	0x00000b69
     b64:	40002880 	.word	0x40002880

00000b68 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     b68:	b500      	push	{lr}
     b6a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     b6c:	ab01      	add	r3, sp, #4
     b6e:	2280      	movs	r2, #128	; 0x80
     b70:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     b72:	780a      	ldrb	r2, [r1, #0]
     b74:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     b76:	784a      	ldrb	r2, [r1, #1]
     b78:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     b7a:	788a      	ldrb	r2, [r1, #2]
     b7c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     b7e:	0019      	movs	r1, r3
     b80:	4b01      	ldr	r3, [pc, #4]	; (b88 <port_pin_set_config+0x20>)
     b82:	4798      	blx	r3
}
     b84:	b003      	add	sp, #12
     b86:	bd00      	pop	{pc}
     b88:	000011a9 	.word	0x000011a9

00000b8c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     b8c:	b510      	push	{r4, lr}
	switch (clock_source) {
     b8e:	2808      	cmp	r0, #8
     b90:	d803      	bhi.n	b9a <system_clock_source_get_hz+0xe>
     b92:	0080      	lsls	r0, r0, #2
     b94:	4b1c      	ldr	r3, [pc, #112]	; (c08 <system_clock_source_get_hz+0x7c>)
     b96:	581b      	ldr	r3, [r3, r0]
     b98:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
     b9a:	2000      	movs	r0, #0
     b9c:	e032      	b.n	c04 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     b9e:	4b1b      	ldr	r3, [pc, #108]	; (c0c <system_clock_source_get_hz+0x80>)
     ba0:	6918      	ldr	r0, [r3, #16]
     ba2:	e02f      	b.n	c04 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
     ba4:	4b1a      	ldr	r3, [pc, #104]	; (c10 <system_clock_source_get_hz+0x84>)
     ba6:	7d18      	ldrb	r0, [r3, #20]
     ba8:	0700      	lsls	r0, r0, #28
     baa:	0f80      	lsrs	r0, r0, #30
     bac:	1c43      	adds	r3, r0, #1
     bae:	4819      	ldr	r0, [pc, #100]	; (c14 <system_clock_source_get_hz+0x88>)
     bb0:	4358      	muls	r0, r3
     bb2:	e027      	b.n	c04 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     bb4:	4b15      	ldr	r3, [pc, #84]	; (c0c <system_clock_source_get_hz+0x80>)
     bb6:	6958      	ldr	r0, [r3, #20]
     bb8:	e024      	b.n	c04 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
     bba:	4b14      	ldr	r3, [pc, #80]	; (c0c <system_clock_source_get_hz+0x80>)
     bbc:	681b      	ldr	r3, [r3, #0]
			return 0;
     bbe:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
     bc0:	079b      	lsls	r3, r3, #30
     bc2:	d51f      	bpl.n	c04 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
     bc4:	4912      	ldr	r1, [pc, #72]	; (c10 <system_clock_source_get_hz+0x84>)
     bc6:	2280      	movs	r2, #128	; 0x80
     bc8:	0052      	lsls	r2, r2, #1
     bca:	68cb      	ldr	r3, [r1, #12]
     bcc:	4213      	tst	r3, r2
     bce:	d0fc      	beq.n	bca <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
     bd0:	4b0e      	ldr	r3, [pc, #56]	; (c0c <system_clock_source_get_hz+0x80>)
     bd2:	681b      	ldr	r3, [r3, #0]
     bd4:	075b      	lsls	r3, r3, #29
     bd6:	d401      	bmi.n	bdc <system_clock_source_get_hz+0x50>
		return 48000000UL;
     bd8:	480f      	ldr	r0, [pc, #60]	; (c18 <system_clock_source_get_hz+0x8c>)
     bda:	e013      	b.n	c04 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     bdc:	2000      	movs	r0, #0
     bde:	4b0f      	ldr	r3, [pc, #60]	; (c1c <system_clock_source_get_hz+0x90>)
     be0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     be2:	4b0a      	ldr	r3, [pc, #40]	; (c0c <system_clock_source_get_hz+0x80>)
     be4:	689b      	ldr	r3, [r3, #8]
     be6:	041b      	lsls	r3, r3, #16
     be8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     bea:	4358      	muls	r0, r3
     bec:	e00a      	b.n	c04 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     bee:	2328      	movs	r3, #40	; 0x28
     bf0:	4a07      	ldr	r2, [pc, #28]	; (c10 <system_clock_source_get_hz+0x84>)
     bf2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     bf4:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     bf6:	079b      	lsls	r3, r3, #30
     bf8:	d504      	bpl.n	c04 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     bfa:	4b04      	ldr	r3, [pc, #16]	; (c0c <system_clock_source_get_hz+0x80>)
     bfc:	68d8      	ldr	r0, [r3, #12]
     bfe:	e001      	b.n	c04 <system_clock_source_get_hz+0x78>
		return 32768UL;
     c00:	2080      	movs	r0, #128	; 0x80
     c02:	0200      	lsls	r0, r0, #8
	}
}
     c04:	bd10      	pop	{r4, pc}
     c06:	46c0      	nop			; (mov r8, r8)
     c08:	00001614 	.word	0x00001614
     c0c:	20000030 	.word	0x20000030
     c10:	40000c00 	.word	0x40000c00
     c14:	003d0900 	.word	0x003d0900
     c18:	02dc6c00 	.word	0x02dc6c00
     c1c:	000010d1 	.word	0x000010d1

00000c20 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
     c20:	b5f0      	push	{r4, r5, r6, r7, lr}
     c22:	46d6      	mov	lr, sl
     c24:	464f      	mov	r7, r9
     c26:	4646      	mov	r6, r8
     c28:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
     c2a:	4b20      	ldr	r3, [pc, #128]	; (cac <system_clock_source_xosc32k_set_config+0x8c>)
     c2c:	469a      	mov	sl, r3
     c2e:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
     c30:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
     c32:	7801      	ldrb	r1, [r0, #0]
     c34:	424c      	negs	r4, r1
     c36:	414c      	adcs	r4, r1
     c38:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
     c3a:	7881      	ldrb	r1, [r0, #2]
     c3c:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
     c3e:	78c1      	ldrb	r1, [r0, #3]
     c40:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
     c42:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
     c44:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
     c46:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
     c48:	6840      	ldr	r0, [r0, #4]
     c4a:	4919      	ldr	r1, [pc, #100]	; (cb0 <system_clock_source_xosc32k_set_config+0x90>)
     c4c:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
     c4e:	2101      	movs	r1, #1
     c50:	4648      	mov	r0, r9
     c52:	0080      	lsls	r0, r0, #2
     c54:	2204      	movs	r2, #4
     c56:	4393      	bics	r3, r2
     c58:	4303      	orrs	r3, r0
     c5a:	4640      	mov	r0, r8
     c5c:	4008      	ands	r0, r1
     c5e:	00c0      	lsls	r0, r0, #3
     c60:	3204      	adds	r2, #4
     c62:	4393      	bics	r3, r2
     c64:	4303      	orrs	r3, r0
     c66:	4660      	mov	r0, ip
     c68:	4008      	ands	r0, r1
     c6a:	0100      	lsls	r0, r0, #4
     c6c:	3208      	adds	r2, #8
     c6e:	4393      	bics	r3, r2
     c70:	4303      	orrs	r3, r0
     c72:	400f      	ands	r7, r1
     c74:	01bf      	lsls	r7, r7, #6
     c76:	2040      	movs	r0, #64	; 0x40
     c78:	4383      	bics	r3, r0
     c7a:	433b      	orrs	r3, r7
     c7c:	400e      	ands	r6, r1
     c7e:	01f6      	lsls	r6, r6, #7
     c80:	3040      	adds	r0, #64	; 0x40
     c82:	4383      	bics	r3, r0
     c84:	4333      	orrs	r3, r6
     c86:	3879      	subs	r0, #121	; 0x79
     c88:	4005      	ands	r5, r0
     c8a:	022d      	lsls	r5, r5, #8
     c8c:	4809      	ldr	r0, [pc, #36]	; (cb4 <system_clock_source_xosc32k_set_config+0x94>)
     c8e:	4003      	ands	r3, r0
     c90:	432b      	orrs	r3, r5
     c92:	4021      	ands	r1, r4
     c94:	0309      	lsls	r1, r1, #12
     c96:	4808      	ldr	r0, [pc, #32]	; (cb8 <system_clock_source_xosc32k_set_config+0x98>)
     c98:	4003      	ands	r3, r0
     c9a:	430b      	orrs	r3, r1
     c9c:	4652      	mov	r2, sl
     c9e:	6153      	str	r3, [r2, #20]
}
     ca0:	bc1c      	pop	{r2, r3, r4}
     ca2:	4690      	mov	r8, r2
     ca4:	4699      	mov	r9, r3
     ca6:	46a2      	mov	sl, r4
     ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     caa:	46c0      	nop			; (mov r8, r8)
     cac:	40001000 	.word	0x40001000
     cb0:	20000030 	.word	0x20000030
     cb4:	fffff8ff 	.word	0xfffff8ff
     cb8:	ffffefff 	.word	0xffffefff

00000cbc <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     cbc:	2808      	cmp	r0, #8
     cbe:	d803      	bhi.n	cc8 <system_clock_source_enable+0xc>
     cc0:	0080      	lsls	r0, r0, #2
     cc2:	4b2d      	ldr	r3, [pc, #180]	; (d78 <system_clock_source_enable+0xbc>)
     cc4:	581b      	ldr	r3, [r3, r0]
     cc6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     cc8:	2017      	movs	r0, #23
     cca:	e054      	b.n	d76 <system_clock_source_enable+0xba>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
     ccc:	4a2b      	ldr	r2, [pc, #172]	; (d7c <system_clock_source_enable+0xc0>)
     cce:	7d13      	ldrb	r3, [r2, #20]
     cd0:	2102      	movs	r1, #2
     cd2:	430b      	orrs	r3, r1
     cd4:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
     cd6:	2000      	movs	r0, #0
     cd8:	e04d      	b.n	d76 <system_clock_source_enable+0xba>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
     cda:	4a29      	ldr	r2, [pc, #164]	; (d80 <system_clock_source_enable+0xc4>)
     cdc:	6993      	ldr	r3, [r2, #24]
     cde:	2102      	movs	r1, #2
     ce0:	430b      	orrs	r3, r1
     ce2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     ce4:	2000      	movs	r0, #0
		break;
     ce6:	e046      	b.n	d76 <system_clock_source_enable+0xba>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
     ce8:	4a24      	ldr	r2, [pc, #144]	; (d7c <system_clock_source_enable+0xc0>)
     cea:	8a13      	ldrh	r3, [r2, #16]
     cec:	2102      	movs	r1, #2
     cee:	430b      	orrs	r3, r1
     cf0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     cf2:	2000      	movs	r0, #0
		break;
     cf4:	e03f      	b.n	d76 <system_clock_source_enable+0xba>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
     cf6:	4a22      	ldr	r2, [pc, #136]	; (d80 <system_clock_source_enable+0xc4>)
     cf8:	6953      	ldr	r3, [r2, #20]
     cfa:	2102      	movs	r1, #2
     cfc:	430b      	orrs	r3, r1
     cfe:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
     d00:	2000      	movs	r0, #0
		break;
     d02:	e038      	b.n	d76 <system_clock_source_enable+0xba>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
     d04:	491f      	ldr	r1, [pc, #124]	; (d84 <system_clock_source_enable+0xc8>)
     d06:	680b      	ldr	r3, [r1, #0]
     d08:	2202      	movs	r2, #2
     d0a:	4313      	orrs	r3, r2
     d0c:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
     d0e:	4b1b      	ldr	r3, [pc, #108]	; (d7c <system_clock_source_enable+0xc0>)
     d10:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
     d12:	0019      	movs	r1, r3
     d14:	32fe      	adds	r2, #254	; 0xfe
     d16:	68cb      	ldr	r3, [r1, #12]
     d18:	4213      	tst	r3, r2
     d1a:	d0fc      	beq.n	d16 <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     d1c:	4b19      	ldr	r3, [pc, #100]	; (d84 <system_clock_source_enable+0xc8>)
     d1e:	689a      	ldr	r2, [r3, #8]
     d20:	4b16      	ldr	r3, [pc, #88]	; (d7c <system_clock_source_enable+0xc0>)
     d22:	621a      	str	r2, [r3, #32]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
     d24:	2202      	movs	r2, #2
     d26:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
     d28:	0019      	movs	r1, r3
     d2a:	32fe      	adds	r2, #254	; 0xfe
     d2c:	68cb      	ldr	r3, [r1, #12]
     d2e:	4213      	tst	r3, r2
     d30:	d0fc      	beq.n	d2c <system_clock_source_enable+0x70>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     d32:	4b14      	ldr	r3, [pc, #80]	; (d84 <system_clock_source_enable+0xc8>)
     d34:	685a      	ldr	r2, [r3, #4]
     d36:	4b11      	ldr	r3, [pc, #68]	; (d7c <system_clock_source_enable+0xc0>)
     d38:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
     d3a:	2200      	movs	r2, #0
     d3c:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
     d3e:	0019      	movs	r1, r3
     d40:	3201      	adds	r2, #1
     d42:	32ff      	adds	r2, #255	; 0xff
     d44:	68cb      	ldr	r3, [r1, #12]
     d46:	4213      	tst	r3, r2
     d48:	d0fc      	beq.n	d44 <system_clock_source_enable+0x88>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     d4a:	4b0e      	ldr	r3, [pc, #56]	; (d84 <system_clock_source_enable+0xc8>)
     d4c:	681b      	ldr	r3, [r3, #0]
     d4e:	b29b      	uxth	r3, r3
     d50:	4a0a      	ldr	r2, [pc, #40]	; (d7c <system_clock_source_enable+0xc0>)
     d52:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
     d54:	2000      	movs	r0, #0
     d56:	e00e      	b.n	d76 <system_clock_source_enable+0xba>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
     d58:	4908      	ldr	r1, [pc, #32]	; (d7c <system_clock_source_enable+0xc0>)
     d5a:	2228      	movs	r2, #40	; 0x28
     d5c:	5c8b      	ldrb	r3, [r1, r2]
     d5e:	2002      	movs	r0, #2
     d60:	4303      	orrs	r3, r0
     d62:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
     d64:	0008      	movs	r0, r1
     d66:	2138      	movs	r1, #56	; 0x38
     d68:	3a26      	subs	r2, #38	; 0x26
     d6a:	5c43      	ldrb	r3, [r0, r1]
     d6c:	4213      	tst	r3, r2
     d6e:	d1fc      	bne.n	d6a <system_clock_source_enable+0xae>
	return STATUS_OK;
     d70:	2000      	movs	r0, #0
     d72:	e000      	b.n	d76 <system_clock_source_enable+0xba>
		return STATUS_OK;
     d74:	2000      	movs	r0, #0
}
     d76:	4770      	bx	lr
     d78:	00001638 	.word	0x00001638
     d7c:	40000c00 	.word	0x40000c00
     d80:	40001000 	.word	0x40001000
     d84:	20000030 	.word	0x20000030

00000d88 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     d88:	b510      	push	{r4, lr}
     d8a:	b086      	sub	sp, #24
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
     d8c:	2280      	movs	r2, #128	; 0x80
     d8e:	0052      	lsls	r2, r2, #1
     d90:	4b3e      	ldr	r3, [pc, #248]	; (e8c <system_clock_init+0x104>)
     d92:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
     d94:	3afd      	subs	r2, #253	; 0xfd
     d96:	4b3e      	ldr	r3, [pc, #248]	; (e90 <system_clock_init+0x108>)
     d98:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     d9a:	4a3e      	ldr	r2, [pc, #248]	; (e94 <system_clock_init+0x10c>)
     d9c:	6853      	ldr	r3, [r2, #4]
     d9e:	211e      	movs	r1, #30
     da0:	438b      	bics	r3, r1
     da2:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
     da4:	2380      	movs	r3, #128	; 0x80
     da6:	05db      	lsls	r3, r3, #23
     da8:	789b      	ldrb	r3, [r3, #2]
     daa:	2b02      	cmp	r3, #2
     dac:	d00f      	beq.n	dce <system_clock_init+0x46>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
     dae:	2380      	movs	r3, #128	; 0x80
     db0:	05db      	lsls	r3, r3, #23
     db2:	789b      	ldrb	r3, [r3, #2]
     db4:	b25b      	sxtb	r3, r3
     db6:	2b00      	cmp	r3, #0
     db8:	db09      	blt.n	dce <system_clock_init+0x46>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
     dba:	2380      	movs	r3, #128	; 0x80
     dbc:	05db      	lsls	r3, r3, #23
     dbe:	2201      	movs	r2, #1
     dc0:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
     dc2:	3201      	adds	r2, #1
     dc4:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
     dc6:	001a      	movs	r2, r3
     dc8:	7993      	ldrb	r3, [r2, #6]
     dca:	2b00      	cmp	r3, #0
     dcc:	d0fc      	beq.n	dc8 <system_clock_init+0x40>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
     dce:	a803      	add	r0, sp, #12
     dd0:	2300      	movs	r3, #0
     dd2:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
     dd4:	2280      	movs	r2, #128	; 0x80
     dd6:	0212      	lsls	r2, r2, #8
     dd8:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
     dda:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
     ddc:	2201      	movs	r2, #1
     dde:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
     de0:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
     de2:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
     de4:	3203      	adds	r2, #3
     de6:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
     de8:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
     dea:	4b2b      	ldr	r3, [pc, #172]	; (e98 <system_clock_init+0x110>)
     dec:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
     dee:	2005      	movs	r0, #5
     df0:	4b2a      	ldr	r3, [pc, #168]	; (e9c <system_clock_init+0x114>)
     df2:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
     df4:	492a      	ldr	r1, [pc, #168]	; (ea0 <system_clock_init+0x118>)
     df6:	2201      	movs	r2, #1
     df8:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
     dfa:	421a      	tst	r2, r3
     dfc:	d0fc      	beq.n	df8 <system_clock_init+0x70>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
     dfe:	4a28      	ldr	r2, [pc, #160]	; (ea0 <system_clock_init+0x118>)
     e00:	6953      	ldr	r3, [r2, #20]
     e02:	2180      	movs	r1, #128	; 0x80
     e04:	430b      	orrs	r3, r1
     e06:	6153      	str	r3, [r2, #20]
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
     e08:	4b20      	ldr	r3, [pc, #128]	; (e8c <system_clock_init+0x104>)
     e0a:	7d19      	ldrb	r1, [r3, #20]
     e0c:	2280      	movs	r2, #128	; 0x80
     e0e:	4252      	negs	r2, r2
     e10:	430a      	orrs	r2, r1
     e12:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
     e14:	7d1a      	ldrb	r2, [r3, #20]
     e16:	2140      	movs	r1, #64	; 0x40
     e18:	438a      	bics	r2, r1
     e1a:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     e1c:	4b21      	ldr	r3, [pc, #132]	; (ea4 <system_clock_init+0x11c>)
     e1e:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
     e20:	4c21      	ldr	r4, [pc, #132]	; (ea8 <system_clock_init+0x120>)
     e22:	2301      	movs	r3, #1
     e24:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
     e26:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
     e28:	7123      	strb	r3, [r4, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     e2a:	9301      	str	r3, [sp, #4]
	config->high_when_disabled = false;
     e2c:	2300      	movs	r3, #0
     e2e:	466a      	mov	r2, sp
     e30:	7053      	strb	r3, [r2, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
     e32:	2206      	movs	r2, #6
     e34:	4669      	mov	r1, sp
     e36:	700a      	strb	r2, [r1, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     e38:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     e3a:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     e3c:	2000      	movs	r0, #0
     e3e:	4b1b      	ldr	r3, [pc, #108]	; (eac <system_clock_init+0x124>)
     e40:	4798      	blx	r3
     e42:	2000      	movs	r0, #0
     e44:	4b1a      	ldr	r3, [pc, #104]	; (eb0 <system_clock_init+0x128>)
     e46:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
     e48:	2000      	movs	r0, #0
     e4a:	4b1a      	ldr	r3, [pc, #104]	; (eb4 <system_clock_init+0x12c>)
     e4c:	4798      	blx	r3
     e4e:	7921      	ldrb	r1, [r4, #4]
     e50:	b2c9      	uxtb	r1, r1
     e52:	4b19      	ldr	r3, [pc, #100]	; (eb8 <system_clock_init+0x130>)
     e54:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
     e56:	4b19      	ldr	r3, [pc, #100]	; (ebc <system_clock_init+0x134>)
     e58:	4298      	cmp	r0, r3
     e5a:	d814      	bhi.n	e86 <system_clock_init+0xfe>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
     e5c:	2380      	movs	r3, #128	; 0x80
     e5e:	05db      	lsls	r3, r3, #23
     e60:	789b      	ldrb	r3, [r3, #2]
     e62:	2b00      	cmp	r3, #0
     e64:	d00f      	beq.n	e86 <system_clock_init+0xfe>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
     e66:	2380      	movs	r3, #128	; 0x80
     e68:	05db      	lsls	r3, r3, #23
     e6a:	789b      	ldrb	r3, [r3, #2]
     e6c:	b25b      	sxtb	r3, r3
     e6e:	2b00      	cmp	r3, #0
     e70:	db09      	blt.n	e86 <system_clock_init+0xfe>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
     e72:	2380      	movs	r3, #128	; 0x80
     e74:	05db      	lsls	r3, r3, #23
     e76:	2201      	movs	r2, #1
     e78:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
     e7a:	2200      	movs	r2, #0
     e7c:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
     e7e:	001a      	movs	r2, r3
     e80:	7993      	ldrb	r3, [r2, #6]
     e82:	2b00      	cmp	r3, #0
     e84:	d0fc      	beq.n	e80 <system_clock_init+0xf8>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
     e86:	b006      	add	sp, #24
     e88:	bd10      	pop	{r4, pc}
     e8a:	46c0      	nop			; (mov r8, r8)
     e8c:	40000c00 	.word	0x40000c00
     e90:	40001400 	.word	0x40001400
     e94:	41004000 	.word	0x41004000
     e98:	00000c21 	.word	0x00000c21
     e9c:	00000cbd 	.word	0x00000cbd
     ea0:	40001000 	.word	0x40001000
     ea4:	00000ec1 	.word	0x00000ec1
     ea8:	40000400 	.word	0x40000400
     eac:	00000ee5 	.word	0x00000ee5
     eb0:	00000f91 	.word	0x00000f91
     eb4:	00000fd1 	.word	0x00000fd1
     eb8:	00001301 	.word	0x00001301
     ebc:	00b71b00 	.word	0x00b71b00

00000ec0 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
     ec0:	4a06      	ldr	r2, [pc, #24]	; (edc <system_gclk_init+0x1c>)
     ec2:	6953      	ldr	r3, [r2, #20]
     ec4:	2140      	movs	r1, #64	; 0x40
     ec6:	430b      	orrs	r3, r1
     ec8:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
     eca:	2201      	movs	r2, #1
     ecc:	4b04      	ldr	r3, [pc, #16]	; (ee0 <system_gclk_init+0x20>)
     ece:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
     ed0:	0019      	movs	r1, r3
     ed2:	780b      	ldrb	r3, [r1, #0]
     ed4:	4213      	tst	r3, r2
     ed6:	d1fc      	bne.n	ed2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     ed8:	4770      	bx	lr
     eda:	46c0      	nop			; (mov r8, r8)
     edc:	40000400 	.word	0x40000400
     ee0:	40001800 	.word	0x40001800

00000ee4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     ee4:	b570      	push	{r4, r5, r6, lr}
     ee6:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
     ee8:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     eea:	784b      	ldrb	r3, [r1, #1]
     eec:	2b00      	cmp	r3, #0
     eee:	d002      	beq.n	ef6 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     ef0:	2380      	movs	r3, #128	; 0x80
     ef2:	00db      	lsls	r3, r3, #3
     ef4:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     ef6:	7a4b      	ldrb	r3, [r1, #9]
     ef8:	2b00      	cmp	r3, #0
     efa:	d002      	beq.n	f02 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     efc:	2380      	movs	r3, #128	; 0x80
     efe:	011b      	lsls	r3, r3, #4
     f00:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     f02:	6848      	ldr	r0, [r1, #4]
     f04:	2801      	cmp	r0, #1
     f06:	d90f      	bls.n	f28 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     f08:	1e43      	subs	r3, r0, #1
     f0a:	4218      	tst	r0, r3
     f0c:	d131      	bne.n	f72 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     f0e:	2802      	cmp	r0, #2
     f10:	d92d      	bls.n	f6e <system_gclk_gen_set_config+0x8a>
     f12:	2302      	movs	r3, #2
     f14:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     f16:	3201      	adds	r2, #1
						mask <<= 1) {
     f18:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     f1a:	4298      	cmp	r0, r3
     f1c:	d8fb      	bhi.n	f16 <system_gclk_gen_set_config+0x32>
     f1e:	2380      	movs	r3, #128	; 0x80
     f20:	015b      	lsls	r3, r3, #5
     f22:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
     f24:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     f26:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     f28:	7a0b      	ldrb	r3, [r1, #8]
     f2a:	2b00      	cmp	r3, #0
     f2c:	d002      	beq.n	f34 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     f2e:	2380      	movs	r3, #128	; 0x80
     f30:	019b      	lsls	r3, r3, #6
     f32:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     f34:	2604      	movs	r6, #4
     f36:	40a6      	lsls	r6, r4
     f38:	4911      	ldr	r1, [pc, #68]	; (f80 <system_gclk_gen_set_config+0x9c>)
     f3a:	4a12      	ldr	r2, [pc, #72]	; (f84 <system_gclk_gen_set_config+0xa0>)
     f3c:	684b      	ldr	r3, [r1, #4]
     f3e:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
     f40:	421e      	tst	r6, r3
     f42:	d1fb      	bne.n	f3c <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f44:	4b10      	ldr	r3, [pc, #64]	; (f88 <system_gclk_gen_set_config+0xa4>)
     f46:	4798      	blx	r3
     f48:	00a4      	lsls	r4, r4, #2
     f4a:	4b0d      	ldr	r3, [pc, #52]	; (f80 <system_gclk_gen_set_config+0x9c>)
     f4c:	469c      	mov	ip, r3
     f4e:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
     f50:	6a22      	ldr	r2, [r4, #32]
     f52:	2380      	movs	r3, #128	; 0x80
     f54:	005b      	lsls	r3, r3, #1
     f56:	401a      	ands	r2, r3
     f58:	432a      	orrs	r2, r5
     f5a:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     f5c:	4661      	mov	r1, ip
     f5e:	4a09      	ldr	r2, [pc, #36]	; (f84 <system_gclk_gen_set_config+0xa0>)
     f60:	684b      	ldr	r3, [r1, #4]
     f62:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
     f64:	421e      	tst	r6, r3
     f66:	d1fb      	bne.n	f60 <system_gclk_gen_set_config+0x7c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     f68:	4b08      	ldr	r3, [pc, #32]	; (f8c <system_gclk_gen_set_config+0xa8>)
     f6a:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
     f6c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     f6e:	2200      	movs	r2, #0
     f70:	e7d5      	b.n	f1e <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
     f72:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     f74:	2380      	movs	r3, #128	; 0x80
     f76:	009b      	lsls	r3, r3, #2
     f78:	4318      	orrs	r0, r3
     f7a:	4305      	orrs	r5, r0
     f7c:	e7d4      	b.n	f28 <system_gclk_gen_set_config+0x44>
     f7e:	46c0      	nop			; (mov r8, r8)
     f80:	40001800 	.word	0x40001800
     f84:	000007fc 	.word	0x000007fc
     f88:	00000ac1 	.word	0x00000ac1
     f8c:	00000b01 	.word	0x00000b01

00000f90 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     f90:	b510      	push	{r4, lr}
     f92:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     f94:	2204      	movs	r2, #4
     f96:	4082      	lsls	r2, r0
     f98:	4809      	ldr	r0, [pc, #36]	; (fc0 <system_gclk_gen_enable+0x30>)
     f9a:	490a      	ldr	r1, [pc, #40]	; (fc4 <system_gclk_gen_enable+0x34>)
     f9c:	6843      	ldr	r3, [r0, #4]
     f9e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
     fa0:	421a      	tst	r2, r3
     fa2:	d1fb      	bne.n	f9c <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
     fa4:	4b08      	ldr	r3, [pc, #32]	; (fc8 <system_gclk_gen_enable+0x38>)
     fa6:	4798      	blx	r3
     fa8:	00a4      	lsls	r4, r4, #2
     faa:	4b05      	ldr	r3, [pc, #20]	; (fc0 <system_gclk_gen_enable+0x30>)
     fac:	469c      	mov	ip, r3
     fae:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
     fb0:	6a22      	ldr	r2, [r4, #32]
     fb2:	2380      	movs	r3, #128	; 0x80
     fb4:	005b      	lsls	r3, r3, #1
     fb6:	4313      	orrs	r3, r2
     fb8:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
     fba:	4b04      	ldr	r3, [pc, #16]	; (fcc <system_gclk_gen_enable+0x3c>)
     fbc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     fbe:	bd10      	pop	{r4, pc}
     fc0:	40001800 	.word	0x40001800
     fc4:	000007fc 	.word	0x000007fc
     fc8:	00000ac1 	.word	0x00000ac1
     fcc:	00000b01 	.word	0x00000b01

00000fd0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fd2:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     fd4:	2204      	movs	r2, #4
     fd6:	4082      	lsls	r2, r0
     fd8:	4812      	ldr	r0, [pc, #72]	; (1024 <system_gclk_gen_get_hz+0x54>)
     fda:	4913      	ldr	r1, [pc, #76]	; (1028 <system_gclk_gen_get_hz+0x58>)
     fdc:	6843      	ldr	r3, [r0, #4]
     fde:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
     fe0:	421a      	tst	r2, r3
     fe2:	d1fb      	bne.n	fdc <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
     fe4:	4b11      	ldr	r3, [pc, #68]	; (102c <system_gclk_gen_get_hz+0x5c>)
     fe6:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
     fe8:	4f0e      	ldr	r7, [pc, #56]	; (1024 <system_gclk_gen_get_hz+0x54>)
     fea:	3408      	adds	r4, #8
     fec:	00a4      	lsls	r4, r4, #2
     fee:	59e0      	ldr	r0, [r4, r7]
     ff0:	0700      	lsls	r0, r0, #28
     ff2:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
     ff4:	4b0e      	ldr	r3, [pc, #56]	; (1030 <system_gclk_gen_get_hz+0x60>)
     ff6:	4798      	blx	r3
     ff8:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
     ffa:	59e5      	ldr	r5, [r4, r7]
     ffc:	04ed      	lsls	r5, r5, #19
     ffe:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    1000:	59e4      	ldr	r4, [r4, r7]
    1002:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1004:	4b0b      	ldr	r3, [pc, #44]	; (1034 <system_gclk_gen_get_hz+0x64>)
    1006:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1008:	2d00      	cmp	r5, #0
    100a:	d107      	bne.n	101c <system_gclk_gen_get_hz+0x4c>
    100c:	2c01      	cmp	r4, #1
    100e:	d907      	bls.n	1020 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    1010:	0021      	movs	r1, r4
    1012:	0030      	movs	r0, r6
    1014:	4b08      	ldr	r3, [pc, #32]	; (1038 <system_gclk_gen_get_hz+0x68>)
    1016:	4798      	blx	r3
    1018:	0006      	movs	r6, r0
    101a:	e001      	b.n	1020 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    101c:	3401      	adds	r4, #1
    101e:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1020:	0030      	movs	r0, r6
    1022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1024:	40001800 	.word	0x40001800
    1028:	000007fc 	.word	0x000007fc
    102c:	00000ac1 	.word	0x00000ac1
    1030:	00000b8d 	.word	0x00000b8d
    1034:	00000b01 	.word	0x00000b01
    1038:	00001301 	.word	0x00001301

0000103c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    103c:	b510      	push	{r4, lr}
    103e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1040:	4b09      	ldr	r3, [pc, #36]	; (1068 <system_gclk_chan_enable+0x2c>)
    1042:	4798      	blx	r3
    1044:	00a0      	lsls	r0, r4, #2
    1046:	4b09      	ldr	r3, [pc, #36]	; (106c <system_gclk_chan_enable+0x30>)
    1048:	469c      	mov	ip, r3
    104a:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    104c:	2280      	movs	r2, #128	; 0x80
    104e:	5883      	ldr	r3, [r0, r2]
    1050:	2140      	movs	r1, #64	; 0x40
    1052:	430b      	orrs	r3, r1
    1054:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    1056:	3140      	adds	r1, #64	; 0x40
    1058:	3a40      	subs	r2, #64	; 0x40
    105a:	5843      	ldr	r3, [r0, r1]
    105c:	421a      	tst	r2, r3
    105e:	d0fc      	beq.n	105a <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    1060:	4b03      	ldr	r3, [pc, #12]	; (1070 <system_gclk_chan_enable+0x34>)
    1062:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1064:	bd10      	pop	{r4, pc}
    1066:	46c0      	nop			; (mov r8, r8)
    1068:	00000ac1 	.word	0x00000ac1
    106c:	40001800 	.word	0x40001800
    1070:	00000b01 	.word	0x00000b01

00001074 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1074:	b510      	push	{r4, lr}
    1076:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1078:	4b09      	ldr	r3, [pc, #36]	; (10a0 <system_gclk_chan_disable+0x2c>)
    107a:	4798      	blx	r3
    107c:	00a0      	lsls	r0, r4, #2
    107e:	4b09      	ldr	r3, [pc, #36]	; (10a4 <system_gclk_chan_disable+0x30>)
    1080:	469c      	mov	ip, r3
    1082:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    1084:	2280      	movs	r2, #128	; 0x80
    1086:	5883      	ldr	r3, [r0, r2]
    1088:	2140      	movs	r1, #64	; 0x40
    108a:	438b      	bics	r3, r1
    108c:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    108e:	3140      	adds	r1, #64	; 0x40
    1090:	3a40      	subs	r2, #64	; 0x40
    1092:	5843      	ldr	r3, [r0, r1]
    1094:	421a      	tst	r2, r3
    1096:	d1fc      	bne.n	1092 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    1098:	4b03      	ldr	r3, [pc, #12]	; (10a8 <system_gclk_chan_disable+0x34>)
    109a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    109c:	bd10      	pop	{r4, pc}
    109e:	46c0      	nop			; (mov r8, r8)
    10a0:	00000ac1 	.word	0x00000ac1
    10a4:	40001800 	.word	0x40001800
    10a8:	00000b01 	.word	0x00000b01

000010ac <system_gclk_chan_set_config>:
{
    10ac:	b570      	push	{r4, r5, r6, lr}
    10ae:	0004      	movs	r4, r0
    10b0:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    10b2:	4b05      	ldr	r3, [pc, #20]	; (10c8 <system_gclk_chan_set_config+0x1c>)
    10b4:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    10b6:	782a      	ldrb	r2, [r5, #0]
    10b8:	230f      	movs	r3, #15
    10ba:	4013      	ands	r3, r2
    10bc:	3420      	adds	r4, #32
    10be:	00a4      	lsls	r4, r4, #2
    10c0:	4a02      	ldr	r2, [pc, #8]	; (10cc <system_gclk_chan_set_config+0x20>)
    10c2:	50a3      	str	r3, [r4, r2]
}
    10c4:	bd70      	pop	{r4, r5, r6, pc}
    10c6:	46c0      	nop			; (mov r8, r8)
    10c8:	00001075 	.word	0x00001075
    10cc:	40001800 	.word	0x40001800

000010d0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    10d0:	b510      	push	{r4, lr}
    10d2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    10d4:	4b06      	ldr	r3, [pc, #24]	; (10f0 <system_gclk_chan_get_hz+0x20>)
    10d6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    10d8:	3420      	adds	r4, #32
    10da:	00a4      	lsls	r4, r4, #2
    10dc:	4b05      	ldr	r3, [pc, #20]	; (10f4 <system_gclk_chan_get_hz+0x24>)
    10de:	58e4      	ldr	r4, [r4, r3]
    10e0:	0724      	lsls	r4, r4, #28
    10e2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    10e4:	4b04      	ldr	r3, [pc, #16]	; (10f8 <system_gclk_chan_get_hz+0x28>)
    10e6:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    10e8:	0020      	movs	r0, r4
    10ea:	4b04      	ldr	r3, [pc, #16]	; (10fc <system_gclk_chan_get_hz+0x2c>)
    10ec:	4798      	blx	r3
}
    10ee:	bd10      	pop	{r4, pc}
    10f0:	00000ac1 	.word	0x00000ac1
    10f4:	40001800 	.word	0x40001800
    10f8:	00000b01 	.word	0x00000b01
    10fc:	00000fd1 	.word	0x00000fd1

00001100 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1100:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1102:	78d3      	ldrb	r3, [r2, #3]
    1104:	2b00      	cmp	r3, #0
    1106:	d135      	bne.n	1174 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1108:	7813      	ldrb	r3, [r2, #0]
    110a:	2b80      	cmp	r3, #128	; 0x80
    110c:	d029      	beq.n	1162 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    110e:	061b      	lsls	r3, r3, #24
    1110:	2480      	movs	r4, #128	; 0x80
    1112:	0264      	lsls	r4, r4, #9
    1114:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1116:	7854      	ldrb	r4, [r2, #1]
    1118:	2502      	movs	r5, #2
    111a:	43ac      	bics	r4, r5
    111c:	d106      	bne.n	112c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    111e:	7894      	ldrb	r4, [r2, #2]
    1120:	2c00      	cmp	r4, #0
    1122:	d120      	bne.n	1166 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1124:	2480      	movs	r4, #128	; 0x80
    1126:	02a4      	lsls	r4, r4, #10
    1128:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    112a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    112c:	7854      	ldrb	r4, [r2, #1]
    112e:	3c01      	subs	r4, #1
    1130:	2c01      	cmp	r4, #1
    1132:	d91c      	bls.n	116e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1134:	040d      	lsls	r5, r1, #16
    1136:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1138:	24a0      	movs	r4, #160	; 0xa0
    113a:	05e4      	lsls	r4, r4, #23
    113c:	432c      	orrs	r4, r5
    113e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1140:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1142:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1144:	24d0      	movs	r4, #208	; 0xd0
    1146:	0624      	lsls	r4, r4, #24
    1148:	432c      	orrs	r4, r5
    114a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    114c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    114e:	78d4      	ldrb	r4, [r2, #3]
    1150:	2c00      	cmp	r4, #0
    1152:	d122      	bne.n	119a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1154:	035b      	lsls	r3, r3, #13
    1156:	d51c      	bpl.n	1192 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1158:	7893      	ldrb	r3, [r2, #2]
    115a:	2b01      	cmp	r3, #1
    115c:	d01e      	beq.n	119c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    115e:	6141      	str	r1, [r0, #20]
    1160:	e017      	b.n	1192 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1162:	2300      	movs	r3, #0
    1164:	e7d7      	b.n	1116 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1166:	24c0      	movs	r4, #192	; 0xc0
    1168:	02e4      	lsls	r4, r4, #11
    116a:	4323      	orrs	r3, r4
    116c:	e7dd      	b.n	112a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    116e:	4c0d      	ldr	r4, [pc, #52]	; (11a4 <_system_pinmux_config+0xa4>)
    1170:	4023      	ands	r3, r4
    1172:	e7df      	b.n	1134 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1174:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1176:	040c      	lsls	r4, r1, #16
    1178:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    117a:	23a0      	movs	r3, #160	; 0xa0
    117c:	05db      	lsls	r3, r3, #23
    117e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1180:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1182:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1184:	23d0      	movs	r3, #208	; 0xd0
    1186:	061b      	lsls	r3, r3, #24
    1188:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    118a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    118c:	78d3      	ldrb	r3, [r2, #3]
    118e:	2b00      	cmp	r3, #0
    1190:	d103      	bne.n	119a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1192:	7853      	ldrb	r3, [r2, #1]
    1194:	3b01      	subs	r3, #1
    1196:	2b01      	cmp	r3, #1
    1198:	d902      	bls.n	11a0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    119a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    119c:	6181      	str	r1, [r0, #24]
    119e:	e7f8      	b.n	1192 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    11a0:	6081      	str	r1, [r0, #8]
}
    11a2:	e7fa      	b.n	119a <_system_pinmux_config+0x9a>
    11a4:	fffbffff 	.word	0xfffbffff

000011a8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    11a8:	b510      	push	{r4, lr}
    11aa:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    11ac:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    11ae:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    11b0:	2900      	cmp	r1, #0
    11b2:	d104      	bne.n	11be <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    11b4:	0943      	lsrs	r3, r0, #5
    11b6:	01db      	lsls	r3, r3, #7
    11b8:	4905      	ldr	r1, [pc, #20]	; (11d0 <system_pinmux_pin_set_config+0x28>)
    11ba:	468c      	mov	ip, r1
    11bc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    11be:	241f      	movs	r4, #31
    11c0:	4020      	ands	r0, r4
    11c2:	2101      	movs	r1, #1
    11c4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    11c6:	0018      	movs	r0, r3
    11c8:	4b02      	ldr	r3, [pc, #8]	; (11d4 <system_pinmux_pin_set_config+0x2c>)
    11ca:	4798      	blx	r3
}
    11cc:	bd10      	pop	{r4, pc}
    11ce:	46c0      	nop			; (mov r8, r8)
    11d0:	40002800 	.word	0x40002800
    11d4:	00001101 	.word	0x00001101

000011d8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    11d8:	4770      	bx	lr
	...

000011dc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    11dc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    11de:	4b05      	ldr	r3, [pc, #20]	; (11f4 <system_init+0x18>)
    11e0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    11e2:	4b05      	ldr	r3, [pc, #20]	; (11f8 <system_init+0x1c>)
    11e4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    11e6:	4b05      	ldr	r3, [pc, #20]	; (11fc <system_init+0x20>)
    11e8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    11ea:	4b05      	ldr	r3, [pc, #20]	; (1200 <system_init+0x24>)
    11ec:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    11ee:	4b05      	ldr	r3, [pc, #20]	; (1204 <system_init+0x28>)
    11f0:	4798      	blx	r3
}
    11f2:	bd10      	pop	{r4, pc}
    11f4:	00000d89 	.word	0x00000d89
    11f8:	00000b31 	.word	0x00000b31
    11fc:	000011d9 	.word	0x000011d9
    1200:	000011d9 	.word	0x000011d9
    1204:	000011d9 	.word	0x000011d9

00001208 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1208:	e7fe      	b.n	1208 <Dummy_Handler>
	...

0000120c <Reset_Handler>:
{
    120c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    120e:	4a1a      	ldr	r2, [pc, #104]	; (1278 <Reset_Handler+0x6c>)
    1210:	4b1a      	ldr	r3, [pc, #104]	; (127c <Reset_Handler+0x70>)
    1212:	429a      	cmp	r2, r3
    1214:	d011      	beq.n	123a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1216:	001a      	movs	r2, r3
    1218:	4b19      	ldr	r3, [pc, #100]	; (1280 <Reset_Handler+0x74>)
    121a:	429a      	cmp	r2, r3
    121c:	d20d      	bcs.n	123a <Reset_Handler+0x2e>
    121e:	4a19      	ldr	r2, [pc, #100]	; (1284 <Reset_Handler+0x78>)
    1220:	3303      	adds	r3, #3
    1222:	1a9b      	subs	r3, r3, r2
    1224:	089b      	lsrs	r3, r3, #2
    1226:	3301      	adds	r3, #1
    1228:	009b      	lsls	r3, r3, #2
    122a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    122c:	4813      	ldr	r0, [pc, #76]	; (127c <Reset_Handler+0x70>)
    122e:	4912      	ldr	r1, [pc, #72]	; (1278 <Reset_Handler+0x6c>)
    1230:	588c      	ldr	r4, [r1, r2]
    1232:	5084      	str	r4, [r0, r2]
    1234:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1236:	429a      	cmp	r2, r3
    1238:	d1fa      	bne.n	1230 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    123a:	4a13      	ldr	r2, [pc, #76]	; (1288 <Reset_Handler+0x7c>)
    123c:	4b13      	ldr	r3, [pc, #76]	; (128c <Reset_Handler+0x80>)
    123e:	429a      	cmp	r2, r3
    1240:	d20a      	bcs.n	1258 <Reset_Handler+0x4c>
    1242:	43d3      	mvns	r3, r2
    1244:	4911      	ldr	r1, [pc, #68]	; (128c <Reset_Handler+0x80>)
    1246:	185b      	adds	r3, r3, r1
    1248:	2103      	movs	r1, #3
    124a:	438b      	bics	r3, r1
    124c:	3304      	adds	r3, #4
    124e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1250:	2100      	movs	r1, #0
    1252:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1254:	4293      	cmp	r3, r2
    1256:	d1fc      	bne.n	1252 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1258:	4a0d      	ldr	r2, [pc, #52]	; (1290 <Reset_Handler+0x84>)
    125a:	21ff      	movs	r1, #255	; 0xff
    125c:	4b0d      	ldr	r3, [pc, #52]	; (1294 <Reset_Handler+0x88>)
    125e:	438b      	bics	r3, r1
    1260:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1262:	4a0d      	ldr	r2, [pc, #52]	; (1298 <Reset_Handler+0x8c>)
    1264:	6853      	ldr	r3, [r2, #4]
    1266:	397f      	subs	r1, #127	; 0x7f
    1268:	430b      	orrs	r3, r1
    126a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    126c:	4b0b      	ldr	r3, [pc, #44]	; (129c <Reset_Handler+0x90>)
    126e:	4798      	blx	r3
        main();
    1270:	4b0b      	ldr	r3, [pc, #44]	; (12a0 <Reset_Handler+0x94>)
    1272:	4798      	blx	r3
    1274:	e7fe      	b.n	1274 <Reset_Handler+0x68>
    1276:	46c0      	nop			; (mov r8, r8)
    1278:	0000167c 	.word	0x0000167c
    127c:	20000000 	.word	0x20000000
    1280:	20000004 	.word	0x20000004
    1284:	20000004 	.word	0x20000004
    1288:	20000004 	.word	0x20000004
    128c:	20000080 	.word	0x20000080
    1290:	e000ed00 	.word	0xe000ed00
    1294:	00000000 	.word	0x00000000
    1298:	41004000 	.word	0x41004000
    129c:	00001419 	.word	0x00001419
    12a0:	000012a5 	.word	0x000012a5

000012a4 <main>:




int main(void)
{	
    12a4:	b510      	push	{r4, lr}
	system_init();
    12a6:	4b10      	ldr	r3, [pc, #64]	; (12e8 <main+0x44>)
    12a8:	4798      	blx	r3
	/*Initialize ADC, TC-timer and TC-interrupt*/
	configure_adc();
    12aa:	4b10      	ldr	r3, [pc, #64]	; (12ec <main+0x48>)
    12ac:	4798      	blx	r3
	configure_tc();
    12ae:	4b10      	ldr	r3, [pc, #64]	; (12f0 <main+0x4c>)
    12b0:	4798      	blx	r3
	configure_tc_callbacks();
    12b2:	4b10      	ldr	r3, [pc, #64]	; (12f4 <main+0x50>)
    12b4:	4798      	blx	r3
		enum ioport_direction dir)
{
	PortGroup *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    12b6:	4b10      	ldr	r3, [pc, #64]	; (12f8 <main+0x54>)
    12b8:	2220      	movs	r2, #32
    12ba:	609a      	str	r2, [r3, #8]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
	}

	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    12bc:	2165      	movs	r1, #101	; 0x65
    12be:	5c5a      	ldrb	r2, [r3, r1]
    12c0:	2002      	movs	r0, #2
    12c2:	4302      	orrs	r2, r0
    12c4:	545a      	strb	r2, [r3, r1]
	cpu_irq_enable();
    12c6:	2201      	movs	r2, #1
    12c8:	4b0c      	ldr	r3, [pc, #48]	; (12fc <main+0x58>)
    12ca:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    12cc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    12d0:	b662      	cpsie	i
	PM->SLEEPCFG.reg = sleep_mode;
    12d2:	2380      	movs	r3, #128	; 0x80
    12d4:	05db      	lsls	r3, r3, #23
    12d6:	3201      	adds	r2, #1
    12d8:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    12da:	785a      	ldrb	r2, [r3, #1]
    12dc:	2a02      	cmp	r2, #2
    12de:	d1fc      	bne.n	12da <main+0x36>
  __ASM volatile ("dsb");
    12e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    12e4:	bf30      	wfi
    12e6:	e7fb      	b.n	12e0 <main+0x3c>
    12e8:	000011dd 	.word	0x000011dd
    12ec:	00000115 	.word	0x00000115
    12f0:	000009f9 	.word	0x000009f9
    12f4:	00000a75 	.word	0x00000a75
    12f8:	40002880 	.word	0x40002880
    12fc:	20000000 	.word	0x20000000

00001300 <__udivsi3>:
    1300:	2200      	movs	r2, #0
    1302:	0843      	lsrs	r3, r0, #1
    1304:	428b      	cmp	r3, r1
    1306:	d374      	bcc.n	13f2 <__udivsi3+0xf2>
    1308:	0903      	lsrs	r3, r0, #4
    130a:	428b      	cmp	r3, r1
    130c:	d35f      	bcc.n	13ce <__udivsi3+0xce>
    130e:	0a03      	lsrs	r3, r0, #8
    1310:	428b      	cmp	r3, r1
    1312:	d344      	bcc.n	139e <__udivsi3+0x9e>
    1314:	0b03      	lsrs	r3, r0, #12
    1316:	428b      	cmp	r3, r1
    1318:	d328      	bcc.n	136c <__udivsi3+0x6c>
    131a:	0c03      	lsrs	r3, r0, #16
    131c:	428b      	cmp	r3, r1
    131e:	d30d      	bcc.n	133c <__udivsi3+0x3c>
    1320:	22ff      	movs	r2, #255	; 0xff
    1322:	0209      	lsls	r1, r1, #8
    1324:	ba12      	rev	r2, r2
    1326:	0c03      	lsrs	r3, r0, #16
    1328:	428b      	cmp	r3, r1
    132a:	d302      	bcc.n	1332 <__udivsi3+0x32>
    132c:	1212      	asrs	r2, r2, #8
    132e:	0209      	lsls	r1, r1, #8
    1330:	d065      	beq.n	13fe <__udivsi3+0xfe>
    1332:	0b03      	lsrs	r3, r0, #12
    1334:	428b      	cmp	r3, r1
    1336:	d319      	bcc.n	136c <__udivsi3+0x6c>
    1338:	e000      	b.n	133c <__udivsi3+0x3c>
    133a:	0a09      	lsrs	r1, r1, #8
    133c:	0bc3      	lsrs	r3, r0, #15
    133e:	428b      	cmp	r3, r1
    1340:	d301      	bcc.n	1346 <__udivsi3+0x46>
    1342:	03cb      	lsls	r3, r1, #15
    1344:	1ac0      	subs	r0, r0, r3
    1346:	4152      	adcs	r2, r2
    1348:	0b83      	lsrs	r3, r0, #14
    134a:	428b      	cmp	r3, r1
    134c:	d301      	bcc.n	1352 <__udivsi3+0x52>
    134e:	038b      	lsls	r3, r1, #14
    1350:	1ac0      	subs	r0, r0, r3
    1352:	4152      	adcs	r2, r2
    1354:	0b43      	lsrs	r3, r0, #13
    1356:	428b      	cmp	r3, r1
    1358:	d301      	bcc.n	135e <__udivsi3+0x5e>
    135a:	034b      	lsls	r3, r1, #13
    135c:	1ac0      	subs	r0, r0, r3
    135e:	4152      	adcs	r2, r2
    1360:	0b03      	lsrs	r3, r0, #12
    1362:	428b      	cmp	r3, r1
    1364:	d301      	bcc.n	136a <__udivsi3+0x6a>
    1366:	030b      	lsls	r3, r1, #12
    1368:	1ac0      	subs	r0, r0, r3
    136a:	4152      	adcs	r2, r2
    136c:	0ac3      	lsrs	r3, r0, #11
    136e:	428b      	cmp	r3, r1
    1370:	d301      	bcc.n	1376 <__udivsi3+0x76>
    1372:	02cb      	lsls	r3, r1, #11
    1374:	1ac0      	subs	r0, r0, r3
    1376:	4152      	adcs	r2, r2
    1378:	0a83      	lsrs	r3, r0, #10
    137a:	428b      	cmp	r3, r1
    137c:	d301      	bcc.n	1382 <__udivsi3+0x82>
    137e:	028b      	lsls	r3, r1, #10
    1380:	1ac0      	subs	r0, r0, r3
    1382:	4152      	adcs	r2, r2
    1384:	0a43      	lsrs	r3, r0, #9
    1386:	428b      	cmp	r3, r1
    1388:	d301      	bcc.n	138e <__udivsi3+0x8e>
    138a:	024b      	lsls	r3, r1, #9
    138c:	1ac0      	subs	r0, r0, r3
    138e:	4152      	adcs	r2, r2
    1390:	0a03      	lsrs	r3, r0, #8
    1392:	428b      	cmp	r3, r1
    1394:	d301      	bcc.n	139a <__udivsi3+0x9a>
    1396:	020b      	lsls	r3, r1, #8
    1398:	1ac0      	subs	r0, r0, r3
    139a:	4152      	adcs	r2, r2
    139c:	d2cd      	bcs.n	133a <__udivsi3+0x3a>
    139e:	09c3      	lsrs	r3, r0, #7
    13a0:	428b      	cmp	r3, r1
    13a2:	d301      	bcc.n	13a8 <__udivsi3+0xa8>
    13a4:	01cb      	lsls	r3, r1, #7
    13a6:	1ac0      	subs	r0, r0, r3
    13a8:	4152      	adcs	r2, r2
    13aa:	0983      	lsrs	r3, r0, #6
    13ac:	428b      	cmp	r3, r1
    13ae:	d301      	bcc.n	13b4 <__udivsi3+0xb4>
    13b0:	018b      	lsls	r3, r1, #6
    13b2:	1ac0      	subs	r0, r0, r3
    13b4:	4152      	adcs	r2, r2
    13b6:	0943      	lsrs	r3, r0, #5
    13b8:	428b      	cmp	r3, r1
    13ba:	d301      	bcc.n	13c0 <__udivsi3+0xc0>
    13bc:	014b      	lsls	r3, r1, #5
    13be:	1ac0      	subs	r0, r0, r3
    13c0:	4152      	adcs	r2, r2
    13c2:	0903      	lsrs	r3, r0, #4
    13c4:	428b      	cmp	r3, r1
    13c6:	d301      	bcc.n	13cc <__udivsi3+0xcc>
    13c8:	010b      	lsls	r3, r1, #4
    13ca:	1ac0      	subs	r0, r0, r3
    13cc:	4152      	adcs	r2, r2
    13ce:	08c3      	lsrs	r3, r0, #3
    13d0:	428b      	cmp	r3, r1
    13d2:	d301      	bcc.n	13d8 <__udivsi3+0xd8>
    13d4:	00cb      	lsls	r3, r1, #3
    13d6:	1ac0      	subs	r0, r0, r3
    13d8:	4152      	adcs	r2, r2
    13da:	0883      	lsrs	r3, r0, #2
    13dc:	428b      	cmp	r3, r1
    13de:	d301      	bcc.n	13e4 <__udivsi3+0xe4>
    13e0:	008b      	lsls	r3, r1, #2
    13e2:	1ac0      	subs	r0, r0, r3
    13e4:	4152      	adcs	r2, r2
    13e6:	0843      	lsrs	r3, r0, #1
    13e8:	428b      	cmp	r3, r1
    13ea:	d301      	bcc.n	13f0 <__udivsi3+0xf0>
    13ec:	004b      	lsls	r3, r1, #1
    13ee:	1ac0      	subs	r0, r0, r3
    13f0:	4152      	adcs	r2, r2
    13f2:	1a41      	subs	r1, r0, r1
    13f4:	d200      	bcs.n	13f8 <__udivsi3+0xf8>
    13f6:	4601      	mov	r1, r0
    13f8:	4152      	adcs	r2, r2
    13fa:	4610      	mov	r0, r2
    13fc:	4770      	bx	lr
    13fe:	e7ff      	b.n	1400 <__udivsi3+0x100>
    1400:	b501      	push	{r0, lr}
    1402:	2000      	movs	r0, #0
    1404:	f000 f806 	bl	1414 <__aeabi_idiv0>
    1408:	bd02      	pop	{r1, pc}
    140a:	46c0      	nop			; (mov r8, r8)

0000140c <__aeabi_uidivmod>:
    140c:	2900      	cmp	r1, #0
    140e:	d0f7      	beq.n	1400 <__udivsi3+0x100>
    1410:	e776      	b.n	1300 <__udivsi3>
    1412:	4770      	bx	lr

00001414 <__aeabi_idiv0>:
    1414:	4770      	bx	lr
    1416:	46c0      	nop			; (mov r8, r8)

00001418 <__libc_init_array>:
    1418:	b570      	push	{r4, r5, r6, lr}
    141a:	2600      	movs	r6, #0
    141c:	4d0c      	ldr	r5, [pc, #48]	; (1450 <__libc_init_array+0x38>)
    141e:	4c0d      	ldr	r4, [pc, #52]	; (1454 <__libc_init_array+0x3c>)
    1420:	1b64      	subs	r4, r4, r5
    1422:	10a4      	asrs	r4, r4, #2
    1424:	42a6      	cmp	r6, r4
    1426:	d109      	bne.n	143c <__libc_init_array+0x24>
    1428:	2600      	movs	r6, #0
    142a:	f000 f917 	bl	165c <_init>
    142e:	4d0a      	ldr	r5, [pc, #40]	; (1458 <__libc_init_array+0x40>)
    1430:	4c0a      	ldr	r4, [pc, #40]	; (145c <__libc_init_array+0x44>)
    1432:	1b64      	subs	r4, r4, r5
    1434:	10a4      	asrs	r4, r4, #2
    1436:	42a6      	cmp	r6, r4
    1438:	d105      	bne.n	1446 <__libc_init_array+0x2e>
    143a:	bd70      	pop	{r4, r5, r6, pc}
    143c:	00b3      	lsls	r3, r6, #2
    143e:	58eb      	ldr	r3, [r5, r3]
    1440:	4798      	blx	r3
    1442:	3601      	adds	r6, #1
    1444:	e7ee      	b.n	1424 <__libc_init_array+0xc>
    1446:	00b3      	lsls	r3, r6, #2
    1448:	58eb      	ldr	r3, [r5, r3]
    144a:	4798      	blx	r3
    144c:	3601      	adds	r6, #1
    144e:	e7f2      	b.n	1436 <__libc_init_array+0x1e>
    1450:	00001668 	.word	0x00001668
    1454:	00001668 	.word	0x00001668
    1458:	00001668 	.word	0x00001668
    145c:	0000166c 	.word	0x0000166c

00001460 <memcpy>:
    1460:	2300      	movs	r3, #0
    1462:	b510      	push	{r4, lr}
    1464:	429a      	cmp	r2, r3
    1466:	d100      	bne.n	146a <memcpy+0xa>
    1468:	bd10      	pop	{r4, pc}
    146a:	5ccc      	ldrb	r4, [r1, r3]
    146c:	54c4      	strb	r4, [r0, r3]
    146e:	3301      	adds	r3, #1
    1470:	e7f8      	b.n	1464 <memcpy+0x4>
    1472:	0000      	movs	r0, r0
    1474:	000002fc 	.word	0x000002fc
    1478:	0000052c 	.word	0x0000052c
    147c:	0000052c 	.word	0x0000052c
    1480:	0000052c 	.word	0x0000052c
    1484:	0000052c 	.word	0x0000052c
    1488:	0000052c 	.word	0x0000052c
    148c:	0000052c 	.word	0x0000052c
    1490:	0000052c 	.word	0x0000052c
    1494:	0000052c 	.word	0x0000052c
    1498:	0000052c 	.word	0x0000052c
    149c:	0000052c 	.word	0x0000052c
    14a0:	0000052c 	.word	0x0000052c
    14a4:	0000052c 	.word	0x0000052c
    14a8:	0000052c 	.word	0x0000052c
    14ac:	0000052c 	.word	0x0000052c
    14b0:	0000052c 	.word	0x0000052c
    14b4:	000002e4 	.word	0x000002e4
    14b8:	0000052c 	.word	0x0000052c
    14bc:	0000052c 	.word	0x0000052c
    14c0:	0000052c 	.word	0x0000052c
    14c4:	0000052c 	.word	0x0000052c
    14c8:	0000052c 	.word	0x0000052c
    14cc:	0000052c 	.word	0x0000052c
    14d0:	0000052c 	.word	0x0000052c
    14d4:	0000052c 	.word	0x0000052c
    14d8:	0000052c 	.word	0x0000052c
    14dc:	0000052c 	.word	0x0000052c
    14e0:	0000052c 	.word	0x0000052c
    14e4:	0000052c 	.word	0x0000052c
    14e8:	0000052c 	.word	0x0000052c
    14ec:	0000052c 	.word	0x0000052c
    14f0:	0000052c 	.word	0x0000052c
    14f4:	000002f4 	.word	0x000002f4
    14f8:	0000052c 	.word	0x0000052c
    14fc:	0000052c 	.word	0x0000052c
    1500:	0000052c 	.word	0x0000052c
    1504:	0000052c 	.word	0x0000052c
    1508:	0000052c 	.word	0x0000052c
    150c:	0000052c 	.word	0x0000052c
    1510:	0000052c 	.word	0x0000052c
    1514:	0000052c 	.word	0x0000052c
    1518:	0000052c 	.word	0x0000052c
    151c:	0000052c 	.word	0x0000052c
    1520:	0000052c 	.word	0x0000052c
    1524:	0000052c 	.word	0x0000052c
    1528:	0000052c 	.word	0x0000052c
    152c:	0000052c 	.word	0x0000052c
    1530:	0000052c 	.word	0x0000052c
    1534:	000002ec 	.word	0x000002ec
    1538:	00000304 	.word	0x00000304
    153c:	000002cc 	.word	0x000002cc
    1540:	000002dc 	.word	0x000002dc
    1544:	000002d4 	.word	0x000002d4
    1548:	00000002 	.word	0x00000002
    154c:	00000003 	.word	0x00000003
    1550:	00000028 	.word	0x00000028
    1554:	00000029 	.word	0x00000029
    1558:	00000004 	.word	0x00000004
    155c:	00000005 	.word	0x00000005
    1560:	00000006 	.word	0x00000006
    1564:	00000007 	.word	0x00000007
    1568:	00000020 	.word	0x00000020
    156c:	00000021 	.word	0x00000021
    1570:	00000022 	.word	0x00000022
    1574:	00000023 	.word	0x00000023
    1578:	00000024 	.word	0x00000024
    157c:	00000025 	.word	0x00000025
    1580:	00000026 	.word	0x00000026
    1584:	00000027 	.word	0x00000027
    1588:	00000008 	.word	0x00000008
    158c:	00000009 	.word	0x00000009
    1590:	0000000a 	.word	0x0000000a
    1594:	0000000b 	.word	0x0000000b
    1598:	0000ffff 	.word	0x0000ffff
    159c:	0000ffff 	.word	0x0000ffff
    15a0:	0000ffff 	.word	0x0000ffff
    15a4:	0000ffff 	.word	0x0000ffff
    15a8:	0000074e 	.word	0x0000074e
    15ac:	00000844 	.word	0x00000844
    15b0:	0000084e 	.word	0x0000084e
    15b4:	00000858 	.word	0x00000858
    15b8:	00000862 	.word	0x00000862
    15bc:	00000894 	.word	0x00000894
    15c0:	0000089e 	.word	0x0000089e
    15c4:	000008a8 	.word	0x000008a8
    15c8:	000008b2 	.word	0x000008b2
    15cc:	000008bc 	.word	0x000008bc
    15d0:	42002000 	.word	0x42002000
    15d4:	42002400 	.word	0x42002400
    15d8:	42002800 	.word	0x42002800
    15dc:	42002c00 	.word	0x42002c00
    15e0:	43000800 	.word	0x43000800
    15e4:	00000002 	.word	0x00000002
    15e8:	00000100 	.word	0x00000100
    15ec:	00000002 	.word	0x00000002
    15f0:	00000200 	.word	0x00000200
    15f4:	00000002 	.word	0x00000002
    15f8:	00000400 	.word	0x00000400
    15fc:	00000002 	.word	0x00000002
    1600:	00000800 	.word	0x00000800
    1604:	00000003 	.word	0x00000003
    1608:	00000004 	.word	0x00000004

0000160c <tc_interrupt_vectors.14268>:
    160c:	14131211 00000015 00000b9e 00000b9a     ................
    161c:	00000b9a 00000c00 00000c00 00000bb4     ................
    162c:	00000ba4 00000bba 00000bee 00000ce8     ................
    163c:	00000cc8 00000cc8 00000d74 00000cda     ........t.......
    164c:	00000cf6 00000ccc 00000d04 00000d58     ............X...

0000165c <_init>:
    165c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    165e:	46c0      	nop			; (mov r8, r8)
    1660:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1662:	bc08      	pop	{r3}
    1664:	469e      	mov	lr, r3
    1666:	4770      	bx	lr

00001668 <__init_array_start>:
    1668:	000000dd 	.word	0x000000dd

0000166c <_fini>:
    166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    166e:	46c0      	nop			; (mov r8, r8)
    1670:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1672:	bc08      	pop	{r3}
    1674:	469e      	mov	lr, r3
    1676:	4770      	bx	lr

00001678 <__fini_array_start>:
    1678:	000000b5 	.word	0x000000b5
