
SAML21_APP_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000145c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  0000145c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020004  2**0
                  CONTENTS
  3 .bss          00000074  20000004  00001460  00020004  2**2
                  ALLOC
  4 .stack        00002000  20000078  000014d4  00020004  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00018baf  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000272c  00000000  00000000  00038c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003578  00000000  00000000  0003b360  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000328  00000000  00000000  0003e8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000330  00000000  00000000  0003ec00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001ab2f  00000000  00000000  0003ef30  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00008588  00000000  00000000  00059a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00099c9c  00000000  00000000  00061fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000748  00000000  00000000  000fbc84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 20 00 20 99 0e 00 00 95 0e 00 00 95 0e 00 00     x . ............
	...
      2c:	95 0e 00 00 00 00 00 00 00 00 00 00 95 0e 00 00     ................
      3c:	95 0e 00 00 95 0e 00 00 95 0e 00 00 95 0e 00 00     ................
      4c:	95 0e 00 00 95 0e 00 00 95 0e 00 00 95 0e 00 00     ................
      5c:	95 0e 00 00 95 0e 00 00 95 0e 00 00 95 0e 00 00     ................
      6c:	95 0e 00 00 95 0e 00 00 95 0e 00 00 95 0e 00 00     ................
      7c:	95 0e 00 00 95 0e 00 00 ad 08 00 00 bd 08 00 00     ................
      8c:	cd 08 00 00 dd 08 00 00 ed 08 00 00 95 0e 00 00     ................
      9c:	95 0e 00 00 95 0e 00 00 95 0e 00 00 95 0e 00 00     ................
      ac:	95 0e 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000004 	.word	0x20000004
      d4:	00000000 	.word	0x00000000
      d8:	0000145c 	.word	0x0000145c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000008 	.word	0x20000008
     108:	0000145c 	.word	0x0000145c
     10c:	0000145c 	.word	0x0000145c
     110:	00000000 	.word	0x00000000

00000114 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     114:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     116:	2300      	movs	r3, #0
     118:	2200      	movs	r2, #0
     11a:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     11c:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     11e:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     120:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     122:	2100      	movs	r1, #0
     124:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     126:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     128:	61c3      	str	r3, [r0, #28]
#if SAMR30
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
     12a:	2401      	movs	r4, #1
     12c:	7104      	strb	r4, [r0, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     12e:	24c0      	movs	r4, #192	; 0xc0
     130:	0164      	lsls	r4, r4, #5
     132:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     134:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     136:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
     138:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
     13a:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
     13c:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     13e:	242a      	movs	r4, #42	; 0x2a
     140:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
     142:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
     144:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
     146:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
     148:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
     14a:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
     14c:	3c06      	subs	r4, #6
     14e:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     150:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     152:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     154:	7541      	strb	r1, [r0, #21]
}
     156:	bd10      	pop	{r4, pc}

00000158 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     158:	b5f0      	push	{r4, r5, r6, r7, lr}
     15a:	46ce      	mov	lr, r9
     15c:	b500      	push	{lr}
     15e:	b09a      	sub	sp, #104	; 0x68
     160:	0005      	movs	r5, r0
     162:	0016      	movs	r6, r2

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     164:	6001      	str	r1, [r0, #0]

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     166:	4ab5      	ldr	r2, [pc, #724]	; (43c <adc_init+0x2e4>)
     168:	6a13      	ldr	r3, [r2, #32]
     16a:	2008      	movs	r0, #8
     16c:	4303      	orrs	r3, r0
     16e:	6213      	str	r3, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     170:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     172:	3803      	subs	r0, #3
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     174:	07db      	lsls	r3, r3, #31
     176:	d503      	bpl.n	180 <adc_init+0x28>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
     178:	b01a      	add	sp, #104	; 0x68
     17a:	bc04      	pop	{r2}
     17c:	4691      	mov	r9, r2
     17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     180:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     182:	8c13      	ldrh	r3, [r2, #32]
     184:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     186:	2b00      	cmp	r3, #0
     188:	d1fb      	bne.n	182 <adc_init+0x2a>
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     18a:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     18c:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     18e:	079b      	lsls	r3, r3, #30
     190:	d4f2      	bmi.n	178 <adc_init+0x20>
	module_inst->reference = config->reference;
     192:	7873      	ldrb	r3, [r6, #1]
     194:	712b      	strb	r3, [r5, #4]
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     196:	2b00      	cmp	r3, #0
     198:	d104      	bne.n	1a4 <adc_init+0x4c>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     19a:	4aa9      	ldr	r2, [pc, #676]	; (440 <adc_init+0x2e8>)
     19c:	69d3      	ldr	r3, [r2, #28]
     19e:	2104      	movs	r1, #4
     1a0:	430b      	orrs	r3, r1
     1a2:	61d3      	str	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     1a4:	682f      	ldr	r7, [r5, #0]
	gclk_chan_conf.source_generator = config->clock_source;
     1a6:	7833      	ldrb	r3, [r6, #0]
     1a8:	466a      	mov	r2, sp
     1aa:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     1ac:	4669      	mov	r1, sp
     1ae:	201e      	movs	r0, #30
     1b0:	4ba4      	ldr	r3, [pc, #656]	; (444 <adc_init+0x2ec>)
     1b2:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     1b4:	201e      	movs	r0, #30
     1b6:	4ba4      	ldr	r3, [pc, #656]	; (448 <adc_init+0x2f0>)
     1b8:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->positive_input);
     1ba:	7934      	ldrb	r4, [r6, #4]
	const uint32_t pinmapping[] = {
     1bc:	2260      	movs	r2, #96	; 0x60
     1be:	49a3      	ldr	r1, [pc, #652]	; (44c <adc_init+0x2f4>)
     1c0:	a802      	add	r0, sp, #8
     1c2:	4ba3      	ldr	r3, [pc, #652]	; (450 <adc_init+0x2f8>)
     1c4:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     1c6:	2c13      	cmp	r4, #19
     1c8:	d90b      	bls.n	1e2 <adc_init+0x8a>
	_adc_configure_ain_pin(index, config->negative_input);
     1ca:	88f4      	ldrh	r4, [r6, #6]
	const uint32_t pinmapping[] = {
     1cc:	2260      	movs	r2, #96	; 0x60
     1ce:	499f      	ldr	r1, [pc, #636]	; (44c <adc_init+0x2f4>)
     1d0:	a802      	add	r0, sp, #8
     1d2:	4b9f      	ldr	r3, [pc, #636]	; (450 <adc_init+0x2f8>)
     1d4:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     1d6:	2c13      	cmp	r4, #19
     1d8:	d911      	bls.n	1fe <adc_init+0xa6>
     1da:	2400      	movs	r4, #0
	const uint32_t pinmapping[] = {
     1dc:	4b9c      	ldr	r3, [pc, #624]	; (450 <adc_init+0x2f8>)
     1de:	4699      	mov	r9, r3
     1e0:	e01e      	b.n	220 <adc_init+0xc8>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     1e2:	00a4      	lsls	r4, r4, #2
     1e4:	ab02      	add	r3, sp, #8
     1e6:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1e8:	a901      	add	r1, sp, #4
     1ea:	2300      	movs	r3, #0
     1ec:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     1ee:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     1f0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     1f2:	3301      	adds	r3, #1
     1f4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     1f6:	b2c0      	uxtb	r0, r0
     1f8:	4b96      	ldr	r3, [pc, #600]	; (454 <adc_init+0x2fc>)
     1fa:	4798      	blx	r3
     1fc:	e7e5      	b.n	1ca <adc_init+0x72>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     1fe:	00a4      	lsls	r4, r4, #2
     200:	ab02      	add	r3, sp, #8
     202:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     204:	a901      	add	r1, sp, #4
     206:	2300      	movs	r3, #0
     208:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     20a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     20c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     20e:	3301      	adds	r3, #1
     210:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     212:	b2c0      	uxtb	r0, r0
     214:	4b8f      	ldr	r3, [pc, #572]	; (454 <adc_init+0x2fc>)
     216:	4798      	blx	r3
     218:	e7df      	b.n	1da <adc_init+0x82>
     21a:	3401      	adds	r4, #1
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     21c:	2c14      	cmp	r4, #20
     21e:	d018      	beq.n	252 <adc_init+0xfa>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     220:	2301      	movs	r3, #1
     222:	40a3      	lsls	r3, r4
     224:	6932      	ldr	r2, [r6, #16]
     226:	421a      	tst	r2, r3
     228:	d0f7      	beq.n	21a <adc_init+0xc2>
	const uint32_t pinmapping[] = {
     22a:	2260      	movs	r2, #96	; 0x60
     22c:	4987      	ldr	r1, [pc, #540]	; (44c <adc_init+0x2f4>)
     22e:	a802      	add	r0, sp, #8
     230:	47c8      	blx	r9
	if (pin <= _adc_extchannel_msb[index]) {
     232:	2c13      	cmp	r4, #19
     234:	d8f1      	bhi.n	21a <adc_init+0xc2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     236:	00a3      	lsls	r3, r4, #2
     238:	aa02      	add	r2, sp, #8
     23a:	5898      	ldr	r0, [r3, r2]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     23c:	a901      	add	r1, sp, #4
     23e:	2300      	movs	r3, #0
     240:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     242:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     244:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     246:	3301      	adds	r3, #1
     248:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     24a:	b2c0      	uxtb	r0, r0
     24c:	4b81      	ldr	r3, [pc, #516]	; (454 <adc_init+0x2fc>)
     24e:	4798      	blx	r3
     250:	e7e3      	b.n	21a <adc_init+0xc2>
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     252:	7b73      	ldrb	r3, [r6, #13]
     254:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     256:	7bb2      	ldrb	r2, [r6, #14]
     258:	01d2      	lsls	r2, r2, #7
     25a:	4313      	orrs	r3, r2
     25c:	b2db      	uxtb	r3, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     25e:	703b      	strb	r3, [r7, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     260:	7d33      	ldrb	r3, [r6, #20]
     262:	01db      	lsls	r3, r3, #7
			| (config->reference);
     264:	7872      	ldrb	r2, [r6, #1]
     266:	4313      	orrs	r3, r2
     268:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     26a:	70bb      	strb	r3, [r7, #2]
	switch (config->resolution) {
     26c:	78f3      	ldrb	r3, [r6, #3]
     26e:	2b34      	cmp	r3, #52	; 0x34
     270:	d900      	bls.n	274 <adc_init+0x11c>
     272:	e133      	b.n	4dc <adc_init+0x384>
     274:	009b      	lsls	r3, r3, #2
     276:	4a78      	ldr	r2, [pc, #480]	; (458 <adc_init+0x300>)
     278:	58d3      	ldr	r3, [r2, r3]
     27a:	469f      	mov	pc, r3
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     27c:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     27e:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     280:	2102      	movs	r1, #2
     282:	e01a      	b.n	2ba <adc_init+0x162>
		adjres = config->divide_result;
     284:	7a71      	ldrb	r1, [r6, #9]
		accumulate = config->accumulate_samples;
     286:	7a32      	ldrb	r2, [r6, #8]
		resolution = ADC_RESOLUTION_16BIT;
     288:	2410      	movs	r4, #16
     28a:	e016      	b.n	2ba <adc_init+0x162>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     28c:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
     28e:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     290:	2101      	movs	r1, #1
     292:	e012      	b.n	2ba <adc_init+0x162>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     294:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
     296:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     298:	2100      	movs	r1, #0
     29a:	e00e      	b.n	2ba <adc_init+0x162>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     29c:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
     29e:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     2a0:	2100      	movs	r1, #0
     2a2:	e00a      	b.n	2ba <adc_init+0x162>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     2a4:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
     2a6:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     2a8:	2100      	movs	r1, #0
     2aa:	e006      	b.n	2ba <adc_init+0x162>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     2ac:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
     2ae:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     2b0:	2100      	movs	r1, #0
     2b2:	e002      	b.n	2ba <adc_init+0x162>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     2b4:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
     2b6:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     2b8:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     2ba:	0109      	lsls	r1, r1, #4
     2bc:	2370      	movs	r3, #112	; 0x70
     2be:	400b      	ands	r3, r1
     2c0:	4313      	orrs	r3, r2
     2c2:	733b      	strb	r3, [r7, #12]
	Adc *const adc_module = module_inst->hw;
     2c4:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     2c6:	8c13      	ldrh	r3, [r2, #32]
     2c8:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     2ca:	2b00      	cmp	r3, #0
     2cc:	d1fb      	bne.n	2c6 <adc_init+0x16e>
	if (config->sample_length > 63) {
     2ce:	7d73      	ldrb	r3, [r6, #21]
		return STATUS_ERR_INVALID_ARG;
     2d0:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     2d2:	2b3f      	cmp	r3, #63	; 0x3f
     2d4:	d900      	bls.n	2d8 <adc_init+0x180>
     2d6:	e74f      	b.n	178 <adc_init+0x20>
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     2d8:	7bf2      	ldrb	r2, [r6, #15]
     2da:	01d2      	lsls	r2, r2, #7
     2dc:	4313      	orrs	r3, r2
     2de:	b2db      	uxtb	r3, r3
		adc_module->SAMPCTRL.reg =
     2e0:	737b      	strb	r3, [r7, #13]
	Adc *const adc_module = module_inst->hw;
     2e2:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     2e4:	8c13      	ldrh	r3, [r2, #32]
     2e6:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     2e8:	2b00      	cmp	r3, #0
     2ea:	d1fb      	bne.n	2e4 <adc_init+0x18c>
			config->clock_prescaler;
     2ec:	78b3      	ldrb	r3, [r6, #2]
	adc_module->CTRLB.reg =
     2ee:	707b      	strb	r3, [r7, #1]
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     2f0:	2324      	movs	r3, #36	; 0x24
     2f2:	5cf3      	ldrb	r3, [r6, r3]
     2f4:	00db      	lsls	r3, r3, #3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     2f6:	7b32      	ldrb	r2, [r6, #12]
     2f8:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     2fa:	431a      	orrs	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     2fc:	7af3      	ldrb	r3, [r6, #11]
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     2fe:	4313      	orrs	r3, r2
     300:	7ab2      	ldrb	r2, [r6, #10]
     302:	0052      	lsls	r2, r2, #1
     304:	4313      	orrs	r3, r2
     306:	4323      	orrs	r3, r4
	adc_module->CTRLC.reg =
     308:	817b      	strh	r3, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     30a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     30c:	8c13      	ldrh	r3, [r2, #32]
     30e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     310:	2b00      	cmp	r3, #0
     312:	d1fb      	bne.n	30c <adc_init+0x1b4>
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     314:	8b33      	ldrh	r3, [r6, #24]
     316:	2b00      	cmp	r3, #0
     318:	d01f      	beq.n	35a <adc_init+0x202>
		switch (resolution) {
     31a:	2c10      	cmp	r4, #16
     31c:	d100      	bne.n	320 <adc_init+0x1c8>
     31e:	e0bf      	b.n	4a0 <adc_init+0x348>
     320:	d96b      	bls.n	3fa <adc_init+0x2a2>
     322:	2c20      	cmp	r4, #32
     324:	d100      	bne.n	328 <adc_init+0x1d0>
     326:	e09d      	b.n	464 <adc_init+0x30c>
     328:	2c30      	cmp	r4, #48	; 0x30
     32a:	d116      	bne.n	35a <adc_init+0x202>
			if (config->differential_mode &&
     32c:	7af2      	ldrb	r2, [r6, #11]
     32e:	2a00      	cmp	r2, #0
     330:	d00a      	beq.n	348 <adc_init+0x1f0>
					(config->window.window_lower_value > 127 ||
     332:	69f2      	ldr	r2, [r6, #28]
     334:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     336:	2017      	movs	r0, #23
			if (config->differential_mode &&
     338:	2aff      	cmp	r2, #255	; 0xff
     33a:	d900      	bls.n	33e <adc_init+0x1e6>
     33c:	e71c      	b.n	178 <adc_init+0x20>
					config->window.window_lower_value < -128 ||
     33e:	6a32      	ldr	r2, [r6, #32]
     340:	3280      	adds	r2, #128	; 0x80
     342:	2aff      	cmp	r2, #255	; 0xff
     344:	d900      	bls.n	348 <adc_init+0x1f0>
     346:	e717      	b.n	178 <adc_init+0x20>
				return STATUS_ERR_INVALID_ARG;
     348:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     34a:	69f2      	ldr	r2, [r6, #28]
     34c:	2aff      	cmp	r2, #255	; 0xff
     34e:	dd00      	ble.n	352 <adc_init+0x1fa>
     350:	e712      	b.n	178 <adc_init+0x20>
     352:	6a32      	ldr	r2, [r6, #32]
     354:	2aff      	cmp	r2, #255	; 0xff
     356:	dd00      	ble.n	35a <adc_init+0x202>
     358:	e70e      	b.n	178 <adc_init+0x20>
	adc_module->CTRLC.reg |= config->window.window_mode;
     35a:	897a      	ldrh	r2, [r7, #10]
     35c:	4313      	orrs	r3, r2
     35e:	817b      	strh	r3, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     360:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     362:	8c13      	ldrh	r3, [r2, #32]
     364:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     366:	2b00      	cmp	r3, #0
     368:	d1fb      	bne.n	362 <adc_init+0x20a>
	adc_module->WINLT.reg =
     36a:	8bb3      	ldrh	r3, [r6, #28]
     36c:	81fb      	strh	r3, [r7, #14]
	Adc *const adc_module = module_inst->hw;
     36e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     370:	8c13      	ldrh	r3, [r2, #32]
     372:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     374:	2b00      	cmp	r3, #0
     376:	d1fb      	bne.n	370 <adc_init+0x218>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     378:	8c33      	ldrh	r3, [r6, #32]
     37a:	823b      	strh	r3, [r7, #16]
	Adc *const adc_module = module_inst->hw;
     37c:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     37e:	8c13      	ldrh	r3, [r2, #32]
     380:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     382:	2b00      	cmp	r3, #0
     384:	d1fb      	bne.n	37e <adc_init+0x226>
			config->positive_input;
     386:	7933      	ldrb	r3, [r6, #4]
			config->negative_input |
     388:	88f2      	ldrh	r2, [r6, #6]
     38a:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     38c:	813b      	strh	r3, [r7, #8]
	Adc *const adc_module = module_inst->hw;
     38e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     390:	8c13      	ldrh	r3, [r2, #32]
     392:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     394:	2b00      	cmp	r3, #0
     396:	d1fb      	bne.n	390 <adc_init+0x238>
	adc_module->EVCTRL.reg = config->event_action;
     398:	332a      	adds	r3, #42	; 0x2a
     39a:	5cf3      	ldrb	r3, [r6, r3]
     39c:	70fb      	strb	r3, [r7, #3]
	adc_module->INTENCLR.reg =
     39e:	2307      	movs	r3, #7
     3a0:	713b      	strb	r3, [r7, #4]
	if (config->correction.correction_enable){
     3a2:	331d      	adds	r3, #29
     3a4:	5cf3      	ldrb	r3, [r6, r3]
     3a6:	2b00      	cmp	r3, #0
     3a8:	d01b      	beq.n	3e2 <adc_init+0x28a>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     3aa:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     3ac:	4a2b      	ldr	r2, [pc, #172]	; (45c <adc_init+0x304>)
			return STATUS_ERR_INVALID_ARG;
     3ae:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     3b0:	4293      	cmp	r3, r2
     3b2:	d900      	bls.n	3b6 <adc_init+0x25e>
     3b4:	e6e0      	b.n	178 <adc_init+0x20>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     3b6:	827b      	strh	r3, [r7, #18]
	Adc *const adc_module = module_inst->hw;
     3b8:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     3ba:	8c13      	ldrh	r3, [r2, #32]
     3bc:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     3be:	2b00      	cmp	r3, #0
     3c0:	d1fb      	bne.n	3ba <adc_init+0x262>
		if (config->correction.offset_correction > 2047 ||
     3c2:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     3c4:	2380      	movs	r3, #128	; 0x80
     3c6:	011b      	lsls	r3, r3, #4
     3c8:	18d3      	adds	r3, r2, r3
     3ca:	4924      	ldr	r1, [pc, #144]	; (45c <adc_init+0x304>)
     3cc:	b29b      	uxth	r3, r3
			return STATUS_ERR_INVALID_ARG;
     3ce:	2017      	movs	r0, #23
		if (config->correction.offset_correction > 2047 ||
     3d0:	428b      	cmp	r3, r1
     3d2:	d900      	bls.n	3d6 <adc_init+0x27e>
     3d4:	e6d0      	b.n	178 <adc_init+0x20>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     3d6:	82ba      	strh	r2, [r7, #20]
	Adc *const adc_module = module_inst->hw;
     3d8:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     3da:	8c13      	ldrh	r3, [r2, #32]
     3dc:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     3de:	2b00      	cmp	r3, #0
     3e0:	d1fb      	bne.n	3da <adc_init+0x282>
			ADC_CALIB_BIASREFBUF(
     3e2:	4b1f      	ldr	r3, [pc, #124]	; (460 <adc_init+0x308>)
     3e4:	681b      	ldr	r3, [r3, #0]
     3e6:	021a      	lsls	r2, r3, #8
     3e8:	21e0      	movs	r1, #224	; 0xe0
     3ea:	00c9      	lsls	r1, r1, #3
     3ec:	400a      	ands	r2, r1
			ADC_CALIB_BIASCOMP(
     3ee:	069b      	lsls	r3, r3, #26
     3f0:	0f5b      	lsrs	r3, r3, #29
			) |
     3f2:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     3f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
	return STATUS_OK;
     3f6:	2000      	movs	r0, #0
     3f8:	e6be      	b.n	178 <adc_init+0x20>
		switch (resolution) {
     3fa:	2c00      	cmp	r4, #0
     3fc:	d1ad      	bne.n	35a <adc_init+0x202>
			if (config->differential_mode &&
     3fe:	7af2      	ldrb	r2, [r6, #11]
     400:	2a00      	cmp	r2, #0
     402:	d00f      	beq.n	424 <adc_init+0x2cc>
					(config->window.window_lower_value > 2047 ||
     404:	69f2      	ldr	r2, [r6, #28]
     406:	2180      	movs	r1, #128	; 0x80
     408:	0109      	lsls	r1, r1, #4
     40a:	468c      	mov	ip, r1
     40c:	4462      	add	r2, ip
			if (config->differential_mode &&
     40e:	4913      	ldr	r1, [pc, #76]	; (45c <adc_init+0x304>)
				return STATUS_ERR_INVALID_ARG;
     410:	2017      	movs	r0, #23
			if (config->differential_mode &&
     412:	428a      	cmp	r2, r1
     414:	d900      	bls.n	418 <adc_init+0x2c0>
     416:	e6af      	b.n	178 <adc_init+0x20>
					config->window.window_lower_value < -2048 ||
     418:	6a32      	ldr	r2, [r6, #32]
     41a:	4462      	add	r2, ip
     41c:	490f      	ldr	r1, [pc, #60]	; (45c <adc_init+0x304>)
     41e:	428a      	cmp	r2, r1
     420:	d900      	bls.n	424 <adc_init+0x2cc>
     422:	e6a9      	b.n	178 <adc_init+0x20>
			} else if (config->window.window_lower_value > 4095 ||
     424:	4a0d      	ldr	r2, [pc, #52]	; (45c <adc_init+0x304>)
				return STATUS_ERR_INVALID_ARG;
     426:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     428:	69f1      	ldr	r1, [r6, #28]
     42a:	4291      	cmp	r1, r2
     42c:	dd00      	ble.n	430 <adc_init+0x2d8>
     42e:	e6a3      	b.n	178 <adc_init+0x20>
     430:	6a31      	ldr	r1, [r6, #32]
     432:	4291      	cmp	r1, r2
     434:	dd00      	ble.n	438 <adc_init+0x2e0>
     436:	e69f      	b.n	178 <adc_init+0x20>
     438:	e78f      	b.n	35a <adc_init+0x202>
     43a:	46c0      	nop			; (mov r8, r8)
     43c:	40000400 	.word	0x40000400
     440:	40001400 	.word	0x40001400
     444:	00000d39 	.word	0x00000d39
     448:	00000cc9 	.word	0x00000cc9
     44c:	0000134c 	.word	0x0000134c
     450:	00001265 	.word	0x00001265
     454:	00000e35 	.word	0x00000e35
     458:	00001278 	.word	0x00001278
     45c:	00000fff 	.word	0x00000fff
     460:	00806020 	.word	0x00806020
			if (config->differential_mode &&
     464:	7af2      	ldrb	r2, [r6, #11]
     466:	2a00      	cmp	r2, #0
     468:	d00f      	beq.n	48a <adc_init+0x332>
					(config->window.window_lower_value > 511 ||
     46a:	69f2      	ldr	r2, [r6, #28]
     46c:	2180      	movs	r1, #128	; 0x80
     46e:	0089      	lsls	r1, r1, #2
     470:	468c      	mov	ip, r1
     472:	4462      	add	r2, ip
			if (config->differential_mode &&
     474:	491a      	ldr	r1, [pc, #104]	; (4e0 <adc_init+0x388>)
				return STATUS_ERR_INVALID_ARG;
     476:	2017      	movs	r0, #23
			if (config->differential_mode &&
     478:	428a      	cmp	r2, r1
     47a:	d900      	bls.n	47e <adc_init+0x326>
     47c:	e67c      	b.n	178 <adc_init+0x20>
					config->window.window_lower_value < -512 ||
     47e:	6a32      	ldr	r2, [r6, #32]
     480:	4462      	add	r2, ip
     482:	4917      	ldr	r1, [pc, #92]	; (4e0 <adc_init+0x388>)
     484:	428a      	cmp	r2, r1
     486:	d900      	bls.n	48a <adc_init+0x332>
     488:	e676      	b.n	178 <adc_init+0x20>
			} else if (config->window.window_lower_value > 1023 ||
     48a:	4a15      	ldr	r2, [pc, #84]	; (4e0 <adc_init+0x388>)
				return STATUS_ERR_INVALID_ARG;
     48c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     48e:	69f1      	ldr	r1, [r6, #28]
     490:	4291      	cmp	r1, r2
     492:	dd00      	ble.n	496 <adc_init+0x33e>
     494:	e670      	b.n	178 <adc_init+0x20>
     496:	6a31      	ldr	r1, [r6, #32]
     498:	4291      	cmp	r1, r2
     49a:	dd00      	ble.n	49e <adc_init+0x346>
     49c:	e66c      	b.n	178 <adc_init+0x20>
     49e:	e75c      	b.n	35a <adc_init+0x202>
			if (config->differential_mode &&
     4a0:	7af2      	ldrb	r2, [r6, #11]
     4a2:	2a00      	cmp	r2, #0
     4a4:	d00f      	beq.n	4c6 <adc_init+0x36e>
					(config->window.window_lower_value > 32767 ||
     4a6:	69f2      	ldr	r2, [r6, #28]
     4a8:	2180      	movs	r1, #128	; 0x80
     4aa:	0209      	lsls	r1, r1, #8
     4ac:	468c      	mov	ip, r1
     4ae:	4462      	add	r2, ip
			if (config->differential_mode &&
     4b0:	490c      	ldr	r1, [pc, #48]	; (4e4 <adc_init+0x38c>)
				return STATUS_ERR_INVALID_ARG;
     4b2:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4b4:	428a      	cmp	r2, r1
     4b6:	d900      	bls.n	4ba <adc_init+0x362>
     4b8:	e65e      	b.n	178 <adc_init+0x20>
					config->window.window_lower_value < -32768 ||
     4ba:	6a32      	ldr	r2, [r6, #32]
     4bc:	4462      	add	r2, ip
     4be:	4909      	ldr	r1, [pc, #36]	; (4e4 <adc_init+0x38c>)
     4c0:	428a      	cmp	r2, r1
     4c2:	d900      	bls.n	4c6 <adc_init+0x36e>
     4c4:	e658      	b.n	178 <adc_init+0x20>
			} else if (config->window.window_lower_value > 65535 ||
     4c6:	4a07      	ldr	r2, [pc, #28]	; (4e4 <adc_init+0x38c>)
				return STATUS_ERR_INVALID_ARG;
     4c8:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     4ca:	69f1      	ldr	r1, [r6, #28]
     4cc:	4291      	cmp	r1, r2
     4ce:	dd00      	ble.n	4d2 <adc_init+0x37a>
     4d0:	e652      	b.n	178 <adc_init+0x20>
     4d2:	6a31      	ldr	r1, [r6, #32]
     4d4:	4291      	cmp	r1, r2
     4d6:	dd00      	ble.n	4da <adc_init+0x382>
     4d8:	e64e      	b.n	178 <adc_init+0x20>
     4da:	e73e      	b.n	35a <adc_init+0x202>
		return STATUS_ERR_INVALID_ARG;
     4dc:	2017      	movs	r0, #23
     4de:	e64b      	b.n	178 <adc_init+0x20>
     4e0:	000003ff 	.word	0x000003ff
     4e4:	0000ffff 	.word	0x0000ffff

000004e8 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     4e8:	b530      	push	{r4, r5, lr}
     4ea:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     4ec:	a901      	add	r1, sp, #4
     4ee:	4b0c      	ldr	r3, [pc, #48]	; (520 <_tc_get_inst_index+0x38>)
     4f0:	000a      	movs	r2, r1
     4f2:	cb32      	ldmia	r3!, {r1, r4, r5}
     4f4:	c232      	stmia	r2!, {r1, r4, r5}
     4f6:	cb12      	ldmia	r3!, {r1, r4}
     4f8:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     4fa:	9b01      	ldr	r3, [sp, #4]
     4fc:	4298      	cmp	r0, r3
     4fe:	d00b      	beq.n	518 <_tc_get_inst_index+0x30>
     500:	2301      	movs	r3, #1
     502:	a901      	add	r1, sp, #4
     504:	009a      	lsls	r2, r3, #2
     506:	5852      	ldr	r2, [r2, r1]
     508:	4282      	cmp	r2, r0
     50a:	d006      	beq.n	51a <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     50c:	3301      	adds	r3, #1
     50e:	2b05      	cmp	r3, #5
     510:	d1f8      	bne.n	504 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     512:	2000      	movs	r0, #0
}
     514:	b007      	add	sp, #28
     516:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     518:	2300      	movs	r3, #0
			return i;
     51a:	b2d8      	uxtb	r0, r3
     51c:	e7fa      	b.n	514 <_tc_get_inst_index+0x2c>
     51e:	46c0      	nop			; (mov r8, r8)
     520:	000013d4 	.word	0x000013d4

00000524 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     524:	b5f0      	push	{r4, r5, r6, r7, lr}
     526:	46c6      	mov	lr, r8
     528:	b500      	push	{lr}
     52a:	b08e      	sub	sp, #56	; 0x38
     52c:	0004      	movs	r4, r0
     52e:	000d      	movs	r5, r1
     530:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     532:	0008      	movs	r0, r1
     534:	4bae      	ldr	r3, [pc, #696]	; (7f0 <tc_init+0x2cc>)
     536:	4798      	blx	r3
     538:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
     53a:	ab0c      	add	r3, sp, #48	; 0x30
     53c:	221b      	movs	r2, #27
     53e:	701a      	strb	r2, [r3, #0]
     540:	705a      	strb	r2, [r3, #1]
     542:	3201      	adds	r2, #1
     544:	709a      	strb	r2, [r3, #2]
     546:	70da      	strb	r2, [r3, #3]
     548:	3201      	adds	r2, #1
     54a:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
     54c:	a902      	add	r1, sp, #8
     54e:	4ba9      	ldr	r3, [pc, #676]	; (7f4 <tc_init+0x2d0>)
     550:	3314      	adds	r3, #20
     552:	000a      	movs	r2, r1
     554:	cb83      	ldmia	r3!, {r0, r1, r7}
     556:	c283      	stmia	r2!, {r0, r1, r7}
     558:	cb83      	ldmia	r3!, {r0, r1, r7}
     55a:	c283      	stmia	r2!, {r0, r1, r7}
     55c:	cb83      	ldmia	r3!, {r0, r1, r7}
     55e:	c283      	stmia	r2!, {r0, r1, r7}
     560:	681b      	ldr	r3, [r3, #0]
     562:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     564:	2300      	movs	r3, #0
     566:	60a3      	str	r3, [r4, #8]
     568:	60e3      	str	r3, [r4, #12]
     56a:	6123      	str	r3, [r4, #16]
     56c:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     56e:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     570:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     572:	4643      	mov	r3, r8
     574:	009a      	lsls	r2, r3, #2
     576:	4ba0      	ldr	r3, [pc, #640]	; (7f8 <tc_init+0x2d4>)
     578:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     57a:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     57c:	2334      	movs	r3, #52	; 0x34
     57e:	5cf3      	ldrb	r3, [r6, r3]
     580:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     582:	78f3      	ldrb	r3, [r6, #3]
     584:	2b08      	cmp	r3, #8
     586:	d008      	beq.n	59a <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     588:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     58a:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     58c:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     58e:	07db      	lsls	r3, r3, #31
     590:	d508      	bpl.n	5a4 <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     592:	b00e      	add	sp, #56	; 0x38
     594:	bc04      	pop	{r2}
     596:	4690      	mov	r8, r2
     598:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     59a:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     59c:	4642      	mov	r2, r8
     59e:	07d2      	lsls	r2, r2, #31
     5a0:	d4f7      	bmi.n	592 <tc_init+0x6e>
     5a2:	e7f1      	b.n	588 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     5a4:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
     5a6:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     5a8:	079b      	lsls	r3, r3, #30
     5aa:	d4f2      	bmi.n	592 <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     5ac:	682b      	ldr	r3, [r5, #0]
     5ae:	079b      	lsls	r3, r3, #30
     5b0:	d4ef      	bmi.n	592 <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
     5b2:	7c33      	ldrb	r3, [r6, #16]
     5b4:	2b00      	cmp	r3, #0
     5b6:	d112      	bne.n	5de <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
     5b8:	7f33      	ldrb	r3, [r6, #28]
     5ba:	2b00      	cmp	r3, #0
     5bc:	d11b      	bne.n	5f6 <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
     5be:	4643      	mov	r3, r8
     5c0:	005a      	lsls	r2, r3, #1
     5c2:	a902      	add	r1, sp, #8
     5c4:	1c53      	adds	r3, r2, #1
     5c6:	009b      	lsls	r3, r3, #2
     5c8:	5858      	ldr	r0, [r3, r1]
     5ca:	4643      	mov	r3, r8
     5cc:	00db      	lsls	r3, r3, #3
     5ce:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
     5d0:	b2d9      	uxtb	r1, r3
     5d2:	2904      	cmp	r1, #4
     5d4:	d823      	bhi.n	61e <tc_init+0xfa>
     5d6:	008b      	lsls	r3, r1, #2
     5d8:	4988      	ldr	r1, [pc, #544]	; (7fc <tc_init+0x2d8>)
     5da:	58cb      	ldr	r3, [r1, r3]
     5dc:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     5de:	a901      	add	r1, sp, #4
     5e0:	2301      	movs	r3, #1
     5e2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     5e4:	2200      	movs	r2, #0
     5e6:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     5e8:	7e32      	ldrb	r2, [r6, #24]
     5ea:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     5ec:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     5ee:	7d30      	ldrb	r0, [r6, #20]
     5f0:	4b83      	ldr	r3, [pc, #524]	; (800 <tc_init+0x2dc>)
     5f2:	4798      	blx	r3
     5f4:	e7e0      	b.n	5b8 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     5f6:	a901      	add	r1, sp, #4
     5f8:	2301      	movs	r3, #1
     5fa:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     5fc:	2200      	movs	r2, #0
     5fe:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     600:	3224      	adds	r2, #36	; 0x24
     602:	18b2      	adds	r2, r6, r2
     604:	7812      	ldrb	r2, [r2, #0]
     606:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     608:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     60a:	331f      	adds	r3, #31
     60c:	18f3      	adds	r3, r6, r3
     60e:	7818      	ldrb	r0, [r3, #0]
     610:	4b7b      	ldr	r3, [pc, #492]	; (800 <tc_init+0x2dc>)
     612:	4798      	blx	r3
     614:	e7d3      	b.n	5be <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
     616:	497b      	ldr	r1, [pc, #492]	; (804 <tc_init+0x2e0>)
     618:	694b      	ldr	r3, [r1, #20]
     61a:	4318      	orrs	r0, r3
     61c:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
     61e:	78f3      	ldrb	r3, [r6, #3]
     620:	2b08      	cmp	r3, #8
     622:	d100      	bne.n	626 <tc_init+0x102>
     624:	e086      	b.n	734 <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
     626:	7833      	ldrb	r3, [r6, #0]
     628:	466a      	mov	r2, sp
     62a:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     62c:	ab0c      	add	r3, sp, #48	; 0x30
     62e:	4642      	mov	r2, r8
     630:	5c9f      	ldrb	r7, [r3, r2]
     632:	4669      	mov	r1, sp
     634:	0038      	movs	r0, r7
     636:	4b74      	ldr	r3, [pc, #464]	; (808 <tc_init+0x2e4>)
     638:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     63a:	0038      	movs	r0, r7
     63c:	4b73      	ldr	r3, [pc, #460]	; (80c <tc_init+0x2e8>)
     63e:	4798      	blx	r3
			(uint32_t)config->counter_size |
     640:	78f3      	ldrb	r3, [r6, #3]
     642:	79f2      	ldrb	r2, [r6, #7]
     644:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
     646:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
     648:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
     64a:	7a72      	ldrb	r2, [r6, #9]
     64c:	2a00      	cmp	r2, #0
     64e:	d002      	beq.n	656 <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
     650:	2280      	movs	r2, #128	; 0x80
     652:	0252      	lsls	r2, r2, #9
     654:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
     656:	7ab2      	ldrb	r2, [r6, #10]
     658:	2a00      	cmp	r2, #0
     65a:	d002      	beq.n	662 <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
     65c:	2280      	movs	r2, #128	; 0x80
     65e:	0292      	lsls	r2, r2, #10
     660:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
     662:	7af2      	ldrb	r2, [r6, #11]
     664:	2a00      	cmp	r2, #0
     666:	d002      	beq.n	66e <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
     668:	2280      	movs	r2, #128	; 0x80
     66a:	0352      	lsls	r2, r2, #13
     66c:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
     66e:	7b32      	ldrb	r2, [r6, #12]
     670:	2a00      	cmp	r2, #0
     672:	d002      	beq.n	67a <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
     674:	2280      	movs	r2, #128	; 0x80
     676:	0392      	lsls	r2, r2, #14
     678:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
     67a:	7871      	ldrb	r1, [r6, #1]
     67c:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
     67e:	78b2      	ldrb	r2, [r6, #2]
     680:	01d2      	lsls	r2, r2, #7
     682:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
     684:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     686:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
     688:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
     68a:	2b00      	cmp	r3, #0
     68c:	d1fc      	bne.n	688 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     68e:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     690:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     692:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
     694:	2b00      	cmp	r3, #0
     696:	d1fc      	bne.n	692 <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
     698:	79b3      	ldrb	r3, [r6, #6]
     69a:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
     69c:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     69e:	1e4b      	subs	r3, r1, #1
     6a0:	4199      	sbcs	r1, r3
     6a2:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     6a4:	7bb3      	ldrb	r3, [r6, #14]
     6a6:	2b00      	cmp	r3, #0
     6a8:	d001      	beq.n	6ae <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     6aa:	2301      	movs	r3, #1
     6ac:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     6ae:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     6b0:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
     6b2:	2b00      	cmp	r3, #0
     6b4:	d1fc      	bne.n	6b0 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     6b6:	33ff      	adds	r3, #255	; 0xff
     6b8:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     6ba:	2900      	cmp	r1, #0
     6bc:	d004      	beq.n	6c8 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     6be:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     6c0:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
     6c2:	2b00      	cmp	r3, #0
     6c4:	d1fc      	bne.n	6c0 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     6c6:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
     6c8:	7a33      	ldrb	r3, [r6, #8]
     6ca:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     6cc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     6ce:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
     6d0:	2b00      	cmp	r3, #0
     6d2:	d1fc      	bne.n	6ce <tc_init+0x1aa>
	switch (module_inst->counter_size) {
     6d4:	7923      	ldrb	r3, [r4, #4]
     6d6:	2b04      	cmp	r3, #4
     6d8:	d059      	beq.n	78e <tc_init+0x26a>
     6da:	2b08      	cmp	r3, #8
     6dc:	d074      	beq.n	7c8 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
     6de:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     6e0:	2b00      	cmp	r3, #0
     6e2:	d000      	beq.n	6e6 <tc_init+0x1c2>
     6e4:	e755      	b.n	592 <tc_init+0x6e>
     6e6:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     6e8:	2b00      	cmp	r3, #0
     6ea:	d1fc      	bne.n	6e6 <tc_init+0x1c2>
				= config->counter_16_bit.value;
     6ec:	8d33      	ldrh	r3, [r6, #40]	; 0x28
     6ee:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     6f0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     6f2:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     6f4:	2b00      	cmp	r3, #0
     6f6:	d1fc      	bne.n	6f2 <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
     6f8:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     6fa:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     6fc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     6fe:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     700:	2b00      	cmp	r3, #0
     702:	d1fc      	bne.n	6fe <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
     704:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     706:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
     708:	2000      	movs	r0, #0
     70a:	e742      	b.n	592 <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
     70c:	493d      	ldr	r1, [pc, #244]	; (804 <tc_init+0x2e0>)
     70e:	698b      	ldr	r3, [r1, #24]
     710:	4318      	orrs	r0, r3
     712:	6188      	str	r0, [r1, #24]
     714:	e783      	b.n	61e <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
     716:	493b      	ldr	r1, [pc, #236]	; (804 <tc_init+0x2e0>)
     718:	69cb      	ldr	r3, [r1, #28]
     71a:	4318      	orrs	r0, r3
     71c:	61c8      	str	r0, [r1, #28]
     71e:	e77e      	b.n	61e <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
     720:	4938      	ldr	r1, [pc, #224]	; (804 <tc_init+0x2e0>)
     722:	6a0b      	ldr	r3, [r1, #32]
     724:	4318      	orrs	r0, r3
     726:	6208      	str	r0, [r1, #32]
     728:	e779      	b.n	61e <tc_init+0xfa>
			break;
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
     72a:	4b36      	ldr	r3, [pc, #216]	; (804 <tc_init+0x2e0>)
     72c:	6a59      	ldr	r1, [r3, #36]	; 0x24
     72e:	4308      	orrs	r0, r1
     730:	6258      	str	r0, [r3, #36]	; 0x24
     732:	e774      	b.n	61e <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
     734:	4643      	mov	r3, r8
     736:	3301      	adds	r3, #1
     738:	2b04      	cmp	r3, #4
     73a:	dd00      	ble.n	73e <tc_init+0x21a>
     73c:	e773      	b.n	626 <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
     73e:	ab02      	add	r3, sp, #8
     740:	1cd1      	adds	r1, r2, #3
     742:	0089      	lsls	r1, r1, #2
     744:	58c9      	ldr	r1, [r1, r3]
     746:	3202      	adds	r2, #2
     748:	0092      	lsls	r2, r2, #2
     74a:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
     74c:	b2da      	uxtb	r2, r3
     74e:	2a04      	cmp	r2, #4
     750:	d900      	bls.n	754 <tc_init+0x230>
     752:	e768      	b.n	626 <tc_init+0x102>
     754:	0093      	lsls	r3, r2, #2
     756:	4a2e      	ldr	r2, [pc, #184]	; (810 <tc_init+0x2ec>)
     758:	58d3      	ldr	r3, [r2, r3]
     75a:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
     75c:	4a29      	ldr	r2, [pc, #164]	; (804 <tc_init+0x2e0>)
     75e:	6953      	ldr	r3, [r2, #20]
     760:	4319      	orrs	r1, r3
     762:	6151      	str	r1, [r2, #20]
     764:	e75f      	b.n	626 <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
     766:	4a27      	ldr	r2, [pc, #156]	; (804 <tc_init+0x2e0>)
     768:	6993      	ldr	r3, [r2, #24]
     76a:	4319      	orrs	r1, r3
     76c:	6191      	str	r1, [r2, #24]
     76e:	e75a      	b.n	626 <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
     770:	4a24      	ldr	r2, [pc, #144]	; (804 <tc_init+0x2e0>)
     772:	69d3      	ldr	r3, [r2, #28]
     774:	4319      	orrs	r1, r3
     776:	61d1      	str	r1, [r2, #28]
     778:	e755      	b.n	626 <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
     77a:	4a22      	ldr	r2, [pc, #136]	; (804 <tc_init+0x2e0>)
     77c:	6a13      	ldr	r3, [r2, #32]
     77e:	4319      	orrs	r1, r3
     780:	6211      	str	r1, [r2, #32]
     782:	e750      	b.n	626 <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
     784:	4b1f      	ldr	r3, [pc, #124]	; (804 <tc_init+0x2e0>)
     786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     788:	4311      	orrs	r1, r2
     78a:	6259      	str	r1, [r3, #36]	; 0x24
     78c:	e74b      	b.n	626 <tc_init+0x102>
     78e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     790:	2b00      	cmp	r3, #0
     792:	d1fc      	bne.n	78e <tc_init+0x26a>
					config->counter_8_bit.value;
     794:	3328      	adds	r3, #40	; 0x28
     796:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
     798:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     79a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     79c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     79e:	2b00      	cmp	r3, #0
     7a0:	d1fc      	bne.n	79c <tc_init+0x278>
					config->counter_8_bit.period;
     7a2:	3329      	adds	r3, #41	; 0x29
     7a4:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
     7a6:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7a8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     7aa:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     7ac:	2b00      	cmp	r3, #0
     7ae:	d1fc      	bne.n	7aa <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
     7b0:	332a      	adds	r3, #42	; 0x2a
     7b2:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
     7b4:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7b6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     7b8:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     7ba:	2b00      	cmp	r3, #0
     7bc:	d1fc      	bne.n	7b8 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
     7be:	332b      	adds	r3, #43	; 0x2b
     7c0:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
     7c2:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
     7c4:	2000      	movs	r0, #0
     7c6:	e6e4      	b.n	592 <tc_init+0x6e>
     7c8:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     7ca:	2b00      	cmp	r3, #0
     7cc:	d1fc      	bne.n	7c8 <tc_init+0x2a4>
				= config->counter_32_bit.value;
     7ce:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     7d0:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7d2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     7d4:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     7d6:	2b00      	cmp	r3, #0
     7d8:	d1fc      	bne.n	7d4 <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
     7da:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     7dc:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7de:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     7e0:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     7e2:	2b00      	cmp	r3, #0
     7e4:	d1fc      	bne.n	7e0 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
     7e6:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     7e8:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
     7ea:	2000      	movs	r0, #0
     7ec:	e6d1      	b.n	592 <tc_init+0x6e>
     7ee:	46c0      	nop			; (mov r8, r8)
     7f0:	000004e9 	.word	0x000004e9
     7f4:	000013d4 	.word	0x000013d4
     7f8:	20000040 	.word	0x20000040
     7fc:	000013ac 	.word	0x000013ac
     800:	00000e35 	.word	0x00000e35
     804:	40000400 	.word	0x40000400
     808:	00000d39 	.word	0x00000d39
     80c:	00000cc9 	.word	0x00000cc9
     810:	000013c0 	.word	0x000013c0

00000814 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     814:	1c93      	adds	r3, r2, #2
     816:	009b      	lsls	r3, r3, #2
     818:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     81a:	2a02      	cmp	r2, #2
     81c:	d009      	beq.n	832 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     81e:	2a03      	cmp	r2, #3
     820:	d00c      	beq.n	83c <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     822:	2301      	movs	r3, #1
     824:	4093      	lsls	r3, r2
     826:	001a      	movs	r2, r3
     828:	7e03      	ldrb	r3, [r0, #24]
     82a:	4313      	orrs	r3, r2
     82c:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     82e:	2000      	movs	r0, #0
     830:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     832:	7e03      	ldrb	r3, [r0, #24]
     834:	2210      	movs	r2, #16
     836:	4313      	orrs	r3, r2
     838:	7603      	strb	r3, [r0, #24]
     83a:	e7f8      	b.n	82e <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     83c:	7e03      	ldrb	r3, [r0, #24]
     83e:	2220      	movs	r2, #32
     840:	4313      	orrs	r3, r2
     842:	7603      	strb	r3, [r0, #24]
     844:	e7f3      	b.n	82e <tc_register_callback+0x1a>
	...

00000848 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     848:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     84a:	0080      	lsls	r0, r0, #2
     84c:	4b16      	ldr	r3, [pc, #88]	; (8a8 <_tc_interrupt_handler+0x60>)
     84e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     850:	6823      	ldr	r3, [r4, #0]
     852:	7a9d      	ldrb	r5, [r3, #10]
     854:	7e22      	ldrb	r2, [r4, #24]
     856:	7e63      	ldrb	r3, [r4, #25]
     858:	4013      	ands	r3, r2
     85a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     85c:	07eb      	lsls	r3, r5, #31
     85e:	d406      	bmi.n	86e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     860:	07ab      	lsls	r3, r5, #30
     862:	d40b      	bmi.n	87c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     864:	06eb      	lsls	r3, r5, #27
     866:	d410      	bmi.n	88a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     868:	06ab      	lsls	r3, r5, #26
     86a:	d415      	bmi.n	898 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     86c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     86e:	0020      	movs	r0, r4
     870:	68a3      	ldr	r3, [r4, #8]
     872:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     874:	2301      	movs	r3, #1
     876:	6822      	ldr	r2, [r4, #0]
     878:	7293      	strb	r3, [r2, #10]
     87a:	e7f1      	b.n	860 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     87c:	0020      	movs	r0, r4
     87e:	68e3      	ldr	r3, [r4, #12]
     880:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     882:	2302      	movs	r3, #2
     884:	6822      	ldr	r2, [r4, #0]
     886:	7293      	strb	r3, [r2, #10]
     888:	e7ec      	b.n	864 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     88a:	0020      	movs	r0, r4
     88c:	6923      	ldr	r3, [r4, #16]
     88e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     890:	2310      	movs	r3, #16
     892:	6822      	ldr	r2, [r4, #0]
     894:	7293      	strb	r3, [r2, #10]
     896:	e7e7      	b.n	868 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     898:	0020      	movs	r0, r4
     89a:	6963      	ldr	r3, [r4, #20]
     89c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     89e:	6823      	ldr	r3, [r4, #0]
     8a0:	2220      	movs	r2, #32
     8a2:	729a      	strb	r2, [r3, #10]
}
     8a4:	e7e2      	b.n	86c <_tc_interrupt_handler+0x24>
     8a6:	46c0      	nop			; (mov r8, r8)
     8a8:	20000040 	.word	0x20000040

000008ac <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     8ac:	b510      	push	{r4, lr}
     8ae:	2000      	movs	r0, #0
     8b0:	4b01      	ldr	r3, [pc, #4]	; (8b8 <TC0_Handler+0xc>)
     8b2:	4798      	blx	r3
     8b4:	bd10      	pop	{r4, pc}
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	00000849 	.word	0x00000849

000008bc <TC1_Handler>:
     8bc:	b510      	push	{r4, lr}
     8be:	2001      	movs	r0, #1
     8c0:	4b01      	ldr	r3, [pc, #4]	; (8c8 <TC1_Handler+0xc>)
     8c2:	4798      	blx	r3
     8c4:	bd10      	pop	{r4, pc}
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	00000849 	.word	0x00000849

000008cc <TC2_Handler>:
     8cc:	b510      	push	{r4, lr}
     8ce:	2002      	movs	r0, #2
     8d0:	4b01      	ldr	r3, [pc, #4]	; (8d8 <TC2_Handler+0xc>)
     8d2:	4798      	blx	r3
     8d4:	bd10      	pop	{r4, pc}
     8d6:	46c0      	nop			; (mov r8, r8)
     8d8:	00000849 	.word	0x00000849

000008dc <TC3_Handler>:
     8dc:	b510      	push	{r4, lr}
     8de:	2003      	movs	r0, #3
     8e0:	4b01      	ldr	r3, [pc, #4]	; (8e8 <TC3_Handler+0xc>)
     8e2:	4798      	blx	r3
     8e4:	bd10      	pop	{r4, pc}
     8e6:	46c0      	nop			; (mov r8, r8)
     8e8:	00000849 	.word	0x00000849

000008ec <TC4_Handler>:
     8ec:	b510      	push	{r4, lr}
     8ee:	2004      	movs	r0, #4
     8f0:	4b01      	ldr	r3, [pc, #4]	; (8f8 <TC4_Handler+0xc>)
     8f2:	4798      	blx	r3
     8f4:	bd10      	pop	{r4, pc}
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	00000849 	.word	0x00000849

000008fc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     8fc:	4b0c      	ldr	r3, [pc, #48]	; (930 <cpu_irq_enter_critical+0x34>)
     8fe:	681b      	ldr	r3, [r3, #0]
     900:	2b00      	cmp	r3, #0
     902:	d106      	bne.n	912 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     904:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     908:	2b00      	cmp	r3, #0
     90a:	d007      	beq.n	91c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     90c:	2200      	movs	r2, #0
     90e:	4b09      	ldr	r3, [pc, #36]	; (934 <cpu_irq_enter_critical+0x38>)
     910:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     912:	4a07      	ldr	r2, [pc, #28]	; (930 <cpu_irq_enter_critical+0x34>)
     914:	6813      	ldr	r3, [r2, #0]
     916:	3301      	adds	r3, #1
     918:	6013      	str	r3, [r2, #0]
}
     91a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     91c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     91e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     922:	2200      	movs	r2, #0
     924:	4b04      	ldr	r3, [pc, #16]	; (938 <cpu_irq_enter_critical+0x3c>)
     926:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     928:	3201      	adds	r2, #1
     92a:	4b02      	ldr	r3, [pc, #8]	; (934 <cpu_irq_enter_critical+0x38>)
     92c:	701a      	strb	r2, [r3, #0]
     92e:	e7f0      	b.n	912 <cpu_irq_enter_critical+0x16>
     930:	20000020 	.word	0x20000020
     934:	20000024 	.word	0x20000024
     938:	20000000 	.word	0x20000000

0000093c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     93c:	4b08      	ldr	r3, [pc, #32]	; (960 <cpu_irq_leave_critical+0x24>)
     93e:	681a      	ldr	r2, [r3, #0]
     940:	3a01      	subs	r2, #1
     942:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     944:	681b      	ldr	r3, [r3, #0]
     946:	2b00      	cmp	r3, #0
     948:	d109      	bne.n	95e <cpu_irq_leave_critical+0x22>
     94a:	4b06      	ldr	r3, [pc, #24]	; (964 <cpu_irq_leave_critical+0x28>)
     94c:	781b      	ldrb	r3, [r3, #0]
     94e:	2b00      	cmp	r3, #0
     950:	d005      	beq.n	95e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     952:	2201      	movs	r2, #1
     954:	4b04      	ldr	r3, [pc, #16]	; (968 <cpu_irq_leave_critical+0x2c>)
     956:	701a      	strb	r2, [r3, #0]
     958:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     95c:	b662      	cpsie	i
	}
}
     95e:	4770      	bx	lr
     960:	20000020 	.word	0x20000020
     964:	20000024 	.word	0x20000024
     968:	20000000 	.word	0x20000000

0000096c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     96c:	b5f0      	push	{r4, r5, r6, r7, lr}
     96e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     970:	ac01      	add	r4, sp, #4
     972:	2501      	movs	r5, #1
     974:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     976:	2700      	movs	r7, #0
     978:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     97a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     97c:	0021      	movs	r1, r4
     97e:	202a      	movs	r0, #42	; 0x2a
     980:	4e06      	ldr	r6, [pc, #24]	; (99c <system_board_init+0x30>)
     982:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     984:	2280      	movs	r2, #128	; 0x80
     986:	00d2      	lsls	r2, r2, #3
     988:	4b05      	ldr	r3, [pc, #20]	; (9a0 <system_board_init+0x34>)
     98a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     98c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     98e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     990:	0021      	movs	r1, r4
     992:	2002      	movs	r0, #2
     994:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     996:	b003      	add	sp, #12
     998:	bdf0      	pop	{r4, r5, r6, r7, pc}
     99a:	46c0      	nop			; (mov r8, r8)
     99c:	000009a5 	.word	0x000009a5
     9a0:	40002880 	.word	0x40002880

000009a4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     9a4:	b500      	push	{lr}
     9a6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     9a8:	ab01      	add	r3, sp, #4
     9aa:	2280      	movs	r2, #128	; 0x80
     9ac:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     9ae:	780a      	ldrb	r2, [r1, #0]
     9b0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     9b2:	784a      	ldrb	r2, [r1, #1]
     9b4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     9b6:	788a      	ldrb	r2, [r1, #2]
     9b8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     9ba:	0019      	movs	r1, r3
     9bc:	4b01      	ldr	r3, [pc, #4]	; (9c4 <port_pin_set_config+0x20>)
     9be:	4798      	blx	r3
}
     9c0:	b003      	add	sp, #12
     9c2:	bd00      	pop	{pc}
     9c4:	00000e35 	.word	0x00000e35

000009c8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     9c8:	b510      	push	{r4, lr}
	switch (clock_source) {
     9ca:	2808      	cmp	r0, #8
     9cc:	d803      	bhi.n	9d6 <system_clock_source_get_hz+0xe>
     9ce:	0080      	lsls	r0, r0, #2
     9d0:	4b1c      	ldr	r3, [pc, #112]	; (a44 <system_clock_source_get_hz+0x7c>)
     9d2:	581b      	ldr	r3, [r3, r0]
     9d4:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
     9d6:	2000      	movs	r0, #0
     9d8:	e032      	b.n	a40 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     9da:	4b1b      	ldr	r3, [pc, #108]	; (a48 <system_clock_source_get_hz+0x80>)
     9dc:	6918      	ldr	r0, [r3, #16]
     9de:	e02f      	b.n	a40 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
     9e0:	4b1a      	ldr	r3, [pc, #104]	; (a4c <system_clock_source_get_hz+0x84>)
     9e2:	7d18      	ldrb	r0, [r3, #20]
     9e4:	0700      	lsls	r0, r0, #28
     9e6:	0f80      	lsrs	r0, r0, #30
     9e8:	1c43      	adds	r3, r0, #1
     9ea:	4819      	ldr	r0, [pc, #100]	; (a50 <system_clock_source_get_hz+0x88>)
     9ec:	4358      	muls	r0, r3
     9ee:	e027      	b.n	a40 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     9f0:	4b15      	ldr	r3, [pc, #84]	; (a48 <system_clock_source_get_hz+0x80>)
     9f2:	6958      	ldr	r0, [r3, #20]
     9f4:	e024      	b.n	a40 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
     9f6:	4b14      	ldr	r3, [pc, #80]	; (a48 <system_clock_source_get_hz+0x80>)
     9f8:	681b      	ldr	r3, [r3, #0]
			return 0;
     9fa:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
     9fc:	079b      	lsls	r3, r3, #30
     9fe:	d51f      	bpl.n	a40 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
     a00:	4912      	ldr	r1, [pc, #72]	; (a4c <system_clock_source_get_hz+0x84>)
     a02:	2280      	movs	r2, #128	; 0x80
     a04:	0052      	lsls	r2, r2, #1
     a06:	68cb      	ldr	r3, [r1, #12]
     a08:	4213      	tst	r3, r2
     a0a:	d0fc      	beq.n	a06 <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
     a0c:	4b0e      	ldr	r3, [pc, #56]	; (a48 <system_clock_source_get_hz+0x80>)
     a0e:	681b      	ldr	r3, [r3, #0]
     a10:	075b      	lsls	r3, r3, #29
     a12:	d401      	bmi.n	a18 <system_clock_source_get_hz+0x50>
		return 48000000UL;
     a14:	480f      	ldr	r0, [pc, #60]	; (a54 <system_clock_source_get_hz+0x8c>)
     a16:	e013      	b.n	a40 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     a18:	2000      	movs	r0, #0
     a1a:	4b0f      	ldr	r3, [pc, #60]	; (a58 <system_clock_source_get_hz+0x90>)
     a1c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     a1e:	4b0a      	ldr	r3, [pc, #40]	; (a48 <system_clock_source_get_hz+0x80>)
     a20:	689b      	ldr	r3, [r3, #8]
     a22:	041b      	lsls	r3, r3, #16
     a24:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     a26:	4358      	muls	r0, r3
     a28:	e00a      	b.n	a40 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     a2a:	2328      	movs	r3, #40	; 0x28
     a2c:	4a07      	ldr	r2, [pc, #28]	; (a4c <system_clock_source_get_hz+0x84>)
     a2e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     a30:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     a32:	079b      	lsls	r3, r3, #30
     a34:	d504      	bpl.n	a40 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     a36:	4b04      	ldr	r3, [pc, #16]	; (a48 <system_clock_source_get_hz+0x80>)
     a38:	68d8      	ldr	r0, [r3, #12]
     a3a:	e001      	b.n	a40 <system_clock_source_get_hz+0x78>
		return 32768UL;
     a3c:	2080      	movs	r0, #128	; 0x80
     a3e:	0200      	lsls	r0, r0, #8
	}
}
     a40:	bd10      	pop	{r4, pc}
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	00001410 	.word	0x00001410
     a48:	20000028 	.word	0x20000028
     a4c:	40000c00 	.word	0x40000c00
     a50:	003d0900 	.word	0x003d0900
     a54:	02dc6c00 	.word	0x02dc6c00
     a58:	00000d5d 	.word	0x00000d5d

00000a5c <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     a5c:	b530      	push	{r4, r5, lr}
     a5e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
     a60:	2280      	movs	r2, #128	; 0x80
     a62:	0052      	lsls	r2, r2, #1
     a64:	4b2f      	ldr	r3, [pc, #188]	; (b24 <system_clock_init+0xc8>)
     a66:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
     a68:	3afd      	subs	r2, #253	; 0xfd
     a6a:	4b2f      	ldr	r3, [pc, #188]	; (b28 <system_clock_init+0xcc>)
     a6c:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     a6e:	4a2f      	ldr	r2, [pc, #188]	; (b2c <system_clock_init+0xd0>)
     a70:	6853      	ldr	r3, [r2, #4]
     a72:	211e      	movs	r1, #30
     a74:	438b      	bics	r3, r1
     a76:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
     a78:	2380      	movs	r3, #128	; 0x80
     a7a:	05db      	lsls	r3, r3, #23
     a7c:	789b      	ldrb	r3, [r3, #2]
     a7e:	2b02      	cmp	r3, #2
     a80:	d00f      	beq.n	aa2 <system_clock_init+0x46>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
     a82:	2380      	movs	r3, #128	; 0x80
     a84:	05db      	lsls	r3, r3, #23
     a86:	789b      	ldrb	r3, [r3, #2]
     a88:	b25b      	sxtb	r3, r3
     a8a:	2b00      	cmp	r3, #0
     a8c:	db09      	blt.n	aa2 <system_clock_init+0x46>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
     a8e:	2380      	movs	r3, #128	; 0x80
     a90:	05db      	lsls	r3, r3, #23
     a92:	2201      	movs	r2, #1
     a94:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
     a96:	3201      	adds	r2, #1
     a98:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
     a9a:	001a      	movs	r2, r3
     a9c:	7993      	ldrb	r3, [r2, #6]
     a9e:	2b00      	cmp	r3, #0
     aa0:	d0fc      	beq.n	a9c <system_clock_init+0x40>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
     aa2:	4b20      	ldr	r3, [pc, #128]	; (b24 <system_clock_init+0xc8>)
     aa4:	7d19      	ldrb	r1, [r3, #20]
     aa6:	2280      	movs	r2, #128	; 0x80
     aa8:	4252      	negs	r2, r2
     aaa:	430a      	orrs	r2, r1
     aac:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
     aae:	7d1a      	ldrb	r2, [r3, #20]
     ab0:	2540      	movs	r5, #64	; 0x40
     ab2:	43aa      	bics	r2, r5
     ab4:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     ab6:	4b1e      	ldr	r3, [pc, #120]	; (b30 <system_clock_init+0xd4>)
     ab8:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
     aba:	4c1e      	ldr	r4, [pc, #120]	; (b34 <system_clock_init+0xd8>)
     abc:	2301      	movs	r3, #1
     abe:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
     ac0:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
     ac2:	7123      	strb	r3, [r4, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
     ac4:	a901      	add	r1, sp, #4
     ac6:	2300      	movs	r3, #0
     ac8:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
     aca:	2206      	movs	r2, #6
     acc:	700a      	strb	r2, [r1, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     ace:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     ad0:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     ad2:	604d      	str	r5, [r1, #4]
     ad4:	2000      	movs	r0, #0
     ad6:	4b18      	ldr	r3, [pc, #96]	; (b38 <system_clock_init+0xdc>)
     ad8:	4798      	blx	r3
     ada:	2000      	movs	r0, #0
     adc:	4b17      	ldr	r3, [pc, #92]	; (b3c <system_clock_init+0xe0>)
     ade:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
     ae0:	2000      	movs	r0, #0
     ae2:	4b17      	ldr	r3, [pc, #92]	; (b40 <system_clock_init+0xe4>)
     ae4:	4798      	blx	r3
     ae6:	7921      	ldrb	r1, [r4, #4]
     ae8:	b2c9      	uxtb	r1, r1
     aea:	4b16      	ldr	r3, [pc, #88]	; (b44 <system_clock_init+0xe8>)
     aec:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
     aee:	4b16      	ldr	r3, [pc, #88]	; (b48 <system_clock_init+0xec>)
     af0:	4298      	cmp	r0, r3
     af2:	d814      	bhi.n	b1e <system_clock_init+0xc2>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
     af4:	2380      	movs	r3, #128	; 0x80
     af6:	05db      	lsls	r3, r3, #23
     af8:	789b      	ldrb	r3, [r3, #2]
     afa:	2b00      	cmp	r3, #0
     afc:	d00f      	beq.n	b1e <system_clock_init+0xc2>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
     afe:	2380      	movs	r3, #128	; 0x80
     b00:	05db      	lsls	r3, r3, #23
     b02:	789b      	ldrb	r3, [r3, #2]
     b04:	b25b      	sxtb	r3, r3
     b06:	2b00      	cmp	r3, #0
     b08:	db09      	blt.n	b1e <system_clock_init+0xc2>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
     b0a:	2380      	movs	r3, #128	; 0x80
     b0c:	05db      	lsls	r3, r3, #23
     b0e:	2201      	movs	r2, #1
     b10:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
     b12:	2200      	movs	r2, #0
     b14:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
     b16:	001a      	movs	r2, r3
     b18:	7993      	ldrb	r3, [r2, #6]
     b1a:	2b00      	cmp	r3, #0
     b1c:	d0fc      	beq.n	b18 <system_clock_init+0xbc>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
     b1e:	b005      	add	sp, #20
     b20:	bd30      	pop	{r4, r5, pc}
     b22:	46c0      	nop			; (mov r8, r8)
     b24:	40000c00 	.word	0x40000c00
     b28:	40001400 	.word	0x40001400
     b2c:	41004000 	.word	0x41004000
     b30:	00000b4d 	.word	0x00000b4d
     b34:	40000400 	.word	0x40000400
     b38:	00000b71 	.word	0x00000b71
     b3c:	00000c1d 	.word	0x00000c1d
     b40:	00000c5d 	.word	0x00000c5d
     b44:	00001105 	.word	0x00001105
     b48:	00b71b00 	.word	0x00b71b00

00000b4c <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
     b4c:	4a06      	ldr	r2, [pc, #24]	; (b68 <system_gclk_init+0x1c>)
     b4e:	6953      	ldr	r3, [r2, #20]
     b50:	2140      	movs	r1, #64	; 0x40
     b52:	430b      	orrs	r3, r1
     b54:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
     b56:	2201      	movs	r2, #1
     b58:	4b04      	ldr	r3, [pc, #16]	; (b6c <system_gclk_init+0x20>)
     b5a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
     b5c:	0019      	movs	r1, r3
     b5e:	780b      	ldrb	r3, [r1, #0]
     b60:	4213      	tst	r3, r2
     b62:	d1fc      	bne.n	b5e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     b64:	4770      	bx	lr
     b66:	46c0      	nop			; (mov r8, r8)
     b68:	40000400 	.word	0x40000400
     b6c:	40001800 	.word	0x40001800

00000b70 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     b70:	b570      	push	{r4, r5, r6, lr}
     b72:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
     b74:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     b76:	784b      	ldrb	r3, [r1, #1]
     b78:	2b00      	cmp	r3, #0
     b7a:	d002      	beq.n	b82 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     b7c:	2380      	movs	r3, #128	; 0x80
     b7e:	00db      	lsls	r3, r3, #3
     b80:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     b82:	7a4b      	ldrb	r3, [r1, #9]
     b84:	2b00      	cmp	r3, #0
     b86:	d002      	beq.n	b8e <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     b88:	2380      	movs	r3, #128	; 0x80
     b8a:	011b      	lsls	r3, r3, #4
     b8c:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     b8e:	6848      	ldr	r0, [r1, #4]
     b90:	2801      	cmp	r0, #1
     b92:	d90f      	bls.n	bb4 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     b94:	1e43      	subs	r3, r0, #1
     b96:	4218      	tst	r0, r3
     b98:	d131      	bne.n	bfe <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     b9a:	2802      	cmp	r0, #2
     b9c:	d92d      	bls.n	bfa <system_gclk_gen_set_config+0x8a>
     b9e:	2302      	movs	r3, #2
     ba0:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     ba2:	3201      	adds	r2, #1
						mask <<= 1) {
     ba4:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     ba6:	4298      	cmp	r0, r3
     ba8:	d8fb      	bhi.n	ba2 <system_gclk_gen_set_config+0x32>
     baa:	2380      	movs	r3, #128	; 0x80
     bac:	015b      	lsls	r3, r3, #5
     bae:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
     bb0:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     bb2:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     bb4:	7a0b      	ldrb	r3, [r1, #8]
     bb6:	2b00      	cmp	r3, #0
     bb8:	d002      	beq.n	bc0 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     bba:	2380      	movs	r3, #128	; 0x80
     bbc:	019b      	lsls	r3, r3, #6
     bbe:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     bc0:	2604      	movs	r6, #4
     bc2:	40a6      	lsls	r6, r4
     bc4:	4911      	ldr	r1, [pc, #68]	; (c0c <system_gclk_gen_set_config+0x9c>)
     bc6:	4a12      	ldr	r2, [pc, #72]	; (c10 <system_gclk_gen_set_config+0xa0>)
     bc8:	684b      	ldr	r3, [r1, #4]
     bca:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
     bcc:	421e      	tst	r6, r3
     bce:	d1fb      	bne.n	bc8 <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     bd0:	4b10      	ldr	r3, [pc, #64]	; (c14 <system_gclk_gen_set_config+0xa4>)
     bd2:	4798      	blx	r3
     bd4:	00a4      	lsls	r4, r4, #2
     bd6:	4b0d      	ldr	r3, [pc, #52]	; (c0c <system_gclk_gen_set_config+0x9c>)
     bd8:	469c      	mov	ip, r3
     bda:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
     bdc:	6a22      	ldr	r2, [r4, #32]
     bde:	2380      	movs	r3, #128	; 0x80
     be0:	005b      	lsls	r3, r3, #1
     be2:	401a      	ands	r2, r3
     be4:	432a      	orrs	r2, r5
     be6:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     be8:	4661      	mov	r1, ip
     bea:	4a09      	ldr	r2, [pc, #36]	; (c10 <system_gclk_gen_set_config+0xa0>)
     bec:	684b      	ldr	r3, [r1, #4]
     bee:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
     bf0:	421e      	tst	r6, r3
     bf2:	d1fb      	bne.n	bec <system_gclk_gen_set_config+0x7c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     bf4:	4b08      	ldr	r3, [pc, #32]	; (c18 <system_gclk_gen_set_config+0xa8>)
     bf6:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
     bf8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     bfa:	2200      	movs	r2, #0
     bfc:	e7d5      	b.n	baa <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
     bfe:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     c00:	2380      	movs	r3, #128	; 0x80
     c02:	009b      	lsls	r3, r3, #2
     c04:	4318      	orrs	r0, r3
     c06:	4305      	orrs	r5, r0
     c08:	e7d4      	b.n	bb4 <system_gclk_gen_set_config+0x44>
     c0a:	46c0      	nop			; (mov r8, r8)
     c0c:	40001800 	.word	0x40001800
     c10:	000007fc 	.word	0x000007fc
     c14:	000008fd 	.word	0x000008fd
     c18:	0000093d 	.word	0x0000093d

00000c1c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     c1c:	b510      	push	{r4, lr}
     c1e:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     c20:	2204      	movs	r2, #4
     c22:	4082      	lsls	r2, r0
     c24:	4809      	ldr	r0, [pc, #36]	; (c4c <system_gclk_gen_enable+0x30>)
     c26:	490a      	ldr	r1, [pc, #40]	; (c50 <system_gclk_gen_enable+0x34>)
     c28:	6843      	ldr	r3, [r0, #4]
     c2a:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
     c2c:	421a      	tst	r2, r3
     c2e:	d1fb      	bne.n	c28 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
     c30:	4b08      	ldr	r3, [pc, #32]	; (c54 <system_gclk_gen_enable+0x38>)
     c32:	4798      	blx	r3
     c34:	00a4      	lsls	r4, r4, #2
     c36:	4b05      	ldr	r3, [pc, #20]	; (c4c <system_gclk_gen_enable+0x30>)
     c38:	469c      	mov	ip, r3
     c3a:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
     c3c:	6a22      	ldr	r2, [r4, #32]
     c3e:	2380      	movs	r3, #128	; 0x80
     c40:	005b      	lsls	r3, r3, #1
     c42:	4313      	orrs	r3, r2
     c44:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
     c46:	4b04      	ldr	r3, [pc, #16]	; (c58 <system_gclk_gen_enable+0x3c>)
     c48:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     c4a:	bd10      	pop	{r4, pc}
     c4c:	40001800 	.word	0x40001800
     c50:	000007fc 	.word	0x000007fc
     c54:	000008fd 	.word	0x000008fd
     c58:	0000093d 	.word	0x0000093d

00000c5c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c5e:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     c60:	2204      	movs	r2, #4
     c62:	4082      	lsls	r2, r0
     c64:	4812      	ldr	r0, [pc, #72]	; (cb0 <system_gclk_gen_get_hz+0x54>)
     c66:	4913      	ldr	r1, [pc, #76]	; (cb4 <system_gclk_gen_get_hz+0x58>)
     c68:	6843      	ldr	r3, [r0, #4]
     c6a:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
     c6c:	421a      	tst	r2, r3
     c6e:	d1fb      	bne.n	c68 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
     c70:	4b11      	ldr	r3, [pc, #68]	; (cb8 <system_gclk_gen_get_hz+0x5c>)
     c72:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
     c74:	4f0e      	ldr	r7, [pc, #56]	; (cb0 <system_gclk_gen_get_hz+0x54>)
     c76:	3408      	adds	r4, #8
     c78:	00a4      	lsls	r4, r4, #2
     c7a:	59e0      	ldr	r0, [r4, r7]
     c7c:	0700      	lsls	r0, r0, #28
     c7e:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
     c80:	4b0e      	ldr	r3, [pc, #56]	; (cbc <system_gclk_gen_get_hz+0x60>)
     c82:	4798      	blx	r3
     c84:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
     c86:	59e5      	ldr	r5, [r4, r7]
     c88:	04ed      	lsls	r5, r5, #19
     c8a:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
     c8c:	59e4      	ldr	r4, [r4, r7]
     c8e:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     c90:	4b0b      	ldr	r3, [pc, #44]	; (cc0 <system_gclk_gen_get_hz+0x64>)
     c92:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     c94:	2d00      	cmp	r5, #0
     c96:	d107      	bne.n	ca8 <system_gclk_gen_get_hz+0x4c>
     c98:	2c01      	cmp	r4, #1
     c9a:	d907      	bls.n	cac <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
     c9c:	0021      	movs	r1, r4
     c9e:	0030      	movs	r0, r6
     ca0:	4b08      	ldr	r3, [pc, #32]	; (cc4 <system_gclk_gen_get_hz+0x68>)
     ca2:	4798      	blx	r3
     ca4:	0006      	movs	r6, r0
     ca6:	e001      	b.n	cac <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     ca8:	3401      	adds	r4, #1
     caa:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
     cac:	0030      	movs	r0, r6
     cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cb0:	40001800 	.word	0x40001800
     cb4:	000007fc 	.word	0x000007fc
     cb8:	000008fd 	.word	0x000008fd
     cbc:	000009c9 	.word	0x000009c9
     cc0:	0000093d 	.word	0x0000093d
     cc4:	00001105 	.word	0x00001105

00000cc8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     cc8:	b510      	push	{r4, lr}
     cca:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     ccc:	4b09      	ldr	r3, [pc, #36]	; (cf4 <system_gclk_chan_enable+0x2c>)
     cce:	4798      	blx	r3
     cd0:	00a0      	lsls	r0, r4, #2
     cd2:	4b09      	ldr	r3, [pc, #36]	; (cf8 <system_gclk_chan_enable+0x30>)
     cd4:	469c      	mov	ip, r3
     cd6:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
     cd8:	2280      	movs	r2, #128	; 0x80
     cda:	5883      	ldr	r3, [r0, r2]
     cdc:	2140      	movs	r1, #64	; 0x40
     cde:	430b      	orrs	r3, r1
     ce0:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
     ce2:	3140      	adds	r1, #64	; 0x40
     ce4:	3a40      	subs	r2, #64	; 0x40
     ce6:	5843      	ldr	r3, [r0, r1]
     ce8:	421a      	tst	r2, r3
     cea:	d0fc      	beq.n	ce6 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
     cec:	4b03      	ldr	r3, [pc, #12]	; (cfc <system_gclk_chan_enable+0x34>)
     cee:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
     cf0:	bd10      	pop	{r4, pc}
     cf2:	46c0      	nop			; (mov r8, r8)
     cf4:	000008fd 	.word	0x000008fd
     cf8:	40001800 	.word	0x40001800
     cfc:	0000093d 	.word	0x0000093d

00000d00 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     d00:	b510      	push	{r4, lr}
     d02:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     d04:	4b09      	ldr	r3, [pc, #36]	; (d2c <system_gclk_chan_disable+0x2c>)
     d06:	4798      	blx	r3
     d08:	00a0      	lsls	r0, r4, #2
     d0a:	4b09      	ldr	r3, [pc, #36]	; (d30 <system_gclk_chan_disable+0x30>)
     d0c:	469c      	mov	ip, r3
     d0e:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
     d10:	2280      	movs	r2, #128	; 0x80
     d12:	5883      	ldr	r3, [r0, r2]
     d14:	2140      	movs	r1, #64	; 0x40
     d16:	438b      	bics	r3, r1
     d18:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
     d1a:	3140      	adds	r1, #64	; 0x40
     d1c:	3a40      	subs	r2, #64	; 0x40
     d1e:	5843      	ldr	r3, [r0, r1]
     d20:	421a      	tst	r2, r3
     d22:	d1fc      	bne.n	d1e <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
     d24:	4b03      	ldr	r3, [pc, #12]	; (d34 <system_gclk_chan_disable+0x34>)
     d26:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
     d28:	bd10      	pop	{r4, pc}
     d2a:	46c0      	nop			; (mov r8, r8)
     d2c:	000008fd 	.word	0x000008fd
     d30:	40001800 	.word	0x40001800
     d34:	0000093d 	.word	0x0000093d

00000d38 <system_gclk_chan_set_config>:
{
     d38:	b570      	push	{r4, r5, r6, lr}
     d3a:	0004      	movs	r4, r0
     d3c:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
     d3e:	4b05      	ldr	r3, [pc, #20]	; (d54 <system_gclk_chan_set_config+0x1c>)
     d40:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
     d42:	782a      	ldrb	r2, [r5, #0]
     d44:	230f      	movs	r3, #15
     d46:	4013      	ands	r3, r2
     d48:	3420      	adds	r4, #32
     d4a:	00a4      	lsls	r4, r4, #2
     d4c:	4a02      	ldr	r2, [pc, #8]	; (d58 <system_gclk_chan_set_config+0x20>)
     d4e:	50a3      	str	r3, [r4, r2]
}
     d50:	bd70      	pop	{r4, r5, r6, pc}
     d52:	46c0      	nop			; (mov r8, r8)
     d54:	00000d01 	.word	0x00000d01
     d58:	40001800 	.word	0x40001800

00000d5c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     d5c:	b510      	push	{r4, lr}
     d5e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     d60:	4b06      	ldr	r3, [pc, #24]	; (d7c <system_gclk_chan_get_hz+0x20>)
     d62:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
     d64:	3420      	adds	r4, #32
     d66:	00a4      	lsls	r4, r4, #2
     d68:	4b05      	ldr	r3, [pc, #20]	; (d80 <system_gclk_chan_get_hz+0x24>)
     d6a:	58e4      	ldr	r4, [r4, r3]
     d6c:	0724      	lsls	r4, r4, #28
     d6e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     d70:	4b04      	ldr	r3, [pc, #16]	; (d84 <system_gclk_chan_get_hz+0x28>)
     d72:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     d74:	0020      	movs	r0, r4
     d76:	4b04      	ldr	r3, [pc, #16]	; (d88 <system_gclk_chan_get_hz+0x2c>)
     d78:	4798      	blx	r3
}
     d7a:	bd10      	pop	{r4, pc}
     d7c:	000008fd 	.word	0x000008fd
     d80:	40001800 	.word	0x40001800
     d84:	0000093d 	.word	0x0000093d
     d88:	00000c5d 	.word	0x00000c5d

00000d8c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     d8c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     d8e:	78d3      	ldrb	r3, [r2, #3]
     d90:	2b00      	cmp	r3, #0
     d92:	d135      	bne.n	e00 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     d94:	7813      	ldrb	r3, [r2, #0]
     d96:	2b80      	cmp	r3, #128	; 0x80
     d98:	d029      	beq.n	dee <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     d9a:	061b      	lsls	r3, r3, #24
     d9c:	2480      	movs	r4, #128	; 0x80
     d9e:	0264      	lsls	r4, r4, #9
     da0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     da2:	7854      	ldrb	r4, [r2, #1]
     da4:	2502      	movs	r5, #2
     da6:	43ac      	bics	r4, r5
     da8:	d106      	bne.n	db8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     daa:	7894      	ldrb	r4, [r2, #2]
     dac:	2c00      	cmp	r4, #0
     dae:	d120      	bne.n	df2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     db0:	2480      	movs	r4, #128	; 0x80
     db2:	02a4      	lsls	r4, r4, #10
     db4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     db6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     db8:	7854      	ldrb	r4, [r2, #1]
     dba:	3c01      	subs	r4, #1
     dbc:	2c01      	cmp	r4, #1
     dbe:	d91c      	bls.n	dfa <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     dc0:	040d      	lsls	r5, r1, #16
     dc2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     dc4:	24a0      	movs	r4, #160	; 0xa0
     dc6:	05e4      	lsls	r4, r4, #23
     dc8:	432c      	orrs	r4, r5
     dca:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     dcc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     dce:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     dd0:	24d0      	movs	r4, #208	; 0xd0
     dd2:	0624      	lsls	r4, r4, #24
     dd4:	432c      	orrs	r4, r5
     dd6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     dd8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     dda:	78d4      	ldrb	r4, [r2, #3]
     ddc:	2c00      	cmp	r4, #0
     dde:	d122      	bne.n	e26 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     de0:	035b      	lsls	r3, r3, #13
     de2:	d51c      	bpl.n	e1e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     de4:	7893      	ldrb	r3, [r2, #2]
     de6:	2b01      	cmp	r3, #1
     de8:	d01e      	beq.n	e28 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     dea:	6141      	str	r1, [r0, #20]
     dec:	e017      	b.n	e1e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
     dee:	2300      	movs	r3, #0
     df0:	e7d7      	b.n	da2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     df2:	24c0      	movs	r4, #192	; 0xc0
     df4:	02e4      	lsls	r4, r4, #11
     df6:	4323      	orrs	r3, r4
     df8:	e7dd      	b.n	db6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     dfa:	4c0d      	ldr	r4, [pc, #52]	; (e30 <_system_pinmux_config+0xa4>)
     dfc:	4023      	ands	r3, r4
     dfe:	e7df      	b.n	dc0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
     e00:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     e02:	040c      	lsls	r4, r1, #16
     e04:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     e06:	23a0      	movs	r3, #160	; 0xa0
     e08:	05db      	lsls	r3, r3, #23
     e0a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     e0c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     e0e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     e10:	23d0      	movs	r3, #208	; 0xd0
     e12:	061b      	lsls	r3, r3, #24
     e14:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     e16:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
     e18:	78d3      	ldrb	r3, [r2, #3]
     e1a:	2b00      	cmp	r3, #0
     e1c:	d103      	bne.n	e26 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     e1e:	7853      	ldrb	r3, [r2, #1]
     e20:	3b01      	subs	r3, #1
     e22:	2b01      	cmp	r3, #1
     e24:	d902      	bls.n	e2c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
     e26:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
     e28:	6181      	str	r1, [r0, #24]
     e2a:	e7f8      	b.n	e1e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
     e2c:	6081      	str	r1, [r0, #8]
}
     e2e:	e7fa      	b.n	e26 <_system_pinmux_config+0x9a>
     e30:	fffbffff 	.word	0xfffbffff

00000e34 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     e34:	b510      	push	{r4, lr}
     e36:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     e38:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     e3a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     e3c:	2900      	cmp	r1, #0
     e3e:	d104      	bne.n	e4a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     e40:	0943      	lsrs	r3, r0, #5
     e42:	01db      	lsls	r3, r3, #7
     e44:	4905      	ldr	r1, [pc, #20]	; (e5c <system_pinmux_pin_set_config+0x28>)
     e46:	468c      	mov	ip, r1
     e48:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     e4a:	241f      	movs	r4, #31
     e4c:	4020      	ands	r0, r4
     e4e:	2101      	movs	r1, #1
     e50:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
     e52:	0018      	movs	r0, r3
     e54:	4b02      	ldr	r3, [pc, #8]	; (e60 <system_pinmux_pin_set_config+0x2c>)
     e56:	4798      	blx	r3
}
     e58:	bd10      	pop	{r4, pc}
     e5a:	46c0      	nop			; (mov r8, r8)
     e5c:	40002800 	.word	0x40002800
     e60:	00000d8d 	.word	0x00000d8d

00000e64 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     e64:	4770      	bx	lr
	...

00000e68 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     e68:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     e6a:	4b05      	ldr	r3, [pc, #20]	; (e80 <system_init+0x18>)
     e6c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
     e6e:	4b05      	ldr	r3, [pc, #20]	; (e84 <system_init+0x1c>)
     e70:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
     e72:	4b05      	ldr	r3, [pc, #20]	; (e88 <system_init+0x20>)
     e74:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     e76:	4b05      	ldr	r3, [pc, #20]	; (e8c <system_init+0x24>)
     e78:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
     e7a:	4b05      	ldr	r3, [pc, #20]	; (e90 <system_init+0x28>)
     e7c:	4798      	blx	r3
}
     e7e:	bd10      	pop	{r4, pc}
     e80:	00000a5d 	.word	0x00000a5d
     e84:	0000096d 	.word	0x0000096d
     e88:	00000e65 	.word	0x00000e65
     e8c:	00000e65 	.word	0x00000e65
     e90:	00000e65 	.word	0x00000e65

00000e94 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     e94:	e7fe      	b.n	e94 <Dummy_Handler>
	...

00000e98 <Reset_Handler>:
{
     e98:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     e9a:	4a1a      	ldr	r2, [pc, #104]	; (f04 <Reset_Handler+0x6c>)
     e9c:	4b1a      	ldr	r3, [pc, #104]	; (f08 <Reset_Handler+0x70>)
     e9e:	429a      	cmp	r2, r3
     ea0:	d011      	beq.n	ec6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     ea2:	001a      	movs	r2, r3
     ea4:	4b19      	ldr	r3, [pc, #100]	; (f0c <Reset_Handler+0x74>)
     ea6:	429a      	cmp	r2, r3
     ea8:	d20d      	bcs.n	ec6 <Reset_Handler+0x2e>
     eaa:	4a19      	ldr	r2, [pc, #100]	; (f10 <Reset_Handler+0x78>)
     eac:	3303      	adds	r3, #3
     eae:	1a9b      	subs	r3, r3, r2
     eb0:	089b      	lsrs	r3, r3, #2
     eb2:	3301      	adds	r3, #1
     eb4:	009b      	lsls	r3, r3, #2
     eb6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     eb8:	4813      	ldr	r0, [pc, #76]	; (f08 <Reset_Handler+0x70>)
     eba:	4912      	ldr	r1, [pc, #72]	; (f04 <Reset_Handler+0x6c>)
     ebc:	588c      	ldr	r4, [r1, r2]
     ebe:	5084      	str	r4, [r0, r2]
     ec0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     ec2:	429a      	cmp	r2, r3
     ec4:	d1fa      	bne.n	ebc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     ec6:	4a13      	ldr	r2, [pc, #76]	; (f14 <Reset_Handler+0x7c>)
     ec8:	4b13      	ldr	r3, [pc, #76]	; (f18 <Reset_Handler+0x80>)
     eca:	429a      	cmp	r2, r3
     ecc:	d20a      	bcs.n	ee4 <Reset_Handler+0x4c>
     ece:	43d3      	mvns	r3, r2
     ed0:	4911      	ldr	r1, [pc, #68]	; (f18 <Reset_Handler+0x80>)
     ed2:	185b      	adds	r3, r3, r1
     ed4:	2103      	movs	r1, #3
     ed6:	438b      	bics	r3, r1
     ed8:	3304      	adds	r3, #4
     eda:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     edc:	2100      	movs	r1, #0
     ede:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     ee0:	4293      	cmp	r3, r2
     ee2:	d1fc      	bne.n	ede <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     ee4:	4a0d      	ldr	r2, [pc, #52]	; (f1c <Reset_Handler+0x84>)
     ee6:	21ff      	movs	r1, #255	; 0xff
     ee8:	4b0d      	ldr	r3, [pc, #52]	; (f20 <Reset_Handler+0x88>)
     eea:	438b      	bics	r3, r1
     eec:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     eee:	4a0d      	ldr	r2, [pc, #52]	; (f24 <Reset_Handler+0x8c>)
     ef0:	6853      	ldr	r3, [r2, #4]
     ef2:	397f      	subs	r1, #127	; 0x7f
     ef4:	430b      	orrs	r3, r1
     ef6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     ef8:	4b0b      	ldr	r3, [pc, #44]	; (f28 <Reset_Handler+0x90>)
     efa:	4798      	blx	r3
        main();
     efc:	4b0b      	ldr	r3, [pc, #44]	; (f2c <Reset_Handler+0x94>)
     efe:	4798      	blx	r3
     f00:	e7fe      	b.n	f00 <Reset_Handler+0x68>
     f02:	46c0      	nop			; (mov r8, r8)
     f04:	0000145c 	.word	0x0000145c
     f08:	20000000 	.word	0x20000000
     f0c:	20000004 	.word	0x20000004
     f10:	20000004 	.word	0x20000004
     f14:	20000004 	.word	0x20000004
     f18:	20000078 	.word	0x20000078
     f1c:	e000ed00 	.word	0xe000ed00
     f20:	00000000 	.word	0x00000000
     f24:	41004000 	.word	0x41004000
     f28:	0000121d 	.word	0x0000121d
     f2c:	000010b1 	.word	0x000010b1

00000f30 <tc_callback_to_toggle_led>:
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     f30:	4b17      	ldr	r3, [pc, #92]	; (f90 <tc_callback_to_toggle_led+0x60>)
     f32:	681a      	ldr	r2, [r3, #0]
     f34:	8c13      	ldrh	r3, [r2, #32]
     f36:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     f38:	2b00      	cmp	r3, #0
     f3a:	d1fb      	bne.n	f34 <tc_callback_to_toggle_led+0x4>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     f3c:	7e13      	ldrb	r3, [r2, #24]
     f3e:	2102      	movs	r1, #2
     f40:	430b      	orrs	r3, r1
     f42:	7613      	strb	r3, [r2, #24]
     f44:	8c13      	ldrh	r3, [r2, #32]
     f46:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     f48:	2b00      	cmp	r3, #0
     f4a:	d1fb      	bne.n	f44 <tc_callback_to_toggle_led+0x14>
	uint32_t int_flags = adc_module->INTFLAG.reg;
     f4c:	7991      	ldrb	r1, [r2, #6]
     f4e:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
     f50:	3301      	adds	r3, #1
     f52:	400b      	ands	r3, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
     f54:	0748      	lsls	r0, r1, #29
     f56:	d501      	bpl.n	f5c <tc_callback_to_toggle_led+0x2c>
		status_flags |= ADC_STATUS_WINDOW;
     f58:	2002      	movs	r0, #2
     f5a:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     f5c:	0789      	lsls	r1, r1, #30
     f5e:	d501      	bpl.n	f64 <tc_callback_to_toggle_led+0x34>
		status_flags |= ADC_STATUS_OVERRUN;
     f60:	2104      	movs	r1, #4
     f62:	430b      	orrs	r3, r1
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
     f64:	07db      	lsls	r3, r3, #31
     f66:	d400      	bmi.n	f6a <tc_callback_to_toggle_led+0x3a>
	adc_start_conversion(&adc_instance);
	uint16_t result;
	adc_read(&adc_instance, &result);
	//delay(50);
	//port_pin_toggle_output_level(LED0_PIN);
}
     f68:	4770      	bx	lr
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
     f6a:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	adc_module->INTFLAG.reg = int_flags;
     f6c:	2301      	movs	r3, #1
     f6e:	7193      	strb	r3, [r2, #6]
	uint32_t int_flags = adc_module->INTFLAG.reg;
     f70:	7991      	ldrb	r1, [r2, #6]
     f72:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
     f74:	400b      	ands	r3, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
     f76:	0748      	lsls	r0, r1, #29
     f78:	d501      	bpl.n	f7e <tc_callback_to_toggle_led+0x4e>
		status_flags |= ADC_STATUS_WINDOW;
     f7a:	2002      	movs	r0, #2
     f7c:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     f7e:	0789      	lsls	r1, r1, #30
     f80:	d501      	bpl.n	f86 <tc_callback_to_toggle_led+0x56>
		status_flags |= ADC_STATUS_OVERRUN;
     f82:	2104      	movs	r1, #4
     f84:	430b      	orrs	r3, r1

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
     f86:	075b      	lsls	r3, r3, #29
     f88:	d5ee      	bpl.n	f68 <tc_callback_to_toggle_led+0x38>
	adc_module->INTFLAG.reg = int_flags;
     f8a:	2302      	movs	r3, #2
     f8c:	7193      	strb	r3, [r2, #6]
     f8e:	e7eb      	b.n	f68 <tc_callback_to_toggle_led+0x38>
     f90:	20000070 	.word	0x20000070

00000f94 <configure_tc>:


//! [setup]
void configure_tc(void)
{
     f94:	b510      	push	{r4, lr}
     f96:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     f98:	2300      	movs	r3, #0
     f9a:	466a      	mov	r2, sp
     f9c:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     f9e:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     fa0:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = true;
     fa2:	2201      	movs	r2, #1
     fa4:	4669      	mov	r1, sp
     fa6:	704a      	strb	r2, [r1, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
     fa8:	708b      	strb	r3, [r1, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     faa:	720b      	strb	r3, [r1, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     fac:	724b      	strb	r3, [r1, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     fae:	728b      	strb	r3, [r1, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     fb0:	72cb      	strb	r3, [r1, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     fb2:	730b      	strb	r3, [r1, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     fb4:	738b      	strb	r3, [r1, #14]
	config->oneshot                    = false;
     fb6:	734b      	strb	r3, [r1, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     fb8:	740b      	strb	r3, [r1, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     fba:	9305      	str	r3, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     fbc:	9306      	str	r3, [sp, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     fbe:	770b      	strb	r3, [r1, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     fc0:	9308      	str	r3, [sp, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     fc2:	9309      	str	r3, [sp, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     fc4:	850b      	strh	r3, [r1, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     fc6:	854b      	strh	r3, [r1, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     fc8:	858b      	strh	r3, [r1, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
     fca:	3334      	adds	r3, #52	; 0x34
     fcc:	2200      	movs	r2, #0
     fce:	54ca      	strb	r2, [r1, r3]
	struct tc_config config_tc;
	//setup_config_defaults
	tc_get_config_defaults(&config_tc);

	//setup_change_config
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
     fd0:	3b30      	subs	r3, #48	; 0x30
     fd2:	70cb      	strb	r3, [r1, #3]
	config_tc.clock_source = GCLK_GENERATOR_0;
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024;
     fd4:	23e0      	movs	r3, #224	; 0xe0
     fd6:	00db      	lsls	r3, r3, #3
     fd8:	808b      	strh	r3, [r1, #4]
	config_tc.counter_8_bit.period = 255;
     fda:	22ff      	movs	r2, #255	; 0xff
     fdc:	2329      	movs	r3, #41	; 0x29
     fde:	54ca      	strb	r2, [r1, r3]
	config_tc.counter_8_bit.compare_capture_channel[0] = 50;
     fe0:	3acd      	subs	r2, #205	; 0xcd
     fe2:	3301      	adds	r3, #1
     fe4:	54ca      	strb	r2, [r1, r3]

	//setup_set_config
	tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
     fe6:	4c08      	ldr	r4, [pc, #32]	; (1008 <configure_tc+0x74>)
     fe8:	466a      	mov	r2, sp
     fea:	4908      	ldr	r1, [pc, #32]	; (100c <configure_tc+0x78>)
     fec:	0020      	movs	r0, r4
     fee:	4b08      	ldr	r3, [pc, #32]	; (1010 <configure_tc+0x7c>)
     ff0:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     ff2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     ff4:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
     ff6:	2b00      	cmp	r3, #0
     ff8:	d1fc      	bne.n	ff4 <configure_tc+0x60>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     ffa:	6813      	ldr	r3, [r2, #0]
     ffc:	2102      	movs	r1, #2
     ffe:	430b      	orrs	r3, r1
    1000:	6013      	str	r3, [r2, #0]
	
	//setup_enable
	tc_enable(&tc_instance);
}
    1002:	b00e      	add	sp, #56	; 0x38
    1004:	bd10      	pop	{r4, pc}
    1006:	46c0      	nop			; (mov r8, r8)
    1008:	20000054 	.word	0x20000054
    100c:	42002c00 	.word	0x42002c00
    1010:	00000525 	.word	0x00000525

00001014 <configure_adc>:

void configure_adc(void)
{
    1014:	b510      	push	{r4, lr}
    1016:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    1018:	a801      	add	r0, sp, #4
    101a:	4b0e      	ldr	r3, [pc, #56]	; (1054 <configure_adc+0x40>)
    101c:	4798      	blx	r3
	adc_init(&adc_instance, ADC, &config_adc);
    101e:	4c0e      	ldr	r4, [pc, #56]	; (1058 <configure_adc+0x44>)
    1020:	aa01      	add	r2, sp, #4
    1022:	490e      	ldr	r1, [pc, #56]	; (105c <configure_adc+0x48>)
    1024:	0020      	movs	r0, r4
    1026:	4b0e      	ldr	r3, [pc, #56]	; (1060 <configure_adc+0x4c>)
    1028:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    102a:	6822      	ldr	r2, [r4, #0]
    102c:	8c13      	ldrh	r3, [r2, #32]
    102e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    1030:	2b00      	cmp	r3, #0
    1032:	d1fb      	bne.n	102c <configure_adc+0x18>
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    1034:	3307      	adds	r3, #7
    1036:	7113      	strb	r3, [r2, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    1038:	7193      	strb	r3, [r2, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    103a:	7813      	ldrb	r3, [r2, #0]
    103c:	2102      	movs	r1, #2
    103e:	430b      	orrs	r3, r1
    1040:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    1042:	4b05      	ldr	r3, [pc, #20]	; (1058 <configure_adc+0x44>)
    1044:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    1046:	8c13      	ldrh	r3, [r2, #32]
    1048:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    104a:	2b00      	cmp	r3, #0
    104c:	d1fb      	bne.n	1046 <configure_adc+0x32>
	adc_enable(&adc_instance);
}
    104e:	b00c      	add	sp, #48	; 0x30
    1050:	bd10      	pop	{r4, pc}
    1052:	46c0      	nop			; (mov r8, r8)
    1054:	00000115 	.word	0x00000115
    1058:	20000070 	.word	0x20000070
    105c:	43000c00 	.word	0x43000c00
    1060:	00000159 	.word	0x00000159

00001064 <configure_tc_callbacks>:

void configure_tc_callbacks(void)
{
    1064:	b510      	push	{r4, lr}
	//! [setup_register_callback]
	tc_register_callback(&tc_instance, tc_callback_to_toggle_led,
    1066:	4c0c      	ldr	r4, [pc, #48]	; (1098 <configure_tc_callbacks+0x34>)
    1068:	2202      	movs	r2, #2
    106a:	490c      	ldr	r1, [pc, #48]	; (109c <configure_tc_callbacks+0x38>)
    106c:	0020      	movs	r0, r4
    106e:	4b0c      	ldr	r3, [pc, #48]	; (10a0 <configure_tc_callbacks+0x3c>)
    1070:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1072:	6820      	ldr	r0, [r4, #0]
    1074:	4b0b      	ldr	r3, [pc, #44]	; (10a4 <configure_tc_callbacks+0x40>)
    1076:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1078:	4b0b      	ldr	r3, [pc, #44]	; (10a8 <configure_tc_callbacks+0x44>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    107a:	5c1b      	ldrb	r3, [r3, r0]
    107c:	221f      	movs	r2, #31
    107e:	401a      	ands	r2, r3
    1080:	2301      	movs	r3, #1
    1082:	4093      	lsls	r3, r2
    1084:	4a09      	ldr	r2, [pc, #36]	; (10ac <configure_tc_callbacks+0x48>)
    1086:	6013      	str	r3, [r2, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    1088:	7e63      	ldrb	r3, [r4, #25]
    108a:	2210      	movs	r2, #16
    108c:	4313      	orrs	r3, r2
    108e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    1090:	6823      	ldr	r3, [r4, #0]
    1092:	2210      	movs	r2, #16
    1094:	725a      	strb	r2, [r3, #9]


	//setup_enable_callback
	tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);

}
    1096:	bd10      	pop	{r4, pc}
    1098:	20000054 	.word	0x20000054
    109c:	00000f31 	.word	0x00000f31
    10a0:	00000815 	.word	0x00000815
    10a4:	000004e9 	.word	0x000004e9
    10a8:	00001434 	.word	0x00001434
    10ac:	e000e100 	.word	0xe000e100

000010b0 <main>:

int main(void)
{
    10b0:	b510      	push	{r4, lr}
	system_init();
    10b2:	4b0e      	ldr	r3, [pc, #56]	; (10ec <main+0x3c>)
    10b4:	4798      	blx	r3

	//setup_init
	configure_tc();
    10b6:	4b0e      	ldr	r3, [pc, #56]	; (10f0 <main+0x40>)
    10b8:	4798      	blx	r3
	configure_adc();
    10ba:	4b0e      	ldr	r3, [pc, #56]	; (10f4 <main+0x44>)
    10bc:	4798      	blx	r3
	configure_tc_callbacks();
    10be:	4b0e      	ldr	r3, [pc, #56]	; (10f8 <main+0x48>)
    10c0:	4798      	blx	r3
	cpu_irq_enable();
    10c2:	2201      	movs	r2, #1
    10c4:	4b0d      	ldr	r3, [pc, #52]	; (10fc <main+0x4c>)
    10c6:	701a      	strb	r2, [r3, #0]
    10c8:	f3bf 8f5f 	dmb	sy
    10cc:	b662      	cpsie	i
	PM->SLEEPCFG.reg = sleep_mode;
    10ce:	3203      	adds	r2, #3
    10d0:	2380      	movs	r3, #128	; 0x80
    10d2:	05db      	lsls	r3, r3, #23
    10d4:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    10d6:	785a      	ldrb	r2, [r3, #1]
    10d8:	2a04      	cmp	r2, #4
    10da:	d1fc      	bne.n	10d6 <main+0x26>
    10dc:	2280      	movs	r2, #128	; 0x80
    10de:	00d2      	lsls	r2, r2, #3
    10e0:	4b07      	ldr	r3, [pc, #28]	; (1100 <main+0x50>)
    10e2:	619a      	str	r2, [r3, #24]
  __ASM volatile ("dsb");
    10e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    10e8:	bf30      	wfi
    10ea:	e7fb      	b.n	10e4 <main+0x34>
    10ec:	00000e69 	.word	0x00000e69
    10f0:	00000f95 	.word	0x00000f95
    10f4:	00001015 	.word	0x00001015
    10f8:	00001065 	.word	0x00001065
    10fc:	20000000 	.word	0x20000000
    1100:	40002880 	.word	0x40002880

00001104 <__udivsi3>:
    1104:	2200      	movs	r2, #0
    1106:	0843      	lsrs	r3, r0, #1
    1108:	428b      	cmp	r3, r1
    110a:	d374      	bcc.n	11f6 <__udivsi3+0xf2>
    110c:	0903      	lsrs	r3, r0, #4
    110e:	428b      	cmp	r3, r1
    1110:	d35f      	bcc.n	11d2 <__udivsi3+0xce>
    1112:	0a03      	lsrs	r3, r0, #8
    1114:	428b      	cmp	r3, r1
    1116:	d344      	bcc.n	11a2 <__udivsi3+0x9e>
    1118:	0b03      	lsrs	r3, r0, #12
    111a:	428b      	cmp	r3, r1
    111c:	d328      	bcc.n	1170 <__udivsi3+0x6c>
    111e:	0c03      	lsrs	r3, r0, #16
    1120:	428b      	cmp	r3, r1
    1122:	d30d      	bcc.n	1140 <__udivsi3+0x3c>
    1124:	22ff      	movs	r2, #255	; 0xff
    1126:	0209      	lsls	r1, r1, #8
    1128:	ba12      	rev	r2, r2
    112a:	0c03      	lsrs	r3, r0, #16
    112c:	428b      	cmp	r3, r1
    112e:	d302      	bcc.n	1136 <__udivsi3+0x32>
    1130:	1212      	asrs	r2, r2, #8
    1132:	0209      	lsls	r1, r1, #8
    1134:	d065      	beq.n	1202 <__udivsi3+0xfe>
    1136:	0b03      	lsrs	r3, r0, #12
    1138:	428b      	cmp	r3, r1
    113a:	d319      	bcc.n	1170 <__udivsi3+0x6c>
    113c:	e000      	b.n	1140 <__udivsi3+0x3c>
    113e:	0a09      	lsrs	r1, r1, #8
    1140:	0bc3      	lsrs	r3, r0, #15
    1142:	428b      	cmp	r3, r1
    1144:	d301      	bcc.n	114a <__udivsi3+0x46>
    1146:	03cb      	lsls	r3, r1, #15
    1148:	1ac0      	subs	r0, r0, r3
    114a:	4152      	adcs	r2, r2
    114c:	0b83      	lsrs	r3, r0, #14
    114e:	428b      	cmp	r3, r1
    1150:	d301      	bcc.n	1156 <__udivsi3+0x52>
    1152:	038b      	lsls	r3, r1, #14
    1154:	1ac0      	subs	r0, r0, r3
    1156:	4152      	adcs	r2, r2
    1158:	0b43      	lsrs	r3, r0, #13
    115a:	428b      	cmp	r3, r1
    115c:	d301      	bcc.n	1162 <__udivsi3+0x5e>
    115e:	034b      	lsls	r3, r1, #13
    1160:	1ac0      	subs	r0, r0, r3
    1162:	4152      	adcs	r2, r2
    1164:	0b03      	lsrs	r3, r0, #12
    1166:	428b      	cmp	r3, r1
    1168:	d301      	bcc.n	116e <__udivsi3+0x6a>
    116a:	030b      	lsls	r3, r1, #12
    116c:	1ac0      	subs	r0, r0, r3
    116e:	4152      	adcs	r2, r2
    1170:	0ac3      	lsrs	r3, r0, #11
    1172:	428b      	cmp	r3, r1
    1174:	d301      	bcc.n	117a <__udivsi3+0x76>
    1176:	02cb      	lsls	r3, r1, #11
    1178:	1ac0      	subs	r0, r0, r3
    117a:	4152      	adcs	r2, r2
    117c:	0a83      	lsrs	r3, r0, #10
    117e:	428b      	cmp	r3, r1
    1180:	d301      	bcc.n	1186 <__udivsi3+0x82>
    1182:	028b      	lsls	r3, r1, #10
    1184:	1ac0      	subs	r0, r0, r3
    1186:	4152      	adcs	r2, r2
    1188:	0a43      	lsrs	r3, r0, #9
    118a:	428b      	cmp	r3, r1
    118c:	d301      	bcc.n	1192 <__udivsi3+0x8e>
    118e:	024b      	lsls	r3, r1, #9
    1190:	1ac0      	subs	r0, r0, r3
    1192:	4152      	adcs	r2, r2
    1194:	0a03      	lsrs	r3, r0, #8
    1196:	428b      	cmp	r3, r1
    1198:	d301      	bcc.n	119e <__udivsi3+0x9a>
    119a:	020b      	lsls	r3, r1, #8
    119c:	1ac0      	subs	r0, r0, r3
    119e:	4152      	adcs	r2, r2
    11a0:	d2cd      	bcs.n	113e <__udivsi3+0x3a>
    11a2:	09c3      	lsrs	r3, r0, #7
    11a4:	428b      	cmp	r3, r1
    11a6:	d301      	bcc.n	11ac <__udivsi3+0xa8>
    11a8:	01cb      	lsls	r3, r1, #7
    11aa:	1ac0      	subs	r0, r0, r3
    11ac:	4152      	adcs	r2, r2
    11ae:	0983      	lsrs	r3, r0, #6
    11b0:	428b      	cmp	r3, r1
    11b2:	d301      	bcc.n	11b8 <__udivsi3+0xb4>
    11b4:	018b      	lsls	r3, r1, #6
    11b6:	1ac0      	subs	r0, r0, r3
    11b8:	4152      	adcs	r2, r2
    11ba:	0943      	lsrs	r3, r0, #5
    11bc:	428b      	cmp	r3, r1
    11be:	d301      	bcc.n	11c4 <__udivsi3+0xc0>
    11c0:	014b      	lsls	r3, r1, #5
    11c2:	1ac0      	subs	r0, r0, r3
    11c4:	4152      	adcs	r2, r2
    11c6:	0903      	lsrs	r3, r0, #4
    11c8:	428b      	cmp	r3, r1
    11ca:	d301      	bcc.n	11d0 <__udivsi3+0xcc>
    11cc:	010b      	lsls	r3, r1, #4
    11ce:	1ac0      	subs	r0, r0, r3
    11d0:	4152      	adcs	r2, r2
    11d2:	08c3      	lsrs	r3, r0, #3
    11d4:	428b      	cmp	r3, r1
    11d6:	d301      	bcc.n	11dc <__udivsi3+0xd8>
    11d8:	00cb      	lsls	r3, r1, #3
    11da:	1ac0      	subs	r0, r0, r3
    11dc:	4152      	adcs	r2, r2
    11de:	0883      	lsrs	r3, r0, #2
    11e0:	428b      	cmp	r3, r1
    11e2:	d301      	bcc.n	11e8 <__udivsi3+0xe4>
    11e4:	008b      	lsls	r3, r1, #2
    11e6:	1ac0      	subs	r0, r0, r3
    11e8:	4152      	adcs	r2, r2
    11ea:	0843      	lsrs	r3, r0, #1
    11ec:	428b      	cmp	r3, r1
    11ee:	d301      	bcc.n	11f4 <__udivsi3+0xf0>
    11f0:	004b      	lsls	r3, r1, #1
    11f2:	1ac0      	subs	r0, r0, r3
    11f4:	4152      	adcs	r2, r2
    11f6:	1a41      	subs	r1, r0, r1
    11f8:	d200      	bcs.n	11fc <__udivsi3+0xf8>
    11fa:	4601      	mov	r1, r0
    11fc:	4152      	adcs	r2, r2
    11fe:	4610      	mov	r0, r2
    1200:	4770      	bx	lr
    1202:	e7ff      	b.n	1204 <__udivsi3+0x100>
    1204:	b501      	push	{r0, lr}
    1206:	2000      	movs	r0, #0
    1208:	f000 f806 	bl	1218 <__aeabi_idiv0>
    120c:	bd02      	pop	{r1, pc}
    120e:	46c0      	nop			; (mov r8, r8)

00001210 <__aeabi_uidivmod>:
    1210:	2900      	cmp	r1, #0
    1212:	d0f7      	beq.n	1204 <__udivsi3+0x100>
    1214:	e776      	b.n	1104 <__udivsi3>
    1216:	4770      	bx	lr

00001218 <__aeabi_idiv0>:
    1218:	4770      	bx	lr
    121a:	46c0      	nop			; (mov r8, r8)

0000121c <__libc_init_array>:
    121c:	b570      	push	{r4, r5, r6, lr}
    121e:	2600      	movs	r6, #0
    1220:	4d0c      	ldr	r5, [pc, #48]	; (1254 <__libc_init_array+0x38>)
    1222:	4c0d      	ldr	r4, [pc, #52]	; (1258 <__libc_init_array+0x3c>)
    1224:	1b64      	subs	r4, r4, r5
    1226:	10a4      	asrs	r4, r4, #2
    1228:	42a6      	cmp	r6, r4
    122a:	d109      	bne.n	1240 <__libc_init_array+0x24>
    122c:	2600      	movs	r6, #0
    122e:	f000 f905 	bl	143c <_init>
    1232:	4d0a      	ldr	r5, [pc, #40]	; (125c <__libc_init_array+0x40>)
    1234:	4c0a      	ldr	r4, [pc, #40]	; (1260 <__libc_init_array+0x44>)
    1236:	1b64      	subs	r4, r4, r5
    1238:	10a4      	asrs	r4, r4, #2
    123a:	42a6      	cmp	r6, r4
    123c:	d105      	bne.n	124a <__libc_init_array+0x2e>
    123e:	bd70      	pop	{r4, r5, r6, pc}
    1240:	00b3      	lsls	r3, r6, #2
    1242:	58eb      	ldr	r3, [r5, r3]
    1244:	4798      	blx	r3
    1246:	3601      	adds	r6, #1
    1248:	e7ee      	b.n	1228 <__libc_init_array+0xc>
    124a:	00b3      	lsls	r3, r6, #2
    124c:	58eb      	ldr	r3, [r5, r3]
    124e:	4798      	blx	r3
    1250:	3601      	adds	r6, #1
    1252:	e7f2      	b.n	123a <__libc_init_array+0x1e>
    1254:	00001448 	.word	0x00001448
    1258:	00001448 	.word	0x00001448
    125c:	00001448 	.word	0x00001448
    1260:	0000144c 	.word	0x0000144c

00001264 <memcpy>:
    1264:	2300      	movs	r3, #0
    1266:	b510      	push	{r4, lr}
    1268:	429a      	cmp	r2, r3
    126a:	d100      	bne.n	126e <memcpy+0xa>
    126c:	bd10      	pop	{r4, pc}
    126e:	5ccc      	ldrb	r4, [r1, r3]
    1270:	54c4      	strb	r4, [r0, r3]
    1272:	3301      	adds	r3, #1
    1274:	e7f8      	b.n	1268 <memcpy+0x4>
    1276:	0000      	movs	r0, r0
    1278:	000002ac 	.word	0x000002ac
    127c:	000004dc 	.word	0x000004dc
    1280:	000004dc 	.word	0x000004dc
    1284:	000004dc 	.word	0x000004dc
    1288:	000004dc 	.word	0x000004dc
    128c:	000004dc 	.word	0x000004dc
    1290:	000004dc 	.word	0x000004dc
    1294:	000004dc 	.word	0x000004dc
    1298:	000004dc 	.word	0x000004dc
    129c:	000004dc 	.word	0x000004dc
    12a0:	000004dc 	.word	0x000004dc
    12a4:	000004dc 	.word	0x000004dc
    12a8:	000004dc 	.word	0x000004dc
    12ac:	000004dc 	.word	0x000004dc
    12b0:	000004dc 	.word	0x000004dc
    12b4:	000004dc 	.word	0x000004dc
    12b8:	00000294 	.word	0x00000294
    12bc:	000004dc 	.word	0x000004dc
    12c0:	000004dc 	.word	0x000004dc
    12c4:	000004dc 	.word	0x000004dc
    12c8:	000004dc 	.word	0x000004dc
    12cc:	000004dc 	.word	0x000004dc
    12d0:	000004dc 	.word	0x000004dc
    12d4:	000004dc 	.word	0x000004dc
    12d8:	000004dc 	.word	0x000004dc
    12dc:	000004dc 	.word	0x000004dc
    12e0:	000004dc 	.word	0x000004dc
    12e4:	000004dc 	.word	0x000004dc
    12e8:	000004dc 	.word	0x000004dc
    12ec:	000004dc 	.word	0x000004dc
    12f0:	000004dc 	.word	0x000004dc
    12f4:	000004dc 	.word	0x000004dc
    12f8:	000002a4 	.word	0x000002a4
    12fc:	000004dc 	.word	0x000004dc
    1300:	000004dc 	.word	0x000004dc
    1304:	000004dc 	.word	0x000004dc
    1308:	000004dc 	.word	0x000004dc
    130c:	000004dc 	.word	0x000004dc
    1310:	000004dc 	.word	0x000004dc
    1314:	000004dc 	.word	0x000004dc
    1318:	000004dc 	.word	0x000004dc
    131c:	000004dc 	.word	0x000004dc
    1320:	000004dc 	.word	0x000004dc
    1324:	000004dc 	.word	0x000004dc
    1328:	000004dc 	.word	0x000004dc
    132c:	000004dc 	.word	0x000004dc
    1330:	000004dc 	.word	0x000004dc
    1334:	000004dc 	.word	0x000004dc
    1338:	0000029c 	.word	0x0000029c
    133c:	000002b4 	.word	0x000002b4
    1340:	0000027c 	.word	0x0000027c
    1344:	0000028c 	.word	0x0000028c
    1348:	00000284 	.word	0x00000284
    134c:	00000002 	.word	0x00000002
    1350:	00000003 	.word	0x00000003
    1354:	00000028 	.word	0x00000028
    1358:	00000029 	.word	0x00000029
    135c:	00000004 	.word	0x00000004
    1360:	00000005 	.word	0x00000005
    1364:	00000006 	.word	0x00000006
    1368:	00000007 	.word	0x00000007
    136c:	00000020 	.word	0x00000020
    1370:	00000021 	.word	0x00000021
    1374:	00000022 	.word	0x00000022
    1378:	00000023 	.word	0x00000023
    137c:	00000024 	.word	0x00000024
    1380:	00000025 	.word	0x00000025
    1384:	00000026 	.word	0x00000026
    1388:	00000027 	.word	0x00000027
    138c:	00000008 	.word	0x00000008
    1390:	00000009 	.word	0x00000009
    1394:	0000000a 	.word	0x0000000a
    1398:	0000000b 	.word	0x0000000b
    139c:	0000ffff 	.word	0x0000ffff
    13a0:	0000ffff 	.word	0x0000ffff
    13a4:	0000ffff 	.word	0x0000ffff
    13a8:	0000ffff 	.word	0x0000ffff
    13ac:	00000616 	.word	0x00000616
    13b0:	0000070c 	.word	0x0000070c
    13b4:	00000716 	.word	0x00000716
    13b8:	00000720 	.word	0x00000720
    13bc:	0000072a 	.word	0x0000072a
    13c0:	0000075c 	.word	0x0000075c
    13c4:	00000766 	.word	0x00000766
    13c8:	00000770 	.word	0x00000770
    13cc:	0000077a 	.word	0x0000077a
    13d0:	00000784 	.word	0x00000784
    13d4:	42002000 	.word	0x42002000
    13d8:	42002400 	.word	0x42002400
    13dc:	42002800 	.word	0x42002800
    13e0:	42002c00 	.word	0x42002c00
    13e4:	43000800 	.word	0x43000800
    13e8:	00000002 	.word	0x00000002
    13ec:	00000100 	.word	0x00000100
    13f0:	00000002 	.word	0x00000002
    13f4:	00000200 	.word	0x00000200
    13f8:	00000002 	.word	0x00000002
    13fc:	00000400 	.word	0x00000400
    1400:	00000002 	.word	0x00000002
    1404:	00000800 	.word	0x00000800
    1408:	00000003 	.word	0x00000003
    140c:	00000004 	.word	0x00000004
    1410:	000009da 	.word	0x000009da
    1414:	000009d6 	.word	0x000009d6
    1418:	000009d6 	.word	0x000009d6
    141c:	00000a3c 	.word	0x00000a3c
    1420:	00000a3c 	.word	0x00000a3c
    1424:	000009f0 	.word	0x000009f0
    1428:	000009e0 	.word	0x000009e0
    142c:	000009f6 	.word	0x000009f6
    1430:	00000a2a 	.word	0x00000a2a

00001434 <tc_interrupt_vectors.14076>:
    1434:	14131211 00000015                       ........

0000143c <_init>:
    143c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    143e:	46c0      	nop			; (mov r8, r8)
    1440:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1442:	bc08      	pop	{r3}
    1444:	469e      	mov	lr, r3
    1446:	4770      	bx	lr

00001448 <__init_array_start>:
    1448:	000000dd 	.word	0x000000dd

0000144c <_fini>:
    144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    144e:	46c0      	nop			; (mov r8, r8)
    1450:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1452:	bc08      	pop	{r3}
    1454:	469e      	mov	lr, r3
    1456:	4770      	bx	lr

00001458 <__fini_array_start>:
    1458:	000000b5 	.word	0x000000b5
