
ADC_QUICK_START_CALLBACK1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001158  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00001158  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020004  2**0
                  CONTENTS
  3 .bss          00000174  20000004  0000115c  00020004  2**2
                  ALLOC
  4 .stack        00002000  20000178  000012d0  00020004  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001355b  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000237d  00000000  00000000  000335e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000002b8  00000000  00000000  0003595d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000298  00000000  00000000  00035c15  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b086  00000000  00000000  00035ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000785c  00000000  00000000  00050f33  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00099034  00000000  00000000  0005878f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000660  00000000  00000000  000f17c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000022f6  00000000  00000000  000f1e24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 21 00 20 01 0c 00 00 fd 0b 00 00 fd 0b 00 00     x!. ............
	...
      2c:	fd 0b 00 00 00 00 00 00 00 00 00 00 fd 0b 00 00     ................
      3c:	fd 0b 00 00 fd 0b 00 00 fd 0b 00 00 fd 0b 00 00     ................
      4c:	fd 0b 00 00 fd 0b 00 00 fd 0b 00 00 fd 0b 00 00     ................
      5c:	fd 0b 00 00 fd 0b 00 00 fd 0b 00 00 fd 0b 00 00     ................
      6c:	fd 0b 00 00 fd 0b 00 00 fd 0b 00 00 fd 0b 00 00     ................
      7c:	fd 0b 00 00 fd 0b 00 00 fd 0b 00 00 fd 0b 00 00     ................
      8c:	fd 0b 00 00 fd 0b 00 00 fd 0b 00 00 ed 05 00 00     ................
      9c:	fd 0b 00 00 fd 0b 00 00 fd 0b 00 00 fd 0b 00 00     ................
      ac:	fd 0b 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000004 	.word	0x20000004
      d4:	00000000 	.word	0x00000000
      d8:	00001158 	.word	0x00001158

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000008 	.word	0x20000008
     108:	00001158 	.word	0x00001158
     10c:	00001158 	.word	0x00001158
     110:	00000000 	.word	0x00000000

00000114 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     114:	4b0c      	ldr	r3, [pc, #48]	; (148 <cpu_irq_enter_critical+0x34>)
     116:	681b      	ldr	r3, [r3, #0]
     118:	2b00      	cmp	r3, #0
     11a:	d106      	bne.n	12a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     11c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     120:	2b00      	cmp	r3, #0
     122:	d007      	beq.n	134 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     124:	2200      	movs	r2, #0
     126:	4b09      	ldr	r3, [pc, #36]	; (14c <cpu_irq_enter_critical+0x38>)
     128:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     12a:	4a07      	ldr	r2, [pc, #28]	; (148 <cpu_irq_enter_critical+0x34>)
     12c:	6813      	ldr	r3, [r2, #0]
     12e:	3301      	adds	r3, #1
     130:	6013      	str	r3, [r2, #0]
}
     132:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     134:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     136:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     13a:	2200      	movs	r2, #0
     13c:	4b04      	ldr	r3, [pc, #16]	; (150 <cpu_irq_enter_critical+0x3c>)
     13e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     140:	3201      	adds	r2, #1
     142:	4b02      	ldr	r3, [pc, #8]	; (14c <cpu_irq_enter_critical+0x38>)
     144:	701a      	strb	r2, [r3, #0]
     146:	e7f0      	b.n	12a <cpu_irq_enter_critical+0x16>
     148:	20000020 	.word	0x20000020
     14c:	20000024 	.word	0x20000024
     150:	20000000 	.word	0x20000000

00000154 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     154:	4b08      	ldr	r3, [pc, #32]	; (178 <cpu_irq_leave_critical+0x24>)
     156:	681a      	ldr	r2, [r3, #0]
     158:	3a01      	subs	r2, #1
     15a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     15c:	681b      	ldr	r3, [r3, #0]
     15e:	2b00      	cmp	r3, #0
     160:	d109      	bne.n	176 <cpu_irq_leave_critical+0x22>
     162:	4b06      	ldr	r3, [pc, #24]	; (17c <cpu_irq_leave_critical+0x28>)
     164:	781b      	ldrb	r3, [r3, #0]
     166:	2b00      	cmp	r3, #0
     168:	d005      	beq.n	176 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     16a:	2201      	movs	r2, #1
     16c:	4b04      	ldr	r3, [pc, #16]	; (180 <cpu_irq_leave_critical+0x2c>)
     16e:	701a      	strb	r2, [r3, #0]
     170:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     174:	b662      	cpsie	i
	}
}
     176:	4770      	bx	lr
     178:	20000020 	.word	0x20000020
     17c:	20000024 	.word	0x20000024
     180:	20000000 	.word	0x20000000

00000184 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     184:	b5f0      	push	{r4, r5, r6, r7, lr}
     186:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     188:	ac01      	add	r4, sp, #4
     18a:	2501      	movs	r5, #1
     18c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     18e:	2700      	movs	r7, #0
     190:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     192:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     194:	0021      	movs	r1, r4
     196:	202a      	movs	r0, #42	; 0x2a
     198:	4e06      	ldr	r6, [pc, #24]	; (1b4 <system_board_init+0x30>)
     19a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     19c:	2280      	movs	r2, #128	; 0x80
     19e:	00d2      	lsls	r2, r2, #3
     1a0:	4b05      	ldr	r3, [pc, #20]	; (1b8 <system_board_init+0x34>)
     1a2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1a4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1a6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1a8:	0021      	movs	r1, r4
     1aa:	2002      	movs	r0, #2
     1ac:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     1ae:	b003      	add	sp, #12
     1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	0000070d 	.word	0x0000070d
     1b8:	40002880 	.word	0x40002880

000001bc <_adc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     1bc:	2000      	movs	r0, #0
     1be:	4770      	bx	lr

000001c0 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     1c0:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     1c2:	2300      	movs	r3, #0
     1c4:	2200      	movs	r2, #0
     1c6:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     1c8:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     1ca:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     1cc:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     1ce:	2100      	movs	r1, #0
     1d0:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     1d2:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     1d4:	61c3      	str	r3, [r0, #28]
#if SAMR30
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
     1d6:	2401      	movs	r4, #1
     1d8:	7104      	strb	r4, [r0, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     1da:	24c0      	movs	r4, #192	; 0xc0
     1dc:	0164      	lsls	r4, r4, #5
     1de:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     1e0:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     1e2:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
     1e4:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
     1e6:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
     1e8:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1ea:	242a      	movs	r4, #42	; 0x2a
     1ec:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
     1ee:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
     1f0:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
     1f2:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
     1f4:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
     1f6:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
     1f8:	3c06      	subs	r4, #6
     1fa:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     1fc:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     1fe:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     200:	7541      	strb	r1, [r0, #21]
}
     202:	bd10      	pop	{r4, pc}

00000204 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     204:	b5f0      	push	{r4, r5, r6, r7, lr}
     206:	46ce      	mov	lr, r9
     208:	b500      	push	{lr}
     20a:	b09a      	sub	sp, #104	; 0x68
     20c:	0005      	movs	r5, r0
     20e:	000c      	movs	r4, r1
     210:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     212:	0008      	movs	r0, r1
     214:	4bb2      	ldr	r3, [pc, #712]	; (4e0 <adc_init+0x2dc>)
     216:	4798      	blx	r3

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     218:	602c      	str	r4, [r5, #0]

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     21a:	4ab2      	ldr	r2, [pc, #712]	; (4e4 <adc_init+0x2e0>)
     21c:	6a13      	ldr	r3, [r2, #32]
     21e:	2108      	movs	r1, #8
     220:	430b      	orrs	r3, r1
     222:	6213      	str	r3, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     224:	7822      	ldrb	r2, [r4, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     226:	2305      	movs	r3, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     228:	07d2      	lsls	r2, r2, #31
     22a:	d504      	bpl.n	236 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
     22c:	0018      	movs	r0, r3
     22e:	b01a      	add	sp, #104	; 0x68
     230:	bc04      	pop	{r2}
     232:	4691      	mov	r9, r2
     234:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     236:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     238:	8c13      	ldrh	r3, [r2, #32]
     23a:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     23c:	2b00      	cmp	r3, #0
     23e:	d1fb      	bne.n	238 <adc_init+0x34>
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     240:	7822      	ldrb	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     242:	331c      	adds	r3, #28
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     244:	0792      	lsls	r2, r2, #30
     246:	d4f1      	bmi.n	22c <adc_init+0x28>
	module_inst->reference = config->reference;
     248:	7873      	ldrb	r3, [r6, #1]
     24a:	712b      	strb	r3, [r5, #4]
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     24c:	2b00      	cmp	r3, #0
     24e:	d104      	bne.n	25a <adc_init+0x56>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     250:	4aa5      	ldr	r2, [pc, #660]	; (4e8 <adc_init+0x2e4>)
     252:	69d3      	ldr	r3, [r2, #28]
     254:	2104      	movs	r1, #4
     256:	430b      	orrs	r3, r1
     258:	61d3      	str	r3, [r2, #28]
		module_inst->callback[i] = NULL;
     25a:	2300      	movs	r3, #0
     25c:	60ab      	str	r3, [r5, #8]
     25e:	60eb      	str	r3, [r5, #12]
     260:	612b      	str	r3, [r5, #16]
	module_inst->registered_callback_mask = 0;
     262:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
     264:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
     266:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
     268:	772b      	strb	r3, [r5, #28]
	_adc_instances[instance] = module_inst;
     26a:	0080      	lsls	r0, r0, #2
     26c:	4b9f      	ldr	r3, [pc, #636]	; (4ec <adc_init+0x2e8>)
     26e:	50c5      	str	r5, [r0, r3]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     270:	232a      	movs	r3, #42	; 0x2a
     272:	5cf3      	ldrb	r3, [r6, r3]
     274:	2b00      	cmp	r3, #0
     276:	d105      	bne.n	284 <adc_init+0x80>
     278:	7b33      	ldrb	r3, [r6, #12]
     27a:	2b00      	cmp	r3, #0
     27c:	d102      	bne.n	284 <adc_init+0x80>
		module_inst->software_trigger = true;
     27e:	3301      	adds	r3, #1
     280:	776b      	strb	r3, [r5, #29]
     282:	e001      	b.n	288 <adc_init+0x84>
		module_inst->software_trigger = false;
     284:	2300      	movs	r3, #0
     286:	776b      	strb	r3, [r5, #29]
	Adc *const adc_module = module_inst->hw;
     288:	682f      	ldr	r7, [r5, #0]
	gclk_chan_conf.source_generator = config->clock_source;
     28a:	7833      	ldrb	r3, [r6, #0]
     28c:	466a      	mov	r2, sp
     28e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     290:	4669      	mov	r1, sp
     292:	201e      	movs	r0, #30
     294:	4b96      	ldr	r3, [pc, #600]	; (4f0 <adc_init+0x2ec>)
     296:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     298:	201e      	movs	r0, #30
     29a:	4b96      	ldr	r3, [pc, #600]	; (4f4 <adc_init+0x2f0>)
     29c:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->positive_input);
     29e:	7934      	ldrb	r4, [r6, #4]
	const uint32_t pinmapping[] = {
     2a0:	2260      	movs	r2, #96	; 0x60
     2a2:	4995      	ldr	r1, [pc, #596]	; (4f8 <adc_init+0x2f4>)
     2a4:	a802      	add	r0, sp, #8
     2a6:	4b95      	ldr	r3, [pc, #596]	; (4fc <adc_init+0x2f8>)
     2a8:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     2aa:	2c13      	cmp	r4, #19
     2ac:	d90b      	bls.n	2c6 <adc_init+0xc2>
	_adc_configure_ain_pin(index, config->negative_input);
     2ae:	88f4      	ldrh	r4, [r6, #6]
	const uint32_t pinmapping[] = {
     2b0:	2260      	movs	r2, #96	; 0x60
     2b2:	4991      	ldr	r1, [pc, #580]	; (4f8 <adc_init+0x2f4>)
     2b4:	a802      	add	r0, sp, #8
     2b6:	4b91      	ldr	r3, [pc, #580]	; (4fc <adc_init+0x2f8>)
     2b8:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     2ba:	2c13      	cmp	r4, #19
     2bc:	d911      	bls.n	2e2 <adc_init+0xde>
     2be:	2400      	movs	r4, #0
	const uint32_t pinmapping[] = {
     2c0:	4b8e      	ldr	r3, [pc, #568]	; (4fc <adc_init+0x2f8>)
     2c2:	4699      	mov	r9, r3
     2c4:	e01e      	b.n	304 <adc_init+0x100>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2c6:	00a4      	lsls	r4, r4, #2
     2c8:	ab02      	add	r3, sp, #8
     2ca:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2cc:	a901      	add	r1, sp, #4
     2ce:	2300      	movs	r3, #0
     2d0:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     2d2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2d4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2d6:	3301      	adds	r3, #1
     2d8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2da:	b2c0      	uxtb	r0, r0
     2dc:	4b88      	ldr	r3, [pc, #544]	; (500 <adc_init+0x2fc>)
     2de:	4798      	blx	r3
     2e0:	e7e5      	b.n	2ae <adc_init+0xaa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2e2:	00a4      	lsls	r4, r4, #2
     2e4:	ab02      	add	r3, sp, #8
     2e6:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2e8:	a901      	add	r1, sp, #4
     2ea:	2300      	movs	r3, #0
     2ec:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     2ee:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2f0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2f2:	3301      	adds	r3, #1
     2f4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2f6:	b2c0      	uxtb	r0, r0
     2f8:	4b81      	ldr	r3, [pc, #516]	; (500 <adc_init+0x2fc>)
     2fa:	4798      	blx	r3
     2fc:	e7df      	b.n	2be <adc_init+0xba>
     2fe:	3401      	adds	r4, #1
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     300:	2c14      	cmp	r4, #20
     302:	d018      	beq.n	336 <adc_init+0x132>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     304:	2301      	movs	r3, #1
     306:	40a3      	lsls	r3, r4
     308:	6932      	ldr	r2, [r6, #16]
     30a:	421a      	tst	r2, r3
     30c:	d0f7      	beq.n	2fe <adc_init+0xfa>
	const uint32_t pinmapping[] = {
     30e:	2260      	movs	r2, #96	; 0x60
     310:	4979      	ldr	r1, [pc, #484]	; (4f8 <adc_init+0x2f4>)
     312:	a802      	add	r0, sp, #8
     314:	47c8      	blx	r9
	if (pin <= _adc_extchannel_msb[index]) {
     316:	2c13      	cmp	r4, #19
     318:	d8f1      	bhi.n	2fe <adc_init+0xfa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     31a:	00a3      	lsls	r3, r4, #2
     31c:	aa02      	add	r2, sp, #8
     31e:	5898      	ldr	r0, [r3, r2]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     320:	a901      	add	r1, sp, #4
     322:	2300      	movs	r3, #0
     324:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     326:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     328:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     32a:	3301      	adds	r3, #1
     32c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     32e:	b2c0      	uxtb	r0, r0
     330:	4b73      	ldr	r3, [pc, #460]	; (500 <adc_init+0x2fc>)
     332:	4798      	blx	r3
     334:	e7e3      	b.n	2fe <adc_init+0xfa>
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     336:	7b73      	ldrb	r3, [r6, #13]
     338:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     33a:	7bb2      	ldrb	r2, [r6, #14]
     33c:	01d2      	lsls	r2, r2, #7
     33e:	4313      	orrs	r3, r2
     340:	b2db      	uxtb	r3, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     342:	703b      	strb	r3, [r7, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     344:	7d33      	ldrb	r3, [r6, #20]
     346:	01db      	lsls	r3, r3, #7
			| (config->reference);
     348:	7872      	ldrb	r2, [r6, #1]
     34a:	4313      	orrs	r3, r2
     34c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     34e:	70bb      	strb	r3, [r7, #2]
	switch (config->resolution) {
     350:	78f3      	ldrb	r3, [r6, #3]
     352:	2b34      	cmp	r3, #52	; 0x34
     354:	d900      	bls.n	358 <adc_init+0x154>
     356:	e140      	b.n	5da <adc_init+0x3d6>
     358:	009b      	lsls	r3, r3, #2
     35a:	4a6a      	ldr	r2, [pc, #424]	; (504 <adc_init+0x300>)
     35c:	58d3      	ldr	r3, [r2, r3]
     35e:	469f      	mov	pc, r3
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     360:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     362:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_4;
     364:	2102      	movs	r1, #2
     366:	e01a      	b.n	39e <adc_init+0x19a>
		adjres = config->divide_result;
     368:	7a71      	ldrb	r1, [r6, #9]
		accumulate = config->accumulate_samples;
     36a:	7a32      	ldrb	r2, [r6, #8]
		resolution = ADC_RESOLUTION_16BIT;
     36c:	2010      	movs	r0, #16
     36e:	e016      	b.n	39e <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     370:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
     372:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     374:	2101      	movs	r1, #1
     376:	e012      	b.n	39e <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     378:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
     37a:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     37c:	2100      	movs	r1, #0
     37e:	e00e      	b.n	39e <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     380:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
     382:	2030      	movs	r0, #48	; 0x30
	uint8_t adjres = 0;
     384:	2100      	movs	r1, #0
     386:	e00a      	b.n	39e <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     388:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
     38a:	2020      	movs	r0, #32
	uint8_t adjres = 0;
     38c:	2100      	movs	r1, #0
     38e:	e006      	b.n	39e <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     390:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
     392:	2000      	movs	r0, #0
	uint8_t adjres = 0;
     394:	2100      	movs	r1, #0
     396:	e002      	b.n	39e <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     398:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
     39a:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     39c:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     39e:	0109      	lsls	r1, r1, #4
     3a0:	2370      	movs	r3, #112	; 0x70
     3a2:	400b      	ands	r3, r1
     3a4:	4313      	orrs	r3, r2
     3a6:	733b      	strb	r3, [r7, #12]
	Adc *const adc_module = module_inst->hw;
     3a8:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     3aa:	8c13      	ldrh	r3, [r2, #32]
     3ac:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     3ae:	2b00      	cmp	r3, #0
     3b0:	d1fb      	bne.n	3aa <adc_init+0x1a6>
	if (config->sample_length > 63) {
     3b2:	7d72      	ldrb	r2, [r6, #21]
		return STATUS_ERR_INVALID_ARG;
     3b4:	3317      	adds	r3, #23
	if (config->sample_length > 63) {
     3b6:	2a3f      	cmp	r2, #63	; 0x3f
     3b8:	d900      	bls.n	3bc <adc_init+0x1b8>
     3ba:	e737      	b.n	22c <adc_init+0x28>
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     3bc:	7bf3      	ldrb	r3, [r6, #15]
     3be:	01db      	lsls	r3, r3, #7
     3c0:	431a      	orrs	r2, r3
     3c2:	b2d2      	uxtb	r2, r2
		adc_module->SAMPCTRL.reg =
     3c4:	737a      	strb	r2, [r7, #13]
	Adc *const adc_module = module_inst->hw;
     3c6:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     3c8:	8c13      	ldrh	r3, [r2, #32]
     3ca:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     3cc:	2b00      	cmp	r3, #0
     3ce:	d1fb      	bne.n	3c8 <adc_init+0x1c4>
			config->clock_prescaler;
     3d0:	78b3      	ldrb	r3, [r6, #2]
	adc_module->CTRLB.reg =
     3d2:	707b      	strb	r3, [r7, #1]
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     3d4:	2324      	movs	r3, #36	; 0x24
     3d6:	5cf3      	ldrb	r3, [r6, r3]
     3d8:	00db      	lsls	r3, r3, #3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     3da:	7b32      	ldrb	r2, [r6, #12]
     3dc:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     3de:	431a      	orrs	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     3e0:	7af3      	ldrb	r3, [r6, #11]
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     3e2:	4313      	orrs	r3, r2
     3e4:	7ab2      	ldrb	r2, [r6, #10]
     3e6:	0052      	lsls	r2, r2, #1
     3e8:	4313      	orrs	r3, r2
     3ea:	4303      	orrs	r3, r0
	adc_module->CTRLC.reg =
     3ec:	817b      	strh	r3, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     3ee:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     3f0:	8c13      	ldrh	r3, [r2, #32]
     3f2:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     3f4:	2b00      	cmp	r3, #0
     3f6:	d1fb      	bne.n	3f0 <adc_init+0x1ec>
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     3f8:	8b32      	ldrh	r2, [r6, #24]
     3fa:	2a00      	cmp	r2, #0
     3fc:	d020      	beq.n	440 <adc_init+0x23c>
		switch (resolution) {
     3fe:	2810      	cmp	r0, #16
     400:	d100      	bne.n	404 <adc_init+0x200>
     402:	e0c9      	b.n	598 <adc_init+0x394>
     404:	d800      	bhi.n	408 <adc_init+0x204>
     406:	e083      	b.n	510 <adc_init+0x30c>
     408:	2820      	cmp	r0, #32
     40a:	d100      	bne.n	40e <adc_init+0x20a>
     40c:	e0a3      	b.n	556 <adc_init+0x352>
     40e:	2830      	cmp	r0, #48	; 0x30
     410:	d116      	bne.n	440 <adc_init+0x23c>
			if (config->differential_mode &&
     412:	7af3      	ldrb	r3, [r6, #11]
     414:	2b00      	cmp	r3, #0
     416:	d00a      	beq.n	42e <adc_init+0x22a>
					(config->window.window_lower_value > 127 ||
     418:	69f1      	ldr	r1, [r6, #28]
     41a:	3180      	adds	r1, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     41c:	2317      	movs	r3, #23
			if (config->differential_mode &&
     41e:	29ff      	cmp	r1, #255	; 0xff
     420:	d900      	bls.n	424 <adc_init+0x220>
     422:	e703      	b.n	22c <adc_init+0x28>
					config->window.window_lower_value < -128 ||
     424:	6a31      	ldr	r1, [r6, #32]
     426:	3180      	adds	r1, #128	; 0x80
     428:	29ff      	cmp	r1, #255	; 0xff
     42a:	d900      	bls.n	42e <adc_init+0x22a>
     42c:	e6fe      	b.n	22c <adc_init+0x28>
				return STATUS_ERR_INVALID_ARG;
     42e:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 255 ||
     430:	69f1      	ldr	r1, [r6, #28]
     432:	29ff      	cmp	r1, #255	; 0xff
     434:	dd00      	ble.n	438 <adc_init+0x234>
     436:	e6f9      	b.n	22c <adc_init+0x28>
     438:	6a31      	ldr	r1, [r6, #32]
     43a:	29ff      	cmp	r1, #255	; 0xff
     43c:	dd00      	ble.n	440 <adc_init+0x23c>
     43e:	e6f5      	b.n	22c <adc_init+0x28>
	adc_module->CTRLC.reg |= config->window.window_mode;
     440:	897b      	ldrh	r3, [r7, #10]
     442:	431a      	orrs	r2, r3
     444:	817a      	strh	r2, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     446:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     448:	8c13      	ldrh	r3, [r2, #32]
     44a:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     44c:	2b00      	cmp	r3, #0
     44e:	d1fb      	bne.n	448 <adc_init+0x244>
	adc_module->WINLT.reg =
     450:	8bb3      	ldrh	r3, [r6, #28]
     452:	81fb      	strh	r3, [r7, #14]
	Adc *const adc_module = module_inst->hw;
     454:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     456:	8c13      	ldrh	r3, [r2, #32]
     458:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     45a:	2b00      	cmp	r3, #0
     45c:	d1fb      	bne.n	456 <adc_init+0x252>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     45e:	8c33      	ldrh	r3, [r6, #32]
     460:	823b      	strh	r3, [r7, #16]
	Adc *const adc_module = module_inst->hw;
     462:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     464:	8c13      	ldrh	r3, [r2, #32]
     466:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     468:	2b00      	cmp	r3, #0
     46a:	d1fb      	bne.n	464 <adc_init+0x260>
			config->positive_input;
     46c:	7933      	ldrb	r3, [r6, #4]
			config->negative_input |
     46e:	88f2      	ldrh	r2, [r6, #6]
     470:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     472:	813b      	strh	r3, [r7, #8]
	Adc *const adc_module = module_inst->hw;
     474:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     476:	8c13      	ldrh	r3, [r2, #32]
     478:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     47a:	2b00      	cmp	r3, #0
     47c:	d1fb      	bne.n	476 <adc_init+0x272>
	adc_module->EVCTRL.reg = config->event_action;
     47e:	332a      	adds	r3, #42	; 0x2a
     480:	5cf3      	ldrb	r3, [r6, r3]
     482:	70fb      	strb	r3, [r7, #3]
	adc_module->INTENCLR.reg =
     484:	2307      	movs	r3, #7
     486:	713b      	strb	r3, [r7, #4]
	if (config->correction.correction_enable){
     488:	331d      	adds	r3, #29
     48a:	5cf3      	ldrb	r3, [r6, r3]
     48c:	2b00      	cmp	r3, #0
     48e:	d01b      	beq.n	4c8 <adc_init+0x2c4>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     490:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
     492:	491d      	ldr	r1, [pc, #116]	; (508 <adc_init+0x304>)
			return STATUS_ERR_INVALID_ARG;
     494:	2317      	movs	r3, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     496:	428a      	cmp	r2, r1
     498:	d900      	bls.n	49c <adc_init+0x298>
     49a:	e6c7      	b.n	22c <adc_init+0x28>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     49c:	827a      	strh	r2, [r7, #18]
	Adc *const adc_module = module_inst->hw;
     49e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     4a0:	8c13      	ldrh	r3, [r2, #32]
     4a2:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     4a4:	2b00      	cmp	r3, #0
     4a6:	d1fb      	bne.n	4a0 <adc_init+0x29c>
		if (config->correction.offset_correction > 2047 ||
     4a8:	8d31      	ldrh	r1, [r6, #40]	; 0x28
     4aa:	2380      	movs	r3, #128	; 0x80
     4ac:	011b      	lsls	r3, r3, #4
     4ae:	18ca      	adds	r2, r1, r3
     4b0:	4815      	ldr	r0, [pc, #84]	; (508 <adc_init+0x304>)
     4b2:	b292      	uxth	r2, r2
			return STATUS_ERR_INVALID_ARG;
     4b4:	2317      	movs	r3, #23
		if (config->correction.offset_correction > 2047 ||
     4b6:	4282      	cmp	r2, r0
     4b8:	d900      	bls.n	4bc <adc_init+0x2b8>
     4ba:	e6b7      	b.n	22c <adc_init+0x28>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     4bc:	82b9      	strh	r1, [r7, #20]
	Adc *const adc_module = module_inst->hw;
     4be:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     4c0:	8c13      	ldrh	r3, [r2, #32]
     4c2:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     4c4:	2b00      	cmp	r3, #0
     4c6:	d1fb      	bne.n	4c0 <adc_init+0x2bc>
			ADC_CALIB_BIASREFBUF(
     4c8:	4b10      	ldr	r3, [pc, #64]	; (50c <adc_init+0x308>)
     4ca:	681b      	ldr	r3, [r3, #0]
     4cc:	021a      	lsls	r2, r3, #8
     4ce:	21e0      	movs	r1, #224	; 0xe0
     4d0:	00c9      	lsls	r1, r1, #3
     4d2:	400a      	ands	r2, r1
			ADC_CALIB_BIASCOMP(
     4d4:	069b      	lsls	r3, r3, #26
     4d6:	0f5b      	lsrs	r3, r3, #29
			) |
     4d8:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     4da:	85bb      	strh	r3, [r7, #44]	; 0x2c
	return STATUS_OK;
     4dc:	2300      	movs	r3, #0
     4de:	e6a5      	b.n	22c <adc_init+0x28>
     4e0:	000001bd 	.word	0x000001bd
     4e4:	40000400 	.word	0x40000400
     4e8:	40001400 	.word	0x40001400
     4ec:	20000054 	.word	0x20000054
     4f0:	00000aa1 	.word	0x00000aa1
     4f4:	00000a31 	.word	0x00000a31
     4f8:	000010b4 	.word	0x000010b4
     4fc:	00000fcd 	.word	0x00000fcd
     500:	00000b9d 	.word	0x00000b9d
     504:	00000fe0 	.word	0x00000fe0
     508:	00000fff 	.word	0x00000fff
     50c:	00806020 	.word	0x00806020
		switch (resolution) {
     510:	2800      	cmp	r0, #0
     512:	d195      	bne.n	440 <adc_init+0x23c>
			if (config->differential_mode &&
     514:	7af3      	ldrb	r3, [r6, #11]
     516:	2b00      	cmp	r3, #0
     518:	d012      	beq.n	540 <adc_init+0x33c>
					(config->window.window_lower_value > 2047 ||
     51a:	69f3      	ldr	r3, [r6, #28]
     51c:	2080      	movs	r0, #128	; 0x80
     51e:	0100      	lsls	r0, r0, #4
     520:	4684      	mov	ip, r0
     522:	4463      	add	r3, ip
     524:	0019      	movs	r1, r3
			if (config->differential_mode &&
     526:	482e      	ldr	r0, [pc, #184]	; (5e0 <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     528:	2317      	movs	r3, #23
			if (config->differential_mode &&
     52a:	4281      	cmp	r1, r0
     52c:	d900      	bls.n	530 <adc_init+0x32c>
     52e:	e67d      	b.n	22c <adc_init+0x28>
					config->window.window_lower_value < -2048 ||
     530:	6a33      	ldr	r3, [r6, #32]
     532:	4463      	add	r3, ip
     534:	0019      	movs	r1, r3
     536:	482a      	ldr	r0, [pc, #168]	; (5e0 <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     538:	2317      	movs	r3, #23
					config->window.window_lower_value < -2048 ||
     53a:	4281      	cmp	r1, r0
     53c:	d900      	bls.n	540 <adc_init+0x33c>
     53e:	e675      	b.n	22c <adc_init+0x28>
			} else if (config->window.window_lower_value > 4095 ||
     540:	4927      	ldr	r1, [pc, #156]	; (5e0 <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     542:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 4095 ||
     544:	69f0      	ldr	r0, [r6, #28]
     546:	4288      	cmp	r0, r1
     548:	dd00      	ble.n	54c <adc_init+0x348>
     54a:	e66f      	b.n	22c <adc_init+0x28>
     54c:	6a30      	ldr	r0, [r6, #32]
     54e:	4288      	cmp	r0, r1
     550:	dd00      	ble.n	554 <adc_init+0x350>
     552:	e66b      	b.n	22c <adc_init+0x28>
     554:	e774      	b.n	440 <adc_init+0x23c>
			if (config->differential_mode &&
     556:	7af3      	ldrb	r3, [r6, #11]
     558:	2b00      	cmp	r3, #0
     55a:	d012      	beq.n	582 <adc_init+0x37e>
					(config->window.window_lower_value > 511 ||
     55c:	69f3      	ldr	r3, [r6, #28]
     55e:	2080      	movs	r0, #128	; 0x80
     560:	0080      	lsls	r0, r0, #2
     562:	4684      	mov	ip, r0
     564:	4463      	add	r3, ip
     566:	0019      	movs	r1, r3
			if (config->differential_mode &&
     568:	481e      	ldr	r0, [pc, #120]	; (5e4 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     56a:	2317      	movs	r3, #23
			if (config->differential_mode &&
     56c:	4281      	cmp	r1, r0
     56e:	d900      	bls.n	572 <adc_init+0x36e>
     570:	e65c      	b.n	22c <adc_init+0x28>
					config->window.window_lower_value < -512 ||
     572:	6a33      	ldr	r3, [r6, #32]
     574:	4463      	add	r3, ip
     576:	0019      	movs	r1, r3
     578:	481a      	ldr	r0, [pc, #104]	; (5e4 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     57a:	2317      	movs	r3, #23
					config->window.window_lower_value < -512 ||
     57c:	4281      	cmp	r1, r0
     57e:	d900      	bls.n	582 <adc_init+0x37e>
     580:	e654      	b.n	22c <adc_init+0x28>
			} else if (config->window.window_lower_value > 1023 ||
     582:	4918      	ldr	r1, [pc, #96]	; (5e4 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     584:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 1023 ||
     586:	69f0      	ldr	r0, [r6, #28]
     588:	4288      	cmp	r0, r1
     58a:	dd00      	ble.n	58e <adc_init+0x38a>
     58c:	e64e      	b.n	22c <adc_init+0x28>
     58e:	6a30      	ldr	r0, [r6, #32]
     590:	4288      	cmp	r0, r1
     592:	dd00      	ble.n	596 <adc_init+0x392>
     594:	e64a      	b.n	22c <adc_init+0x28>
     596:	e753      	b.n	440 <adc_init+0x23c>
			if (config->differential_mode &&
     598:	7af3      	ldrb	r3, [r6, #11]
     59a:	2b00      	cmp	r3, #0
     59c:	d012      	beq.n	5c4 <adc_init+0x3c0>
					(config->window.window_lower_value > 32767 ||
     59e:	69f3      	ldr	r3, [r6, #28]
     5a0:	2080      	movs	r0, #128	; 0x80
     5a2:	0200      	lsls	r0, r0, #8
     5a4:	4684      	mov	ip, r0
     5a6:	4463      	add	r3, ip
     5a8:	0019      	movs	r1, r3
			if (config->differential_mode &&
     5aa:	480f      	ldr	r0, [pc, #60]	; (5e8 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     5ac:	2317      	movs	r3, #23
			if (config->differential_mode &&
     5ae:	4281      	cmp	r1, r0
     5b0:	d900      	bls.n	5b4 <adc_init+0x3b0>
     5b2:	e63b      	b.n	22c <adc_init+0x28>
					config->window.window_lower_value < -32768 ||
     5b4:	6a33      	ldr	r3, [r6, #32]
     5b6:	4463      	add	r3, ip
     5b8:	0019      	movs	r1, r3
     5ba:	480b      	ldr	r0, [pc, #44]	; (5e8 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     5bc:	2317      	movs	r3, #23
					config->window.window_lower_value < -32768 ||
     5be:	4281      	cmp	r1, r0
     5c0:	d900      	bls.n	5c4 <adc_init+0x3c0>
     5c2:	e633      	b.n	22c <adc_init+0x28>
			} else if (config->window.window_lower_value > 65535 ||
     5c4:	4908      	ldr	r1, [pc, #32]	; (5e8 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     5c6:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 65535 ||
     5c8:	69f0      	ldr	r0, [r6, #28]
     5ca:	4288      	cmp	r0, r1
     5cc:	dd00      	ble.n	5d0 <adc_init+0x3cc>
     5ce:	e62d      	b.n	22c <adc_init+0x28>
     5d0:	6a30      	ldr	r0, [r6, #32]
     5d2:	4288      	cmp	r0, r1
     5d4:	dd00      	ble.n	5d8 <adc_init+0x3d4>
     5d6:	e629      	b.n	22c <adc_init+0x28>
     5d8:	e732      	b.n	440 <adc_init+0x23c>
		return STATUS_ERR_INVALID_ARG;
     5da:	2317      	movs	r3, #23
     5dc:	e626      	b.n	22c <adc_init+0x28>
     5de:	46c0      	nop			; (mov r8, r8)
     5e0:	00000fff 	.word	0x00000fff
     5e4:	000003ff 	.word	0x000003ff
     5e8:	0000ffff 	.word	0x0000ffff

000005ec <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
     5ec:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     5ee:	4b2e      	ldr	r3, [pc, #184]	; (6a8 <ADC_Handler+0xbc>)
     5f0:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
     5f2:	6823      	ldr	r3, [r4, #0]
     5f4:	799d      	ldrb	r5, [r3, #6]
     5f6:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
     5f8:	07ea      	lsls	r2, r5, #31
     5fa:	d52d      	bpl.n	658 <ADC_Handler+0x6c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     5fc:	7ee2      	ldrb	r2, [r4, #27]
     5fe:	07d2      	lsls	r2, r2, #31
     600:	d52a      	bpl.n	658 <ADC_Handler+0x6c>
     602:	7ea2      	ldrb	r2, [r4, #26]
     604:	07d2      	lsls	r2, r2, #31
     606:	d527      	bpl.n	658 <ADC_Handler+0x6c>
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     608:	2201      	movs	r2, #1
     60a:	719a      	strb	r2, [r3, #6]
			*(module->job_buffer++) = module->hw->RESULT.reg;
     60c:	6962      	ldr	r2, [r4, #20]
     60e:	1c93      	adds	r3, r2, #2
     610:	6163      	str	r3, [r4, #20]
     612:	6823      	ldr	r3, [r4, #0]
     614:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     616:	b29b      	uxth	r3, r3
     618:	8013      	strh	r3, [r2, #0]
			if (--module->remaining_conversions > 0) {
     61a:	8b23      	ldrh	r3, [r4, #24]
     61c:	3b01      	subs	r3, #1
     61e:	b29b      	uxth	r3, r3
     620:	8323      	strh	r3, [r4, #24]
     622:	2b00      	cmp	r3, #0
     624:	d015      	beq.n	652 <ADC_Handler+0x66>
				if (module->software_trigger == true
     626:	7f63      	ldrb	r3, [r4, #29]
     628:	2b00      	cmp	r3, #0
     62a:	d015      	beq.n	658 <ADC_Handler+0x6c>
					&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     62c:	6822      	ldr	r2, [r4, #0]
     62e:	79d3      	ldrb	r3, [r2, #7]
     630:	b25b      	sxtb	r3, r3
     632:	2b00      	cmp	r3, #0
     634:	db10      	blt.n	658 <ADC_Handler+0x6c>
     636:	8c13      	ldrh	r3, [r2, #32]
     638:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
     63a:	2b00      	cmp	r3, #0
     63c:	d1fb      	bne.n	636 <ADC_Handler+0x4a>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     63e:	7e13      	ldrb	r3, [r2, #24]
     640:	2102      	movs	r1, #2
     642:	430b      	orrs	r3, r1
     644:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
     646:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
     648:	8c13      	ldrh	r3, [r2, #32]
     64a:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     64c:	2b00      	cmp	r3, #0
     64e:	d1fb      	bne.n	648 <ADC_Handler+0x5c>
     650:	e002      	b.n	658 <ADC_Handler+0x6c>
				if (module->job_status == STATUS_BUSY) {
     652:	7f23      	ldrb	r3, [r4, #28]
     654:	2b05      	cmp	r3, #5
     656:	d016      	beq.n	686 <ADC_Handler+0x9a>
	if (flags & ADC_INTFLAG_WINMON) {
     658:	076b      	lsls	r3, r5, #29
     65a:	d508      	bpl.n	66e <ADC_Handler+0x82>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     65c:	2304      	movs	r3, #4
     65e:	6822      	ldr	r2, [r4, #0]
     660:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     662:	7ee3      	ldrb	r3, [r4, #27]
     664:	079b      	lsls	r3, r3, #30
     666:	d502      	bpl.n	66e <ADC_Handler+0x82>
     668:	7ea3      	ldrb	r3, [r4, #26]
     66a:	079b      	lsls	r3, r3, #30
     66c:	d414      	bmi.n	698 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
     66e:	07ab      	lsls	r3, r5, #30
     670:	d508      	bpl.n	684 <ADC_Handler+0x98>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     672:	2302      	movs	r3, #2
     674:	6822      	ldr	r2, [r4, #0]
     676:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     678:	7ee3      	ldrb	r3, [r4, #27]
     67a:	075b      	lsls	r3, r3, #29
     67c:	d502      	bpl.n	684 <ADC_Handler+0x98>
     67e:	7ea3      	ldrb	r3, [r4, #26]
     680:	075b      	lsls	r3, r3, #29
     682:	d40d      	bmi.n	6a0 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
     684:	bd70      	pop	{r4, r5, r6, pc}
					module->job_status = STATUS_OK;
     686:	2300      	movs	r3, #0
     688:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     68a:	3301      	adds	r3, #1
     68c:	6822      	ldr	r2, [r4, #0]
     68e:	7113      	strb	r3, [r2, #4]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     690:	0020      	movs	r0, r4
     692:	68a3      	ldr	r3, [r4, #8]
     694:	4798      	blx	r3
     696:	e7df      	b.n	658 <ADC_Handler+0x6c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     698:	0020      	movs	r0, r4
     69a:	68e3      	ldr	r3, [r4, #12]
     69c:	4798      	blx	r3
     69e:	e7e6      	b.n	66e <ADC_Handler+0x82>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     6a0:	6923      	ldr	r3, [r4, #16]
     6a2:	0020      	movs	r0, r4
     6a4:	4798      	blx	r3
}
     6a6:	e7ed      	b.n	684 <ADC_Handler+0x98>
     6a8:	20000054 	.word	0x20000054

000006ac <adc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     6ac:	1c93      	adds	r3, r2, #2
     6ae:	009b      	lsls	r3, r3, #2
     6b0:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
     6b2:	2301      	movs	r3, #1
     6b4:	4093      	lsls	r3, r2
     6b6:	001a      	movs	r2, r3
     6b8:	7e83      	ldrb	r3, [r0, #26]
     6ba:	4313      	orrs	r3, r2
     6bc:	7683      	strb	r3, [r0, #26]
}
     6be:	4770      	bx	lr

000006c0 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
     6c0:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
     6c2:	8b03      	ldrh	r3, [r0, #24]
     6c4:	b29b      	uxth	r3, r3
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
     6c6:	2405      	movs	r4, #5
	if(module_inst->remaining_conversions != 0 ||
     6c8:	2b00      	cmp	r3, #0
     6ca:	d001      	beq.n	6d0 <adc_read_buffer_job+0x10>
	if(module_inst->software_trigger == true) {
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
}
     6cc:	0020      	movs	r0, r4
     6ce:	bd10      	pop	{r4, pc}
			module_inst->job_status == STATUS_BUSY){
     6d0:	7f03      	ldrb	r3, [r0, #28]
	if(module_inst->remaining_conversions != 0 ||
     6d2:	2b05      	cmp	r3, #5
     6d4:	d0fa      	beq.n	6cc <adc_read_buffer_job+0xc>
	module_inst->job_status = STATUS_BUSY;
     6d6:	2305      	movs	r3, #5
     6d8:	7703      	strb	r3, [r0, #28]
	module_inst->remaining_conversions = samples;
     6da:	8302      	strh	r2, [r0, #24]
	module_inst->job_buffer = buffer;
     6dc:	6141      	str	r1, [r0, #20]
	adc_module->INTENSET.reg = interrupt;
     6de:	3b04      	subs	r3, #4
     6e0:	6802      	ldr	r2, [r0, #0]
     6e2:	7153      	strb	r3, [r2, #5]
	if(module_inst->software_trigger == true) {
     6e4:	7f43      	ldrb	r3, [r0, #29]
	return STATUS_OK;
     6e6:	2400      	movs	r4, #0
	if(module_inst->software_trigger == true) {
     6e8:	2b00      	cmp	r3, #0
     6ea:	d0ef      	beq.n	6cc <adc_read_buffer_job+0xc>
	Adc *const adc_module = module_inst->hw;
     6ec:	6802      	ldr	r2, [r0, #0]
     6ee:	8c13      	ldrh	r3, [r2, #32]
     6f0:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     6f2:	2b00      	cmp	r3, #0
     6f4:	d1fb      	bne.n	6ee <adc_read_buffer_job+0x2e>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     6f6:	7e13      	ldrb	r3, [r2, #24]
     6f8:	2102      	movs	r1, #2
     6fa:	430b      	orrs	r3, r1
     6fc:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
     6fe:	6802      	ldr	r2, [r0, #0]
	if (adc_module->SYNCBUSY.reg) {
     700:	8c13      	ldrh	r3, [r2, #32]
     702:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     704:	2b00      	cmp	r3, #0
     706:	d1fb      	bne.n	700 <adc_read_buffer_job+0x40>
	return STATUS_OK;
     708:	2400      	movs	r4, #0
     70a:	e7df      	b.n	6cc <adc_read_buffer_job+0xc>

0000070c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     70c:	b500      	push	{lr}
     70e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     710:	ab01      	add	r3, sp, #4
     712:	2280      	movs	r2, #128	; 0x80
     714:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     716:	780a      	ldrb	r2, [r1, #0]
     718:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     71a:	784a      	ldrb	r2, [r1, #1]
     71c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     71e:	788a      	ldrb	r2, [r1, #2]
     720:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     722:	0019      	movs	r1, r3
     724:	4b01      	ldr	r3, [pc, #4]	; (72c <port_pin_set_config+0x20>)
     726:	4798      	blx	r3
}
     728:	b003      	add	sp, #12
     72a:	bd00      	pop	{pc}
     72c:	00000b9d 	.word	0x00000b9d

00000730 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     730:	b510      	push	{r4, lr}
	switch (clock_source) {
     732:	2808      	cmp	r0, #8
     734:	d803      	bhi.n	73e <system_clock_source_get_hz+0xe>
     736:	0080      	lsls	r0, r0, #2
     738:	4b1c      	ldr	r3, [pc, #112]	; (7ac <system_clock_source_get_hz+0x7c>)
     73a:	581b      	ldr	r3, [r3, r0]
     73c:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
     73e:	2000      	movs	r0, #0
     740:	e032      	b.n	7a8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     742:	4b1b      	ldr	r3, [pc, #108]	; (7b0 <system_clock_source_get_hz+0x80>)
     744:	6918      	ldr	r0, [r3, #16]
     746:	e02f      	b.n	7a8 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
     748:	4b1a      	ldr	r3, [pc, #104]	; (7b4 <system_clock_source_get_hz+0x84>)
     74a:	7d18      	ldrb	r0, [r3, #20]
     74c:	0700      	lsls	r0, r0, #28
     74e:	0f80      	lsrs	r0, r0, #30
     750:	1c43      	adds	r3, r0, #1
     752:	4819      	ldr	r0, [pc, #100]	; (7b8 <system_clock_source_get_hz+0x88>)
     754:	4358      	muls	r0, r3
     756:	e027      	b.n	7a8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     758:	4b15      	ldr	r3, [pc, #84]	; (7b0 <system_clock_source_get_hz+0x80>)
     75a:	6958      	ldr	r0, [r3, #20]
     75c:	e024      	b.n	7a8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
     75e:	4b14      	ldr	r3, [pc, #80]	; (7b0 <system_clock_source_get_hz+0x80>)
     760:	681b      	ldr	r3, [r3, #0]
			return 0;
     762:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
     764:	079b      	lsls	r3, r3, #30
     766:	d51f      	bpl.n	7a8 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
     768:	4912      	ldr	r1, [pc, #72]	; (7b4 <system_clock_source_get_hz+0x84>)
     76a:	2280      	movs	r2, #128	; 0x80
     76c:	0052      	lsls	r2, r2, #1
     76e:	68cb      	ldr	r3, [r1, #12]
     770:	4213      	tst	r3, r2
     772:	d0fc      	beq.n	76e <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
     774:	4b0e      	ldr	r3, [pc, #56]	; (7b0 <system_clock_source_get_hz+0x80>)
     776:	681b      	ldr	r3, [r3, #0]
     778:	075b      	lsls	r3, r3, #29
     77a:	d401      	bmi.n	780 <system_clock_source_get_hz+0x50>
		return 48000000UL;
     77c:	480f      	ldr	r0, [pc, #60]	; (7bc <system_clock_source_get_hz+0x8c>)
     77e:	e013      	b.n	7a8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     780:	2000      	movs	r0, #0
     782:	4b0f      	ldr	r3, [pc, #60]	; (7c0 <system_clock_source_get_hz+0x90>)
     784:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     786:	4b0a      	ldr	r3, [pc, #40]	; (7b0 <system_clock_source_get_hz+0x80>)
     788:	689b      	ldr	r3, [r3, #8]
     78a:	041b      	lsls	r3, r3, #16
     78c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     78e:	4358      	muls	r0, r3
     790:	e00a      	b.n	7a8 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     792:	2328      	movs	r3, #40	; 0x28
     794:	4a07      	ldr	r2, [pc, #28]	; (7b4 <system_clock_source_get_hz+0x84>)
     796:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     798:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     79a:	079b      	lsls	r3, r3, #30
     79c:	d504      	bpl.n	7a8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     79e:	4b04      	ldr	r3, [pc, #16]	; (7b0 <system_clock_source_get_hz+0x80>)
     7a0:	68d8      	ldr	r0, [r3, #12]
     7a2:	e001      	b.n	7a8 <system_clock_source_get_hz+0x78>
		return 32768UL;
     7a4:	2080      	movs	r0, #128	; 0x80
     7a6:	0200      	lsls	r0, r0, #8
	}
}
     7a8:	bd10      	pop	{r4, pc}
     7aa:	46c0      	nop			; (mov r8, r8)
     7ac:	00001114 	.word	0x00001114
     7b0:	20000028 	.word	0x20000028
     7b4:	40000c00 	.word	0x40000c00
     7b8:	003d0900 	.word	0x003d0900
     7bc:	02dc6c00 	.word	0x02dc6c00
     7c0:	00000ac5 	.word	0x00000ac5

000007c4 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     7c4:	b510      	push	{r4, lr}
     7c6:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
     7c8:	2280      	movs	r2, #128	; 0x80
     7ca:	0052      	lsls	r2, r2, #1
     7cc:	4b2f      	ldr	r3, [pc, #188]	; (88c <system_clock_init+0xc8>)
     7ce:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
     7d0:	3afd      	subs	r2, #253	; 0xfd
     7d2:	4b2f      	ldr	r3, [pc, #188]	; (890 <system_clock_init+0xcc>)
     7d4:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     7d6:	4a2f      	ldr	r2, [pc, #188]	; (894 <system_clock_init+0xd0>)
     7d8:	6853      	ldr	r3, [r2, #4]
     7da:	211e      	movs	r1, #30
     7dc:	438b      	bics	r3, r1
     7de:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
     7e0:	2380      	movs	r3, #128	; 0x80
     7e2:	05db      	lsls	r3, r3, #23
     7e4:	789b      	ldrb	r3, [r3, #2]
     7e6:	2b02      	cmp	r3, #2
     7e8:	d00f      	beq.n	80a <system_clock_init+0x46>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
     7ea:	2380      	movs	r3, #128	; 0x80
     7ec:	05db      	lsls	r3, r3, #23
     7ee:	789b      	ldrb	r3, [r3, #2]
     7f0:	b25b      	sxtb	r3, r3
     7f2:	2b00      	cmp	r3, #0
     7f4:	db09      	blt.n	80a <system_clock_init+0x46>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
     7f6:	2380      	movs	r3, #128	; 0x80
     7f8:	05db      	lsls	r3, r3, #23
     7fa:	2201      	movs	r2, #1
     7fc:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
     7fe:	3201      	adds	r2, #1
     800:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
     802:	001a      	movs	r2, r3
     804:	7993      	ldrb	r3, [r2, #6]
     806:	2b00      	cmp	r3, #0
     808:	d0fc      	beq.n	804 <system_clock_init+0x40>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
     80a:	4b20      	ldr	r3, [pc, #128]	; (88c <system_clock_init+0xc8>)
     80c:	7d19      	ldrb	r1, [r3, #20]
     80e:	2280      	movs	r2, #128	; 0x80
     810:	4252      	negs	r2, r2
     812:	430a      	orrs	r2, r1
     814:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
     816:	7d1a      	ldrb	r2, [r3, #20]
     818:	2140      	movs	r1, #64	; 0x40
     81a:	438a      	bics	r2, r1
     81c:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     81e:	4b1e      	ldr	r3, [pc, #120]	; (898 <system_clock_init+0xd4>)
     820:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
     822:	4c1e      	ldr	r4, [pc, #120]	; (89c <system_clock_init+0xd8>)
     824:	2301      	movs	r3, #1
     826:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
     828:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
     82a:	7123      	strb	r3, [r4, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     82c:	a901      	add	r1, sp, #4
     82e:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
     830:	2300      	movs	r3, #0
     832:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
     834:	2206      	movs	r2, #6
     836:	700a      	strb	r2, [r1, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     838:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     83a:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     83c:	2000      	movs	r0, #0
     83e:	4b18      	ldr	r3, [pc, #96]	; (8a0 <system_clock_init+0xdc>)
     840:	4798      	blx	r3
     842:	2000      	movs	r0, #0
     844:	4b17      	ldr	r3, [pc, #92]	; (8a4 <system_clock_init+0xe0>)
     846:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
     848:	2000      	movs	r0, #0
     84a:	4b17      	ldr	r3, [pc, #92]	; (8a8 <system_clock_init+0xe4>)
     84c:	4798      	blx	r3
     84e:	7921      	ldrb	r1, [r4, #4]
     850:	b2c9      	uxtb	r1, r1
     852:	4b16      	ldr	r3, [pc, #88]	; (8ac <system_clock_init+0xe8>)
     854:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
     856:	4b16      	ldr	r3, [pc, #88]	; (8b0 <system_clock_init+0xec>)
     858:	4298      	cmp	r0, r3
     85a:	d814      	bhi.n	886 <system_clock_init+0xc2>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
     85c:	2380      	movs	r3, #128	; 0x80
     85e:	05db      	lsls	r3, r3, #23
     860:	789b      	ldrb	r3, [r3, #2]
     862:	2b00      	cmp	r3, #0
     864:	d00f      	beq.n	886 <system_clock_init+0xc2>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
     866:	2380      	movs	r3, #128	; 0x80
     868:	05db      	lsls	r3, r3, #23
     86a:	789b      	ldrb	r3, [r3, #2]
     86c:	b25b      	sxtb	r3, r3
     86e:	2b00      	cmp	r3, #0
     870:	db09      	blt.n	886 <system_clock_init+0xc2>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
     872:	2380      	movs	r3, #128	; 0x80
     874:	05db      	lsls	r3, r3, #23
     876:	2201      	movs	r2, #1
     878:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
     87a:	2200      	movs	r2, #0
     87c:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
     87e:	001a      	movs	r2, r3
     880:	7993      	ldrb	r3, [r2, #6]
     882:	2b00      	cmp	r3, #0
     884:	d0fc      	beq.n	880 <system_clock_init+0xbc>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
     886:	b004      	add	sp, #16
     888:	bd10      	pop	{r4, pc}
     88a:	46c0      	nop			; (mov r8, r8)
     88c:	40000c00 	.word	0x40000c00
     890:	40001400 	.word	0x40001400
     894:	41004000 	.word	0x41004000
     898:	000008b5 	.word	0x000008b5
     89c:	40000400 	.word	0x40000400
     8a0:	000008d9 	.word	0x000008d9
     8a4:	00000985 	.word	0x00000985
     8a8:	000009c5 	.word	0x000009c5
     8ac:	00000da5 	.word	0x00000da5
     8b0:	00b71b00 	.word	0x00b71b00

000008b4 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
     8b4:	4a06      	ldr	r2, [pc, #24]	; (8d0 <system_gclk_init+0x1c>)
     8b6:	6953      	ldr	r3, [r2, #20]
     8b8:	2140      	movs	r1, #64	; 0x40
     8ba:	430b      	orrs	r3, r1
     8bc:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
     8be:	2201      	movs	r2, #1
     8c0:	4b04      	ldr	r3, [pc, #16]	; (8d4 <system_gclk_init+0x20>)
     8c2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
     8c4:	0019      	movs	r1, r3
     8c6:	780b      	ldrb	r3, [r1, #0]
     8c8:	4213      	tst	r3, r2
     8ca:	d1fc      	bne.n	8c6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     8cc:	4770      	bx	lr
     8ce:	46c0      	nop			; (mov r8, r8)
     8d0:	40000400 	.word	0x40000400
     8d4:	40001800 	.word	0x40001800

000008d8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     8d8:	b570      	push	{r4, r5, r6, lr}
     8da:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
     8dc:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     8de:	784b      	ldrb	r3, [r1, #1]
     8e0:	2b00      	cmp	r3, #0
     8e2:	d002      	beq.n	8ea <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     8e4:	2380      	movs	r3, #128	; 0x80
     8e6:	00db      	lsls	r3, r3, #3
     8e8:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     8ea:	7a4b      	ldrb	r3, [r1, #9]
     8ec:	2b00      	cmp	r3, #0
     8ee:	d002      	beq.n	8f6 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     8f0:	2380      	movs	r3, #128	; 0x80
     8f2:	011b      	lsls	r3, r3, #4
     8f4:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     8f6:	6848      	ldr	r0, [r1, #4]
     8f8:	2801      	cmp	r0, #1
     8fa:	d90f      	bls.n	91c <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     8fc:	1e43      	subs	r3, r0, #1
     8fe:	4218      	tst	r0, r3
     900:	d131      	bne.n	966 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     902:	2802      	cmp	r0, #2
     904:	d92d      	bls.n	962 <system_gclk_gen_set_config+0x8a>
     906:	2302      	movs	r3, #2
     908:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     90a:	3201      	adds	r2, #1
						mask <<= 1) {
     90c:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     90e:	4298      	cmp	r0, r3
     910:	d8fb      	bhi.n	90a <system_gclk_gen_set_config+0x32>
     912:	2380      	movs	r3, #128	; 0x80
     914:	015b      	lsls	r3, r3, #5
     916:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
     918:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     91a:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     91c:	7a0b      	ldrb	r3, [r1, #8]
     91e:	2b00      	cmp	r3, #0
     920:	d002      	beq.n	928 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     922:	2380      	movs	r3, #128	; 0x80
     924:	019b      	lsls	r3, r3, #6
     926:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     928:	2604      	movs	r6, #4
     92a:	40a6      	lsls	r6, r4
     92c:	4911      	ldr	r1, [pc, #68]	; (974 <system_gclk_gen_set_config+0x9c>)
     92e:	4a12      	ldr	r2, [pc, #72]	; (978 <system_gclk_gen_set_config+0xa0>)
     930:	684b      	ldr	r3, [r1, #4]
     932:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
     934:	421e      	tst	r6, r3
     936:	d1fb      	bne.n	930 <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     938:	4b10      	ldr	r3, [pc, #64]	; (97c <system_gclk_gen_set_config+0xa4>)
     93a:	4798      	blx	r3
     93c:	00a4      	lsls	r4, r4, #2
     93e:	4b0d      	ldr	r3, [pc, #52]	; (974 <system_gclk_gen_set_config+0x9c>)
     940:	469c      	mov	ip, r3
     942:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
     944:	6a22      	ldr	r2, [r4, #32]
     946:	2380      	movs	r3, #128	; 0x80
     948:	005b      	lsls	r3, r3, #1
     94a:	401a      	ands	r2, r3
     94c:	432a      	orrs	r2, r5
     94e:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     950:	4661      	mov	r1, ip
     952:	4a09      	ldr	r2, [pc, #36]	; (978 <system_gclk_gen_set_config+0xa0>)
     954:	684b      	ldr	r3, [r1, #4]
     956:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
     958:	421e      	tst	r6, r3
     95a:	d1fb      	bne.n	954 <system_gclk_gen_set_config+0x7c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     95c:	4b08      	ldr	r3, [pc, #32]	; (980 <system_gclk_gen_set_config+0xa8>)
     95e:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
     960:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     962:	2200      	movs	r2, #0
     964:	e7d5      	b.n	912 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
     966:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     968:	2380      	movs	r3, #128	; 0x80
     96a:	009b      	lsls	r3, r3, #2
     96c:	4318      	orrs	r0, r3
     96e:	4305      	orrs	r5, r0
     970:	e7d4      	b.n	91c <system_gclk_gen_set_config+0x44>
     972:	46c0      	nop			; (mov r8, r8)
     974:	40001800 	.word	0x40001800
     978:	000007fc 	.word	0x000007fc
     97c:	00000115 	.word	0x00000115
     980:	00000155 	.word	0x00000155

00000984 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     984:	b510      	push	{r4, lr}
     986:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     988:	2204      	movs	r2, #4
     98a:	4082      	lsls	r2, r0
     98c:	4809      	ldr	r0, [pc, #36]	; (9b4 <system_gclk_gen_enable+0x30>)
     98e:	490a      	ldr	r1, [pc, #40]	; (9b8 <system_gclk_gen_enable+0x34>)
     990:	6843      	ldr	r3, [r0, #4]
     992:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
     994:	421a      	tst	r2, r3
     996:	d1fb      	bne.n	990 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
     998:	4b08      	ldr	r3, [pc, #32]	; (9bc <system_gclk_gen_enable+0x38>)
     99a:	4798      	blx	r3
     99c:	00a4      	lsls	r4, r4, #2
     99e:	4b05      	ldr	r3, [pc, #20]	; (9b4 <system_gclk_gen_enable+0x30>)
     9a0:	469c      	mov	ip, r3
     9a2:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
     9a4:	6a22      	ldr	r2, [r4, #32]
     9a6:	2380      	movs	r3, #128	; 0x80
     9a8:	005b      	lsls	r3, r3, #1
     9aa:	4313      	orrs	r3, r2
     9ac:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
     9ae:	4b04      	ldr	r3, [pc, #16]	; (9c0 <system_gclk_gen_enable+0x3c>)
     9b0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     9b2:	bd10      	pop	{r4, pc}
     9b4:	40001800 	.word	0x40001800
     9b8:	000007fc 	.word	0x000007fc
     9bc:	00000115 	.word	0x00000115
     9c0:	00000155 	.word	0x00000155

000009c4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9c6:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     9c8:	2204      	movs	r2, #4
     9ca:	4082      	lsls	r2, r0
     9cc:	4812      	ldr	r0, [pc, #72]	; (a18 <system_gclk_gen_get_hz+0x54>)
     9ce:	4913      	ldr	r1, [pc, #76]	; (a1c <system_gclk_gen_get_hz+0x58>)
     9d0:	6843      	ldr	r3, [r0, #4]
     9d2:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
     9d4:	421a      	tst	r2, r3
     9d6:	d1fb      	bne.n	9d0 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
     9d8:	4b11      	ldr	r3, [pc, #68]	; (a20 <system_gclk_gen_get_hz+0x5c>)
     9da:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
     9dc:	4f0e      	ldr	r7, [pc, #56]	; (a18 <system_gclk_gen_get_hz+0x54>)
     9de:	3408      	adds	r4, #8
     9e0:	00a4      	lsls	r4, r4, #2
     9e2:	59e0      	ldr	r0, [r4, r7]
     9e4:	0700      	lsls	r0, r0, #28
     9e6:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
     9e8:	4b0e      	ldr	r3, [pc, #56]	; (a24 <system_gclk_gen_get_hz+0x60>)
     9ea:	4798      	blx	r3
     9ec:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
     9ee:	59e5      	ldr	r5, [r4, r7]
     9f0:	04ed      	lsls	r5, r5, #19
     9f2:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
     9f4:	59e4      	ldr	r4, [r4, r7]
     9f6:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     9f8:	4b0b      	ldr	r3, [pc, #44]	; (a28 <system_gclk_gen_get_hz+0x64>)
     9fa:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     9fc:	2d00      	cmp	r5, #0
     9fe:	d107      	bne.n	a10 <system_gclk_gen_get_hz+0x4c>
     a00:	2c01      	cmp	r4, #1
     a02:	d907      	bls.n	a14 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
     a04:	0021      	movs	r1, r4
     a06:	0030      	movs	r0, r6
     a08:	4b08      	ldr	r3, [pc, #32]	; (a2c <system_gclk_gen_get_hz+0x68>)
     a0a:	4798      	blx	r3
     a0c:	0006      	movs	r6, r0
     a0e:	e001      	b.n	a14 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     a10:	3401      	adds	r4, #1
     a12:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
     a14:	0030      	movs	r0, r6
     a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a18:	40001800 	.word	0x40001800
     a1c:	000007fc 	.word	0x000007fc
     a20:	00000115 	.word	0x00000115
     a24:	00000731 	.word	0x00000731
     a28:	00000155 	.word	0x00000155
     a2c:	00000da5 	.word	0x00000da5

00000a30 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     a30:	b510      	push	{r4, lr}
     a32:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     a34:	4b09      	ldr	r3, [pc, #36]	; (a5c <system_gclk_chan_enable+0x2c>)
     a36:	4798      	blx	r3
     a38:	00a0      	lsls	r0, r4, #2
     a3a:	4b09      	ldr	r3, [pc, #36]	; (a60 <system_gclk_chan_enable+0x30>)
     a3c:	469c      	mov	ip, r3
     a3e:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
     a40:	2280      	movs	r2, #128	; 0x80
     a42:	5883      	ldr	r3, [r0, r2]
     a44:	2140      	movs	r1, #64	; 0x40
     a46:	430b      	orrs	r3, r1
     a48:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
     a4a:	3140      	adds	r1, #64	; 0x40
     a4c:	3a40      	subs	r2, #64	; 0x40
     a4e:	5843      	ldr	r3, [r0, r1]
     a50:	421a      	tst	r2, r3
     a52:	d0fc      	beq.n	a4e <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
     a54:	4b03      	ldr	r3, [pc, #12]	; (a64 <system_gclk_chan_enable+0x34>)
     a56:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
     a58:	bd10      	pop	{r4, pc}
     a5a:	46c0      	nop			; (mov r8, r8)
     a5c:	00000115 	.word	0x00000115
     a60:	40001800 	.word	0x40001800
     a64:	00000155 	.word	0x00000155

00000a68 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     a68:	b510      	push	{r4, lr}
     a6a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     a6c:	4b09      	ldr	r3, [pc, #36]	; (a94 <system_gclk_chan_disable+0x2c>)
     a6e:	4798      	blx	r3
     a70:	00a0      	lsls	r0, r4, #2
     a72:	4b09      	ldr	r3, [pc, #36]	; (a98 <system_gclk_chan_disable+0x30>)
     a74:	469c      	mov	ip, r3
     a76:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
     a78:	2280      	movs	r2, #128	; 0x80
     a7a:	5883      	ldr	r3, [r0, r2]
     a7c:	2140      	movs	r1, #64	; 0x40
     a7e:	438b      	bics	r3, r1
     a80:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
     a82:	3140      	adds	r1, #64	; 0x40
     a84:	3a40      	subs	r2, #64	; 0x40
     a86:	5843      	ldr	r3, [r0, r1]
     a88:	421a      	tst	r2, r3
     a8a:	d1fc      	bne.n	a86 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
     a8c:	4b03      	ldr	r3, [pc, #12]	; (a9c <system_gclk_chan_disable+0x34>)
     a8e:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
     a90:	bd10      	pop	{r4, pc}
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	00000115 	.word	0x00000115
     a98:	40001800 	.word	0x40001800
     a9c:	00000155 	.word	0x00000155

00000aa0 <system_gclk_chan_set_config>:
{
     aa0:	b570      	push	{r4, r5, r6, lr}
     aa2:	0004      	movs	r4, r0
     aa4:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
     aa6:	4b05      	ldr	r3, [pc, #20]	; (abc <system_gclk_chan_set_config+0x1c>)
     aa8:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
     aaa:	782a      	ldrb	r2, [r5, #0]
     aac:	230f      	movs	r3, #15
     aae:	4013      	ands	r3, r2
     ab0:	3420      	adds	r4, #32
     ab2:	00a4      	lsls	r4, r4, #2
     ab4:	4a02      	ldr	r2, [pc, #8]	; (ac0 <system_gclk_chan_set_config+0x20>)
     ab6:	50a3      	str	r3, [r4, r2]
}
     ab8:	bd70      	pop	{r4, r5, r6, pc}
     aba:	46c0      	nop			; (mov r8, r8)
     abc:	00000a69 	.word	0x00000a69
     ac0:	40001800 	.word	0x40001800

00000ac4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     ac4:	b510      	push	{r4, lr}
     ac6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     ac8:	4b06      	ldr	r3, [pc, #24]	; (ae4 <system_gclk_chan_get_hz+0x20>)
     aca:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
     acc:	3420      	adds	r4, #32
     ace:	00a4      	lsls	r4, r4, #2
     ad0:	4b05      	ldr	r3, [pc, #20]	; (ae8 <system_gclk_chan_get_hz+0x24>)
     ad2:	58e4      	ldr	r4, [r4, r3]
     ad4:	0724      	lsls	r4, r4, #28
     ad6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     ad8:	4b04      	ldr	r3, [pc, #16]	; (aec <system_gclk_chan_get_hz+0x28>)
     ada:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     adc:	0020      	movs	r0, r4
     ade:	4b04      	ldr	r3, [pc, #16]	; (af0 <system_gclk_chan_get_hz+0x2c>)
     ae0:	4798      	blx	r3
}
     ae2:	bd10      	pop	{r4, pc}
     ae4:	00000115 	.word	0x00000115
     ae8:	40001800 	.word	0x40001800
     aec:	00000155 	.word	0x00000155
     af0:	000009c5 	.word	0x000009c5

00000af4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     af4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     af6:	78d3      	ldrb	r3, [r2, #3]
     af8:	2b00      	cmp	r3, #0
     afa:	d135      	bne.n	b68 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     afc:	7813      	ldrb	r3, [r2, #0]
     afe:	2b80      	cmp	r3, #128	; 0x80
     b00:	d029      	beq.n	b56 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     b02:	061b      	lsls	r3, r3, #24
     b04:	2480      	movs	r4, #128	; 0x80
     b06:	0264      	lsls	r4, r4, #9
     b08:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     b0a:	7854      	ldrb	r4, [r2, #1]
     b0c:	2502      	movs	r5, #2
     b0e:	43ac      	bics	r4, r5
     b10:	d106      	bne.n	b20 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     b12:	7894      	ldrb	r4, [r2, #2]
     b14:	2c00      	cmp	r4, #0
     b16:	d120      	bne.n	b5a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     b18:	2480      	movs	r4, #128	; 0x80
     b1a:	02a4      	lsls	r4, r4, #10
     b1c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     b1e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     b20:	7854      	ldrb	r4, [r2, #1]
     b22:	3c01      	subs	r4, #1
     b24:	2c01      	cmp	r4, #1
     b26:	d91c      	bls.n	b62 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     b28:	040d      	lsls	r5, r1, #16
     b2a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     b2c:	24a0      	movs	r4, #160	; 0xa0
     b2e:	05e4      	lsls	r4, r4, #23
     b30:	432c      	orrs	r4, r5
     b32:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     b34:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     b36:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     b38:	24d0      	movs	r4, #208	; 0xd0
     b3a:	0624      	lsls	r4, r4, #24
     b3c:	432c      	orrs	r4, r5
     b3e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     b40:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     b42:	78d4      	ldrb	r4, [r2, #3]
     b44:	2c00      	cmp	r4, #0
     b46:	d122      	bne.n	b8e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     b48:	035b      	lsls	r3, r3, #13
     b4a:	d51c      	bpl.n	b86 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     b4c:	7893      	ldrb	r3, [r2, #2]
     b4e:	2b01      	cmp	r3, #1
     b50:	d01e      	beq.n	b90 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     b52:	6141      	str	r1, [r0, #20]
     b54:	e017      	b.n	b86 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
     b56:	2300      	movs	r3, #0
     b58:	e7d7      	b.n	b0a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     b5a:	24c0      	movs	r4, #192	; 0xc0
     b5c:	02e4      	lsls	r4, r4, #11
     b5e:	4323      	orrs	r3, r4
     b60:	e7dd      	b.n	b1e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     b62:	4c0d      	ldr	r4, [pc, #52]	; (b98 <_system_pinmux_config+0xa4>)
     b64:	4023      	ands	r3, r4
     b66:	e7df      	b.n	b28 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
     b68:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     b6a:	040c      	lsls	r4, r1, #16
     b6c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     b6e:	23a0      	movs	r3, #160	; 0xa0
     b70:	05db      	lsls	r3, r3, #23
     b72:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     b74:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     b76:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     b78:	23d0      	movs	r3, #208	; 0xd0
     b7a:	061b      	lsls	r3, r3, #24
     b7c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     b7e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
     b80:	78d3      	ldrb	r3, [r2, #3]
     b82:	2b00      	cmp	r3, #0
     b84:	d103      	bne.n	b8e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     b86:	7853      	ldrb	r3, [r2, #1]
     b88:	3b01      	subs	r3, #1
     b8a:	2b01      	cmp	r3, #1
     b8c:	d902      	bls.n	b94 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
     b8e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
     b90:	6181      	str	r1, [r0, #24]
     b92:	e7f8      	b.n	b86 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
     b94:	6081      	str	r1, [r0, #8]
}
     b96:	e7fa      	b.n	b8e <_system_pinmux_config+0x9a>
     b98:	fffbffff 	.word	0xfffbffff

00000b9c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     b9c:	b510      	push	{r4, lr}
     b9e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     ba0:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     ba2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     ba4:	2900      	cmp	r1, #0
     ba6:	d104      	bne.n	bb2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     ba8:	0943      	lsrs	r3, r0, #5
     baa:	01db      	lsls	r3, r3, #7
     bac:	4905      	ldr	r1, [pc, #20]	; (bc4 <system_pinmux_pin_set_config+0x28>)
     bae:	468c      	mov	ip, r1
     bb0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     bb2:	241f      	movs	r4, #31
     bb4:	4020      	ands	r0, r4
     bb6:	2101      	movs	r1, #1
     bb8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
     bba:	0018      	movs	r0, r3
     bbc:	4b02      	ldr	r3, [pc, #8]	; (bc8 <system_pinmux_pin_set_config+0x2c>)
     bbe:	4798      	blx	r3
}
     bc0:	bd10      	pop	{r4, pc}
     bc2:	46c0      	nop			; (mov r8, r8)
     bc4:	40002800 	.word	0x40002800
     bc8:	00000af5 	.word	0x00000af5

00000bcc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     bcc:	4770      	bx	lr
	...

00000bd0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     bd0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     bd2:	4b05      	ldr	r3, [pc, #20]	; (be8 <system_init+0x18>)
     bd4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
     bd6:	4b05      	ldr	r3, [pc, #20]	; (bec <system_init+0x1c>)
     bd8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
     bda:	4b05      	ldr	r3, [pc, #20]	; (bf0 <system_init+0x20>)
     bdc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     bde:	4b05      	ldr	r3, [pc, #20]	; (bf4 <system_init+0x24>)
     be0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
     be2:	4b05      	ldr	r3, [pc, #20]	; (bf8 <system_init+0x28>)
     be4:	4798      	blx	r3
}
     be6:	bd10      	pop	{r4, pc}
     be8:	000007c5 	.word	0x000007c5
     bec:	00000185 	.word	0x00000185
     bf0:	00000bcd 	.word	0x00000bcd
     bf4:	00000bcd 	.word	0x00000bcd
     bf8:	00000bcd 	.word	0x00000bcd

00000bfc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     bfc:	e7fe      	b.n	bfc <Dummy_Handler>
	...

00000c00 <Reset_Handler>:
{
     c00:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     c02:	4a1a      	ldr	r2, [pc, #104]	; (c6c <Reset_Handler+0x6c>)
     c04:	4b1a      	ldr	r3, [pc, #104]	; (c70 <Reset_Handler+0x70>)
     c06:	429a      	cmp	r2, r3
     c08:	d011      	beq.n	c2e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     c0a:	001a      	movs	r2, r3
     c0c:	4b19      	ldr	r3, [pc, #100]	; (c74 <Reset_Handler+0x74>)
     c0e:	429a      	cmp	r2, r3
     c10:	d20d      	bcs.n	c2e <Reset_Handler+0x2e>
     c12:	4a19      	ldr	r2, [pc, #100]	; (c78 <Reset_Handler+0x78>)
     c14:	3303      	adds	r3, #3
     c16:	1a9b      	subs	r3, r3, r2
     c18:	089b      	lsrs	r3, r3, #2
     c1a:	3301      	adds	r3, #1
     c1c:	009b      	lsls	r3, r3, #2
     c1e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     c20:	4813      	ldr	r0, [pc, #76]	; (c70 <Reset_Handler+0x70>)
     c22:	4912      	ldr	r1, [pc, #72]	; (c6c <Reset_Handler+0x6c>)
     c24:	588c      	ldr	r4, [r1, r2]
     c26:	5084      	str	r4, [r0, r2]
     c28:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     c2a:	429a      	cmp	r2, r3
     c2c:	d1fa      	bne.n	c24 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     c2e:	4a13      	ldr	r2, [pc, #76]	; (c7c <Reset_Handler+0x7c>)
     c30:	4b13      	ldr	r3, [pc, #76]	; (c80 <Reset_Handler+0x80>)
     c32:	429a      	cmp	r2, r3
     c34:	d20a      	bcs.n	c4c <Reset_Handler+0x4c>
     c36:	43d3      	mvns	r3, r2
     c38:	4911      	ldr	r1, [pc, #68]	; (c80 <Reset_Handler+0x80>)
     c3a:	185b      	adds	r3, r3, r1
     c3c:	2103      	movs	r1, #3
     c3e:	438b      	bics	r3, r1
     c40:	3304      	adds	r3, #4
     c42:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     c44:	2100      	movs	r1, #0
     c46:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     c48:	4293      	cmp	r3, r2
     c4a:	d1fc      	bne.n	c46 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     c4c:	4a0d      	ldr	r2, [pc, #52]	; (c84 <Reset_Handler+0x84>)
     c4e:	21ff      	movs	r1, #255	; 0xff
     c50:	4b0d      	ldr	r3, [pc, #52]	; (c88 <Reset_Handler+0x88>)
     c52:	438b      	bics	r3, r1
     c54:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     c56:	4a0d      	ldr	r2, [pc, #52]	; (c8c <Reset_Handler+0x8c>)
     c58:	6853      	ldr	r3, [r2, #4]
     c5a:	397f      	subs	r1, #127	; 0x7f
     c5c:	430b      	orrs	r3, r1
     c5e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     c60:	4b0b      	ldr	r3, [pc, #44]	; (c90 <Reset_Handler+0x90>)
     c62:	4798      	blx	r3
        main();
     c64:	4b0b      	ldr	r3, [pc, #44]	; (c94 <Reset_Handler+0x94>)
     c66:	4798      	blx	r3
     c68:	e7fe      	b.n	c68 <Reset_Handler+0x68>
     c6a:	46c0      	nop			; (mov r8, r8)
     c6c:	00001158 	.word	0x00001158
     c70:	20000000 	.word	0x20000000
     c74:	20000004 	.word	0x20000004
     c78:	20000004 	.word	0x20000004
     c7c:	20000004 	.word	0x20000004
     c80:	20000178 	.word	0x20000178
     c84:	e000ed00 	.word	0xe000ed00
     c88:	00000000 	.word	0x00000000
     c8c:	41004000 	.word	0x41004000
     c90:	00000f85 	.word	0x00000f85
     c94:	00000d55 	.word	0x00000d55

00000c98 <adc_complete_callback>:
//! [job_complete_callback]
volatile bool adc_read_done = false;

void adc_complete_callback(
		struct adc_module *const module)
{
     c98:	b510      	push	{r4, lr}
		static float b[M+1] ={0.2500, 0.2500, 0.2500, 0.2500};
		
		float sum = 0;
		
		for(int k =M; k>0; k--){
			xbuff[k]=xbuff[k-1];
     c9a:	4c07      	ldr	r4, [pc, #28]	; (cb8 <adc_complete_callback+0x20>)
     c9c:	68a3      	ldr	r3, [r4, #8]
     c9e:	60e3      	str	r3, [r4, #12]
     ca0:	6863      	ldr	r3, [r4, #4]
     ca2:	60a3      	str	r3, [r4, #8]
     ca4:	6823      	ldr	r3, [r4, #0]
     ca6:	6063      	str	r3, [r4, #4]
		}
		xbuff[0]=(float)invalue;
     ca8:	2000      	movs	r0, #0
     caa:	4b04      	ldr	r3, [pc, #16]	; (cbc <adc_complete_callback+0x24>)
     cac:	4798      	blx	r3
     cae:	6020      	str	r0, [r4, #0]
		
		for(int i = 0; i <= M; i++){
			sum += (xbuff[i]*b[i]);
		}
		outvalue=sum;
	adc_read_done = true;
     cb0:	2201      	movs	r2, #1
     cb2:	4b03      	ldr	r3, [pc, #12]	; (cc0 <adc_complete_callback+0x28>)
     cb4:	701a      	strb	r2, [r3, #0]

}
     cb6:	bd10      	pop	{r4, pc}
     cb8:	20000044 	.word	0x20000044
     cbc:	00000ebd 	.word	0x00000ebd
     cc0:	20000040 	.word	0x20000040

00000cc4 <configure_adc>:
//! [job_complete_callback]

//! [setup]
void configure_adc(void)
{
     cc4:	b530      	push	{r4, r5, lr}
     cc6:	b08d      	sub	sp, #52	; 0x34
//! [setup_config]
	struct adc_config config_adc;
//! [setup_config]
//! [setup_config_defaults]
	adc_get_config_defaults(&config_adc);
     cc8:	ac01      	add	r4, sp, #4
     cca:	0020      	movs	r0, r4
     ccc:	4b13      	ldr	r3, [pc, #76]	; (d1c <configure_adc+0x58>)
     cce:	4798      	blx	r3

//! [setup_modify_conf]
#if (!SAML21) && (!SAML22) && (!SAMC21) && (!SAMR30)
	config_adc.gain_factor     = ADC_GAIN_FACTOR_DIV2;
#endif
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV8;
     cd0:	2302      	movs	r3, #2
     cd2:	70a3      	strb	r3, [r4, #2]
	config_adc.reference       = ADC_REFERENCE_INTVCC1;
     cd4:	7063      	strb	r3, [r4, #1]
#if (SAMC21)
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN5;
#else
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN6;
     cd6:	3304      	adds	r3, #4
     cd8:	7123      	strb	r3, [r4, #4]
#endif
	config_adc.resolution      = ADC_RESOLUTION_12BIT;
     cda:	2300      	movs	r3, #0
     cdc:	70e3      	strb	r3, [r4, #3]

//! [setup_set_config]
#if (SAMC21)
	adc_init(&adc_instance, ADC1, &config_adc);
#else
	adc_init(&adc_instance, ADC, &config_adc);
     cde:	4d10      	ldr	r5, [pc, #64]	; (d20 <configure_adc+0x5c>)
     ce0:	0022      	movs	r2, r4
     ce2:	4910      	ldr	r1, [pc, #64]	; (d24 <configure_adc+0x60>)
     ce4:	0028      	movs	r0, r5
     ce6:	4b10      	ldr	r3, [pc, #64]	; (d28 <configure_adc+0x64>)
     ce8:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
     cea:	682a      	ldr	r2, [r5, #0]
     cec:	8c13      	ldrh	r3, [r2, #32]
     cee:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     cf0:	2b00      	cmp	r3, #0
     cf2:	d1fb      	bne.n	cec <configure_adc+0x28>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     cf4:	2180      	movs	r1, #128	; 0x80
     cf6:	03c9      	lsls	r1, r1, #15
     cf8:	4b0c      	ldr	r3, [pc, #48]	; (d2c <configure_adc+0x68>)
     cfa:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     cfc:	2307      	movs	r3, #7
     cfe:	7113      	strb	r3, [r2, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     d00:	7193      	strb	r3, [r2, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     d02:	7813      	ldrb	r3, [r2, #0]
     d04:	2102      	movs	r1, #2
     d06:	430b      	orrs	r3, r1
     d08:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
     d0a:	4b05      	ldr	r3, [pc, #20]	; (d20 <configure_adc+0x5c>)
     d0c:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
     d0e:	8c13      	ldrh	r3, [r2, #32]
     d10:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     d12:	2b00      	cmp	r3, #0
     d14:	d1fb      	bne.n	d0e <configure_adc+0x4a>
//! [setup_set_config]

//! [setup_enable]
	adc_enable(&adc_instance);
//! [setup_enable]
}
     d16:	b00d      	add	sp, #52	; 0x34
     d18:	bd30      	pop	{r4, r5, pc}
     d1a:	46c0      	nop			; (mov r8, r8)
     d1c:	000001c1 	.word	0x000001c1
     d20:	20000158 	.word	0x20000158
     d24:	43000c00 	.word	0x43000c00
     d28:	00000205 	.word	0x00000205
     d2c:	e000e100 	.word	0xe000e100

00000d30 <configure_adc_callbacks>:

void configure_adc_callbacks(void)
{
     d30:	b510      	push	{r4, lr}
//! [setup_register_callback]
	adc_register_callback(&adc_instance,
     d32:	4c05      	ldr	r4, [pc, #20]	; (d48 <configure_adc_callbacks+0x18>)
     d34:	2200      	movs	r2, #0
     d36:	4905      	ldr	r1, [pc, #20]	; (d4c <configure_adc_callbacks+0x1c>)
     d38:	0020      	movs	r0, r4
     d3a:	4b05      	ldr	r3, [pc, #20]	; (d50 <configure_adc_callbacks+0x20>)
     d3c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
     d3e:	7ee3      	ldrb	r3, [r4, #27]
     d40:	2201      	movs	r2, #1
     d42:	4313      	orrs	r3, r2
     d44:	76e3      	strb	r3, [r4, #27]
			adc_complete_callback, ADC_CALLBACK_READ_BUFFER);
//! [setup_register_callback]
//! [setup_enable_callback]
	adc_enable_callback(&adc_instance, ADC_CALLBACK_READ_BUFFER);
//! [setup_enable_callback]
}
     d46:	bd10      	pop	{r4, pc}
     d48:	20000158 	.word	0x20000158
     d4c:	00000c99 	.word	0x00000c99
     d50:	000006ad 	.word	0x000006ad

00000d54 <main>:
//! [setup]

int main(void)
{
     d54:	b510      	push	{r4, lr}
	system_init();
     d56:	4b0b      	ldr	r3, [pc, #44]	; (d84 <main+0x30>)
     d58:	4798      	blx	r3

//! [setup_init]
	configure_adc();
     d5a:	4b0b      	ldr	r3, [pc, #44]	; (d88 <main+0x34>)
     d5c:	4798      	blx	r3
	configure_adc_callbacks();
     d5e:	4b0b      	ldr	r3, [pc, #44]	; (d8c <main+0x38>)
     d60:	4798      	blx	r3
	cpu_irq_enable();
     d62:	2201      	movs	r2, #1
     d64:	4b0a      	ldr	r3, [pc, #40]	; (d90 <main+0x3c>)
     d66:	701a      	strb	r2, [r3, #0]
     d68:	f3bf 8f5f 	dmb	sy
     d6c:	b662      	cpsie	i
//! [enable_global_interrupts]
	system_interrupt_enable_global();
//! [enable_global_interrupts]

//! [start_adc_job]
	adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);
     d6e:	327f      	adds	r2, #127	; 0x7f
     d70:	4908      	ldr	r1, [pc, #32]	; (d94 <main+0x40>)
     d72:	4809      	ldr	r0, [pc, #36]	; (d98 <main+0x44>)
     d74:	4b09      	ldr	r3, [pc, #36]	; (d9c <main+0x48>)
     d76:	4798      	blx	r3
//! [start_adc_job]

//! [job_complete_poll]
	while (adc_read_done == false) {
     d78:	4b09      	ldr	r3, [pc, #36]	; (da0 <main+0x4c>)
     d7a:	781a      	ldrb	r2, [r3, #0]
     d7c:	2a00      	cmp	r2, #0
     d7e:	d0fc      	beq.n	d7a <main+0x26>
     d80:	e7fe      	b.n	d80 <main+0x2c>
     d82:	46c0      	nop			; (mov r8, r8)
     d84:	00000bd1 	.word	0x00000bd1
     d88:	00000cc5 	.word	0x00000cc5
     d8c:	00000d31 	.word	0x00000d31
     d90:	20000000 	.word	0x20000000
     d94:	20000058 	.word	0x20000058
     d98:	20000158 	.word	0x20000158
     d9c:	000006c1 	.word	0x000006c1
     da0:	20000040 	.word	0x20000040

00000da4 <__udivsi3>:
     da4:	2200      	movs	r2, #0
     da6:	0843      	lsrs	r3, r0, #1
     da8:	428b      	cmp	r3, r1
     daa:	d374      	bcc.n	e96 <__udivsi3+0xf2>
     dac:	0903      	lsrs	r3, r0, #4
     dae:	428b      	cmp	r3, r1
     db0:	d35f      	bcc.n	e72 <__udivsi3+0xce>
     db2:	0a03      	lsrs	r3, r0, #8
     db4:	428b      	cmp	r3, r1
     db6:	d344      	bcc.n	e42 <__udivsi3+0x9e>
     db8:	0b03      	lsrs	r3, r0, #12
     dba:	428b      	cmp	r3, r1
     dbc:	d328      	bcc.n	e10 <__udivsi3+0x6c>
     dbe:	0c03      	lsrs	r3, r0, #16
     dc0:	428b      	cmp	r3, r1
     dc2:	d30d      	bcc.n	de0 <__udivsi3+0x3c>
     dc4:	22ff      	movs	r2, #255	; 0xff
     dc6:	0209      	lsls	r1, r1, #8
     dc8:	ba12      	rev	r2, r2
     dca:	0c03      	lsrs	r3, r0, #16
     dcc:	428b      	cmp	r3, r1
     dce:	d302      	bcc.n	dd6 <__udivsi3+0x32>
     dd0:	1212      	asrs	r2, r2, #8
     dd2:	0209      	lsls	r1, r1, #8
     dd4:	d065      	beq.n	ea2 <__udivsi3+0xfe>
     dd6:	0b03      	lsrs	r3, r0, #12
     dd8:	428b      	cmp	r3, r1
     dda:	d319      	bcc.n	e10 <__udivsi3+0x6c>
     ddc:	e000      	b.n	de0 <__udivsi3+0x3c>
     dde:	0a09      	lsrs	r1, r1, #8
     de0:	0bc3      	lsrs	r3, r0, #15
     de2:	428b      	cmp	r3, r1
     de4:	d301      	bcc.n	dea <__udivsi3+0x46>
     de6:	03cb      	lsls	r3, r1, #15
     de8:	1ac0      	subs	r0, r0, r3
     dea:	4152      	adcs	r2, r2
     dec:	0b83      	lsrs	r3, r0, #14
     dee:	428b      	cmp	r3, r1
     df0:	d301      	bcc.n	df6 <__udivsi3+0x52>
     df2:	038b      	lsls	r3, r1, #14
     df4:	1ac0      	subs	r0, r0, r3
     df6:	4152      	adcs	r2, r2
     df8:	0b43      	lsrs	r3, r0, #13
     dfa:	428b      	cmp	r3, r1
     dfc:	d301      	bcc.n	e02 <__udivsi3+0x5e>
     dfe:	034b      	lsls	r3, r1, #13
     e00:	1ac0      	subs	r0, r0, r3
     e02:	4152      	adcs	r2, r2
     e04:	0b03      	lsrs	r3, r0, #12
     e06:	428b      	cmp	r3, r1
     e08:	d301      	bcc.n	e0e <__udivsi3+0x6a>
     e0a:	030b      	lsls	r3, r1, #12
     e0c:	1ac0      	subs	r0, r0, r3
     e0e:	4152      	adcs	r2, r2
     e10:	0ac3      	lsrs	r3, r0, #11
     e12:	428b      	cmp	r3, r1
     e14:	d301      	bcc.n	e1a <__udivsi3+0x76>
     e16:	02cb      	lsls	r3, r1, #11
     e18:	1ac0      	subs	r0, r0, r3
     e1a:	4152      	adcs	r2, r2
     e1c:	0a83      	lsrs	r3, r0, #10
     e1e:	428b      	cmp	r3, r1
     e20:	d301      	bcc.n	e26 <__udivsi3+0x82>
     e22:	028b      	lsls	r3, r1, #10
     e24:	1ac0      	subs	r0, r0, r3
     e26:	4152      	adcs	r2, r2
     e28:	0a43      	lsrs	r3, r0, #9
     e2a:	428b      	cmp	r3, r1
     e2c:	d301      	bcc.n	e32 <__udivsi3+0x8e>
     e2e:	024b      	lsls	r3, r1, #9
     e30:	1ac0      	subs	r0, r0, r3
     e32:	4152      	adcs	r2, r2
     e34:	0a03      	lsrs	r3, r0, #8
     e36:	428b      	cmp	r3, r1
     e38:	d301      	bcc.n	e3e <__udivsi3+0x9a>
     e3a:	020b      	lsls	r3, r1, #8
     e3c:	1ac0      	subs	r0, r0, r3
     e3e:	4152      	adcs	r2, r2
     e40:	d2cd      	bcs.n	dde <__udivsi3+0x3a>
     e42:	09c3      	lsrs	r3, r0, #7
     e44:	428b      	cmp	r3, r1
     e46:	d301      	bcc.n	e4c <__udivsi3+0xa8>
     e48:	01cb      	lsls	r3, r1, #7
     e4a:	1ac0      	subs	r0, r0, r3
     e4c:	4152      	adcs	r2, r2
     e4e:	0983      	lsrs	r3, r0, #6
     e50:	428b      	cmp	r3, r1
     e52:	d301      	bcc.n	e58 <__udivsi3+0xb4>
     e54:	018b      	lsls	r3, r1, #6
     e56:	1ac0      	subs	r0, r0, r3
     e58:	4152      	adcs	r2, r2
     e5a:	0943      	lsrs	r3, r0, #5
     e5c:	428b      	cmp	r3, r1
     e5e:	d301      	bcc.n	e64 <__udivsi3+0xc0>
     e60:	014b      	lsls	r3, r1, #5
     e62:	1ac0      	subs	r0, r0, r3
     e64:	4152      	adcs	r2, r2
     e66:	0903      	lsrs	r3, r0, #4
     e68:	428b      	cmp	r3, r1
     e6a:	d301      	bcc.n	e70 <__udivsi3+0xcc>
     e6c:	010b      	lsls	r3, r1, #4
     e6e:	1ac0      	subs	r0, r0, r3
     e70:	4152      	adcs	r2, r2
     e72:	08c3      	lsrs	r3, r0, #3
     e74:	428b      	cmp	r3, r1
     e76:	d301      	bcc.n	e7c <__udivsi3+0xd8>
     e78:	00cb      	lsls	r3, r1, #3
     e7a:	1ac0      	subs	r0, r0, r3
     e7c:	4152      	adcs	r2, r2
     e7e:	0883      	lsrs	r3, r0, #2
     e80:	428b      	cmp	r3, r1
     e82:	d301      	bcc.n	e88 <__udivsi3+0xe4>
     e84:	008b      	lsls	r3, r1, #2
     e86:	1ac0      	subs	r0, r0, r3
     e88:	4152      	adcs	r2, r2
     e8a:	0843      	lsrs	r3, r0, #1
     e8c:	428b      	cmp	r3, r1
     e8e:	d301      	bcc.n	e94 <__udivsi3+0xf0>
     e90:	004b      	lsls	r3, r1, #1
     e92:	1ac0      	subs	r0, r0, r3
     e94:	4152      	adcs	r2, r2
     e96:	1a41      	subs	r1, r0, r1
     e98:	d200      	bcs.n	e9c <__udivsi3+0xf8>
     e9a:	4601      	mov	r1, r0
     e9c:	4152      	adcs	r2, r2
     e9e:	4610      	mov	r0, r2
     ea0:	4770      	bx	lr
     ea2:	e7ff      	b.n	ea4 <__udivsi3+0x100>
     ea4:	b501      	push	{r0, lr}
     ea6:	2000      	movs	r0, #0
     ea8:	f000 f806 	bl	eb8 <__aeabi_idiv0>
     eac:	bd02      	pop	{r1, pc}
     eae:	46c0      	nop			; (mov r8, r8)

00000eb0 <__aeabi_uidivmod>:
     eb0:	2900      	cmp	r1, #0
     eb2:	d0f7      	beq.n	ea4 <__udivsi3+0x100>
     eb4:	e776      	b.n	da4 <__udivsi3>
     eb6:	4770      	bx	lr

00000eb8 <__aeabi_idiv0>:
     eb8:	4770      	bx	lr
     eba:	46c0      	nop			; (mov r8, r8)

00000ebc <__aeabi_ui2f>:
     ebc:	b510      	push	{r4, lr}
     ebe:	1e04      	subs	r4, r0, #0
     ec0:	d027      	beq.n	f12 <__aeabi_ui2f+0x56>
     ec2:	f000 f841 	bl	f48 <__clzsi2>
     ec6:	239e      	movs	r3, #158	; 0x9e
     ec8:	1a1b      	subs	r3, r3, r0
     eca:	2b96      	cmp	r3, #150	; 0x96
     ecc:	dc0a      	bgt.n	ee4 <__aeabi_ui2f+0x28>
     ece:	2296      	movs	r2, #150	; 0x96
     ed0:	1ad2      	subs	r2, r2, r3
     ed2:	4094      	lsls	r4, r2
     ed4:	0264      	lsls	r4, r4, #9
     ed6:	0a64      	lsrs	r4, r4, #9
     ed8:	b2db      	uxtb	r3, r3
     eda:	0264      	lsls	r4, r4, #9
     edc:	05db      	lsls	r3, r3, #23
     ede:	0a60      	lsrs	r0, r4, #9
     ee0:	4318      	orrs	r0, r3
     ee2:	bd10      	pop	{r4, pc}
     ee4:	2b99      	cmp	r3, #153	; 0x99
     ee6:	dc17      	bgt.n	f18 <__aeabi_ui2f+0x5c>
     ee8:	2299      	movs	r2, #153	; 0x99
     eea:	1ad2      	subs	r2, r2, r3
     eec:	2a00      	cmp	r2, #0
     eee:	dd27      	ble.n	f40 <__aeabi_ui2f+0x84>
     ef0:	4094      	lsls	r4, r2
     ef2:	0022      	movs	r2, r4
     ef4:	4c13      	ldr	r4, [pc, #76]	; (f44 <__aeabi_ui2f+0x88>)
     ef6:	4014      	ands	r4, r2
     ef8:	0751      	lsls	r1, r2, #29
     efa:	d004      	beq.n	f06 <__aeabi_ui2f+0x4a>
     efc:	210f      	movs	r1, #15
     efe:	400a      	ands	r2, r1
     f00:	2a04      	cmp	r2, #4
     f02:	d000      	beq.n	f06 <__aeabi_ui2f+0x4a>
     f04:	3404      	adds	r4, #4
     f06:	0162      	lsls	r2, r4, #5
     f08:	d412      	bmi.n	f30 <__aeabi_ui2f+0x74>
     f0a:	01a4      	lsls	r4, r4, #6
     f0c:	0a64      	lsrs	r4, r4, #9
     f0e:	b2db      	uxtb	r3, r3
     f10:	e7e3      	b.n	eda <__aeabi_ui2f+0x1e>
     f12:	2300      	movs	r3, #0
     f14:	2400      	movs	r4, #0
     f16:	e7e0      	b.n	eda <__aeabi_ui2f+0x1e>
     f18:	22b9      	movs	r2, #185	; 0xb9
     f1a:	0021      	movs	r1, r4
     f1c:	1ad2      	subs	r2, r2, r3
     f1e:	4091      	lsls	r1, r2
     f20:	000a      	movs	r2, r1
     f22:	1e51      	subs	r1, r2, #1
     f24:	418a      	sbcs	r2, r1
     f26:	2105      	movs	r1, #5
     f28:	1a09      	subs	r1, r1, r0
     f2a:	40cc      	lsrs	r4, r1
     f2c:	4314      	orrs	r4, r2
     f2e:	e7db      	b.n	ee8 <__aeabi_ui2f+0x2c>
     f30:	4b04      	ldr	r3, [pc, #16]	; (f44 <__aeabi_ui2f+0x88>)
     f32:	401c      	ands	r4, r3
     f34:	239f      	movs	r3, #159	; 0x9f
     f36:	01a4      	lsls	r4, r4, #6
     f38:	1a1b      	subs	r3, r3, r0
     f3a:	0a64      	lsrs	r4, r4, #9
     f3c:	b2db      	uxtb	r3, r3
     f3e:	e7cc      	b.n	eda <__aeabi_ui2f+0x1e>
     f40:	0022      	movs	r2, r4
     f42:	e7d7      	b.n	ef4 <__aeabi_ui2f+0x38>
     f44:	fbffffff 	.word	0xfbffffff

00000f48 <__clzsi2>:
     f48:	211c      	movs	r1, #28
     f4a:	2301      	movs	r3, #1
     f4c:	041b      	lsls	r3, r3, #16
     f4e:	4298      	cmp	r0, r3
     f50:	d301      	bcc.n	f56 <__clzsi2+0xe>
     f52:	0c00      	lsrs	r0, r0, #16
     f54:	3910      	subs	r1, #16
     f56:	0a1b      	lsrs	r3, r3, #8
     f58:	4298      	cmp	r0, r3
     f5a:	d301      	bcc.n	f60 <__clzsi2+0x18>
     f5c:	0a00      	lsrs	r0, r0, #8
     f5e:	3908      	subs	r1, #8
     f60:	091b      	lsrs	r3, r3, #4
     f62:	4298      	cmp	r0, r3
     f64:	d301      	bcc.n	f6a <__clzsi2+0x22>
     f66:	0900      	lsrs	r0, r0, #4
     f68:	3904      	subs	r1, #4
     f6a:	a202      	add	r2, pc, #8	; (adr r2, f74 <__clzsi2+0x2c>)
     f6c:	5c10      	ldrb	r0, [r2, r0]
     f6e:	1840      	adds	r0, r0, r1
     f70:	4770      	bx	lr
     f72:	46c0      	nop			; (mov r8, r8)
     f74:	02020304 	.word	0x02020304
     f78:	01010101 	.word	0x01010101
	...

00000f84 <__libc_init_array>:
     f84:	b570      	push	{r4, r5, r6, lr}
     f86:	2600      	movs	r6, #0
     f88:	4d0c      	ldr	r5, [pc, #48]	; (fbc <__libc_init_array+0x38>)
     f8a:	4c0d      	ldr	r4, [pc, #52]	; (fc0 <__libc_init_array+0x3c>)
     f8c:	1b64      	subs	r4, r4, r5
     f8e:	10a4      	asrs	r4, r4, #2
     f90:	42a6      	cmp	r6, r4
     f92:	d109      	bne.n	fa8 <__libc_init_array+0x24>
     f94:	2600      	movs	r6, #0
     f96:	f000 f8cf 	bl	1138 <_init>
     f9a:	4d0a      	ldr	r5, [pc, #40]	; (fc4 <__libc_init_array+0x40>)
     f9c:	4c0a      	ldr	r4, [pc, #40]	; (fc8 <__libc_init_array+0x44>)
     f9e:	1b64      	subs	r4, r4, r5
     fa0:	10a4      	asrs	r4, r4, #2
     fa2:	42a6      	cmp	r6, r4
     fa4:	d105      	bne.n	fb2 <__libc_init_array+0x2e>
     fa6:	bd70      	pop	{r4, r5, r6, pc}
     fa8:	00b3      	lsls	r3, r6, #2
     faa:	58eb      	ldr	r3, [r5, r3]
     fac:	4798      	blx	r3
     fae:	3601      	adds	r6, #1
     fb0:	e7ee      	b.n	f90 <__libc_init_array+0xc>
     fb2:	00b3      	lsls	r3, r6, #2
     fb4:	58eb      	ldr	r3, [r5, r3]
     fb6:	4798      	blx	r3
     fb8:	3601      	adds	r6, #1
     fba:	e7f2      	b.n	fa2 <__libc_init_array+0x1e>
     fbc:	00001144 	.word	0x00001144
     fc0:	00001144 	.word	0x00001144
     fc4:	00001144 	.word	0x00001144
     fc8:	00001148 	.word	0x00001148

00000fcc <memcpy>:
     fcc:	2300      	movs	r3, #0
     fce:	b510      	push	{r4, lr}
     fd0:	429a      	cmp	r2, r3
     fd2:	d100      	bne.n	fd6 <memcpy+0xa>
     fd4:	bd10      	pop	{r4, pc}
     fd6:	5ccc      	ldrb	r4, [r1, r3]
     fd8:	54c4      	strb	r4, [r0, r3]
     fda:	3301      	adds	r3, #1
     fdc:	e7f8      	b.n	fd0 <memcpy+0x4>
     fde:	0000      	movs	r0, r0
     fe0:	00000390 	.word	0x00000390
     fe4:	000005da 	.word	0x000005da
     fe8:	000005da 	.word	0x000005da
     fec:	000005da 	.word	0x000005da
     ff0:	000005da 	.word	0x000005da
     ff4:	000005da 	.word	0x000005da
     ff8:	000005da 	.word	0x000005da
     ffc:	000005da 	.word	0x000005da
    1000:	000005da 	.word	0x000005da
    1004:	000005da 	.word	0x000005da
    1008:	000005da 	.word	0x000005da
    100c:	000005da 	.word	0x000005da
    1010:	000005da 	.word	0x000005da
    1014:	000005da 	.word	0x000005da
    1018:	000005da 	.word	0x000005da
    101c:	000005da 	.word	0x000005da
    1020:	00000378 	.word	0x00000378
    1024:	000005da 	.word	0x000005da
    1028:	000005da 	.word	0x000005da
    102c:	000005da 	.word	0x000005da
    1030:	000005da 	.word	0x000005da
    1034:	000005da 	.word	0x000005da
    1038:	000005da 	.word	0x000005da
    103c:	000005da 	.word	0x000005da
    1040:	000005da 	.word	0x000005da
    1044:	000005da 	.word	0x000005da
    1048:	000005da 	.word	0x000005da
    104c:	000005da 	.word	0x000005da
    1050:	000005da 	.word	0x000005da
    1054:	000005da 	.word	0x000005da
    1058:	000005da 	.word	0x000005da
    105c:	000005da 	.word	0x000005da
    1060:	00000388 	.word	0x00000388
    1064:	000005da 	.word	0x000005da
    1068:	000005da 	.word	0x000005da
    106c:	000005da 	.word	0x000005da
    1070:	000005da 	.word	0x000005da
    1074:	000005da 	.word	0x000005da
    1078:	000005da 	.word	0x000005da
    107c:	000005da 	.word	0x000005da
    1080:	000005da 	.word	0x000005da
    1084:	000005da 	.word	0x000005da
    1088:	000005da 	.word	0x000005da
    108c:	000005da 	.word	0x000005da
    1090:	000005da 	.word	0x000005da
    1094:	000005da 	.word	0x000005da
    1098:	000005da 	.word	0x000005da
    109c:	000005da 	.word	0x000005da
    10a0:	00000380 	.word	0x00000380
    10a4:	00000398 	.word	0x00000398
    10a8:	00000360 	.word	0x00000360
    10ac:	00000370 	.word	0x00000370
    10b0:	00000368 	.word	0x00000368
    10b4:	00000002 	.word	0x00000002
    10b8:	00000003 	.word	0x00000003
    10bc:	00000028 	.word	0x00000028
    10c0:	00000029 	.word	0x00000029
    10c4:	00000004 	.word	0x00000004
    10c8:	00000005 	.word	0x00000005
    10cc:	00000006 	.word	0x00000006
    10d0:	00000007 	.word	0x00000007
    10d4:	00000020 	.word	0x00000020
    10d8:	00000021 	.word	0x00000021
    10dc:	00000022 	.word	0x00000022
    10e0:	00000023 	.word	0x00000023
    10e4:	00000024 	.word	0x00000024
    10e8:	00000025 	.word	0x00000025
    10ec:	00000026 	.word	0x00000026
    10f0:	00000027 	.word	0x00000027
    10f4:	00000008 	.word	0x00000008
    10f8:	00000009 	.word	0x00000009
    10fc:	0000000a 	.word	0x0000000a
    1100:	0000000b 	.word	0x0000000b
    1104:	0000ffff 	.word	0x0000ffff
    1108:	0000ffff 	.word	0x0000ffff
    110c:	0000ffff 	.word	0x0000ffff
    1110:	0000ffff 	.word	0x0000ffff
    1114:	00000742 	.word	0x00000742
    1118:	0000073e 	.word	0x0000073e
    111c:	0000073e 	.word	0x0000073e
    1120:	000007a4 	.word	0x000007a4
    1124:	000007a4 	.word	0x000007a4
    1128:	00000758 	.word	0x00000758
    112c:	00000748 	.word	0x00000748
    1130:	0000075e 	.word	0x0000075e
    1134:	00000792 	.word	0x00000792

00001138 <_init>:
    1138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    113a:	46c0      	nop			; (mov r8, r8)
    113c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    113e:	bc08      	pop	{r3}
    1140:	469e      	mov	lr, r3
    1142:	4770      	bx	lr

00001144 <__init_array_start>:
    1144:	000000dd 	.word	0x000000dd

00001148 <_fini>:
    1148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    114a:	46c0      	nop			; (mov r8, r8)
    114c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    114e:	bc08      	pop	{r3}
    1150:	469e      	mov	lr, r3
    1152:	4770      	bx	lr

00001154 <__fini_array_start>:
    1154:	000000b5 	.word	0x000000b5
