
ADC_EXAMPLE2_GFX1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00802000  000020a6  0000213a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000210  0080201e  0080201e  00002158  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002158  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000021b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c0  00000000  00000000  000021f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010242  00000000  00000000  000025b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000526e  00000000  00000000  000127fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008a08  00000000  00000000  00017a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b68  00000000  00000000  00020470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000330c8  00000000  00000000  00020fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006561  00000000  00000000  000540a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000500  00000000  00000000  0005a608  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c538  00000000  00000000  0005ab08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	64 c2       	rjmp	.+1224   	; 0x4ce <__bad_interrupt>
       6:	00 00       	nop
       8:	62 c2       	rjmp	.+1220   	; 0x4ce <__bad_interrupt>
       a:	00 00       	nop
       c:	60 c2       	rjmp	.+1216   	; 0x4ce <__bad_interrupt>
       e:	00 00       	nop
      10:	5e c2       	rjmp	.+1212   	; 0x4ce <__bad_interrupt>
      12:	00 00       	nop
      14:	5c c2       	rjmp	.+1208   	; 0x4ce <__bad_interrupt>
      16:	00 00       	nop
      18:	5a c2       	rjmp	.+1204   	; 0x4ce <__bad_interrupt>
      1a:	00 00       	nop
      1c:	58 c2       	rjmp	.+1200   	; 0x4ce <__bad_interrupt>
      1e:	00 00       	nop
      20:	56 c2       	rjmp	.+1196   	; 0x4ce <__bad_interrupt>
      22:	00 00       	nop
      24:	54 c2       	rjmp	.+1192   	; 0x4ce <__bad_interrupt>
      26:	00 00       	nop
      28:	52 c2       	rjmp	.+1188   	; 0x4ce <__bad_interrupt>
      2a:	00 00       	nop
      2c:	50 c2       	rjmp	.+1184   	; 0x4ce <__bad_interrupt>
      2e:	00 00       	nop
      30:	4e c2       	rjmp	.+1180   	; 0x4ce <__bad_interrupt>
      32:	00 00       	nop
      34:	4c c2       	rjmp	.+1176   	; 0x4ce <__bad_interrupt>
      36:	00 00       	nop
      38:	4a c2       	rjmp	.+1172   	; 0x4ce <__bad_interrupt>
      3a:	00 00       	nop
      3c:	48 c2       	rjmp	.+1168   	; 0x4ce <__bad_interrupt>
      3e:	00 00       	nop
      40:	46 c2       	rjmp	.+1164   	; 0x4ce <__bad_interrupt>
      42:	00 00       	nop
      44:	44 c2       	rjmp	.+1160   	; 0x4ce <__bad_interrupt>
      46:	00 00       	nop
      48:	42 c2       	rjmp	.+1156   	; 0x4ce <__bad_interrupt>
      4a:	00 00       	nop
      4c:	40 c2       	rjmp	.+1152   	; 0x4ce <__bad_interrupt>
      4e:	00 00       	nop
      50:	3e c2       	rjmp	.+1148   	; 0x4ce <__bad_interrupt>
      52:	00 00       	nop
      54:	3c c2       	rjmp	.+1144   	; 0x4ce <__bad_interrupt>
      56:	00 00       	nop
      58:	3a c2       	rjmp	.+1140   	; 0x4ce <__bad_interrupt>
      5a:	00 00       	nop
      5c:	38 c2       	rjmp	.+1136   	; 0x4ce <__bad_interrupt>
      5e:	00 00       	nop
      60:	36 c2       	rjmp	.+1132   	; 0x4ce <__bad_interrupt>
      62:	00 00       	nop
      64:	34 c2       	rjmp	.+1128   	; 0x4ce <__bad_interrupt>
      66:	00 00       	nop
      68:	32 c2       	rjmp	.+1124   	; 0x4ce <__bad_interrupt>
      6a:	00 00       	nop
      6c:	30 c2       	rjmp	.+1120   	; 0x4ce <__bad_interrupt>
      6e:	00 00       	nop
      70:	2e c2       	rjmp	.+1116   	; 0x4ce <__bad_interrupt>
      72:	00 00       	nop
      74:	2c c2       	rjmp	.+1112   	; 0x4ce <__bad_interrupt>
      76:	00 00       	nop
      78:	2a c2       	rjmp	.+1108   	; 0x4ce <__bad_interrupt>
      7a:	00 00       	nop
      7c:	28 c2       	rjmp	.+1104   	; 0x4ce <__bad_interrupt>
      7e:	00 00       	nop
      80:	26 c2       	rjmp	.+1100   	; 0x4ce <__bad_interrupt>
      82:	00 00       	nop
      84:	24 c2       	rjmp	.+1096   	; 0x4ce <__bad_interrupt>
      86:	00 00       	nop
      88:	22 c2       	rjmp	.+1092   	; 0x4ce <__bad_interrupt>
      8a:	00 00       	nop
      8c:	20 c2       	rjmp	.+1088   	; 0x4ce <__bad_interrupt>
      8e:	00 00       	nop
      90:	1e c2       	rjmp	.+1084   	; 0x4ce <__bad_interrupt>
      92:	00 00       	nop
      94:	1c c2       	rjmp	.+1080   	; 0x4ce <__bad_interrupt>
      96:	00 00       	nop
      98:	1a c2       	rjmp	.+1076   	; 0x4ce <__bad_interrupt>
      9a:	00 00       	nop
      9c:	62 c2       	rjmp	.+1220   	; 0x562 <__vector_39>
      9e:	00 00       	nop
      a0:	16 c2       	rjmp	.+1068   	; 0x4ce <__bad_interrupt>
      a2:	00 00       	nop
      a4:	14 c2       	rjmp	.+1064   	; 0x4ce <__bad_interrupt>
      a6:	00 00       	nop
      a8:	12 c2       	rjmp	.+1060   	; 0x4ce <__bad_interrupt>
      aa:	00 00       	nop
      ac:	10 c2       	rjmp	.+1056   	; 0x4ce <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0e c2       	rjmp	.+1052   	; 0x4ce <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0c c2       	rjmp	.+1048   	; 0x4ce <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0a c2       	rjmp	.+1044   	; 0x4ce <__bad_interrupt>
      ba:	00 00       	nop
      bc:	08 c2       	rjmp	.+1040   	; 0x4ce <__bad_interrupt>
      be:	00 00       	nop
      c0:	06 c2       	rjmp	.+1036   	; 0x4ce <__bad_interrupt>
      c2:	00 00       	nop
      c4:	04 c2       	rjmp	.+1032   	; 0x4ce <__bad_interrupt>
      c6:	00 00       	nop
      c8:	02 c2       	rjmp	.+1028   	; 0x4ce <__bad_interrupt>
      ca:	00 00       	nop
      cc:	00 c2       	rjmp	.+1024   	; 0x4ce <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fe c1       	rjmp	.+1020   	; 0x4ce <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fc c1       	rjmp	.+1016   	; 0x4ce <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fa c1       	rjmp	.+1012   	; 0x4ce <__bad_interrupt>
      da:	00 00       	nop
      dc:	f8 c1       	rjmp	.+1008   	; 0x4ce <__bad_interrupt>
      de:	00 00       	nop
      e0:	f6 c1       	rjmp	.+1004   	; 0x4ce <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f4 c1       	rjmp	.+1000   	; 0x4ce <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f2 c1       	rjmp	.+996    	; 0x4ce <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f0 c1       	rjmp	.+992    	; 0x4ce <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ee c1       	rjmp	.+988    	; 0x4ce <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ec c1       	rjmp	.+984    	; 0x4ce <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ea c1       	rjmp	.+980    	; 0x4ce <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e8 c1       	rjmp	.+976    	; 0x4ce <__bad_interrupt>
      fe:	00 00       	nop
     100:	e6 c1       	rjmp	.+972    	; 0x4ce <__bad_interrupt>
     102:	00 00       	nop
     104:	e4 c1       	rjmp	.+968    	; 0x4ce <__bad_interrupt>
     106:	00 00       	nop
     108:	e2 c1       	rjmp	.+964    	; 0x4ce <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e0 c1       	rjmp	.+960    	; 0x4ce <__bad_interrupt>
     10e:	00 00       	nop
     110:	de c1       	rjmp	.+956    	; 0x4ce <__bad_interrupt>
     112:	00 00       	nop
     114:	dc c1       	rjmp	.+952    	; 0x4ce <__bad_interrupt>
     116:	00 00       	nop
     118:	da c1       	rjmp	.+948    	; 0x4ce <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d8 c1       	rjmp	.+944    	; 0x4ce <__bad_interrupt>
     11e:	00 00       	nop
     120:	d6 c1       	rjmp	.+940    	; 0x4ce <__bad_interrupt>
     122:	00 00       	nop
     124:	d4 c1       	rjmp	.+936    	; 0x4ce <__bad_interrupt>
     126:	00 00       	nop
     128:	d2 c1       	rjmp	.+932    	; 0x4ce <__bad_interrupt>
     12a:	00 00       	nop
     12c:	d0 c1       	rjmp	.+928    	; 0x4ce <__bad_interrupt>
     12e:	00 00       	nop
     130:	ce c1       	rjmp	.+924    	; 0x4ce <__bad_interrupt>
     132:	00 00       	nop
     134:	cc c1       	rjmp	.+920    	; 0x4ce <__bad_interrupt>
     136:	00 00       	nop
     138:	ca c1       	rjmp	.+916    	; 0x4ce <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c8 c1       	rjmp	.+912    	; 0x4ce <__bad_interrupt>
     13e:	00 00       	nop
     140:	c6 c1       	rjmp	.+908    	; 0x4ce <__bad_interrupt>
     142:	00 00       	nop
     144:	c4 c1       	rjmp	.+904    	; 0x4ce <__bad_interrupt>
     146:	00 00       	nop
     148:	c2 c1       	rjmp	.+900    	; 0x4ce <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c0 c1       	rjmp	.+896    	; 0x4ce <__bad_interrupt>
     14e:	00 00       	nop
     150:	be c1       	rjmp	.+892    	; 0x4ce <__bad_interrupt>
     152:	00 00       	nop
     154:	bc c1       	rjmp	.+888    	; 0x4ce <__bad_interrupt>
     156:	00 00       	nop
     158:	ba c1       	rjmp	.+884    	; 0x4ce <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b8 c1       	rjmp	.+880    	; 0x4ce <__bad_interrupt>
     15e:	00 00       	nop
     160:	b6 c1       	rjmp	.+876    	; 0x4ce <__bad_interrupt>
     162:	00 00       	nop
     164:	b4 c1       	rjmp	.+872    	; 0x4ce <__bad_interrupt>
     166:	00 00       	nop
     168:	b2 c1       	rjmp	.+868    	; 0x4ce <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b0 c1       	rjmp	.+864    	; 0x4ce <__bad_interrupt>
     16e:	00 00       	nop
     170:	ae c1       	rjmp	.+860    	; 0x4ce <__bad_interrupt>
     172:	00 00       	nop
     174:	ac c1       	rjmp	.+856    	; 0x4ce <__bad_interrupt>
     176:	00 00       	nop
     178:	aa c1       	rjmp	.+852    	; 0x4ce <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a8 c1       	rjmp	.+848    	; 0x4ce <__bad_interrupt>
     17e:	00 00       	nop
     180:	a6 c1       	rjmp	.+844    	; 0x4ce <__bad_interrupt>
     182:	00 00       	nop
     184:	a4 c1       	rjmp	.+840    	; 0x4ce <__bad_interrupt>
     186:	00 00       	nop
     188:	a2 c1       	rjmp	.+836    	; 0x4ce <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a0 c1       	rjmp	.+832    	; 0x4ce <__bad_interrupt>
     18e:	00 00       	nop
     190:	9e c1       	rjmp	.+828    	; 0x4ce <__bad_interrupt>
     192:	00 00       	nop
     194:	9c c1       	rjmp	.+824    	; 0x4ce <__bad_interrupt>
     196:	00 00       	nop
     198:	9a c1       	rjmp	.+820    	; 0x4ce <__bad_interrupt>
     19a:	00 00       	nop
     19c:	98 c1       	rjmp	.+816    	; 0x4ce <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	96 c1       	rjmp	.+812    	; 0x4ce <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	94 c1       	rjmp	.+808    	; 0x4ce <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	92 c1       	rjmp	.+804    	; 0x4ce <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	90 c1       	rjmp	.+800    	; 0x4ce <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8e c1       	rjmp	.+796    	; 0x4ce <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8c c1       	rjmp	.+792    	; 0x4ce <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8a c1       	rjmp	.+788    	; 0x4ce <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	88 c1       	rjmp	.+784    	; 0x4ce <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	86 c1       	rjmp	.+780    	; 0x4ce <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	84 c1       	rjmp	.+776    	; 0x4ce <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	82 c1       	rjmp	.+772    	; 0x4ce <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	80 c1       	rjmp	.+768    	; 0x4ce <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7e c1       	rjmp	.+764    	; 0x4ce <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7c c1       	rjmp	.+760    	; 0x4ce <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7a c1       	rjmp	.+756    	; 0x4ce <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	78 c1       	rjmp	.+752    	; 0x4ce <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	76 c1       	rjmp	.+748    	; 0x4ce <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	74 c1       	rjmp	.+744    	; 0x4ce <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	72 c1       	rjmp	.+740    	; 0x4ce <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	70 c1       	rjmp	.+736    	; 0x4ce <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6e c1       	rjmp	.+732    	; 0x4ce <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6c c1       	rjmp	.+728    	; 0x4ce <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6a c1       	rjmp	.+724    	; 0x4ce <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1e72>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7010f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x665a>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x6632>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x565a>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1e32>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	e6 ea       	ldi	r30, 0xA6	; 166
     4a6:	f0 e2       	ldi	r31, 0x20	; 32
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	ae 31       	cpi	r26, 0x1E	; 30
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	22 e2       	ldi	r18, 0x22	; 34
     4ba:	ae e1       	ldi	r26, 0x1E	; 30
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	ae 32       	cpi	r26, 0x2E	; 46
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	d2 d0       	rcall	.+420    	; 0x66e <main>
     4ca:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <_exit>

000004ce <__bad_interrupt>:
     4ce:	98 cd       	rjmp	.-1232   	; 0x0 <__vectors>

000004d0 <get_mean_sample_value>:
 * and computes the mean value of the resulting sample values.
 *
 * \return Mean sample value.
 */
static uint16_t get_mean_sample_value(void)
{
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	1f 92       	push	r1
     4d6:	cd b7       	in	r28, 0x3d	; 61
     4d8:	de b7       	in	r29, 0x3e	; 62
     4da:	20 e4       	ldi	r18, 0x40	; 64
     4dc:	30 e0       	ldi	r19, 0x00	; 0
	uint32_t sum = 0;
     4de:	40 e0       	ldi	r20, 0x00	; 0
     4e0:	50 e0       	ldi	r21, 0x00	; 0
     4e2:	ba 01       	movw	r22, r20
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     4e4:	e0 e4       	ldi	r30, 0x40	; 64
     4e6:	f2 e0       	ldi	r31, 0x02	; 2
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
     4e8:	a1 e0       	ldi	r26, 0x01	; 1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     4ea:	8f b7       	in	r24, 0x3f	; 63
     4ec:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     4ee:	f8 94       	cli
	return flags;
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     4f2:	90 81       	ld	r25, Z
     4f4:	94 60       	ori	r25, 0x04	; 4
     4f6:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4f8:	8f bf       	out	0x3f, r24	; 63
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
     4fa:	96 81       	ldd	r25, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
     4fc:	90 ff       	sbrs	r25, 0
     4fe:	fd cf       	rjmp	.-6      	; 0x4fa <get_mean_sample_value+0x2a>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
     500:	a6 83       	std	Z+6, r26	; 0x06
	// Sum the configured number of samples.
	for (i = 0; i < (1 << OVERSAMPLING_FACTOR); i++) {
		adc_start_conversion(&ADCB, ADC_CH0);
		adc_wait_for_interrupt_flag(&ADCB, ADC_CH0);

		sum += adc_get_result(&ADCB, ADC_CH0);
     502:	84 a1       	ldd	r24, Z+36	; 0x24
     504:	95 a1       	ldd	r25, Z+37	; 0x25
     506:	48 0f       	add	r20, r24
     508:	59 1f       	adc	r21, r25
     50a:	61 1d       	adc	r22, r1
     50c:	71 1d       	adc	r23, r1
     50e:	21 50       	subi	r18, 0x01	; 1
     510:	31 09       	sbc	r19, r1
{
	uint32_t sum = 0;
	uint16_t i;

	// Sum the configured number of samples.
	for (i = 0; i < (1 << OVERSAMPLING_FACTOR); i++) {
     512:	59 f7       	brne	.-42     	; 0x4ea <get_mean_sample_value+0x1a>
	}

	// Compute sample mean by scaling down according to oversampling factor.
	sum >>= OVERSAMPLING_FACTOR;

	return sum;
     514:	db 01       	movw	r26, r22
     516:	ca 01       	movw	r24, r20
     518:	68 94       	set
     51a:	15 f8       	bld	r1, 5
     51c:	b6 95       	lsr	r27
     51e:	a7 95       	ror	r26
     520:	97 95       	ror	r25
     522:	87 95       	ror	r24
     524:	16 94       	lsr	r1
     526:	d1 f7       	brne	.-12     	; 0x51c <get_mean_sample_value+0x4c>
}
     528:	0f 90       	pop	r0
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	08 95       	ret

00000530 <wait_for_button>:

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
     530:	e0 e8       	ldi	r30, 0x80	; 128
     532:	f6 e0       	ldi	r31, 0x06	; 6
     534:	80 85       	ldd	r24, Z+8	; 0x08
 * Debouncing is done with an approximate 20 ms delay after both the press and
 * the release.
 */
static void wait_for_button(void)
{
	do {} while (ioport_pin_is_high(BUTTON_PIN));
     536:	85 fd       	sbrc	r24, 5
     538:	fd cf       	rjmp	.-6      	; 0x534 <wait_for_button+0x4>
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	90 e0       	ldi	r25, 0x00	; 0
	count = sysclk_get_cpu_hz() / 1000;
	count *= ms;
	count /= 6;

	do {
		asm("");
     53e:	01 96       	adiw	r24, 0x01	; 1
	} while (--count);
     540:	8a 32       	cpi	r24, 0x2A	; 42
     542:	28 e6       	ldi	r18, 0x68	; 104
     544:	92 07       	cpc	r25, r18
     546:	d9 f7       	brne	.-10     	; 0x53e <wait_for_button+0xe>
     548:	e0 e8       	ldi	r30, 0x80	; 128
     54a:	f6 e0       	ldi	r31, 0x06	; 6
     54c:	80 85       	ldd	r24, Z+8	; 0x08
 */
static void wait_for_button(void)
{
	do {} while (ioport_pin_is_high(BUTTON_PIN));
	mdelay(20);
	do {} while (ioport_pin_is_low(BUTTON_PIN));
     54e:	85 ff       	sbrs	r24, 5
     550:	fd cf       	rjmp	.-6      	; 0x54c <wait_for_button+0x1c>
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e0       	ldi	r25, 0x00	; 0
	count = sysclk_get_cpu_hz() / 1000;
	count *= ms;
	count /= 6;

	do {
		asm("");
     556:	01 96       	adiw	r24, 0x01	; 1
	} while (--count);
     558:	8a 32       	cpi	r24, 0x2A	; 42
     55a:	28 e6       	ldi	r18, 0x68	; 104
     55c:	92 07       	cpc	r25, r18
     55e:	d9 f7       	brne	.-10     	; 0x556 <wait_for_button+0x26>
{
	do {} while (ioport_pin_is_high(BUTTON_PIN));
	mdelay(20);
	do {} while (ioport_pin_is_low(BUTTON_PIN));
	mdelay(20);
}
     560:	08 95       	ret

00000562 <__vector_39>:
 * Upon completed AD conversion, this ISR computes a calibrated sample from the
 * ADC result, then stores it in a global variable before triggering a new
 * conversion.
 */
ISR(ADCB_CH0_vect)
{
     562:	1f 92       	push	r1
     564:	0f 92       	push	r0
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	0f 92       	push	r0
     56a:	11 24       	eor	r1, r1
     56c:	0b b6       	in	r0, 0x3b	; 59
     56e:	0f 92       	push	r0
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	2f 93       	push	r18
     576:	3f 93       	push	r19
     578:	4f 93       	push	r20
     57a:	5f 93       	push	r21
     57c:	6f 93       	push	r22
     57e:	7f 93       	push	r23
     580:	8f 93       	push	r24
     582:	9f 93       	push	r25
     584:	af 93       	push	r26
     586:	bf 93       	push	r27
     588:	ef 93       	push	r30
     58a:	ff 93       	push	r31
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
     594:	a1 97       	sbiw	r28, 0x21	; 33
     596:	cd bf       	out	0x3d, r28	; 61
     598:	de bf       	out	0x3e, r29	; 62
	int32_t sample;
	char out_str[OUTPUT_STR_SIZE];

	sample = adc_get_result(&ADCB, ADC_CH0);
     59a:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     59e:	30 91 65 02 	lds	r19, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     5a2:	a9 01       	movw	r20, r18
     5a4:	60 e0       	ldi	r22, 0x00	; 0
     5a6:	70 e0       	ldi	r23, 0x00	; 0

	// Compensate for offset error.
	sample -= cal_data.offset;
     5a8:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <cal_data>
     5ac:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <cal_data+0x1>
     5b0:	9a 01       	movw	r18, r20
     5b2:	ab 01       	movw	r20, r22
     5b4:	28 1b       	sub	r18, r24
     5b6:	39 0b       	sbc	r19, r25
     5b8:	41 09       	sbc	r20, r1
     5ba:	51 09       	sbc	r21, r1

	/* Some samples may become negative after compensation due to noise.
	 * Clamp these to 0 since we are doing unsigned conversions.
	 */
	if (sample > 0) {
     5bc:	12 16       	cp	r1, r18
     5be:	13 06       	cpc	r1, r19
     5c0:	14 06       	cpc	r1, r20
     5c2:	15 06       	cpc	r1, r21
     5c4:	6c f4       	brge	.+26     	; 0x5e0 <__vector_39+0x7e>
		// Compensate for gain error.
		sample *= IDEAL_GAIN_RESULT;
     5c6:	a4 e8       	ldi	r26, 0x84	; 132
     5c8:	b3 e0       	ldi	r27, 0x03	; 3
     5ca:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__muluhisi3>
		sample /= cal_data.gain;
     5ce:	20 91 22 20 	lds	r18, 0x2022	; 0x802022 <cal_data+0x2>
     5d2:	30 91 23 20 	lds	r19, 0x2023	; 0x802023 <cal_data+0x3>
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__divmodsi4>
     5de:	03 c0       	rjmp	.+6      	; 0x5e6 <__vector_39+0x84>
	} else {
		sample = 0;
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	a9 01       	movw	r20, r18
	}

	// Store the calibrated sample value.
	last_sample = sample;
     5e6:	20 93 1e 20 	sts	0x201E, r18	; 0x80201e <__data_end>
     5ea:	30 93 1f 20 	sts	0x201F, r19	; 0x80201f <__data_end+0x1>

	snprintf(out_str, OUTPUT_STR_SIZE, "Voltage: %4d mV", last_sample);
     5ee:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <__data_end>
     5f2:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <__data_end+0x1>
     5f6:	9f 93       	push	r25
     5f8:	8f 93       	push	r24
     5fa:	8d e0       	ldi	r24, 0x0D	; 13
     5fc:	90 e2       	ldi	r25, 0x20	; 32
     5fe:	9f 93       	push	r25
     600:	8f 93       	push	r24
     602:	1f 92       	push	r1
     604:	80 e2       	ldi	r24, 0x20	; 32
     606:	8f 93       	push	r24
     608:	8e 01       	movw	r16, r28
     60a:	0f 5f       	subi	r16, 0xFF	; 255
     60c:	1f 4f       	sbci	r17, 0xFF	; 255
     60e:	1f 93       	push	r17
     610:	0f 93       	push	r16
     612:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <snprintf>

	gfx_mono_draw_string(out_str, 0, 0, &sysfont);
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	30 e2       	ldi	r19, 0x20	; 32
     61a:	40 e0       	ldi	r20, 0x00	; 0
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	c8 01       	movw	r24, r16
     620:	36 d5       	rcall	.+2668   	; 0x108e <gfx_mono_draw_string>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     622:	8f b7       	in	r24, 0x3f	; 63
     624:	89 a3       	std	Y+33, r24	; 0x21
	cpu_irq_disable();
     626:	f8 94       	cli
	return flags;
     628:	99 a1       	ldd	r25, Y+33	; 0x21
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     62a:	e0 e4       	ldi	r30, 0x40	; 64
     62c:	f2 e0       	ldi	r31, 0x02	; 2
     62e:	80 81       	ld	r24, Z
     630:	84 60       	ori	r24, 0x04	; 4
     632:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     634:	9f bf       	out	0x3f, r25	; 63

	// Manually start the next conversion.
	adc_start_conversion(&ADCB, ADC_CH0);
}
     636:	cd bf       	out	0x3d, r28	; 61
     638:	de bf       	out	0x3e, r29	; 62
     63a:	a1 96       	adiw	r28, 0x21	; 33
     63c:	cd bf       	out	0x3d, r28	; 61
     63e:	de bf       	out	0x3e, r29	; 62
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	ff 91       	pop	r31
     646:	ef 91       	pop	r30
     648:	bf 91       	pop	r27
     64a:	af 91       	pop	r26
     64c:	9f 91       	pop	r25
     64e:	8f 91       	pop	r24
     650:	7f 91       	pop	r23
     652:	6f 91       	pop	r22
     654:	5f 91       	pop	r21
     656:	4f 91       	pop	r20
     658:	3f 91       	pop	r19
     65a:	2f 91       	pop	r18
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	0f 90       	pop	r0
     662:	0b be       	out	0x3b, r0	; 59
     664:	0f 90       	pop	r0
     666:	0f be       	out	0x3f, r0	; 63
     668:	0f 90       	pop	r0
     66a:	1f 90       	pop	r1
     66c:	18 95       	reti

0000066e <main>:
	do {} while (ioport_pin_is_low(BUTTON_PIN));
	mdelay(20);
}

int main(void)
{
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
     676:	2d 97       	sbiw	r28, 0x0d	; 13
     678:	cd bf       	out	0x3d, r28	; 61
	struct adc_config         adc_conf;
	struct adc_channel_config adcch_conf;

	board_init();
	sysclk_init();
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	cd d5       	rcall	.+2970   	; 0x1218 <board_init>
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
     67e:	88 d2       	rcall	.+1296   	; 0xb90 <sysclk_init>
     680:	e8 e2       	ldi	r30, 0x28	; 40
     682:	f2 e2       	ldi	r31, 0x22	; 34
     684:	10 82       	st	Z, r1
     686:	11 82       	std	Z+1, r1	; 0x01
     688:	12 82       	std	Z+2, r1	; 0x02
     68a:	13 82       	std	Z+3, r1	; 0x03
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
     68c:	14 82       	std	Z+4, r1	; 0x04
     68e:	11 e0       	ldi	r17, 0x01	; 1
	sleepmgr_init();
	irq_initialize_vectors();
     690:	15 83       	std	Z+5, r17	; 0x05
     692:	87 e0       	ldi	r24, 0x07	; 7
	cpu_irq_enable();
     694:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	gfx_mono_init();
     698:	78 94       	sei
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     69a:	85 d3       	rcall	.+1802   	; 0xda6 <gfx_mono_st7565r_init>
     69c:	80 e1       	ldi	r24, 0x10	; 16
     69e:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>

	// Enable the back light of the LCD
	ioport_set_pin_high(LCD_BACKLIGHT_ENABLE_PIN);

	// Initialize configuration structures.
	adc_read_configuration(&ADCB, &adc_conf);
     6a2:	be 01       	movw	r22, r28
     6a4:	6f 5f       	subi	r22, 0xFF	; 255
     6a6:	7f 4f       	sbci	r23, 0xFF	; 255
     6a8:	80 e4       	ldi	r24, 0x40	; 64
     6aa:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADCB, ADC_CH0, &adcch_conf);
     6ac:	d2 d6       	rcall	.+3492   	; 0x1452 <adc_read_configuration>
     6ae:	ae 01       	movw	r20, r28
     6b0:	48 5f       	subi	r20, 0xF8	; 248
     6b2:	5f 4f       	sbci	r21, 0xFF	; 255
     6b4:	61 e0       	ldi	r22, 0x01	; 1
     6b6:	80 e4       	ldi	r24, 0x40	; 64
     6b8:	92 e0       	ldi	r25, 0x02	; 2
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
     6ba:	4f d7       	rcall	.+3742   	; 0x155a <adcch_read_configuration>
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
     6bc:	8a 81       	ldd	r24, Y+2	; 0x02
     6be:	9b 81       	ldd	r25, Y+3	; 0x03
     6c0:	9f 78       	andi	r25, 0x8F	; 143
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
     6c2:	9b 83       	std	Y+3, r25	; 0x03
     6c4:	94 e0       	ldi	r25, 0x04	; 4
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     6c6:	9d 83       	std	Y+5, r25	; 0x05
     6c8:	81 7e       	andi	r24, 0xE1	; 225
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12,
			ADC_REF_BANDGAP);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);

	adc_write_configuration(&ADCB, &adc_conf);
     6ca:	8a 83       	std	Y+2, r24	; 0x02
     6cc:	1c 82       	std	Y+4, r1	; 0x04
     6ce:	be 01       	movw	r22, r28
     6d0:	6f 5f       	subi	r22, 0xFF	; 255
     6d2:	7f 4f       	sbci	r23, 0xFF	; 255
     6d4:	80 e4       	ldi	r24, 0x40	; 64
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     6d6:	92 e0       	ldi	r25, 0x02	; 2
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
     6d8:	56 d6       	rcall	.+3244   	; 0x1386 <adc_write_configuration>
 *
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_disable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
     6da:	18 87       	std	Y+8, r17	; 0x08
     6dc:	19 86       	std	Y+9, r1	; 0x09
	adcch_set_input(&adcch_conf, INPUT_PIN, ADCCH_NEG_NONE,
			1);
	adcch_set_interrupt_mode(&adcch_conf, ADCCH_MODE_COMPLETE);
	adcch_disable_interrupt(&adcch_conf);

	adcch_write_configuration(&ADCB, ADC_CH0, &adcch_conf);
     6de:	8a 85       	ldd	r24, Y+10	; 0x0a
     6e0:	80 7f       	andi	r24, 0xF0	; 240
     6e2:	8a 87       	std	Y+10, r24	; 0x0a
     6e4:	ae 01       	movw	r20, r28
     6e6:	48 5f       	subi	r20, 0xF8	; 248
     6e8:	5f 4f       	sbci	r21, 0xFF	; 255

	// Enable the ADC and do one dummy conversion.
	adc_enable(&ADCB);
     6ea:	61 e0       	ldi	r22, 0x01	; 1
     6ec:	80 e4       	ldi	r24, 0x40	; 64
     6ee:	92 e0       	ldi	r25, 0x02	; 2
     6f0:	e9 d6       	rcall	.+3538   	; 0x14c4 <adcch_write_configuration>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     6f2:	80 e4       	ldi	r24, 0x40	; 64
     6f4:	92 e0       	ldi	r25, 0x02	; 2
	cpu_irq_disable();
     6f6:	1b d6       	rcall	.+3126   	; 0x132e <adc_enable>
	return flags;
     6f8:	8f b7       	in	r24, 0x3f	; 63
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     6fa:	8c 87       	std	Y+12, r24	; 0x0c
     6fc:	f8 94       	cli
     6fe:	9c 85       	ldd	r25, Y+12	; 0x0c
     700:	e0 e4       	ldi	r30, 0x40	; 64
     702:	f2 e0       	ldi	r31, 0x02	; 2
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     704:	80 81       	ld	r24, Z
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
     706:	84 60       	ori	r24, 0x04	; 4
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
     708:	80 83       	st	Z, r24
     70a:	9f bf       	out	0x3f, r25	; 63
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
     70c:	86 81       	ldd	r24, Z+6	; 0x06
     70e:	80 ff       	sbrs	r24, 0
     710:	fd cf       	rjmp	.-6      	; 0x70c <main+0x9e>
     712:	68 94       	set
     714:	ee 24       	eor	r14, r14
     716:	e6 f8       	bld	r14, 6
     718:	ff 24       	eor	r15, r15
     71a:	f1 f8       	bld	r15, 1
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     71c:	dd 24       	eor	r13, r13
     71e:	d3 94       	inc	r13
     720:	d7 01       	movw	r26, r14
     722:	16 96       	adiw	r26, 0x06	; 6
	adc_start_conversion(&ADCB, ADC_CH0);
	adc_wait_for_interrupt_flag(&ADCB, ADC_CH0);

	// Light up LED 1, wait for button press.
	ioport_set_pin_low(LED1_PIN);
	wait_for_button();
     724:	dc 92       	st	X, r13
     726:	00 ee       	ldi	r16, 0xE0	; 224

	// Perform oversampling of offset.
	cal_data.offset = get_mean_sample_value();
     728:	17 e0       	ldi	r17, 0x07	; 7
     72a:	f8 01       	movw	r30, r16
     72c:	d6 82       	std	Z+6, r13	; 0x06
     72e:	00 df       	rcall	.-512    	; 0x530 <wait_for_button>
     730:	cf de       	rcall	.-610    	; 0x4d0 <get_mean_sample_value>
     732:	5c 01       	movw	r10, r24
     734:	0f 2e       	mov	r0, r31
     736:	f0 e2       	ldi	r31, 0x20	; 32
     738:	8f 2e       	mov	r8, r31
     73a:	f0 e2       	ldi	r31, 0x20	; 32
     73c:	9f 2e       	mov	r9, r31
     73e:	f0 2d       	mov	r31, r0
     740:	d4 01       	movw	r26, r8
     742:	8d 93       	st	X+, r24
     744:	9c 93       	st	X, r25

	// Light up LED 2, wait for button press.
	ioport_set_pin_low(LED2_PIN);
	wait_for_button();
     746:	68 94       	set
     748:	cc 24       	eor	r12, r12

	// Perform oversampling of 0.9 V for gain calibration.
	cal_data.gain = get_mean_sample_value() - cal_data.offset;
     74a:	c1 f8       	bld	r12, 1
     74c:	f8 01       	movw	r30, r16
     74e:	c6 82       	std	Z+6, r12	; 0x06
     750:	ef de       	rcall	.-546    	; 0x530 <wait_for_button>
     752:	be de       	rcall	.-644    	; 0x4d0 <get_mean_sample_value>
     754:	8a 19       	sub	r24, r10
     756:	9b 09       	sbc	r25, r11
     758:	d4 01       	movw	r26, r8
     75a:	12 96       	adiw	r26, 0x02	; 2
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     75c:	8d 93       	st	X+, r24
     75e:	9c 93       	st	X, r25
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
     760:	13 97       	sbiw	r26, 0x03	; 3
     762:	f8 01       	movw	r30, r16
     764:	d5 82       	std	Z+5, r13	; 0x05
     766:	c5 82       	std	Z+5, r12	; 0x05
	ioport_set_pin_high(LED1_PIN);
	ioport_set_pin_high(LED2_PIN);

	// Enable interrupts on ADC channel, then trigger first conversion.
	adcch_enable_interrupt(&adcch_conf);
	adcch_write_configuration(&ADCB, ADC_CH0, &adcch_conf);
     768:	8a 85       	ldd	r24, Y+10	; 0x0a
     76a:	8c 7f       	andi	r24, 0xFC	; 252
     76c:	81 60       	ori	r24, 0x01	; 1
     76e:	8a 87       	std	Y+10, r24	; 0x0a
     770:	ae 01       	movw	r20, r28
     772:	48 5f       	subi	r20, 0xF8	; 248
     774:	5f 4f       	sbci	r21, 0xFF	; 255
     776:	61 e0       	ldi	r22, 0x01	; 1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     778:	80 e4       	ldi	r24, 0x40	; 64
     77a:	92 e0       	ldi	r25, 0x02	; 2
	cpu_irq_disable();
     77c:	a3 d6       	rcall	.+3398   	; 0x14c4 <adcch_write_configuration>
	return flags;
     77e:	8f b7       	in	r24, 0x3f	; 63
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     780:	8d 87       	std	Y+13, r24	; 0x0d
     782:	f8 94       	cli
     784:	9d 85       	ldd	r25, Y+13	; 0x0d
     786:	d7 01       	movw	r26, r14
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     788:	8c 91       	ld	r24, X
	adc_start_conversion(&ADCB, ADC_CH0);
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
     78a:	84 60       	ori	r24, 0x04	; 4
     78c:	8c 93       	st	X, r24
     78e:	9f bf       	out	0x3f, r25	; 63
     790:	e8 e4       	ldi	r30, 0x48	; 72
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	80 81       	ld	r24, Z
	sleep_enable();
     796:	81 7f       	andi	r24, 0xF1	; 241
     798:	86 60       	ori	r24, 0x06	; 6
     79a:	80 83       	st	Z, r24
	sleep_cpu();
     79c:	80 81       	ld	r24, Z

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
     79e:	81 60       	ori	r24, 0x01	; 1
     7a0:	80 83       	st	Z, r24
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
     7a2:	88 95       	sleep
     7a4:	48 e2       	ldi	r20, 0x28	; 40
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
     7a6:	52 e2       	ldi	r21, 0x22	; 34

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
     7a8:	28 e4       	ldi	r18, 0x48	; 72
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	f8 94       	cli
     7ae:	fa 01       	movw	r30, r20
     7b0:	80 81       	ld	r24, Z
     7b2:	81 11       	cpse	r24, r1
     7b4:	09 c0       	rjmp	.+18     	; 0x7c8 <main+0x15a>
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
     7b6:	a9 e2       	ldi	r26, 0x29	; 41

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
     7b8:	b2 e2       	ldi	r27, 0x22	; 34
     7ba:	e0 e0       	ldi	r30, 0x00	; 0
     7bc:	ef 5f       	subi	r30, 0xFF	; 255
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
     7be:	8d 91       	ld	r24, X+
     7c0:	88 23       	and	r24, r24
		cpu_irq_enable();
     7c2:	e1 f3       	breq	.-8      	; 0x7bc <main+0x14e>
     7c4:	e1 11       	cpse	r30, r1
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <main+0x15e>
     7c8:	78 94       	sei

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
     7ca:	f0 cf       	rjmp	.-32     	; 0x7ac <main+0x13e>
     7cc:	d9 01       	movw	r26, r18
     7ce:	8c 91       	ld	r24, X
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	ea 5f       	subi	r30, 0xFA	; 250
     7d4:	ff 4d       	sbci	r31, 0xDF	; 223
     7d6:	81 7f       	andi	r24, 0xF1	; 241
	sleep_enable();
     7d8:	90 81       	ld	r25, Z
     7da:	89 2b       	or	r24, r25
     7dc:	8c 93       	st	X, r24

	cpu_irq_enable();
     7de:	8c 91       	ld	r24, X
	sleep_enter();
     7e0:	81 60       	ori	r24, 0x01	; 1

	sleep_disable();
     7e2:	8c 93       	st	X, r24
     7e4:	78 94       	sei
     7e6:	88 95       	sleep
     7e8:	f9 01       	movw	r30, r18
     7ea:	80 81       	ld	r24, Z
     7ec:	8e 7f       	andi	r24, 0xFE	; 254
     7ee:	80 83       	st	Z, r24
     7f0:	dd cf       	rjmp	.-70     	; 0x7ac <main+0x13e>

000007f2 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     7f2:	04 c0       	rjmp	.+8      	; 0x7fc <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     7f4:	61 50       	subi	r22, 0x01	; 1
     7f6:	71 09       	sbc	r23, r1
     7f8:	81 09       	sbc	r24, r1
     7fa:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     7fc:	61 15       	cp	r22, r1
     7fe:	71 05       	cpc	r23, r1
     800:	81 05       	cpc	r24, r1
     802:	91 05       	cpc	r25, r1
     804:	b9 f7       	brne	.-18     	; 0x7f4 <__portable_avr_delay_cycles+0x2>
     806:	08 95       	ret

00000808 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     808:	bf 92       	push	r11
     80a:	cf 92       	push	r12
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	1f 92       	push	r1
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     820:	00 e0       	ldi	r16, 0x00	; 0
     822:	16 e0       	ldi	r17, 0x06	; 6
     824:	68 94       	set
     826:	ff 24       	eor	r15, r15
     828:	f3 f8       	bld	r15, 3
     82a:	f8 01       	movw	r30, r16
     82c:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     82e:	6e e0       	ldi	r22, 0x0E	; 14
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	dd df       	rcall	.-70     	; 0x7f2 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     838:	f8 01       	movw	r30, r16
     83a:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     83c:	6e e0       	ldi	r22, 0x0E	; 14
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	d6 df       	rcall	.-84     	; 0x7f2 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     846:	0f 2e       	mov	r0, r31
     848:	fb e2       	ldi	r31, 0x2B	; 43
     84a:	bf 2e       	mov	r11, r31
     84c:	f0 2d       	mov	r31, r0
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     84e:	b9 82       	std	Y+1, r11	; 0x01
     850:	80 ea       	ldi	r24, 0xA0	; 160
     852:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     854:	6c d4       	rcall	.+2264   	; 0x112e <usart_spi_init>
     856:	c1 2c       	mov	r12, r1
     858:	d1 2c       	mov	r13, r1
     85a:	76 01       	movw	r14, r12
     85c:	00 e4       	ldi	r16, 0x40	; 64
     85e:	12 e4       	ldi	r17, 0x42	; 66
     860:	2f e0       	ldi	r18, 0x0F	; 15
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	43 e0       	ldi	r20, 0x03	; 3
     866:	be 01       	movw	r22, r28
     868:	6f 5f       	subi	r22, 0xFF	; 255
     86a:	7f 4f       	sbci	r23, 0xFF	; 255
     86c:	80 ea       	ldi	r24, 0xA0	; 160
     86e:	99 e0       	ldi	r25, 0x09	; 9
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     870:	8d d4       	rcall	.+2330   	; 0x118c <usart_spi_setup_device>
     872:	00 e6       	ldi	r16, 0x60	; 96
     874:	16 e0       	ldi	r17, 0x06	; 6
     876:	ff 24       	eor	r15, r15
     878:	f3 94       	inc	r15
     87a:	f8 01       	movw	r30, r16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     87c:	f6 82       	std	Z+6, r15	; 0x06
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     87e:	b9 82       	std	Y+1, r11	; 0x01
     880:	be 01       	movw	r22, r28
     882:	6f 5f       	subi	r22, 0xFF	; 255
     884:	7f 4f       	sbci	r23, 0xFF	; 255
     886:	80 ea       	ldi	r24, 0xA0	; 160
     888:	99 e0       	ldi	r25, 0x09	; 9
     88a:	9a d4       	rcall	.+2356   	; 0x11c0 <usart_spi_select_device>
     88c:	f8 01       	movw	r30, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     88e:	f6 82       	std	Z+6, r15	; 0x06
     890:	e0 ea       	ldi	r30, 0xA0	; 160
     892:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     894:	81 81       	ldd	r24, Z+1	; 0x01
     896:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     898:	fd cf       	rjmp	.-6      	; 0x894 <st7565r_init+0x8c>
     89a:	80 ea       	ldi	r24, 0xA0	; 160
     89c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8a0:	e0 ea       	ldi	r30, 0xA0	; 160
     8a2:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8a4:	81 81       	ldd	r24, Z+1	; 0x01
     8a6:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8a8:	fd cf       	rjmp	.-6      	; 0x8a4 <st7565r_init+0x9c>
     8aa:	e0 ea       	ldi	r30, 0xA0	; 160
     8ac:	f9 e0       	ldi	r31, 0x09	; 9
     8ae:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8b0:	81 83       	std	Z+1, r24	; 0x01
     8b2:	80 81       	ld	r24, Z
     8b4:	be 01       	movw	r22, r28
     8b6:	6f 5f       	subi	r22, 0xFF	; 255
     8b8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ba:	80 ea       	ldi	r24, 0xA0	; 160
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8bc:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8be:	96 d4       	rcall	.+2348   	; 0x11ec <usart_spi_deselect_device>
     8c0:	8b e2       	ldi	r24, 0x2B	; 43
     8c2:	89 83       	std	Y+1, r24	; 0x01
     8c4:	be 01       	movw	r22, r28
     8c6:	6f 5f       	subi	r22, 0xFF	; 255
     8c8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ca:	80 ea       	ldi	r24, 0xA0	; 160
     8cc:	99 e0       	ldi	r25, 0x09	; 9
     8ce:	78 d4       	rcall	.+2288   	; 0x11c0 <usart_spi_select_device>
     8d0:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8d2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     8d6:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8d8:	f9 e0       	ldi	r31, 0x09	; 9
     8da:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8dc:	85 ff       	sbrs	r24, 5
     8de:	fd cf       	rjmp	.-6      	; 0x8da <st7565r_init+0xd2>
     8e0:	86 ea       	ldi	r24, 0xA6	; 166
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8e2:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     8e6:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8e8:	f9 e0       	ldi	r31, 0x09	; 9
     8ea:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8ec:	86 ff       	sbrs	r24, 6
     8ee:	fd cf       	rjmp	.-6      	; 0x8ea <st7565r_init+0xe2>
     8f0:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8f2:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8f4:	80 e4       	ldi	r24, 0x40	; 64
     8f6:	81 83       	std	Z+1, r24	; 0x01
     8f8:	80 81       	ld	r24, Z
     8fa:	be 01       	movw	r22, r28
     8fc:	6f 5f       	subi	r22, 0xFF	; 255
     8fe:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     900:	80 ea       	ldi	r24, 0xA0	; 160
     902:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     904:	73 d4       	rcall	.+2278   	; 0x11ec <usart_spi_deselect_device>
     906:	8b e2       	ldi	r24, 0x2B	; 43
     908:	89 83       	std	Y+1, r24	; 0x01
     90a:	be 01       	movw	r22, r28
     90c:	6f 5f       	subi	r22, 0xFF	; 255
     90e:	7f 4f       	sbci	r23, 0xFF	; 255
     910:	80 ea       	ldi	r24, 0xA0	; 160
     912:	99 e0       	ldi	r25, 0x09	; 9
     914:	55 d4       	rcall	.+2218   	; 0x11c0 <usart_spi_select_device>
     916:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     918:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     91c:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     91e:	f9 e0       	ldi	r31, 0x09	; 9
     920:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     922:	85 ff       	sbrs	r24, 5
     924:	fd cf       	rjmp	.-6      	; 0x920 <st7565r_init+0x118>
     926:	88 ec       	ldi	r24, 0xC8	; 200
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     928:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     92c:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     92e:	f9 e0       	ldi	r31, 0x09	; 9
     930:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     932:	86 ff       	sbrs	r24, 6
     934:	fd cf       	rjmp	.-6      	; 0x930 <st7565r_init+0x128>
     936:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     938:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     93a:	80 e4       	ldi	r24, 0x40	; 64
     93c:	81 83       	std	Z+1, r24	; 0x01
     93e:	80 81       	ld	r24, Z
     940:	be 01       	movw	r22, r28
     942:	6f 5f       	subi	r22, 0xFF	; 255
     944:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     946:	80 ea       	ldi	r24, 0xA0	; 160
     948:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     94a:	50 d4       	rcall	.+2208   	; 0x11ec <usart_spi_deselect_device>
     94c:	8b e2       	ldi	r24, 0x2B	; 43
     94e:	89 83       	std	Y+1, r24	; 0x01
     950:	be 01       	movw	r22, r28
     952:	6f 5f       	subi	r22, 0xFF	; 255
     954:	7f 4f       	sbci	r23, 0xFF	; 255
     956:	80 ea       	ldi	r24, 0xA0	; 160
     958:	99 e0       	ldi	r25, 0x09	; 9
     95a:	32 d4       	rcall	.+2148   	; 0x11c0 <usart_spi_select_device>
     95c:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     95e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     962:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     964:	f9 e0       	ldi	r31, 0x09	; 9
     966:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     968:	85 ff       	sbrs	r24, 5
     96a:	fd cf       	rjmp	.-6      	; 0x966 <st7565r_init+0x15e>
     96c:	82 ea       	ldi	r24, 0xA2	; 162
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     96e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     972:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     974:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     976:	81 81       	ldd	r24, Z+1	; 0x01
     978:	86 ff       	sbrs	r24, 6
     97a:	fd cf       	rjmp	.-6      	; 0x976 <st7565r_init+0x16e>
     97c:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     97e:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     980:	80 e4       	ldi	r24, 0x40	; 64
     982:	81 83       	std	Z+1, r24	; 0x01
     984:	80 81       	ld	r24, Z
     986:	be 01       	movw	r22, r28
     988:	6f 5f       	subi	r22, 0xFF	; 255
     98a:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     98c:	80 ea       	ldi	r24, 0xA0	; 160
     98e:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     990:	2d d4       	rcall	.+2138   	; 0x11ec <usart_spi_deselect_device>
     992:	8b e2       	ldi	r24, 0x2B	; 43
     994:	89 83       	std	Y+1, r24	; 0x01
     996:	be 01       	movw	r22, r28
     998:	6f 5f       	subi	r22, 0xFF	; 255
     99a:	7f 4f       	sbci	r23, 0xFF	; 255
     99c:	80 ea       	ldi	r24, 0xA0	; 160
     99e:	99 e0       	ldi	r25, 0x09	; 9
     9a0:	0f d4       	rcall	.+2078   	; 0x11c0 <usart_spi_select_device>
     9a2:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9a4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     9a8:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9aa:	f9 e0       	ldi	r31, 0x09	; 9
     9ac:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9ae:	85 ff       	sbrs	r24, 5
     9b0:	fd cf       	rjmp	.-6      	; 0x9ac <st7565r_init+0x1a4>
     9b2:	8f e2       	ldi	r24, 0x2F	; 47
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9b4:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9b8:	e0 ea       	ldi	r30, 0xA0	; 160
     9ba:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9bc:	81 81       	ldd	r24, Z+1	; 0x01
     9be:	86 ff       	sbrs	r24, 6
     9c0:	fd cf       	rjmp	.-6      	; 0x9bc <st7565r_init+0x1b4>
     9c2:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9c4:	f9 e0       	ldi	r31, 0x09	; 9
     9c6:	80 e4       	ldi	r24, 0x40	; 64
     9c8:	81 83       	std	Z+1, r24	; 0x01
     9ca:	80 81       	ld	r24, Z
     9cc:	be 01       	movw	r22, r28
     9ce:	6f 5f       	subi	r22, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9d0:	7f 4f       	sbci	r23, 0xFF	; 255
     9d2:	80 ea       	ldi	r24, 0xA0	; 160
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9d4:	99 e0       	ldi	r25, 0x09	; 9
     9d6:	0a d4       	rcall	.+2068   	; 0x11ec <usart_spi_deselect_device>
     9d8:	8b e2       	ldi	r24, 0x2B	; 43
     9da:	89 83       	std	Y+1, r24	; 0x01
     9dc:	be 01       	movw	r22, r28
     9de:	6f 5f       	subi	r22, 0xFF	; 255
     9e0:	7f 4f       	sbci	r23, 0xFF	; 255
     9e2:	80 ea       	ldi	r24, 0xA0	; 160
     9e4:	99 e0       	ldi	r25, 0x09	; 9
     9e6:	ec d3       	rcall	.+2008   	; 0x11c0 <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9ee:	e0 ea       	ldi	r30, 0xA0	; 160
     9f0:	f9 e0       	ldi	r31, 0x09	; 9
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9f2:	81 81       	ldd	r24, Z+1	; 0x01
     9f4:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9f6:	fd cf       	rjmp	.-6      	; 0x9f2 <st7565r_init+0x1ea>
     9f8:	88 ef       	ldi	r24, 0xF8	; 248
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9fa:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9fe:	e0 ea       	ldi	r30, 0xA0	; 160
     a00:	f9 e0       	ldi	r31, 0x09	; 9
     a02:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a04:	86 ff       	sbrs	r24, 6
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a06:	fd cf       	rjmp	.-6      	; 0xa02 <st7565r_init+0x1fa>
     a08:	e0 ea       	ldi	r30, 0xA0	; 160
     a0a:	f9 e0       	ldi	r31, 0x09	; 9
     a0c:	80 e4       	ldi	r24, 0x40	; 64
     a0e:	81 83       	std	Z+1, r24	; 0x01
     a10:	80 81       	ld	r24, Z
     a12:	be 01       	movw	r22, r28
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a14:	6f 5f       	subi	r22, 0xFF	; 255
     a16:	7f 4f       	sbci	r23, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a18:	80 ea       	ldi	r24, 0xA0	; 160
     a1a:	99 e0       	ldi	r25, 0x09	; 9
     a1c:	e7 d3       	rcall	.+1998   	; 0x11ec <usart_spi_deselect_device>
     a1e:	8b e2       	ldi	r24, 0x2B	; 43
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	be 01       	movw	r22, r28
     a24:	6f 5f       	subi	r22, 0xFF	; 255
     a26:	7f 4f       	sbci	r23, 0xFF	; 255
     a28:	80 ea       	ldi	r24, 0xA0	; 160
     a2a:	99 e0       	ldi	r25, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a2c:	c9 d3       	rcall	.+1938   	; 0x11c0 <usart_spi_select_device>
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a34:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a36:	f9 e0       	ldi	r31, 0x09	; 9
     a38:	81 81       	ldd	r24, Z+1	; 0x01
     a3a:	85 ff       	sbrs	r24, 5
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a3c:	fd cf       	rjmp	.-6      	; 0xa38 <st7565r_init+0x230>
     a3e:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a42:	e0 ea       	ldi	r30, 0xA0	; 160
     a44:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a46:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a48:	86 ff       	sbrs	r24, 6
     a4a:	fd cf       	rjmp	.-6      	; 0xa46 <st7565r_init+0x23e>
     a4c:	e0 ea       	ldi	r30, 0xA0	; 160
     a4e:	f9 e0       	ldi	r31, 0x09	; 9
     a50:	80 e4       	ldi	r24, 0x40	; 64
     a52:	81 83       	std	Z+1, r24	; 0x01
     a54:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a56:	be 01       	movw	r22, r28
     a58:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a5a:	7f 4f       	sbci	r23, 0xFF	; 255
     a5c:	80 ea       	ldi	r24, 0xA0	; 160
     a5e:	99 e0       	ldi	r25, 0x09	; 9
     a60:	c5 d3       	rcall	.+1930   	; 0x11ec <usart_spi_deselect_device>
     a62:	8b e2       	ldi	r24, 0x2B	; 43
     a64:	89 83       	std	Y+1, r24	; 0x01
     a66:	be 01       	movw	r22, r28
     a68:	6f 5f       	subi	r22, 0xFF	; 255
     a6a:	7f 4f       	sbci	r23, 0xFF	; 255
     a6c:	80 ea       	ldi	r24, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a6e:	99 e0       	ldi	r25, 0x09	; 9
     a70:	a7 d3       	rcall	.+1870   	; 0x11c0 <usart_spi_select_device>
     a72:	81 e0       	ldi	r24, 0x01	; 1
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a74:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a78:	e0 ea       	ldi	r30, 0xA0	; 160
     a7a:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a7c:	81 81       	ldd	r24, Z+1	; 0x01
     a7e:	85 ff       	sbrs	r24, 5
     a80:	fd cf       	rjmp	.-6      	; 0xa7c <st7565r_init+0x274>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a82:	81 e2       	ldi	r24, 0x21	; 33
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a84:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     a88:	e0 ea       	ldi	r30, 0xA0	; 160
     a8a:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a8c:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a8e:	86 ff       	sbrs	r24, 6
     a90:	fd cf       	rjmp	.-6      	; 0xa8c <st7565r_init+0x284>
     a92:	e0 ea       	ldi	r30, 0xA0	; 160
     a94:	f9 e0       	ldi	r31, 0x09	; 9
     a96:	80 e4       	ldi	r24, 0x40	; 64
     a98:	81 83       	std	Z+1, r24	; 0x01
     a9a:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a9c:	be 01       	movw	r22, r28
     a9e:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     aa0:	7f 4f       	sbci	r23, 0xFF	; 255
     aa2:	80 ea       	ldi	r24, 0xA0	; 160
     aa4:	99 e0       	ldi	r25, 0x09	; 9
     aa6:	a2 d3       	rcall	.+1860   	; 0x11ec <usart_spi_deselect_device>
     aa8:	8b e2       	ldi	r24, 0x2B	; 43
     aaa:	89 83       	std	Y+1, r24	; 0x01
     aac:	be 01       	movw	r22, r28
     aae:	6f 5f       	subi	r22, 0xFF	; 255
     ab0:	7f 4f       	sbci	r23, 0xFF	; 255
     ab2:	80 ea       	ldi	r24, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     ab4:	99 e0       	ldi	r25, 0x09	; 9
     ab6:	84 d3       	rcall	.+1800   	; 0x11c0 <usart_spi_select_device>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     abe:	e0 ea       	ldi	r30, 0xA0	; 160
     ac0:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     ac2:	81 81       	ldd	r24, Z+1	; 0x01
     ac4:	85 ff       	sbrs	r24, 5
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     ac6:	fd cf       	rjmp	.-6      	; 0xac2 <st7565r_init+0x2ba>
     ac8:	81 e8       	ldi	r24, 0x81	; 129
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     aca:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     ace:	e0 ea       	ldi	r30, 0xA0	; 160
     ad0:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     ad2:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     ad4:	86 ff       	sbrs	r24, 6
     ad6:	fd cf       	rjmp	.-6      	; 0xad2 <st7565r_init+0x2ca>
     ad8:	e0 ea       	ldi	r30, 0xA0	; 160
     ada:	f9 e0       	ldi	r31, 0x09	; 9
     adc:	80 e4       	ldi	r24, 0x40	; 64
     ade:	81 83       	std	Z+1, r24	; 0x01
     ae0:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     ae2:	be 01       	movw	r22, r28
     ae4:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     ae6:	7f 4f       	sbci	r23, 0xFF	; 255
     ae8:	80 ea       	ldi	r24, 0xA0	; 160
     aea:	99 e0       	ldi	r25, 0x09	; 9
     aec:	7f d3       	rcall	.+1790   	; 0x11ec <usart_spi_deselect_device>
     aee:	8b e2       	ldi	r24, 0x2B	; 43
     af0:	89 83       	std	Y+1, r24	; 0x01
     af2:	be 01       	movw	r22, r28
     af4:	6f 5f       	subi	r22, 0xFF	; 255
     af6:	7f 4f       	sbci	r23, 0xFF	; 255
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     af8:	80 ea       	ldi	r24, 0xA0	; 160
     afa:	99 e0       	ldi	r25, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     afc:	61 d3       	rcall	.+1730   	; 0x11c0 <usart_spi_select_device>
     afe:	81 e0       	ldi	r24, 0x01	; 1
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     b00:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     b04:	e0 ea       	ldi	r30, 0xA0	; 160
     b06:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     b08:	81 81       	ldd	r24, Z+1	; 0x01
     b0a:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     b0c:	fd cf       	rjmp	.-6      	; 0xb08 <st7565r_init+0x300>
     b0e:	89 e3       	ldi	r24, 0x39	; 57
     b10:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     b14:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     b16:	f9 e0       	ldi	r31, 0x09	; 9
     b18:	81 81       	ldd	r24, Z+1	; 0x01
     b1a:	86 ff       	sbrs	r24, 6
     b1c:	fd cf       	rjmp	.-6      	; 0xb18 <st7565r_init+0x310>
     b1e:	e0 ea       	ldi	r30, 0xA0	; 160
     b20:	f9 e0       	ldi	r31, 0x09	; 9
     b22:	80 e4       	ldi	r24, 0x40	; 64
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     b24:	81 83       	std	Z+1, r24	; 0x01
     b26:	80 81       	ld	r24, Z
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     b28:	be 01       	movw	r22, r28
     b2a:	6f 5f       	subi	r22, 0xFF	; 255
     b2c:	7f 4f       	sbci	r23, 0xFF	; 255
     b2e:	80 ea       	ldi	r24, 0xA0	; 160
     b30:	99 e0       	ldi	r25, 0x09	; 9
     b32:	5c d3       	rcall	.+1720   	; 0x11ec <usart_spi_deselect_device>
     b34:	8b e2       	ldi	r24, 0x2B	; 43
     b36:	89 83       	std	Y+1, r24	; 0x01
     b38:	be 01       	movw	r22, r28
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     b3a:	6f 5f       	subi	r22, 0xFF	; 255
     b3c:	7f 4f       	sbci	r23, 0xFF	; 255
     b3e:	80 ea       	ldi	r24, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     b40:	99 e0       	ldi	r25, 0x09	; 9
     b42:	3e d3       	rcall	.+1660   	; 0x11c0 <usart_spi_select_device>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     b4a:	e0 ea       	ldi	r30, 0xA0	; 160
     b4c:	f9 e0       	ldi	r31, 0x09	; 9
     b4e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     b50:	85 ff       	sbrs	r24, 5
     b52:	fd cf       	rjmp	.-6      	; 0xb4e <st7565r_init+0x346>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     b54:	8f ea       	ldi	r24, 0xAF	; 175
     b56:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     b5a:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     b5c:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     b5e:	81 81       	ldd	r24, Z+1	; 0x01
     b60:	86 ff       	sbrs	r24, 6
     b62:	fd cf       	rjmp	.-6      	; 0xb5e <st7565r_init+0x356>
     b64:	e0 ea       	ldi	r30, 0xA0	; 160
     b66:	f9 e0       	ldi	r31, 0x09	; 9
     b68:	80 e4       	ldi	r24, 0x40	; 64
     b6a:	81 83       	std	Z+1, r24	; 0x01
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     b6c:	80 81       	ld	r24, Z
     b6e:	be 01       	movw	r22, r28
     b70:	6f 5f       	subi	r22, 0xFF	; 255
     b72:	7f 4f       	sbci	r23, 0xFF	; 255
     b74:	80 ea       	ldi	r24, 0xA0	; 160
     b76:	99 e0       	ldi	r25, 0x09	; 9
     b78:	39 d3       	rcall	.+1650   	; 0x11ec <usart_spi_deselect_device>
     b7a:	0f 90       	pop	r0
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	ff 90       	pop	r15
     b86:	ef 90       	pop	r14
     b88:	df 90       	pop	r13
     b8a:	cf 90       	pop	r12
     b8c:	bf 90       	pop	r11
     b8e:	08 95       	ret

00000b90 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	1f 92       	push	r1
     b96:	1f 92       	push	r1
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     b9c:	8f ef       	ldi	r24, 0xFF	; 255
     b9e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     ba2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     ba6:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     baa:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     bae:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     bb2:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     bb6:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
     bba:	6c e0       	ldi	r22, 0x0C	; 12
     bbc:	81 e4       	ldi	r24, 0x41	; 65
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	17 d5       	rcall	.+2606   	; 0x15f0 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     bc2:	8f b7       	in	r24, 0x3f	; 63
     bc4:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     bc6:	f8 94       	cli
	return flags;
     bc8:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     bca:	e0 e5       	ldi	r30, 0x50	; 80
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	82 60       	ori	r24, 0x02	; 2
     bd2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     bd4:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     bd6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     bd8:	81 ff       	sbrs	r24, 1
     bda:	fd cf       	rjmp	.-6      	; 0xbd6 <sysclk_init+0x46>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     bdc:	61 e0       	ldi	r22, 0x01	; 1
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	06 d5       	rcall	.+2572   	; 0x15f0 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     be4:	8f b7       	in	r24, 0x3f	; 63
     be6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     be8:	f8 94       	cli
	return flags;
     bea:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     bec:	e0 e5       	ldi	r30, 0x50	; 80
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	8e 7f       	andi	r24, 0xFE	; 254
     bf4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     bf6:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	08 95       	ret

00000c02 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	1f 92       	push	r1
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c0c:	9f b7       	in	r25, 0x3f	; 63
     c0e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     c10:	f8 94       	cli
	return flags;
     c12:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     c14:	e8 2f       	mov	r30, r24
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	e0 59       	subi	r30, 0x90	; 144
     c1a:	ff 4f       	sbci	r31, 0xFF	; 255
     c1c:	60 95       	com	r22
     c1e:	80 81       	ld	r24, Z
     c20:	68 23       	and	r22, r24
     c22:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c24:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     c26:	0f 90       	pop	r0
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	1f 92       	push	r1
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c38:	9f b7       	in	r25, 0x3f	; 63
     c3a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     c3c:	f8 94       	cli
	return flags;
     c3e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     c40:	e8 2f       	mov	r30, r24
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	e0 59       	subi	r30, 0x90	; 144
     c46:	ff 4f       	sbci	r31, 0xFF	; 255
     c48:	80 81       	ld	r24, Z
     c4a:	68 2b       	or	r22, r24
     c4c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c4e:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     c50:	0f 90       	pop	r0
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	08 95       	ret

00000c58 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	1f 92       	push	r1
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	08 2f       	mov	r16, r24
     c6a:	f6 2e       	mov	r15, r22
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     c6c:	14 2f       	mov	r17, r20
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     c6e:	1a d1       	rcall	.+564    	; 0xea4 <gfx_mono_framebuffer_put_byte>
     c70:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     c72:	00 6b       	ori	r16, 0xB0	; 176
     c74:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     c76:	89 83       	std	Y+1, r24	; 0x01
     c78:	be 01       	movw	r22, r28
     c7a:	6f 5f       	subi	r22, 0xFF	; 255
     c7c:	7f 4f       	sbci	r23, 0xFF	; 255
     c7e:	80 ea       	ldi	r24, 0xA0	; 160
     c80:	99 e0       	ldi	r25, 0x09	; 9
     c82:	9e d2       	rcall	.+1340   	; 0x11c0 <usart_spi_select_device>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     c8a:	e0 ea       	ldi	r30, 0xA0	; 160
     c8c:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     c8e:	91 81       	ldd	r25, Z+1	; 0x01
     c90:	95 ff       	sbrs	r25, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     c92:	fd cf       	rjmp	.-6      	; 0xc8e <gfx_mono_st7565r_put_byte+0x36>
     c94:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     c98:	e0 ea       	ldi	r30, 0xA0	; 160
     c9a:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     c9c:	81 81       	ldd	r24, Z+1	; 0x01
     c9e:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     ca0:	fd cf       	rjmp	.-6      	; 0xc9c <gfx_mono_st7565r_put_byte+0x44>
     ca2:	e0 ea       	ldi	r30, 0xA0	; 160
     ca4:	f9 e0       	ldi	r31, 0x09	; 9
     ca6:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     ca8:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     caa:	80 81       	ld	r24, Z
     cac:	be 01       	movw	r22, r28
     cae:	6f 5f       	subi	r22, 0xFF	; 255
     cb0:	7f 4f       	sbci	r23, 0xFF	; 255
     cb2:	80 ea       	ldi	r24, 0xA0	; 160
     cb4:	99 e0       	ldi	r25, 0x09	; 9
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     cb6:	9a d2       	rcall	.+1332   	; 0x11ec <usart_spi_deselect_device>
     cb8:	0f 2d       	mov	r16, r15
     cba:	0f 77       	andi	r16, 0x7F	; 127
     cbc:	02 95       	swap	r16
     cbe:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     cc0:	00 61       	ori	r16, 0x10	; 16
     cc2:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     cc4:	89 83       	std	Y+1, r24	; 0x01
     cc6:	be 01       	movw	r22, r28
     cc8:	6f 5f       	subi	r22, 0xFF	; 255
     cca:	7f 4f       	sbci	r23, 0xFF	; 255
     ccc:	80 ea       	ldi	r24, 0xA0	; 160
     cce:	99 e0       	ldi	r25, 0x09	; 9
     cd0:	77 d2       	rcall	.+1262   	; 0x11c0 <usart_spi_select_device>
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     cd8:	e0 ea       	ldi	r30, 0xA0	; 160
     cda:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     cdc:	81 81       	ldd	r24, Z+1	; 0x01
     cde:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     ce0:	fd cf       	rjmp	.-6      	; 0xcdc <gfx_mono_st7565r_put_byte+0x84>
     ce2:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     ce6:	e0 ea       	ldi	r30, 0xA0	; 160
     ce8:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     cea:	81 81       	ldd	r24, Z+1	; 0x01
     cec:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     cee:	fd cf       	rjmp	.-6      	; 0xcea <gfx_mono_st7565r_put_byte+0x92>
     cf0:	e0 ea       	ldi	r30, 0xA0	; 160
     cf2:	f9 e0       	ldi	r31, 0x09	; 9
     cf4:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     cf6:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     cf8:	80 81       	ld	r24, Z
     cfa:	be 01       	movw	r22, r28
     cfc:	6f 5f       	subi	r22, 0xFF	; 255
     cfe:	7f 4f       	sbci	r23, 0xFF	; 255
     d00:	80 ea       	ldi	r24, 0xA0	; 160
     d02:	99 e0       	ldi	r25, 0x09	; 9
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     d04:	73 d2       	rcall	.+1254   	; 0x11ec <usart_spi_deselect_device>
     d06:	0f 2d       	mov	r16, r15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     d08:	0f 70       	andi	r16, 0x0F	; 15
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     d0a:	8b e2       	ldi	r24, 0x2B	; 43
     d0c:	89 83       	std	Y+1, r24	; 0x01
     d0e:	be 01       	movw	r22, r28
     d10:	6f 5f       	subi	r22, 0xFF	; 255
     d12:	7f 4f       	sbci	r23, 0xFF	; 255
     d14:	80 ea       	ldi	r24, 0xA0	; 160
     d16:	99 e0       	ldi	r25, 0x09	; 9
     d18:	53 d2       	rcall	.+1190   	; 0x11c0 <usart_spi_select_device>
     d1a:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     d1c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     d20:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     d22:	f9 e0       	ldi	r31, 0x09	; 9
     d24:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     d26:	85 ff       	sbrs	r24, 5
     d28:	fd cf       	rjmp	.-6      	; 0xd24 <gfx_mono_st7565r_put_byte+0xcc>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     d2a:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     d2e:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     d30:	f9 e0       	ldi	r31, 0x09	; 9
     d32:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     d34:	86 ff       	sbrs	r24, 6
     d36:	fd cf       	rjmp	.-6      	; 0xd32 <gfx_mono_st7565r_put_byte+0xda>
     d38:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     d3a:	f9 e0       	ldi	r31, 0x09	; 9
     d3c:	80 e4       	ldi	r24, 0x40	; 64
     d3e:	81 83       	std	Z+1, r24	; 0x01
     d40:	80 81       	ld	r24, Z
     d42:	be 01       	movw	r22, r28
     d44:	6f 5f       	subi	r22, 0xFF	; 255
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     d46:	7f 4f       	sbci	r23, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     d48:	80 ea       	ldi	r24, 0xA0	; 160
     d4a:	99 e0       	ldi	r25, 0x09	; 9
     d4c:	4f d2       	rcall	.+1182   	; 0x11ec <usart_spi_deselect_device>
     d4e:	8b e2       	ldi	r24, 0x2B	; 43
     d50:	89 83       	std	Y+1, r24	; 0x01
     d52:	be 01       	movw	r22, r28
     d54:	6f 5f       	subi	r22, 0xFF	; 255
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     d56:	7f 4f       	sbci	r23, 0xFF	; 255
     d58:	80 ea       	ldi	r24, 0xA0	; 160
     d5a:	99 e0       	ldi	r25, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     d5c:	31 d2       	rcall	.+1122   	; 0x11c0 <usart_spi_select_device>
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     d64:	e0 ea       	ldi	r30, 0xA0	; 160
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     d66:	f9 e0       	ldi	r31, 0x09	; 9
     d68:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     d6a:	85 ff       	sbrs	r24, 5
     d6c:	fd cf       	rjmp	.-6      	; 0xd68 <gfx_mono_st7565r_put_byte+0x110>
     d6e:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     d72:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     d74:	f9 e0       	ldi	r31, 0x09	; 9
     d76:	81 81       	ldd	r24, Z+1	; 0x01
     d78:	86 ff       	sbrs	r24, 6
     d7a:	fd cf       	rjmp	.-6      	; 0xd76 <gfx_mono_st7565r_put_byte+0x11e>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     d7c:	e0 ea       	ldi	r30, 0xA0	; 160
     d7e:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     d80:	80 e4       	ldi	r24, 0x40	; 64
     d82:	81 83       	std	Z+1, r24	; 0x01
     d84:	80 81       	ld	r24, Z
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     d8c:	be 01       	movw	r22, r28

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     d8e:	6f 5f       	subi	r22, 0xFF	; 255
     d90:	7f 4f       	sbci	r23, 0xFF	; 255
     d92:	80 ea       	ldi	r24, 0xA0	; 160
     d94:	99 e0       	ldi	r25, 0x09	; 9
     d96:	2a d2       	rcall	.+1108   	; 0x11ec <usart_spi_deselect_device>
     d98:	0f 90       	pop	r0
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	ff 90       	pop	r15
     da4:	08 95       	ret

00000da6 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	1f 92       	push	r1
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     db4:	84 e2       	ldi	r24, 0x24	; 36
     db6:	90 e2       	ldi	r25, 0x20	; 32
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     db8:	70 d0       	rcall	.+224    	; 0xe9a <gfx_mono_set_framebuffer>
     dba:	26 dd       	rcall	.-1460   	; 0x808 <st7565r_init>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     dbc:	8b e2       	ldi	r24, 0x2B	; 43
     dbe:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     dc0:	be 01       	movw	r22, r28
     dc2:	6f 5f       	subi	r22, 0xFF	; 255
     dc4:	7f 4f       	sbci	r23, 0xFF	; 255
     dc6:	80 ea       	ldi	r24, 0xA0	; 160
     dc8:	99 e0       	ldi	r25, 0x09	; 9
     dca:	fa d1       	rcall	.+1012   	; 0x11c0 <usart_spi_select_device>
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     dd2:	e0 ea       	ldi	r30, 0xA0	; 160
     dd4:	f9 e0       	ldi	r31, 0x09	; 9
     dd6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     dd8:	85 ff       	sbrs	r24, 5
     dda:	fd cf       	rjmp	.-6      	; 0xdd6 <gfx_mono_st7565r_init+0x30>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     ddc:	80 e4       	ldi	r24, 0x40	; 64
     dde:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     de2:	e0 ea       	ldi	r30, 0xA0	; 160
     de4:	f9 e0       	ldi	r31, 0x09	; 9
     de6:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     de8:	86 ff       	sbrs	r24, 6
     dea:	fd cf       	rjmp	.-6      	; 0xde6 <gfx_mono_st7565r_init+0x40>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     dec:	e0 ea       	ldi	r30, 0xA0	; 160
     dee:	f9 e0       	ldi	r31, 0x09	; 9
     df0:	80 e4       	ldi	r24, 0x40	; 64
     df2:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     df4:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     df6:	be 01       	movw	r22, r28
     df8:	6f 5f       	subi	r22, 0xFF	; 255
     dfa:	7f 4f       	sbci	r23, 0xFF	; 255
     dfc:	80 ea       	ldi	r24, 0xA0	; 160
     dfe:	99 e0       	ldi	r25, 0x09	; 9
     e00:	f5 d1       	rcall	.+1002   	; 0x11ec <usart_spi_deselect_device>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     e02:	00 e0       	ldi	r16, 0x00	; 0
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     e04:	0a c0       	rjmp	.+20     	; 0xe1a <gfx_mono_st7565r_init+0x74>
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	61 2f       	mov	r22, r17
     e0a:	80 2f       	mov	r24, r16
     e0c:	25 df       	rcall	.-438    	; 0xc58 <gfx_mono_st7565r_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     e0e:	1f 5f       	subi	r17, 0xFF	; 255
     e10:	10 38       	cpi	r17, 0x80	; 128
     e12:	c9 f7       	brne	.-14     	; 0xe06 <gfx_mono_st7565r_init+0x60>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     e14:	0f 5f       	subi	r16, 0xFF	; 255
     e16:	04 30       	cpi	r16, 0x04	; 4
     e18:	11 f0       	breq	.+4      	; 0xe1e <gfx_mono_st7565r_init+0x78>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     e1a:	10 e0       	ldi	r17, 0x00	; 0
     e1c:	f4 cf       	rjmp	.-24     	; 0xe06 <gfx_mono_st7565r_init+0x60>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     e1e:	0f 90       	pop	r0
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	08 95       	ret

00000e2a <gfx_mono_st7565r_draw_pixel>:
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     e2a:	ff 92       	push	r15
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     e34:	88 23       	and	r24, r24
     e36:	4c f1       	brlt	.+82     	; 0xe8a <gfx_mono_st7565r_draw_pixel+0x60>
     e38:	60 32       	cpi	r22, 0x20	; 32
     e3a:	38 f5       	brcc	.+78     	; 0xe8a <gfx_mono_st7565r_draw_pixel+0x60>
     e3c:	d4 2f       	mov	r29, r20
     e3e:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     e40:	f6 2e       	mov	r15, r22
     e42:	f6 94       	lsr	r15
     e44:	f6 94       	lsr	r15
     e46:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	88 e0       	ldi	r24, 0x08	; 8
     e4c:	f8 9e       	mul	r15, r24
     e4e:	60 19       	sub	r22, r0
     e50:	71 09       	sbc	r23, r1
     e52:	11 24       	eor	r1, r1
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	8c 01       	movw	r16, r24
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <gfx_mono_st7565r_draw_pixel+0x36>
     e5c:	00 0f       	add	r16, r16
     e5e:	11 1f       	adc	r17, r17
     e60:	6a 95       	dec	r22
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     e64:	6c 2f       	mov	r22, r28
     e66:	8f 2d       	mov	r24, r15
     e68:	2b d0       	rcall	.+86     	; 0xec0 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     e6a:	d1 30       	cpi	r29, 0x01	; 1
     e6c:	21 f0       	breq	.+8      	; 0xe76 <gfx_mono_st7565r_draw_pixel+0x4c>
     e6e:	28 f0       	brcs	.+10     	; 0xe7a <gfx_mono_st7565r_draw_pixel+0x50>
     e70:	d2 30       	cpi	r29, 0x02	; 2
     e72:	31 f0       	breq	.+12     	; 0xe80 <gfx_mono_st7565r_draw_pixel+0x56>
     e74:	06 c0       	rjmp	.+12     	; 0xe82 <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     e76:	80 2b       	or	r24, r16
		break;
     e78:	04 c0       	rjmp	.+8      	; 0xe82 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     e7a:	00 95       	com	r16
     e7c:	80 23       	and	r24, r16
		break;
     e7e:	01 c0       	rjmp	.+2      	; 0xe82 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     e80:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     e82:	48 2f       	mov	r20, r24
     e84:	6c 2f       	mov	r22, r28
     e86:	8f 2d       	mov	r24, r15
     e88:	e7 de       	rcall	.-562    	; 0xc58 <gfx_mono_st7565r_put_byte>
}
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
     e94:	08 95       	ret

00000e96 <gfx_mono_st7565r_get_byte>:
 * \code
	data = gfx_mono_st7565r_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
     e96:	14 c0       	rjmp	.+40     	; 0xec0 <gfx_mono_framebuffer_get_byte>
     e98:	08 95       	ret

00000e9a <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     e9a:	80 93 24 22 	sts	0x2224, r24	; 0x802224 <fbpointer>
     e9e:	90 93 25 22 	sts	0x2225, r25	; 0x802225 <fbpointer+0x1>
     ea2:	08 95       	ret

00000ea4 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     ea4:	20 91 24 22 	lds	r18, 0x2224	; 0x802224 <fbpointer>
     ea8:	30 91 25 22 	lds	r19, 0x2225	; 0x802225 <fbpointer+0x1>
     eac:	90 e8       	ldi	r25, 0x80	; 128
     eae:	89 9f       	mul	r24, r25
     eb0:	20 0d       	add	r18, r0
     eb2:	31 1d       	adc	r19, r1
     eb4:	11 24       	eor	r1, r1
     eb6:	f9 01       	movw	r30, r18
     eb8:	e6 0f       	add	r30, r22
     eba:	f1 1d       	adc	r31, r1
     ebc:	40 83       	st	Z, r20
     ebe:	08 95       	ret

00000ec0 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     ec0:	20 91 24 22 	lds	r18, 0x2224	; 0x802224 <fbpointer>
     ec4:	30 91 25 22 	lds	r19, 0x2225	; 0x802225 <fbpointer+0x1>
     ec8:	90 e8       	ldi	r25, 0x80	; 128
     eca:	89 9f       	mul	r24, r25
     ecc:	20 0d       	add	r18, r0
     ece:	31 1d       	adc	r19, r1
     ed0:	11 24       	eor	r1, r1
     ed2:	f9 01       	movw	r30, r18
     ed4:	e6 0f       	add	r30, r22
     ed6:	f1 1d       	adc	r31, r1
}
     ed8:	80 81       	ld	r24, Z
     eda:	08 95       	ret

00000edc <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
     edc:	ff 92       	push	r15
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	e4 2f       	mov	r30, r20
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	e8 0f       	add	r30, r24
     eec:	f1 1d       	adc	r31, r1
     eee:	e1 38       	cpi	r30, 0x81	; 129
     ef0:	f1 05       	cpc	r31, r1
     ef2:	1c f0       	brlt	.+6      	; 0xefa <gfx_mono_generic_draw_horizontal_line+0x1e>
     ef4:	c0 e8       	ldi	r28, 0x80	; 128
     ef6:	4c 2f       	mov	r20, r28
     ef8:	48 1b       	sub	r20, r24
     efa:	44 23       	and	r20, r20
     efc:	09 f4       	brne	.+2      	; 0xf00 <gfx_mono_generic_draw_horizontal_line+0x24>
     efe:	4a c0       	rjmp	.+148    	; 0xf94 <gfx_mono_generic_draw_horizontal_line+0xb8>
     f00:	d6 2f       	mov	r29, r22
     f02:	d6 95       	lsr	r29
     f04:	d6 95       	lsr	r29
     f06:	d6 95       	lsr	r29
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	98 e0       	ldi	r25, 0x08	; 8
     f0c:	d9 9f       	mul	r29, r25
     f0e:	60 19       	sub	r22, r0
     f10:	71 09       	sbc	r23, r1
     f12:	11 24       	eor	r1, r1
     f14:	e1 e0       	ldi	r30, 0x01	; 1
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	df 01       	movw	r26, r30
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <gfx_mono_generic_draw_horizontal_line+0x44>
     f1c:	aa 0f       	add	r26, r26
     f1e:	bb 1f       	adc	r27, r27
     f20:	6a 95       	dec	r22
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <gfx_mono_generic_draw_horizontal_line+0x40>
     f24:	fa 2e       	mov	r15, r26
     f26:	21 30       	cpi	r18, 0x01	; 1
     f28:	21 f0       	breq	.+8      	; 0xf32 <gfx_mono_generic_draw_horizontal_line+0x56>
     f2a:	98 f0       	brcs	.+38     	; 0xf52 <gfx_mono_generic_draw_horizontal_line+0x76>
     f2c:	22 30       	cpi	r18, 0x02	; 2
     f2e:	19 f1       	breq	.+70     	; 0xf76 <gfx_mono_generic_draw_horizontal_line+0x9a>
     f30:	31 c0       	rjmp	.+98     	; 0xf94 <gfx_mono_generic_draw_horizontal_line+0xb8>
     f32:	c4 2f       	mov	r28, r20
     f34:	1f ef       	ldi	r17, 0xFF	; 255
     f36:	18 0f       	add	r17, r24
     f38:	01 2f       	mov	r16, r17
     f3a:	0c 0f       	add	r16, r28
     f3c:	60 2f       	mov	r22, r16
     f3e:	8d 2f       	mov	r24, r29
     f40:	aa df       	rcall	.-172    	; 0xe96 <gfx_mono_st7565r_get_byte>
     f42:	4f 2d       	mov	r20, r15
     f44:	48 2b       	or	r20, r24
     f46:	60 2f       	mov	r22, r16
     f48:	8d 2f       	mov	r24, r29
     f4a:	86 de       	rcall	.-756    	; 0xc58 <gfx_mono_st7565r_put_byte>
     f4c:	c1 50       	subi	r28, 0x01	; 1
     f4e:	a1 f7       	brne	.-24     	; 0xf38 <gfx_mono_generic_draw_horizontal_line+0x5c>
     f50:	21 c0       	rjmp	.+66     	; 0xf94 <gfx_mono_generic_draw_horizontal_line+0xb8>
     f52:	c4 2f       	mov	r28, r20
     f54:	1f ef       	ldi	r17, 0xFF	; 255
     f56:	18 0f       	add	r17, r24
     f58:	fa 2e       	mov	r15, r26
     f5a:	f0 94       	com	r15
     f5c:	01 2f       	mov	r16, r17
     f5e:	0c 0f       	add	r16, r28
     f60:	60 2f       	mov	r22, r16
     f62:	8d 2f       	mov	r24, r29
     f64:	98 df       	rcall	.-208    	; 0xe96 <gfx_mono_st7565r_get_byte>
     f66:	4f 2d       	mov	r20, r15
     f68:	48 23       	and	r20, r24
     f6a:	60 2f       	mov	r22, r16
     f6c:	8d 2f       	mov	r24, r29
     f6e:	74 de       	rcall	.-792    	; 0xc58 <gfx_mono_st7565r_put_byte>
     f70:	c1 50       	subi	r28, 0x01	; 1
     f72:	a1 f7       	brne	.-24     	; 0xf5c <gfx_mono_generic_draw_horizontal_line+0x80>
     f74:	0f c0       	rjmp	.+30     	; 0xf94 <gfx_mono_generic_draw_horizontal_line+0xb8>
     f76:	c4 2f       	mov	r28, r20
     f78:	1f ef       	ldi	r17, 0xFF	; 255
     f7a:	18 0f       	add	r17, r24
     f7c:	01 2f       	mov	r16, r17
     f7e:	0c 0f       	add	r16, r28
     f80:	60 2f       	mov	r22, r16
     f82:	8d 2f       	mov	r24, r29
     f84:	88 df       	rcall	.-240    	; 0xe96 <gfx_mono_st7565r_get_byte>
     f86:	4f 2d       	mov	r20, r15
     f88:	48 27       	eor	r20, r24
     f8a:	60 2f       	mov	r22, r16
     f8c:	8d 2f       	mov	r24, r29
     f8e:	64 de       	rcall	.-824    	; 0xc58 <gfx_mono_st7565r_put_byte>
     f90:	c1 50       	subi	r28, 0x01	; 1
     f92:	a1 f7       	brne	.-24     	; 0xf7c <gfx_mono_generic_draw_horizontal_line+0xa0>
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	ff 90       	pop	r15
     f9e:	08 95       	ret

00000fa0 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
	if (height == 0) {
     faa:	22 23       	and	r18, r18
     fac:	69 f0       	breq	.+26     	; 0xfc8 <gfx_mono_generic_draw_filled_rect+0x28>
     fae:	f4 2e       	mov	r15, r20
     fb0:	18 2f       	mov	r17, r24
     fb2:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     fb4:	df ef       	ldi	r29, 0xFF	; 255
     fb6:	d6 0f       	add	r29, r22
     fb8:	6d 2f       	mov	r22, r29
     fba:	6c 0f       	add	r22, r28
     fbc:	20 2f       	mov	r18, r16
     fbe:	4f 2d       	mov	r20, r15
     fc0:	81 2f       	mov	r24, r17
     fc2:	8c df       	rcall	.-232    	; 0xedc <gfx_mono_generic_draw_horizontal_line>
     fc4:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     fc6:	c1 f7       	brne	.-16     	; 0xfb8 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	ff 90       	pop	r15
     fd2:	08 95       	ret

00000fd4 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     fd4:	af 92       	push	r10
     fd6:	bf 92       	push	r11
     fd8:	cf 92       	push	r12
     fda:	df 92       	push	r13
     fdc:	ef 92       	push	r14
     fde:	ff 92       	push	r15
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	c8 2f       	mov	r28, r24
     fea:	e6 2e       	mov	r14, r22
     fec:	b4 2e       	mov	r11, r20
     fee:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     ff0:	00 e0       	ldi	r16, 0x00	; 0
     ff2:	f9 01       	movw	r30, r18
     ff4:	24 81       	ldd	r18, Z+4	; 0x04
     ff6:	43 81       	ldd	r20, Z+3	; 0x03
     ff8:	6b 2d       	mov	r22, r11
     ffa:	8e 2d       	mov	r24, r14
     ffc:	d1 df       	rcall	.-94     	; 0xfa0 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     ffe:	f6 01       	movw	r30, r12
    1000:	80 81       	ld	r24, Z
    1002:	81 11       	cpse	r24, r1
    1004:	39 c0       	rjmp	.+114    	; 0x1078 <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    1006:	83 81       	ldd	r24, Z+3	; 0x03
    1008:	28 2f       	mov	r18, r24
    100a:	26 95       	lsr	r18
    100c:	26 95       	lsr	r18
    100e:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    1010:	87 70       	andi	r24, 0x07	; 7
    1012:	09 f0       	breq	.+2      	; 0x1016 <gfx_mono_draw_char+0x42>
		char_row_size++;
    1014:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    1016:	f6 01       	movw	r30, r12
    1018:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    101a:	8c 2f       	mov	r24, r28
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	35 81       	ldd	r19, Z+5	; 0x05
    1020:	83 1b       	sub	r24, r19
    1022:	91 09       	sbc	r25, r1
    1024:	2a 9d       	mul	r18, r10
    1026:	90 01       	movw	r18, r0
    1028:	11 24       	eor	r1, r1
    102a:	82 9f       	mul	r24, r18
    102c:	a0 01       	movw	r20, r0
    102e:	83 9f       	mul	r24, r19
    1030:	50 0d       	add	r21, r0
    1032:	92 9f       	mul	r25, r18
    1034:	50 0d       	add	r21, r0
    1036:	11 24       	eor	r1, r1
    1038:	01 81       	ldd	r16, Z+1	; 0x01
    103a:	12 81       	ldd	r17, Z+2	; 0x02
    103c:	04 0f       	add	r16, r20
    103e:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    1040:	f6 01       	movw	r30, r12
    1042:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    1044:	ff 20       	and	r15, r15
    1046:	a1 f0       	breq	.+40     	; 0x1070 <gfx_mono_draw_char+0x9c>
    1048:	d0 e0       	ldi	r29, 0x00	; 0
    104a:	c0 e0       	ldi	r28, 0x00	; 0
    104c:	8e 2d       	mov	r24, r14
    104e:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    1050:	9c 2f       	mov	r25, r28
    1052:	97 70       	andi	r25, 0x07	; 7
    1054:	21 f4       	brne	.+8      	; 0x105e <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    1056:	f8 01       	movw	r30, r16
    1058:	d4 91       	lpm	r29, Z
				glyph_data++;
    105a:	0f 5f       	subi	r16, 0xFF	; 255
    105c:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    105e:	dd 23       	and	r29, r29
    1060:	1c f4       	brge	.+6      	; 0x1068 <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
    1062:	41 e0       	ldi	r20, 0x01	; 1
    1064:	6b 2d       	mov	r22, r11
    1066:	e1 de       	rcall	.-574    	; 0xe2a <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    1068:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    106a:	cf 5f       	subi	r28, 0xFF	; 255
    106c:	fc 12       	cpse	r15, r28
    106e:	ee cf       	rjmp	.-36     	; 0x104c <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    1070:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    1072:	aa 94       	dec	r10
	} while (rows_left > 0);
    1074:	a1 10       	cpse	r10, r1
    1076:	e4 cf       	rjmp	.-56     	; 0x1040 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	df 90       	pop	r13
    1086:	cf 90       	pop	r12
    1088:	bf 90       	pop	r11
    108a:	af 90       	pop	r10
    108c:	08 95       	ret

0000108e <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    108e:	df 92       	push	r13
    1090:	ef 92       	push	r14
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	d6 2e       	mov	r13, r22
    109e:	04 2f       	mov	r16, r20
    10a0:	79 01       	movw	r14, r18
    10a2:	ec 01       	movw	r28, r24
    10a4:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    10a6:	89 91       	ld	r24, Y+
    10a8:	8a 30       	cpi	r24, 0x0A	; 10
    10aa:	31 f4       	brne	.+12     	; 0x10b8 <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    10ac:	f7 01       	movw	r30, r14
    10ae:	84 81       	ldd	r24, Z+4	; 0x04
    10b0:	8f 5f       	subi	r24, 0xFF	; 255
    10b2:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    10b4:	1d 2d       	mov	r17, r13
    10b6:	09 c0       	rjmp	.+18     	; 0x10ca <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    10b8:	8d 30       	cpi	r24, 0x0D	; 13
    10ba:	39 f0       	breq	.+14     	; 0x10ca <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    10bc:	97 01       	movw	r18, r14
    10be:	40 2f       	mov	r20, r16
    10c0:	61 2f       	mov	r22, r17
    10c2:	88 df       	rcall	.-240    	; 0xfd4 <gfx_mono_draw_char>
			x += font->width;
    10c4:	f7 01       	movw	r30, r14
    10c6:	83 81       	ldd	r24, Z+3	; 0x03
    10c8:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    10ca:	88 81       	ld	r24, Y
    10cc:	81 11       	cpse	r24, r1
    10ce:	eb cf       	rjmp	.-42     	; 0x10a6 <gfx_mono_draw_string+0x18>
}
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	08 95       	ret

000010e0 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    10ea:	c6 2f       	mov	r28, r22
    10ec:	d0 e0       	ldi	r29, 0x00	; 0
    10ee:	de 01       	movw	r26, r28
    10f0:	02 2e       	mov	r0, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <ioport_configure_port_pin+0x18>
    10f4:	b5 95       	asr	r27
    10f6:	a7 95       	ror	r26
    10f8:	0a 94       	dec	r0
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <ioport_configure_port_pin+0x14>
    10fc:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    10fe:	50 8b       	std	Z+16, r21	; 0x10
    1100:	2f 5f       	subi	r18, 0xFF	; 255
    1102:	3f 4f       	sbci	r19, 0xFF	; 255
    1104:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    1106:	28 30       	cpi	r18, 0x08	; 8
    1108:	31 05       	cpc	r19, r1
    110a:	89 f7       	brne	.-30     	; 0x10ee <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    110c:	40 ff       	sbrs	r20, 0
    110e:	0a c0       	rjmp	.+20     	; 0x1124 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    1110:	41 ff       	sbrs	r20, 1
    1112:	03 c0       	rjmp	.+6      	; 0x111a <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    1114:	fc 01       	movw	r30, r24
    1116:	65 83       	std	Z+5, r22	; 0x05
    1118:	02 c0       	rjmp	.+4      	; 0x111e <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    111a:	fc 01       	movw	r30, r24
    111c:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    111e:	fc 01       	movw	r30, r24
    1120:	61 83       	std	Z+1, r22	; 0x01
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    1124:	fc 01       	movw	r30, r24
    1126:	62 83       	std	Z+2, r22	; 0x02
	}
}
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	08 95       	ret

0000112e <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    112e:	80 3a       	cpi	r24, 0xA0	; 160
    1130:	28 e0       	ldi	r18, 0x08	; 8
    1132:	92 07       	cpc	r25, r18
    1134:	21 f4       	brne	.+8      	; 0x113e <usart_spi_init+0x10>
    1136:	60 e1       	ldi	r22, 0x10	; 16
    1138:	83 e0       	ldi	r24, 0x03	; 3
    113a:	63 cd       	rjmp	.-1338   	; 0xc02 <sysclk_enable_module>
    113c:	08 95       	ret
    113e:	80 3b       	cpi	r24, 0xB0	; 176
    1140:	28 e0       	ldi	r18, 0x08	; 8
    1142:	92 07       	cpc	r25, r18
    1144:	21 f4       	brne	.+8      	; 0x114e <usart_spi_init+0x20>
    1146:	60 e2       	ldi	r22, 0x20	; 32
    1148:	83 e0       	ldi	r24, 0x03	; 3
    114a:	5b cd       	rjmp	.-1354   	; 0xc02 <sysclk_enable_module>
    114c:	08 95       	ret
    114e:	80 3a       	cpi	r24, 0xA0	; 160
    1150:	29 e0       	ldi	r18, 0x09	; 9
    1152:	92 07       	cpc	r25, r18
    1154:	21 f4       	brne	.+8      	; 0x115e <usart_spi_init+0x30>
    1156:	60 e1       	ldi	r22, 0x10	; 16
    1158:	84 e0       	ldi	r24, 0x04	; 4
    115a:	53 cd       	rjmp	.-1370   	; 0xc02 <sysclk_enable_module>
    115c:	08 95       	ret
    115e:	80 3b       	cpi	r24, 0xB0	; 176
    1160:	29 e0       	ldi	r18, 0x09	; 9
    1162:	92 07       	cpc	r25, r18
    1164:	21 f4       	brne	.+8      	; 0x116e <usart_spi_init+0x40>
    1166:	60 e2       	ldi	r22, 0x20	; 32
    1168:	84 e0       	ldi	r24, 0x04	; 4
    116a:	4b cd       	rjmp	.-1386   	; 0xc02 <sysclk_enable_module>
    116c:	08 95       	ret
    116e:	80 3a       	cpi	r24, 0xA0	; 160
    1170:	2a e0       	ldi	r18, 0x0A	; 10
    1172:	92 07       	cpc	r25, r18
    1174:	21 f4       	brne	.+8      	; 0x117e <usart_spi_init+0x50>
    1176:	60 e1       	ldi	r22, 0x10	; 16
    1178:	85 e0       	ldi	r24, 0x05	; 5
    117a:	43 cd       	rjmp	.-1402   	; 0xc02 <sysclk_enable_module>
    117c:	08 95       	ret
    117e:	80 3a       	cpi	r24, 0xA0	; 160
    1180:	9b 40       	sbci	r25, 0x0B	; 11
    1182:	19 f4       	brne	.+6      	; 0x118a <usart_spi_init+0x5c>
    1184:	60 e1       	ldi	r22, 0x10	; 16
    1186:	86 e0       	ldi	r24, 0x06	; 6
    1188:	3c cd       	rjmp	.-1416   	; 0xc02 <sysclk_enable_module>
    118a:	08 95       	ret

0000118c <usart_spi_setup_device>:
    118c:	0f 93       	push	r16
    118e:	1f 93       	push	r17
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	00 d0       	rcall	.+0      	; 0x1196 <usart_spi_setup_device+0xa>
    1196:	00 d0       	rcall	.+0      	; 0x1198 <usart_spi_setup_device+0xc>
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	09 83       	std	Y+1, r16	; 0x01
    119e:	1a 83       	std	Y+2, r17	; 0x02
    11a0:	2b 83       	std	Y+3, r18	; 0x03
    11a2:	3c 83       	std	Y+4, r19	; 0x04
    11a4:	4d 83       	std	Y+5, r20	; 0x05
    11a6:	1e 82       	std	Y+6, r1	; 0x06
    11a8:	be 01       	movw	r22, r28
    11aa:	6f 5f       	subi	r22, 0xFF	; 255
    11ac:	7f 4f       	sbci	r23, 0xFF	; 255
    11ae:	61 d2       	rcall	.+1218   	; 0x1672 <usart_init_spi>
    11b0:	26 96       	adiw	r28, 0x06	; 6
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	08 95       	ret

000011c0 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    11c0:	fb 01       	movw	r30, r22
    11c2:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    11c4:	e8 2f       	mov	r30, r24
    11c6:	e6 95       	lsr	r30
    11c8:	e6 95       	lsr	r30
    11ca:	e6 95       	lsr	r30
    11cc:	40 e2       	ldi	r20, 0x20	; 32
    11ce:	e4 9f       	mul	r30, r20
    11d0:	f0 01       	movw	r30, r0
    11d2:	11 24       	eor	r1, r1
    11d4:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    11d6:	87 70       	andi	r24, 0x07	; 7
    11d8:	21 e0       	ldi	r18, 0x01	; 1
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	a9 01       	movw	r20, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <usart_spi_select_device+0x24>
    11e0:	44 0f       	add	r20, r20
    11e2:	55 1f       	adc	r21, r21
    11e4:	8a 95       	dec	r24
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    11e8:	46 83       	std	Z+6, r20	; 0x06
    11ea:	08 95       	ret

000011ec <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    11ec:	fb 01       	movw	r30, r22
    11ee:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    11f0:	e8 2f       	mov	r30, r24
    11f2:	e6 95       	lsr	r30
    11f4:	e6 95       	lsr	r30
    11f6:	e6 95       	lsr	r30
    11f8:	40 e2       	ldi	r20, 0x20	; 32
    11fa:	e4 9f       	mul	r30, r20
    11fc:	f0 01       	movw	r30, r0
    11fe:	11 24       	eor	r1, r1
    1200:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1202:	87 70       	andi	r24, 0x07	; 7
    1204:	21 e0       	ldi	r18, 0x01	; 1
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	a9 01       	movw	r20, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <usart_spi_deselect_device+0x24>
    120c:	44 0f       	add	r20, r20
    120e:	55 1f       	adc	r21, r21
    1210:	8a 95       	dec	r24
    1212:	e2 f7       	brpl	.-8      	; 0x120c <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1214:	45 83       	std	Z+5, r20	; 0x05
    1216:	08 95       	ret

00001218 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1218:	43 e0       	ldi	r20, 0x03	; 3
    121a:	50 e0       	ldi	r21, 0x00	; 0
    121c:	61 e0       	ldi	r22, 0x01	; 1
    121e:	80 ee       	ldi	r24, 0xE0	; 224
    1220:	97 e0       	ldi	r25, 0x07	; 7
    1222:	5e df       	rcall	.-324    	; 0x10e0 <ioport_configure_port_pin>
    1224:	43 e0       	ldi	r20, 0x03	; 3
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	62 e0       	ldi	r22, 0x02	; 2
    122a:	80 ee       	ldi	r24, 0xE0	; 224
    122c:	97 e0       	ldi	r25, 0x07	; 7
    122e:	58 df       	rcall	.-336    	; 0x10e0 <ioport_configure_port_pin>
    1230:	43 e0       	ldi	r20, 0x03	; 3
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	60 e1       	ldi	r22, 0x10	; 16
    1236:	80 e6       	ldi	r24, 0x60	; 96
    1238:	96 e0       	ldi	r25, 0x06	; 6
    123a:	52 df       	rcall	.-348    	; 0x10e0 <ioport_configure_port_pin>
    123c:	41 e0       	ldi	r20, 0x01	; 1
    123e:	50 e4       	ldi	r21, 0x40	; 64
    1240:	60 e2       	ldi	r22, 0x20	; 32
    1242:	80 e6       	ldi	r24, 0x60	; 96
    1244:	96 e0       	ldi	r25, 0x06	; 6
    1246:	4c df       	rcall	.-360    	; 0x10e0 <ioport_configure_port_pin>
    1248:	40 e0       	ldi	r20, 0x00	; 0
    124a:	5b e1       	ldi	r21, 0x1B	; 27
    124c:	60 e2       	ldi	r22, 0x20	; 32
    124e:	80 e8       	ldi	r24, 0x80	; 128
    1250:	96 e0       	ldi	r25, 0x06	; 6
    1252:	46 df       	rcall	.-372    	; 0x10e0 <ioport_configure_port_pin>
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	5b e1       	ldi	r21, 0x1B	; 27
    1258:	62 e0       	ldi	r22, 0x02	; 2
    125a:	80 ea       	ldi	r24, 0xA0	; 160
    125c:	96 e0       	ldi	r25, 0x06	; 6
    125e:	40 df       	rcall	.-384    	; 0x10e0 <ioport_configure_port_pin>
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	5b e1       	ldi	r21, 0x1B	; 27
    1264:	64 e0       	ldi	r22, 0x04	; 4
    1266:	80 ea       	ldi	r24, 0xA0	; 160
    1268:	96 e0       	ldi	r25, 0x06	; 6
    126a:	3a df       	rcall	.-396    	; 0x10e0 <ioport_configure_port_pin>
    126c:	43 e0       	ldi	r20, 0x03	; 3
    126e:	50 e0       	ldi	r21, 0x00	; 0
    1270:	62 e0       	ldi	r22, 0x02	; 2
    1272:	80 e6       	ldi	r24, 0x60	; 96
    1274:	96 e0       	ldi	r25, 0x06	; 6
    1276:	34 df       	rcall	.-408    	; 0x10e0 <ioport_configure_port_pin>
    1278:	43 e0       	ldi	r20, 0x03	; 3
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	68 e0       	ldi	r22, 0x08	; 8
    127e:	80 e6       	ldi	r24, 0x60	; 96
    1280:	96 e0       	ldi	r25, 0x06	; 6
    1282:	2e df       	rcall	.-420    	; 0x10e0 <ioport_configure_port_pin>
    1284:	43 e0       	ldi	r20, 0x03	; 3
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	68 e0       	ldi	r22, 0x08	; 8
    128a:	80 ea       	ldi	r24, 0xA0	; 160
    128c:	96 e0       	ldi	r25, 0x06	; 6
    128e:	28 df       	rcall	.-432    	; 0x10e0 <ioport_configure_port_pin>
    1290:	43 e0       	ldi	r20, 0x03	; 3
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	61 e0       	ldi	r22, 0x01	; 1
    1296:	80 e6       	ldi	r24, 0x60	; 96
    1298:	96 e0       	ldi	r25, 0x06	; 6
    129a:	22 df       	rcall	.-444    	; 0x10e0 <ioport_configure_port_pin>
    129c:	43 e0       	ldi	r20, 0x03	; 3
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	68 e0       	ldi	r22, 0x08	; 8
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	96 e0       	ldi	r25, 0x06	; 6
    12a6:	1c df       	rcall	.-456    	; 0x10e0 <ioport_configure_port_pin>
    12a8:	41 e0       	ldi	r20, 0x01	; 1
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	60 e1       	ldi	r22, 0x10	; 16
    12ae:	80 e8       	ldi	r24, 0x80	; 128
    12b0:	96 e0       	ldi	r25, 0x06	; 6
    12b2:	16 cf       	rjmp	.-468    	; 0x10e0 <ioport_configure_port_pin>
    12b4:	08 95       	ret

000012b6 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    12b6:	81 15       	cp	r24, r1
    12b8:	22 e0       	ldi	r18, 0x02	; 2
    12ba:	92 07       	cpc	r25, r18
    12bc:	61 f4       	brne	.+24     	; 0x12d6 <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    12be:	80 91 27 22 	lds	r24, 0x2227	; 0x802227 <adca_enable_count>
    12c2:	91 e0       	ldi	r25, 0x01	; 1
    12c4:	98 0f       	add	r25, r24
    12c6:	90 93 27 22 	sts	0x2227, r25	; 0x802227 <adca_enable_count>
    12ca:	81 11       	cpse	r24, r1
    12cc:	12 c0       	rjmp	.+36     	; 0x12f2 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    12ce:	62 e0       	ldi	r22, 0x02	; 2
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	97 cc       	rjmp	.-1746   	; 0xc02 <sysclk_enable_module>
    12d4:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    12d6:	80 34       	cpi	r24, 0x40	; 64
    12d8:	92 40       	sbci	r25, 0x02	; 2
    12da:	59 f4       	brne	.+22     	; 0x12f2 <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    12dc:	80 91 26 22 	lds	r24, 0x2226	; 0x802226 <adcb_enable_count>
    12e0:	91 e0       	ldi	r25, 0x01	; 1
    12e2:	98 0f       	add	r25, r24
    12e4:	90 93 26 22 	sts	0x2226, r25	; 0x802226 <adcb_enable_count>
    12e8:	81 11       	cpse	r24, r1
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    12ec:	62 e0       	ldi	r22, 0x02	; 2
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	88 cc       	rjmp	.-1776   	; 0xc02 <sysclk_enable_module>
    12f2:	08 95       	ret

000012f4 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    12f4:	81 15       	cp	r24, r1
    12f6:	22 e0       	ldi	r18, 0x02	; 2
    12f8:	92 07       	cpc	r25, r18
    12fa:	59 f4       	brne	.+22     	; 0x1312 <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    12fc:	80 91 27 22 	lds	r24, 0x2227	; 0x802227 <adca_enable_count>
    1300:	81 50       	subi	r24, 0x01	; 1
    1302:	80 93 27 22 	sts	0x2227, r24	; 0x802227 <adca_enable_count>
    1306:	81 11       	cpse	r24, r1
    1308:	11 c0       	rjmp	.+34     	; 0x132c <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    130a:	62 e0       	ldi	r22, 0x02	; 2
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	8f cc       	rjmp	.-1762   	; 0xc2e <sysclk_disable_module>
    1310:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    1312:	80 34       	cpi	r24, 0x40	; 64
    1314:	92 40       	sbci	r25, 0x02	; 2
    1316:	51 f4       	brne	.+20     	; 0x132c <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    1318:	80 91 26 22 	lds	r24, 0x2226	; 0x802226 <adcb_enable_count>
    131c:	81 50       	subi	r24, 0x01	; 1
    131e:	80 93 26 22 	sts	0x2226, r24	; 0x802226 <adcb_enable_count>
    1322:	81 11       	cpse	r24, r1
    1324:	03 c0       	rjmp	.+6      	; 0x132c <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1326:	62 e0       	ldi	r22, 0x02	; 2
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	81 cc       	rjmp	.-1790   	; 0xc2e <sysclk_disable_module>
    132c:	08 95       	ret

0000132e <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	1f 93       	push	r17
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	1f 92       	push	r1
    133a:	1f 92       	push	r1
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1342:	8f b7       	in	r24, 0x3f	; 63
    1344:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1346:	f8 94       	cli
	return flags;
    1348:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    134a:	c7 01       	movw	r24, r14
    134c:	b4 df       	rcall	.-152    	; 0x12b6 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    134e:	f7 01       	movw	r30, r14
    1350:	80 81       	ld	r24, Z
    1352:	81 60       	ori	r24, 0x01	; 1
    1354:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1356:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1358:	80 91 29 22 	lds	r24, 0x2229	; 0x802229 <sleepmgr_locks+0x1>
    135c:	8f 3f       	cpi	r24, 0xFF	; 255
    135e:	09 f4       	brne	.+2      	; 0x1362 <adc_enable+0x34>
    1360:	ff cf       	rjmp	.-2      	; 0x1360 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1362:	8f b7       	in	r24, 0x3f	; 63
    1364:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    1366:	f8 94       	cli
	return flags;
    1368:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    136a:	e8 e2       	ldi	r30, 0x28	; 40
    136c:	f2 e2       	ldi	r31, 0x22	; 34
    136e:	81 81       	ldd	r24, Z+1	; 0x01
    1370:	8f 5f       	subi	r24, 0xFF	; 255
    1372:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1374:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	1f 91       	pop	r17
    1380:	ff 90       	pop	r15
    1382:	ef 90       	pop	r14
    1384:	08 95       	ret

00001386 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    1386:	bf 92       	push	r11
    1388:	cf 92       	push	r12
    138a:	df 92       	push	r13
    138c:	ef 92       	push	r14
    138e:	ff 92       	push	r15
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	1f 92       	push	r1
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	8c 01       	movw	r16, r24
    13a0:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    13a2:	81 15       	cp	r24, r1
    13a4:	22 e0       	ldi	r18, 0x02	; 2
    13a6:	92 07       	cpc	r25, r18
    13a8:	71 f4       	brne	.+28     	; 0x13c6 <adc_write_configuration+0x40>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    13aa:	61 e2       	ldi	r22, 0x21	; 33
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	25 d1       	rcall	.+586    	; 0x15fc <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    13b2:	c8 2e       	mov	r12, r24
    13b4:	d1 2c       	mov	r13, r1
    13b6:	60 e2       	ldi	r22, 0x20	; 32
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	82 e0       	ldi	r24, 0x02	; 2
    13bc:	1f d1       	rcall	.+574    	; 0x15fc <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    13be:	dc 2c       	mov	r13, r12
    13c0:	cc 24       	eor	r12, r12
    13c2:	c8 2a       	or	r12, r24
    13c4:	10 c0       	rjmp	.+32     	; 0x13e6 <adc_write_configuration+0x60>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    13c6:	80 34       	cpi	r24, 0x40	; 64
    13c8:	92 40       	sbci	r25, 0x02	; 2
    13ca:	c1 f5       	brne	.+112    	; 0x143c <adc_write_configuration+0xb6>
    13cc:	65 e2       	ldi	r22, 0x25	; 37
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	82 e0       	ldi	r24, 0x02	; 2
    13d2:	14 d1       	rcall	.+552    	; 0x15fc <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    13d4:	c8 2e       	mov	r12, r24
    13d6:	d1 2c       	mov	r13, r1
    13d8:	64 e2       	ldi	r22, 0x24	; 36
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	82 e0       	ldi	r24, 0x02	; 2
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    13de:	0e d1       	rcall	.+540    	; 0x15fc <nvm_read_byte>
    13e0:	dc 2c       	mov	r13, r12
    13e2:	cc 24       	eor	r12, r12

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    13e4:	c8 2a       	or	r12, r24
	cpu_irq_disable();
    13e6:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    13e8:	89 83       	std	Y+1, r24	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    13ea:	f8 94       	cli
    13ec:	b9 80       	ldd	r11, Y+1	; 0x01
    13ee:	c8 01       	movw	r24, r16
	enable = adc->CTRLA & ADC_ENABLE_bm;
    13f0:	62 df       	rcall	.-316    	; 0x12b6 <adc_enable_clock>
    13f2:	f8 01       	movw	r30, r16

	adc->CTRLA = ADC_FLUSH_bm;
    13f4:	80 81       	ld	r24, Z
    13f6:	92 e0       	ldi	r25, 0x02	; 2
	adc->CAL = cal;
    13f8:	90 83       	st	Z, r25
    13fa:	c4 86       	std	Z+12, r12	; 0x0c
	adc->CMP = conf->cmp;
    13fc:	d5 86       	std	Z+13, r13	; 0x0d
    13fe:	f7 01       	movw	r30, r14
    1400:	25 81       	ldd	r18, Z+5	; 0x05
    1402:	36 81       	ldd	r19, Z+6	; 0x06
    1404:	f8 01       	movw	r30, r16
    1406:	20 8f       	std	Z+24, r18	; 0x18
	adc->REFCTRL = conf->refctrl;
    1408:	31 8f       	std	Z+25, r19	; 0x19
    140a:	f7 01       	movw	r30, r14
    140c:	92 81       	ldd	r25, Z+2	; 0x02
    140e:	f8 01       	movw	r30, r16
	adc->PRESCALER = conf->prescaler;
    1410:	92 83       	std	Z+2, r25	; 0x02
    1412:	f7 01       	movw	r30, r14
    1414:	94 81       	ldd	r25, Z+4	; 0x04
    1416:	f8 01       	movw	r30, r16
	adc->EVCTRL = conf->evctrl;
    1418:	94 83       	std	Z+4, r25	; 0x04
    141a:	f7 01       	movw	r30, r14
    141c:	93 81       	ldd	r25, Z+3	; 0x03
    141e:	f8 01       	movw	r30, r16
	adc->CTRLB = conf->ctrlb;
    1420:	93 83       	std	Z+3, r25	; 0x03
    1422:	f7 01       	movw	r30, r14
    1424:	91 81       	ldd	r25, Z+1	; 0x01
    1426:	f8 01       	movw	r30, r16

	adc->CTRLA = enable | conf->ctrla;
    1428:	91 83       	std	Z+1, r25	; 0x01
    142a:	81 70       	andi	r24, 0x01	; 1
    142c:	f7 01       	movw	r30, r14
    142e:	90 81       	ld	r25, Z
    1430:	89 2b       	or	r24, r25

	adc_disable_clock(adc);
    1432:	f8 01       	movw	r30, r16
    1434:	80 83       	st	Z, r24
    1436:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1438:	5d df       	rcall	.-326    	; 0x12f4 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    143a:	bf be       	out	0x3f, r11	; 63
    143c:	0f 90       	pop	r0
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	1f 91       	pop	r17
    1444:	0f 91       	pop	r16
    1446:	ff 90       	pop	r15
    1448:	ef 90       	pop	r14
    144a:	df 90       	pop	r13
    144c:	cf 90       	pop	r12
    144e:	bf 90       	pop	r11
    1450:	08 95       	ret

00001452 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    1452:	df 92       	push	r13
    1454:	ef 92       	push	r14
    1456:	ff 92       	push	r15
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	1f 92       	push	r1
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	8c 01       	movw	r16, r24
    1468:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    146a:	8f b7       	in	r24, 0x3f	; 63
    146c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    146e:	f8 94       	cli
	return flags;
    1470:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    1472:	c8 01       	movw	r24, r16
    1474:	20 df       	rcall	.-448    	; 0x12b6 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    1476:	f8 01       	movw	r30, r16
    1478:	80 81       	ld	r24, Z
    147a:	80 7c       	andi	r24, 0xC0	; 192
    147c:	f7 01       	movw	r30, r14
    147e:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    1480:	f8 01       	movw	r30, r16
    1482:	80 8d       	ldd	r24, Z+24	; 0x18
    1484:	91 8d       	ldd	r25, Z+25	; 0x19
    1486:	f7 01       	movw	r30, r14
    1488:	85 83       	std	Z+5, r24	; 0x05
    148a:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    148c:	f8 01       	movw	r30, r16
    148e:	82 81       	ldd	r24, Z+2	; 0x02
    1490:	f7 01       	movw	r30, r14
    1492:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    1494:	f8 01       	movw	r30, r16
    1496:	84 81       	ldd	r24, Z+4	; 0x04
    1498:	f7 01       	movw	r30, r14
    149a:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    149c:	f8 01       	movw	r30, r16
    149e:	83 81       	ldd	r24, Z+3	; 0x03
    14a0:	f7 01       	movw	r30, r14
    14a2:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    14a4:	f8 01       	movw	r30, r16
    14a6:	81 81       	ldd	r24, Z+1	; 0x01
    14a8:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
    14aa:	81 83       	std	Z+1, r24	; 0x01
    14ac:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    14ae:	22 df       	rcall	.-444    	; 0x12f4 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    14b0:	df be       	out	0x3f, r13	; 63
    14b2:	0f 90       	pop	r0
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	ff 90       	pop	r15
    14be:	ef 90       	pop	r14
    14c0:	df 90       	pop	r13
    14c2:	08 95       	ret

000014c4 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    14c4:	af 92       	push	r10
    14c6:	bf 92       	push	r11
    14c8:	cf 92       	push	r12
    14ca:	df 92       	push	r13
    14cc:	ef 92       	push	r14
    14ce:	ff 92       	push	r15
    14d0:	0f 93       	push	r16
    14d2:	1f 93       	push	r17
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	1f 92       	push	r1
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	6c 01       	movw	r12, r24
    14e0:	b6 2e       	mov	r11, r22
    14e2:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    14e4:	86 2f       	mov	r24, r22
    14e6:	83 70       	andi	r24, 0x03	; 3
    14e8:	29 f4       	brne	.+10     	; 0x14f4 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    14ea:	96 2f       	mov	r25, r22
    14ec:	96 95       	lsr	r25
    14ee:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    14f0:	82 e0       	ldi	r24, 0x02	; 2
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    14f4:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    14f6:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    14f8:	90 ff       	sbrs	r25, 0
		index++;
    14fa:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    14fc:	86 01       	movw	r16, r12
    14fe:	00 5e       	subi	r16, 0xE0	; 224
    1500:	1f 4f       	sbci	r17, 0xFF	; 255
    1502:	98 e0       	ldi	r25, 0x08	; 8
    1504:	89 9f       	mul	r24, r25
    1506:	00 0d       	add	r16, r0
    1508:	11 1d       	adc	r17, r1
    150a:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    150c:	8f b7       	in	r24, 0x3f	; 63
    150e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1510:	f8 94       	cli
	return flags;
    1512:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    1514:	c6 01       	movw	r24, r12
    1516:	cf de       	rcall	.-610    	; 0x12b6 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    1518:	f7 01       	movw	r30, r14
    151a:	80 81       	ld	r24, Z
    151c:	f8 01       	movw	r30, r16
    151e:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    1520:	f7 01       	movw	r30, r14
    1522:	82 81       	ldd	r24, Z+2	; 0x02
    1524:	f8 01       	movw	r30, r16
    1526:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    1528:	f7 01       	movw	r30, r14
    152a:	81 81       	ldd	r24, Z+1	; 0x01
    152c:	f8 01       	movw	r30, r16
    152e:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1530:	b0 fe       	sbrs	r11, 0
    1532:	04 c0       	rjmp	.+8      	; 0x153c <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    1534:	f7 01       	movw	r30, r14
    1536:	83 81       	ldd	r24, Z+3	; 0x03
    1538:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
    153a:	86 83       	std	Z+6, r24	; 0x06
    153c:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    153e:	da de       	rcall	.-588    	; 0x12f4 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    1540:	af be       	out	0x3f, r10	; 63
    1542:	0f 90       	pop	r0
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	ff 90       	pop	r15
    154e:	ef 90       	pop	r14
    1550:	df 90       	pop	r13
    1552:	cf 90       	pop	r12
    1554:	bf 90       	pop	r11
    1556:	af 90       	pop	r10
    1558:	08 95       	ret

0000155a <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    155a:	af 92       	push	r10
    155c:	bf 92       	push	r11
    155e:	cf 92       	push	r12
    1560:	df 92       	push	r13
    1562:	ef 92       	push	r14
    1564:	ff 92       	push	r15
    1566:	0f 93       	push	r16
    1568:	1f 93       	push	r17
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	1f 92       	push	r1
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	6c 01       	movw	r12, r24
    1576:	b6 2e       	mov	r11, r22
    1578:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    157a:	86 2f       	mov	r24, r22
    157c:	83 70       	andi	r24, 0x03	; 3
    157e:	29 f4       	brne	.+10     	; 0x158a <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    1580:	96 2f       	mov	r25, r22
    1582:	96 95       	lsr	r25
    1584:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1586:	82 e0       	ldi	r24, 0x02	; 2
    1588:	02 c0       	rjmp	.+4      	; 0x158e <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    158a:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    158c:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    158e:	90 ff       	sbrs	r25, 0
		index++;
    1590:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1592:	86 01       	movw	r16, r12
    1594:	00 5e       	subi	r16, 0xE0	; 224
    1596:	1f 4f       	sbci	r17, 0xFF	; 255
    1598:	98 e0       	ldi	r25, 0x08	; 8
    159a:	89 9f       	mul	r24, r25
    159c:	00 0d       	add	r16, r0
    159e:	11 1d       	adc	r17, r1
    15a0:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    15a2:	8f b7       	in	r24, 0x3f	; 63
    15a4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    15a6:	f8 94       	cli
	return flags;
    15a8:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    15aa:	c6 01       	movw	r24, r12
    15ac:	84 de       	rcall	.-760    	; 0x12b6 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    15ae:	f8 01       	movw	r30, r16
    15b0:	80 81       	ld	r24, Z
    15b2:	f7 01       	movw	r30, r14
    15b4:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    15b6:	f8 01       	movw	r30, r16
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	f7 01       	movw	r30, r14
    15bc:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    15be:	f8 01       	movw	r30, r16
    15c0:	81 81       	ldd	r24, Z+1	; 0x01
    15c2:	f7 01       	movw	r30, r14
    15c4:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    15c6:	b0 fe       	sbrs	r11, 0
    15c8:	04 c0       	rjmp	.+8      	; 0x15d2 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    15ca:	f8 01       	movw	r30, r16
    15cc:	86 81       	ldd	r24, Z+6	; 0x06
    15ce:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
    15d0:	83 83       	std	Z+3, r24	; 0x03
    15d2:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15d4:	8f de       	rcall	.-738    	; 0x12f4 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    15d6:	af be       	out	0x3f, r10	; 63
    15d8:	0f 90       	pop	r0
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	ff 90       	pop	r15
    15e4:	ef 90       	pop	r14
    15e6:	df 90       	pop	r13
    15e8:	cf 90       	pop	r12
    15ea:	bf 90       	pop	r11
    15ec:	af 90       	pop	r10
    15ee:	08 95       	ret

000015f0 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    15f0:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    15f2:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    15f4:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    15f6:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    15f8:	60 83       	st	Z, r22
	ret                             // Return to caller
    15fa:	08 95       	ret

000015fc <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    15fc:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1600:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1602:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1604:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1608:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    160a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    160e:	08 95       	ret

00001610 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1610:	cf 92       	push	r12
    1612:	df 92       	push	r13
    1614:	ef 92       	push	r14
    1616:	ff 92       	push	r15
    1618:	0f 93       	push	r16
    161a:	1f 93       	push	r17
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    1622:	d9 01       	movw	r26, r18
    1624:	c8 01       	movw	r24, r16
    1626:	b6 95       	lsr	r27
    1628:	a7 95       	ror	r26
    162a:	97 95       	ror	r25
    162c:	87 95       	ror	r24
    162e:	48 17       	cp	r20, r24
    1630:	59 07       	cpc	r21, r25
    1632:	6a 07       	cpc	r22, r26
    1634:	7b 07       	cpc	r23, r27
    1636:	70 f4       	brcc	.+28     	; 0x1654 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    1638:	6a 01       	movw	r12, r20
    163a:	7b 01       	movw	r14, r22
    163c:	cc 0c       	add	r12, r12
    163e:	dd 1c       	adc	r13, r13
    1640:	ee 1c       	adc	r14, r14
    1642:	ff 1c       	adc	r15, r15
    1644:	c9 01       	movw	r24, r18
    1646:	b8 01       	movw	r22, r16
    1648:	a7 01       	movw	r20, r14
    164a:	96 01       	movw	r18, r12
    164c:	f6 d1       	rcall	.+1004   	; 0x1a3a <__udivmodsi4>
    164e:	21 50       	subi	r18, 0x01	; 1
    1650:	31 09       	sbc	r19, r1
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    1658:	83 2f       	mov	r24, r19
    165a:	8f 70       	andi	r24, 0x0F	; 15
    165c:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    165e:	2e 83       	std	Y+6, r18	; 0x06
}
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	ff 90       	pop	r15
    166a:	ef 90       	pop	r14
    166c:	df 90       	pop	r13
    166e:	cf 90       	pop	r12
    1670:	08 95       	ret

00001672 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1672:	df 92       	push	r13
    1674:	ef 92       	push	r14
    1676:	ff 92       	push	r15
    1678:	0f 93       	push	r16
    167a:	1f 93       	push	r17
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	1f 92       	push	r1
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	7c 01       	movw	r14, r24
    1688:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	09 f4       	brne	.+2      	; 0x1690 <usart_init_spi+0x1e>
    168e:	b2 c1       	rjmp	.+868    	; 0x19f4 <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1690:	80 3c       	cpi	r24, 0xC0	; 192
    1692:	91 05       	cpc	r25, r1
    1694:	21 f4       	brne	.+8      	; 0x169e <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1696:	60 e1       	ldi	r22, 0x10	; 16
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	b3 da       	rcall	.-2714   	; 0xc02 <sysclk_enable_module>
    169c:	ab c1       	rjmp	.+854    	; 0x19f4 <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    169e:	80 e8       	ldi	r24, 0x80	; 128
    16a0:	e8 16       	cp	r14, r24
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	f8 06       	cpc	r15, r24
    16a6:	21 f4       	brne	.+8      	; 0x16b0 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    16a8:	62 e0       	ldi	r22, 0x02	; 2
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	aa da       	rcall	.-2732   	; 0xc02 <sysclk_enable_module>
    16ae:	a2 c1       	rjmp	.+836    	; 0x19f4 <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    16b0:	e1 14       	cp	r14, r1
    16b2:	e1 e0       	ldi	r30, 0x01	; 1
    16b4:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    16b6:	21 f4       	brne	.+8      	; 0x16c0 <usart_init_spi+0x4e>
    16b8:	61 e0       	ldi	r22, 0x01	; 1
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	a2 da       	rcall	.-2748   	; 0xc02 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    16be:	9a c1       	rjmp	.+820    	; 0x19f4 <usart_init_spi+0x382>
    16c0:	f0 e8       	ldi	r31, 0x80	; 128
    16c2:	ef 16       	cp	r14, r31
    16c4:	f3 e0       	ldi	r31, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    16c6:	ff 06       	cpc	r15, r31
    16c8:	21 f4       	brne	.+8      	; 0x16d2 <usart_init_spi+0x60>
    16ca:	61 e0       	ldi	r22, 0x01	; 1
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	99 da       	rcall	.-2766   	; 0xc02 <sysclk_enable_module>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    16d0:	91 c1       	rjmp	.+802    	; 0x19f4 <usart_init_spi+0x382>
    16d2:	30 e9       	ldi	r19, 0x90	; 144
    16d4:	e3 16       	cp	r14, r19
    16d6:	33 e0       	ldi	r19, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    16d8:	f3 06       	cpc	r15, r19
    16da:	21 f4       	brne	.+8      	; 0x16e4 <usart_init_spi+0x72>
    16dc:	61 e0       	ldi	r22, 0x01	; 1
    16de:	82 e0       	ldi	r24, 0x02	; 2
    16e0:	90 da       	rcall	.-2784   	; 0xc02 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    16e2:	88 c1       	rjmp	.+784    	; 0x19f4 <usart_init_spi+0x382>
    16e4:	e1 14       	cp	r14, r1
    16e6:	82 e0       	ldi	r24, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    16e8:	f8 06       	cpc	r15, r24
    16ea:	21 f4       	brne	.+8      	; 0x16f4 <usart_init_spi+0x82>
    16ec:	62 e0       	ldi	r22, 0x02	; 2
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	88 da       	rcall	.-2800   	; 0xc02 <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    16f2:	80 c1       	rjmp	.+768    	; 0x19f4 <usart_init_spi+0x382>
    16f4:	e0 e4       	ldi	r30, 0x40	; 64
    16f6:	ee 16       	cp	r14, r30
    16f8:	e2 e0       	ldi	r30, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    16fa:	fe 06       	cpc	r15, r30
    16fc:	21 f4       	brne	.+8      	; 0x1706 <usart_init_spi+0x94>
    16fe:	62 e0       	ldi	r22, 0x02	; 2
    1700:	82 e0       	ldi	r24, 0x02	; 2
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1702:	7f da       	rcall	.-2818   	; 0xc02 <sysclk_enable_module>
    1704:	77 c1       	rjmp	.+750    	; 0x19f4 <usart_init_spi+0x382>
    1706:	f0 e2       	ldi	r31, 0x20	; 32
    1708:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    170a:	f3 e0       	ldi	r31, 0x03	; 3
    170c:	ff 06       	cpc	r15, r31
    170e:	21 f4       	brne	.+8      	; 0x1718 <usart_init_spi+0xa6>
    1710:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1712:	82 e0       	ldi	r24, 0x02	; 2
    1714:	76 da       	rcall	.-2836   	; 0xc02 <sysclk_enable_module>
    1716:	6e c1       	rjmp	.+732    	; 0x19f4 <usart_init_spi+0x382>
    1718:	e1 14       	cp	r14, r1
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    171a:	38 e0       	ldi	r19, 0x08	; 8
    171c:	f3 06       	cpc	r15, r19
    171e:	21 f4       	brne	.+8      	; 0x1728 <usart_init_spi+0xb6>
    1720:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1722:	83 e0       	ldi	r24, 0x03	; 3
    1724:	6e da       	rcall	.-2852   	; 0xc02 <sysclk_enable_module>
    1726:	66 c1       	rjmp	.+716    	; 0x19f4 <usart_init_spi+0x382>
    1728:	e1 14       	cp	r14, r1
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    172a:	89 e0       	ldi	r24, 0x09	; 9
    172c:	f8 06       	cpc	r15, r24
    172e:	21 f4       	brne	.+8      	; 0x1738 <usart_init_spi+0xc6>
    1730:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1732:	84 e0       	ldi	r24, 0x04	; 4
    1734:	66 da       	rcall	.-2868   	; 0xc02 <sysclk_enable_module>
    1736:	5e c1       	rjmp	.+700    	; 0x19f4 <usart_init_spi+0x382>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1738:	e1 14       	cp	r14, r1
    173a:	ea e0       	ldi	r30, 0x0A	; 10
    173c:	fe 06       	cpc	r15, r30
    173e:	21 f4       	brne	.+8      	; 0x1748 <usart_init_spi+0xd6>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1740:	61 e0       	ldi	r22, 0x01	; 1
    1742:	85 e0       	ldi	r24, 0x05	; 5
    1744:	5e da       	rcall	.-2884   	; 0xc02 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1746:	56 c1       	rjmp	.+684    	; 0x19f4 <usart_init_spi+0x382>
    1748:	e1 14       	cp	r14, r1
    174a:	fb e0       	ldi	r31, 0x0B	; 11
    174c:	ff 06       	cpc	r15, r31
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    174e:	21 f4       	brne	.+8      	; 0x1758 <usart_init_spi+0xe6>
    1750:	61 e0       	ldi	r22, 0x01	; 1
    1752:	86 e0       	ldi	r24, 0x06	; 6
    1754:	56 da       	rcall	.-2900   	; 0xc02 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1756:	4e c1       	rjmp	.+668    	; 0x19f4 <usart_init_spi+0x382>
    1758:	30 e4       	ldi	r19, 0x40	; 64
    175a:	e3 16       	cp	r14, r19
    175c:	38 e0       	ldi	r19, 0x08	; 8
    175e:	f3 06       	cpc	r15, r19
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1760:	21 f4       	brne	.+8      	; 0x176a <usart_init_spi+0xf8>
    1762:	62 e0       	ldi	r22, 0x02	; 2
    1764:	83 e0       	ldi	r24, 0x03	; 3
    1766:	4d da       	rcall	.-2918   	; 0xc02 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1768:	45 c1       	rjmp	.+650    	; 0x19f4 <usart_init_spi+0x382>
    176a:	80 e4       	ldi	r24, 0x40	; 64
    176c:	e8 16       	cp	r14, r24
    176e:	89 e0       	ldi	r24, 0x09	; 9
    1770:	f8 06       	cpc	r15, r24
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1772:	21 f4       	brne	.+8      	; 0x177c <usart_init_spi+0x10a>
    1774:	62 e0       	ldi	r22, 0x02	; 2
    1776:	84 e0       	ldi	r24, 0x04	; 4
    1778:	44 da       	rcall	.-2936   	; 0xc02 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    177a:	3c c1       	rjmp	.+632    	; 0x19f4 <usart_init_spi+0x382>
    177c:	e0 e4       	ldi	r30, 0x40	; 64
    177e:	ee 16       	cp	r14, r30
    1780:	ea e0       	ldi	r30, 0x0A	; 10
    1782:	fe 06       	cpc	r15, r30
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1784:	21 f4       	brne	.+8      	; 0x178e <usart_init_spi+0x11c>
    1786:	62 e0       	ldi	r22, 0x02	; 2
    1788:	85 e0       	ldi	r24, 0x05	; 5
    178a:	3b da       	rcall	.-2954   	; 0xc02 <sysclk_enable_module>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    178c:	33 c1       	rjmp	.+614    	; 0x19f4 <usart_init_spi+0x382>
    178e:	f0 e9       	ldi	r31, 0x90	; 144
    1790:	ef 16       	cp	r14, r31
    1792:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1794:	ff 06       	cpc	r15, r31
    1796:	21 f4       	brne	.+8      	; 0x17a0 <usart_init_spi+0x12e>
    1798:	64 e0       	ldi	r22, 0x04	; 4
    179a:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    179c:	32 da       	rcall	.-2972   	; 0xc02 <sysclk_enable_module>
    179e:	2a c1       	rjmp	.+596    	; 0x19f4 <usart_init_spi+0x382>
    17a0:	30 e9       	ldi	r19, 0x90	; 144
    17a2:	e3 16       	cp	r14, r19
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    17a4:	39 e0       	ldi	r19, 0x09	; 9
    17a6:	f3 06       	cpc	r15, r19
    17a8:	21 f4       	brne	.+8      	; 0x17b2 <usart_init_spi+0x140>
    17aa:	64 e0       	ldi	r22, 0x04	; 4
    17ac:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    17ae:	29 da       	rcall	.-2990   	; 0xc02 <sysclk_enable_module>
    17b0:	21 c1       	rjmp	.+578    	; 0x19f4 <usart_init_spi+0x382>
    17b2:	80 e9       	ldi	r24, 0x90	; 144
    17b4:	e8 16       	cp	r14, r24
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    17b6:	8a e0       	ldi	r24, 0x0A	; 10
    17b8:	f8 06       	cpc	r15, r24
    17ba:	21 f4       	brne	.+8      	; 0x17c4 <usart_init_spi+0x152>
    17bc:	64 e0       	ldi	r22, 0x04	; 4
    17be:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    17c0:	20 da       	rcall	.-3008   	; 0xc02 <sysclk_enable_module>
    17c2:	18 c1       	rjmp	.+560    	; 0x19f4 <usart_init_spi+0x382>
    17c4:	e0 e9       	ldi	r30, 0x90	; 144
    17c6:	ee 16       	cp	r14, r30
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    17c8:	eb e0       	ldi	r30, 0x0B	; 11
    17ca:	fe 06       	cpc	r15, r30
    17cc:	21 f4       	brne	.+8      	; 0x17d6 <usart_init_spi+0x164>
    17ce:	64 e0       	ldi	r22, 0x04	; 4
    17d0:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    17d2:	17 da       	rcall	.-3026   	; 0xc02 <sysclk_enable_module>
    17d4:	0f c1       	rjmp	.+542    	; 0x19f4 <usart_init_spi+0x382>
    17d6:	f0 ec       	ldi	r31, 0xC0	; 192
    17d8:	ef 16       	cp	r14, r31
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    17da:	f8 e0       	ldi	r31, 0x08	; 8
    17dc:	ff 06       	cpc	r15, r31
    17de:	21 f4       	brne	.+8      	; 0x17e8 <usart_init_spi+0x176>
    17e0:	68 e0       	ldi	r22, 0x08	; 8
    17e2:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    17e4:	0e da       	rcall	.-3044   	; 0xc02 <sysclk_enable_module>
    17e6:	06 c1       	rjmp	.+524    	; 0x19f4 <usart_init_spi+0x382>
    17e8:	30 ec       	ldi	r19, 0xC0	; 192
    17ea:	e3 16       	cp	r14, r19
    17ec:	39 e0       	ldi	r19, 0x09	; 9
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    17ee:	f3 06       	cpc	r15, r19
    17f0:	21 f4       	brne	.+8      	; 0x17fa <usart_init_spi+0x188>
    17f2:	68 e0       	ldi	r22, 0x08	; 8
    17f4:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    17f6:	05 da       	rcall	.-3062   	; 0xc02 <sysclk_enable_module>
    17f8:	fd c0       	rjmp	.+506    	; 0x19f4 <usart_init_spi+0x382>
    17fa:	80 ea       	ldi	r24, 0xA0	; 160
    17fc:	e8 16       	cp	r14, r24
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    17fe:	88 e0       	ldi	r24, 0x08	; 8
    1800:	f8 06       	cpc	r15, r24
    1802:	61 f4       	brne	.+24     	; 0x181c <usart_init_spi+0x1aa>
    1804:	60 e1       	ldi	r22, 0x10	; 16
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1806:	83 e0       	ldi	r24, 0x03	; 3
    1808:	fc d9       	rcall	.-3080   	; 0xc02 <sysclk_enable_module>
    180a:	e0 ea       	ldi	r30, 0xA0	; 160
    180c:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    180e:	84 81       	ldd	r24, Z+4	; 0x04
    1810:	8f 7e       	andi	r24, 0xEF	; 239
    1812:	84 83       	std	Z+4, r24	; 0x04
    1814:	f8 01       	movw	r30, r16
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1816:	24 81       	ldd	r18, Z+4	; 0x04
    1818:	22 50       	subi	r18, 0x02	; 2
    181a:	4c c0       	rjmp	.+152    	; 0x18b4 <usart_init_spi+0x242>
    181c:	f0 ea       	ldi	r31, 0xA0	; 160
    181e:	ef 16       	cp	r14, r31
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1820:	f9 e0       	ldi	r31, 0x09	; 9
    1822:	ff 06       	cpc	r15, r31
    1824:	21 f4       	brne	.+8      	; 0x182e <usart_init_spi+0x1bc>
    1826:	60 e1       	ldi	r22, 0x10	; 16
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1828:	84 e0       	ldi	r24, 0x04	; 4
    182a:	eb d9       	rcall	.-3114   	; 0xc02 <sysclk_enable_module>
    182c:	e3 c0       	rjmp	.+454    	; 0x19f4 <usart_init_spi+0x382>
    182e:	30 ea       	ldi	r19, 0xA0	; 160
    1830:	e3 16       	cp	r14, r19
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1832:	3a e0       	ldi	r19, 0x0A	; 10
    1834:	f3 06       	cpc	r15, r19
    1836:	21 f4       	brne	.+8      	; 0x1840 <usart_init_spi+0x1ce>
    1838:	60 e1       	ldi	r22, 0x10	; 16
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    183a:	85 e0       	ldi	r24, 0x05	; 5
    183c:	e2 d9       	rcall	.-3132   	; 0xc02 <sysclk_enable_module>
    183e:	da c0       	rjmp	.+436    	; 0x19f4 <usart_init_spi+0x382>
    1840:	80 ea       	ldi	r24, 0xA0	; 160
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1842:	e8 16       	cp	r14, r24
    1844:	8b e0       	ldi	r24, 0x0B	; 11
    1846:	f8 06       	cpc	r15, r24
    1848:	21 f4       	brne	.+8      	; 0x1852 <usart_init_spi+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    184a:	60 e1       	ldi	r22, 0x10	; 16
    184c:	86 e0       	ldi	r24, 0x06	; 6
    184e:	d9 d9       	rcall	.-3150   	; 0xc02 <sysclk_enable_module>
    1850:	d1 c0       	rjmp	.+418    	; 0x19f4 <usart_init_spi+0x382>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1852:	e0 eb       	ldi	r30, 0xB0	; 176
    1854:	ee 16       	cp	r14, r30
    1856:	e8 e0       	ldi	r30, 0x08	; 8
    1858:	fe 06       	cpc	r15, r30
    185a:	21 f4       	brne	.+8      	; 0x1864 <usart_init_spi+0x1f2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    185c:	60 e2       	ldi	r22, 0x20	; 32
    185e:	83 e0       	ldi	r24, 0x03	; 3
    1860:	d0 d9       	rcall	.-3168   	; 0xc02 <sysclk_enable_module>
    1862:	c8 c0       	rjmp	.+400    	; 0x19f4 <usart_init_spi+0x382>
    1864:	f0 eb       	ldi	r31, 0xB0	; 176
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1866:	ef 16       	cp	r14, r31
    1868:	f9 e0       	ldi	r31, 0x09	; 9
    186a:	ff 06       	cpc	r15, r31
    186c:	21 f4       	brne	.+8      	; 0x1876 <usart_init_spi+0x204>
    186e:	60 e2       	ldi	r22, 0x20	; 32
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1870:	84 e0       	ldi	r24, 0x04	; 4
    1872:	c7 d9       	rcall	.-3186   	; 0xc02 <sysclk_enable_module>
    1874:	bf c0       	rjmp	.+382    	; 0x19f4 <usart_init_spi+0x382>
    1876:	30 e8       	ldi	r19, 0x80	; 128
    1878:	e3 16       	cp	r14, r19
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    187a:	34 e0       	ldi	r19, 0x04	; 4
    187c:	f3 06       	cpc	r15, r19
    187e:	21 f4       	brne	.+8      	; 0x1888 <usart_init_spi+0x216>
    1880:	60 e4       	ldi	r22, 0x40	; 64
    1882:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1884:	be d9       	rcall	.-3204   	; 0xc02 <sysclk_enable_module>
    1886:	b6 c0       	rjmp	.+364    	; 0x19f4 <usart_init_spi+0x382>
    1888:	80 ea       	ldi	r24, 0xA0	; 160
    188a:	e8 16       	cp	r14, r24
    188c:	84 e0       	ldi	r24, 0x04	; 4
    188e:	f8 06       	cpc	r15, r24
    1890:	21 f4       	brne	.+8      	; 0x189a <usart_init_spi+0x228>
    1892:	60 e4       	ldi	r22, 0x40	; 64
    1894:	85 e0       	ldi	r24, 0x05	; 5
    1896:	b5 d9       	rcall	.-3222   	; 0xc02 <sysclk_enable_module>
    1898:	ad c0       	rjmp	.+346    	; 0x19f4 <usart_init_spi+0x382>
    189a:	f7 01       	movw	r30, r14
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    189c:	84 81       	ldd	r24, Z+4	; 0x04
    189e:	8f 7e       	andi	r24, 0xEF	; 239
    18a0:	84 83       	std	Z+4, r24	; 0x04
    18a2:	fb 01       	movw	r30, r22
    18a4:	24 81       	ldd	r18, Z+4	; 0x04
    18a6:	22 50       	subi	r18, 0x02	; 2
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    18a8:	c7 01       	movw	r24, r14
    18aa:	f0 ea       	ldi	r31, 0xA0	; 160
    18ac:	ef 16       	cp	r14, r31
    18ae:	f8 e0       	ldi	r31, 0x08	; 8
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    18b0:	ff 06       	cpc	r15, r31
    18b2:	49 f4       	brne	.+18     	; 0x18c6 <usart_init_spi+0x254>
    18b4:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    18b8:	84 fd       	sbrc	r24, 4
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    18ba:	a5 c0       	rjmp	.+330    	; 0x1a06 <usart_init_spi+0x394>
    18bc:	0f 2e       	mov	r0, r31
    18be:	f1 e1       	ldi	r31, 0x11	; 17
    18c0:	df 2e       	mov	r13, r31
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    18c2:	f0 2d       	mov	r31, r0
    18c4:	a4 c0       	rjmp	.+328    	; 0x1a0e <usart_init_spi+0x39c>
    18c6:	80 3b       	cpi	r24, 0xB0	; 176
    18c8:	38 e0       	ldi	r19, 0x08	; 8
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    18ca:	93 07       	cpc	r25, r19
    18cc:	91 f0       	breq	.+36     	; 0x18f2 <usart_init_spi+0x280>
    18ce:	80 3a       	cpi	r24, 0xA0	; 160
    18d0:	e9 e0       	ldi	r30, 0x09	; 9
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    18d2:	9e 07       	cpc	r25, r30
    18d4:	49 f4       	brne	.+18     	; 0x18e8 <usart_init_spi+0x276>
    18d6:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    18da:	34 fd       	sbrc	r19, 4
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    18dc:	9b c0       	rjmp	.+310    	; 0x1a14 <usart_init_spi+0x3a2>
    18de:	0f 2e       	mov	r0, r31
    18e0:	f9 e1       	ldi	r31, 0x19	; 25
    18e2:	df 2e       	mov	r13, r31
    18e4:	f0 2d       	mov	r31, r0
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    18e6:	16 c0       	rjmp	.+44     	; 0x1914 <usart_init_spi+0x2a2>
    18e8:	80 3b       	cpi	r24, 0xB0	; 176
    18ea:	f9 e0       	ldi	r31, 0x09	; 9
    18ec:	9f 07       	cpc	r25, r31
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    18ee:	f1 f0       	breq	.+60     	; 0x192c <usart_init_spi+0x2ba>
    18f0:	04 c0       	rjmp	.+8      	; 0x18fa <usart_init_spi+0x288>
    18f2:	0f 2e       	mov	r0, r31
    18f4:	f5 e1       	ldi	r31, 0x15	; 21
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    18f6:	df 2e       	mov	r13, r31
    18f8:	f0 2d       	mov	r31, r0
    18fa:	80 3a       	cpi	r24, 0xA0	; 160
    18fc:	3a e0       	ldi	r19, 0x0A	; 10
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    18fe:	93 07       	cpc	r25, r19
    1900:	49 f4       	brne	.+18     	; 0x1914 <usart_init_spi+0x2a2>
    1902:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    1906:	84 fd       	sbrc	r24, 4
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    1908:	8a c0       	rjmp	.+276    	; 0x1a1e <usart_init_spi+0x3ac>
    190a:	0f 2e       	mov	r0, r31
    190c:	f1 e2       	ldi	r31, 0x21	; 33
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    190e:	df 2e       	mov	r13, r31
    1910:	f0 2d       	mov	r31, r0
    1912:	15 c0       	rjmp	.+42     	; 0x193e <usart_init_spi+0x2cc>
    1914:	80 3a       	cpi	r24, 0xA0	; 160
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    1916:	9b 40       	sbci	r25, 0x0B	; 11
    1918:	91 f4       	brne	.+36     	; 0x193e <usart_init_spi+0x2cc>
    191a:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    191e:	84 fd       	sbrc	r24, 4
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1920:	0a c0       	rjmp	.+20     	; 0x1936 <usart_init_spi+0x2c4>
    1922:	0f 2e       	mov	r0, r31
    1924:	f9 e2       	ldi	r31, 0x29	; 41
    1926:	df 2e       	mov	r13, r31
    1928:	f0 2d       	mov	r31, r0
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    192a:	09 c0       	rjmp	.+18     	; 0x193e <usart_init_spi+0x2cc>
    192c:	0f 2e       	mov	r0, r31
    192e:	fd e1       	ldi	r31, 0x1D	; 29
    1930:	df 2e       	mov	r13, r31
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1932:	f0 2d       	mov	r31, r0
    1934:	04 c0       	rjmp	.+8      	; 0x193e <usart_init_spi+0x2cc>
    1936:	0f 2e       	mov	r0, r31
    1938:	fd e2       	ldi	r31, 0x2D	; 45
    193a:	df 2e       	mov	r13, r31
    193c:	f0 2d       	mov	r31, r0
    193e:	ed 2d       	mov	r30, r13
    1940:	e6 95       	lsr	r30
    1942:	e6 95       	lsr	r30
    1944:	e6 95       	lsr	r30
    1946:	30 e2       	ldi	r19, 0x20	; 32
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1948:	e3 9f       	mul	r30, r19
    194a:	f0 01       	movw	r30, r0
    194c:	11 24       	eor	r1, r1
    194e:	fa 5f       	subi	r31, 0xFA	; 250
    1950:	3d 2d       	mov	r19, r13
    1952:	37 70       	andi	r19, 0x07	; 7
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1958:	03 2e       	mov	r0, r19
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <usart_init_spi+0x2ee>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <usart_init_spi+0x2ea>
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    1964:	81 83       	std	Z+1, r24	; 0x01
    1966:	22 30       	cpi	r18, 0x02	; 2

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    1968:	10 f0       	brcs	.+4      	; 0x196e <usart_init_spi+0x2fc>
    196a:	40 e0       	ldi	r20, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    196c:	01 c0       	rjmp	.+2      	; 0x1970 <usart_init_spi+0x2fe>
    196e:	40 e4       	ldi	r20, 0x40	; 64
	cpu_irq_disable();
    1970:	df 01       	movw	r26, r30
	return flags;
    1972:	50 96       	adiw	r26, 0x10	; 16
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    1974:	a3 0f       	add	r26, r19
    1976:	b1 1d       	adc	r27, r1
    1978:	9f b7       	in	r25, 0x3f	; 63
	*pin_ctrl |= mode;
    197a:	99 83       	std	Y+1, r25	; 0x01
    197c:	f8 94       	cli
    197e:	39 81       	ldd	r19, Y+1	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1980:	2c 91       	ld	r18, X
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1982:	27 70       	andi	r18, 0x07	; 7
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1984:	2c 93       	st	X, r18
    1986:	9c 91       	ld	r25, X
    1988:	94 2b       	or	r25, r20
    198a:	9c 93       	st	X, r25
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    198c:	3f bf       	out	0x3f, r19	; 63
    198e:	85 83       	std	Z+5, r24	; 0x05
    1990:	f7 01       	movw	r30, r14
    1992:	85 81       	ldd	r24, Z+5	; 0x05
    1994:	80 6c       	ori	r24, 0xC0	; 192
		usart->CTRLC |= USART_UCPHA_bm;
    1996:	85 83       	std	Z+5, r24	; 0x05
    1998:	f8 01       	movw	r30, r16
    199a:	84 81       	ldd	r24, Z+4	; 0x04
    199c:	8d 7f       	andi	r24, 0xFD	; 253
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    199e:	81 30       	cpi	r24, 0x01	; 1
    19a0:	29 f4       	brne	.+10     	; 0x19ac <usart_init_spi+0x33a>
    19a2:	f7 01       	movw	r30, r14
    19a4:	85 81       	ldd	r24, Z+5	; 0x05
	}
	if (opt->data_order) {
    19a6:	82 60       	ori	r24, 0x02	; 2
    19a8:	85 83       	std	Z+5, r24	; 0x05
    19aa:	04 c0       	rjmp	.+8      	; 0x19b4 <usart_init_spi+0x342>
    19ac:	f7 01       	movw	r30, r14
		(usart)->CTRLC |= USART_DORD_bm;
    19ae:	85 81       	ldd	r24, Z+5	; 0x05
    19b0:	8d 7f       	andi	r24, 0xFD	; 253
    19b2:	85 83       	std	Z+5, r24	; 0x05
    19b4:	f8 01       	movw	r30, r16
    19b6:	85 81       	ldd	r24, Z+5	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    19b8:	88 23       	and	r24, r24
    19ba:	29 f0       	breq	.+10     	; 0x19c6 <usart_init_spi+0x354>
    19bc:	f7 01       	movw	r30, r14
    19be:	85 81       	ldd	r24, Z+5	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    19c0:	84 60       	ori	r24, 0x04	; 4
    19c2:	85 83       	std	Z+5, r24	; 0x05
    19c4:	04 c0       	rjmp	.+8      	; 0x19ce <usart_init_spi+0x35c>
    19c6:	f7 01       	movw	r30, r14
    19c8:	85 81       	ldd	r24, Z+5	; 0x05
    19ca:	8b 7f       	andi	r24, 0xFB	; 251
    19cc:	85 83       	std	Z+5, r24	; 0x05
    19ce:	f8 01       	movw	r30, r16
    19d0:	40 81       	ld	r20, Z
    19d2:	51 81       	ldd	r21, Z+1	; 0x01
    19d4:	62 81       	ldd	r22, Z+2	; 0x02
    19d6:	73 81       	ldd	r23, Z+3	; 0x03
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    19d8:	00 e0       	ldi	r16, 0x00	; 0
    19da:	12 e1       	ldi	r17, 0x12	; 18
    19dc:	2a e7       	ldi	r18, 0x7A	; 122
    19de:	30 e0       	ldi	r19, 0x00	; 0
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    19e0:	c7 01       	movw	r24, r14
    19e2:	16 de       	rcall	.-980    	; 0x1610 <usart_spi_set_baudrate>
    19e4:	f7 01       	movw	r30, r14
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    19e6:	84 81       	ldd	r24, Z+4	; 0x04
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    19e8:	88 60       	ori	r24, 0x08	; 8
    19ea:	84 83       	std	Z+4, r24	; 0x04
    19ec:	84 81       	ldd	r24, Z+4	; 0x04
    19ee:	80 61       	ori	r24, 0x10	; 16
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    19f0:	84 83       	std	Z+4, r24	; 0x04
    19f2:	1a c0       	rjmp	.+52     	; 0x1a28 <usart_init_spi+0x3b6>
    19f4:	f7 01       	movw	r30, r14
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    19f6:	84 81       	ldd	r24, Z+4	; 0x04
    19f8:	8f 7e       	andi	r24, 0xEF	; 239
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    19fa:	84 83       	std	Z+4, r24	; 0x04
    19fc:	f8 01       	movw	r30, r16
    19fe:	24 81       	ldd	r18, Z+4	; 0x04
    1a00:	22 50       	subi	r18, 0x02	; 2
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1a02:	c7 01       	movw	r24, r14
    1a04:	60 cf       	rjmp	.-320    	; 0x18c6 <usart_init_spi+0x254>
    1a06:	0f 2e       	mov	r0, r31
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1a08:	f5 e1       	ldi	r31, 0x15	; 21
    1a0a:	df 2e       	mov	r13, r31
    1a0c:	f0 2d       	mov	r31, r0
    1a0e:	80 ea       	ldi	r24, 0xA0	; 160
    1a10:	98 e0       	ldi	r25, 0x08	; 8
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    1a12:	6a cf       	rjmp	.-300    	; 0x18e8 <usart_init_spi+0x276>
    1a14:	0f 2e       	mov	r0, r31
    1a16:	fd e1       	ldi	r31, 0x1D	; 29
    1a18:	df 2e       	mov	r13, r31
    1a1a:	f0 2d       	mov	r31, r0
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1a1c:	7b cf       	rjmp	.-266    	; 0x1914 <usart_init_spi+0x2a2>
    1a1e:	0f 2e       	mov	r0, r31
    1a20:	f5 e2       	ldi	r31, 0x25	; 37
    1a22:	df 2e       	mov	r13, r31
    1a24:	f0 2d       	mov	r31, r0
    1a26:	8b cf       	rjmp	.-234    	; 0x193e <usart_init_spi+0x2cc>
    1a28:	0f 90       	pop	r0
    1a2a:	df 91       	pop	r29
    1a2c:	cf 91       	pop	r28
    1a2e:	1f 91       	pop	r17
    1a30:	0f 91       	pop	r16
    1a32:	ff 90       	pop	r15
    1a34:	ef 90       	pop	r14
    1a36:	df 90       	pop	r13
    1a38:	08 95       	ret

00001a3a <__udivmodsi4>:
    1a3a:	a1 e2       	ldi	r26, 0x21	; 33
    1a3c:	1a 2e       	mov	r1, r26
    1a3e:	aa 1b       	sub	r26, r26
    1a40:	bb 1b       	sub	r27, r27
    1a42:	fd 01       	movw	r30, r26
    1a44:	0d c0       	rjmp	.+26     	; 0x1a60 <__udivmodsi4_ep>

00001a46 <__udivmodsi4_loop>:
    1a46:	aa 1f       	adc	r26, r26
    1a48:	bb 1f       	adc	r27, r27
    1a4a:	ee 1f       	adc	r30, r30
    1a4c:	ff 1f       	adc	r31, r31
    1a4e:	a2 17       	cp	r26, r18
    1a50:	b3 07       	cpc	r27, r19
    1a52:	e4 07       	cpc	r30, r20
    1a54:	f5 07       	cpc	r31, r21
    1a56:	20 f0       	brcs	.+8      	; 0x1a60 <__udivmodsi4_ep>
    1a58:	a2 1b       	sub	r26, r18
    1a5a:	b3 0b       	sbc	r27, r19
    1a5c:	e4 0b       	sbc	r30, r20
    1a5e:	f5 0b       	sbc	r31, r21

00001a60 <__udivmodsi4_ep>:
    1a60:	66 1f       	adc	r22, r22
    1a62:	77 1f       	adc	r23, r23
    1a64:	88 1f       	adc	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	1a 94       	dec	r1
    1a6a:	69 f7       	brne	.-38     	; 0x1a46 <__udivmodsi4_loop>
    1a6c:	60 95       	com	r22
    1a6e:	70 95       	com	r23
    1a70:	80 95       	com	r24
    1a72:	90 95       	com	r25
    1a74:	9b 01       	movw	r18, r22
    1a76:	ac 01       	movw	r20, r24
    1a78:	bd 01       	movw	r22, r26
    1a7a:	cf 01       	movw	r24, r30
    1a7c:	08 95       	ret

00001a7e <__divmodsi4>:
    1a7e:	05 2e       	mov	r0, r21
    1a80:	97 fb       	bst	r25, 7
    1a82:	16 f4       	brtc	.+4      	; 0x1a88 <__divmodsi4+0xa>
    1a84:	00 94       	com	r0
    1a86:	0f d0       	rcall	.+30     	; 0x1aa6 <__negsi2>
    1a88:	57 fd       	sbrc	r21, 7
    1a8a:	05 d0       	rcall	.+10     	; 0x1a96 <__divmodsi4_neg2>
    1a8c:	d6 df       	rcall	.-84     	; 0x1a3a <__udivmodsi4>
    1a8e:	07 fc       	sbrc	r0, 7
    1a90:	02 d0       	rcall	.+4      	; 0x1a96 <__divmodsi4_neg2>
    1a92:	46 f4       	brtc	.+16     	; 0x1aa4 <__divmodsi4_exit>
    1a94:	08 c0       	rjmp	.+16     	; 0x1aa6 <__negsi2>

00001a96 <__divmodsi4_neg2>:
    1a96:	50 95       	com	r21
    1a98:	40 95       	com	r20
    1a9a:	30 95       	com	r19
    1a9c:	21 95       	neg	r18
    1a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa0:	4f 4f       	sbci	r20, 0xFF	; 255
    1aa2:	5f 4f       	sbci	r21, 0xFF	; 255

00001aa4 <__divmodsi4_exit>:
    1aa4:	08 95       	ret

00001aa6 <__negsi2>:
    1aa6:	90 95       	com	r25
    1aa8:	80 95       	com	r24
    1aaa:	70 95       	com	r23
    1aac:	61 95       	neg	r22
    1aae:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab4:	08 95       	ret

00001ab6 <__muluhisi3>:
    1ab6:	09 d0       	rcall	.+18     	; 0x1aca <__umulhisi3>
    1ab8:	a5 9f       	mul	r26, r21
    1aba:	90 0d       	add	r25, r0
    1abc:	b4 9f       	mul	r27, r20
    1abe:	90 0d       	add	r25, r0
    1ac0:	a4 9f       	mul	r26, r20
    1ac2:	80 0d       	add	r24, r0
    1ac4:	91 1d       	adc	r25, r1
    1ac6:	11 24       	eor	r1, r1
    1ac8:	08 95       	ret

00001aca <__umulhisi3>:
    1aca:	a2 9f       	mul	r26, r18
    1acc:	b0 01       	movw	r22, r0
    1ace:	b3 9f       	mul	r27, r19
    1ad0:	c0 01       	movw	r24, r0
    1ad2:	a3 9f       	mul	r26, r19
    1ad4:	70 0d       	add	r23, r0
    1ad6:	81 1d       	adc	r24, r1
    1ad8:	11 24       	eor	r1, r1
    1ada:	91 1d       	adc	r25, r1
    1adc:	b2 9f       	mul	r27, r18
    1ade:	70 0d       	add	r23, r0
    1ae0:	81 1d       	adc	r24, r1
    1ae2:	11 24       	eor	r1, r1
    1ae4:	91 1d       	adc	r25, r1
    1ae6:	08 95       	ret

00001ae8 <snprintf>:
    1ae8:	0f 93       	push	r16
    1aea:	1f 93       	push	r17
    1aec:	cf 93       	push	r28
    1aee:	df 93       	push	r29
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	2e 97       	sbiw	r28, 0x0e	; 14
    1af6:	cd bf       	out	0x3d, r28	; 61
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0e 89       	ldd	r16, Y+22	; 0x16
    1afc:	1f 89       	ldd	r17, Y+23	; 0x17
    1afe:	88 8d       	ldd	r24, Y+24	; 0x18
    1b00:	99 8d       	ldd	r25, Y+25	; 0x19
    1b02:	26 e0       	ldi	r18, 0x06	; 6
    1b04:	2c 83       	std	Y+4, r18	; 0x04
    1b06:	09 83       	std	Y+1, r16	; 0x01
    1b08:	1a 83       	std	Y+2, r17	; 0x02
    1b0a:	97 ff       	sbrs	r25, 7
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <snprintf+0x2a>
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e8       	ldi	r25, 0x80	; 128
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	8d 83       	std	Y+5, r24	; 0x05
    1b16:	9e 83       	std	Y+6, r25	; 0x06
    1b18:	ae 01       	movw	r20, r28
    1b1a:	44 5e       	subi	r20, 0xE4	; 228
    1b1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b1e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b20:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b22:	ce 01       	movw	r24, r28
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	16 d0       	rcall	.+44     	; 0x1b54 <vfprintf>
    1b28:	4d 81       	ldd	r20, Y+5	; 0x05
    1b2a:	5e 81       	ldd	r21, Y+6	; 0x06
    1b2c:	57 fd       	sbrc	r21, 7
    1b2e:	0a c0       	rjmp	.+20     	; 0x1b44 <snprintf+0x5c>
    1b30:	2f 81       	ldd	r18, Y+7	; 0x07
    1b32:	38 85       	ldd	r19, Y+8	; 0x08
    1b34:	42 17       	cp	r20, r18
    1b36:	53 07       	cpc	r21, r19
    1b38:	0c f4       	brge	.+2      	; 0x1b3c <snprintf+0x54>
    1b3a:	9a 01       	movw	r18, r20
    1b3c:	f8 01       	movw	r30, r16
    1b3e:	e2 0f       	add	r30, r18
    1b40:	f3 1f       	adc	r31, r19
    1b42:	10 82       	st	Z, r1
    1b44:	2e 96       	adiw	r28, 0x0e	; 14
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	1f 91       	pop	r17
    1b50:	0f 91       	pop	r16
    1b52:	08 95       	ret

00001b54 <vfprintf>:
    1b54:	2f 92       	push	r2
    1b56:	3f 92       	push	r3
    1b58:	4f 92       	push	r4
    1b5a:	5f 92       	push	r5
    1b5c:	6f 92       	push	r6
    1b5e:	7f 92       	push	r7
    1b60:	8f 92       	push	r8
    1b62:	9f 92       	push	r9
    1b64:	af 92       	push	r10
    1b66:	bf 92       	push	r11
    1b68:	cf 92       	push	r12
    1b6a:	df 92       	push	r13
    1b6c:	ef 92       	push	r14
    1b6e:	ff 92       	push	r15
    1b70:	0f 93       	push	r16
    1b72:	1f 93       	push	r17
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	2b 97       	sbiw	r28, 0x0b	; 11
    1b7e:	cd bf       	out	0x3d, r28	; 61
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	6c 01       	movw	r12, r24
    1b84:	7b 01       	movw	r14, r22
    1b86:	8a 01       	movw	r16, r20
    1b88:	fc 01       	movw	r30, r24
    1b8a:	16 82       	std	Z+6, r1	; 0x06
    1b8c:	17 82       	std	Z+7, r1	; 0x07
    1b8e:	83 81       	ldd	r24, Z+3	; 0x03
    1b90:	81 ff       	sbrs	r24, 1
    1b92:	bf c1       	rjmp	.+894    	; 0x1f12 <vfprintf+0x3be>
    1b94:	ce 01       	movw	r24, r28
    1b96:	01 96       	adiw	r24, 0x01	; 1
    1b98:	3c 01       	movw	r6, r24
    1b9a:	f6 01       	movw	r30, r12
    1b9c:	93 81       	ldd	r25, Z+3	; 0x03
    1b9e:	f7 01       	movw	r30, r14
    1ba0:	93 fd       	sbrc	r25, 3
    1ba2:	85 91       	lpm	r24, Z+
    1ba4:	93 ff       	sbrs	r25, 3
    1ba6:	81 91       	ld	r24, Z+
    1ba8:	7f 01       	movw	r14, r30
    1baa:	88 23       	and	r24, r24
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <vfprintf+0x5c>
    1bae:	ad c1       	rjmp	.+858    	; 0x1f0a <vfprintf+0x3b6>
    1bb0:	85 32       	cpi	r24, 0x25	; 37
    1bb2:	39 f4       	brne	.+14     	; 0x1bc2 <vfprintf+0x6e>
    1bb4:	93 fd       	sbrc	r25, 3
    1bb6:	85 91       	lpm	r24, Z+
    1bb8:	93 ff       	sbrs	r25, 3
    1bba:	81 91       	ld	r24, Z+
    1bbc:	7f 01       	movw	r14, r30
    1bbe:	85 32       	cpi	r24, 0x25	; 37
    1bc0:	21 f4       	brne	.+8      	; 0x1bca <vfprintf+0x76>
    1bc2:	b6 01       	movw	r22, r12
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	d3 d1       	rcall	.+934    	; 0x1f6e <fputc>
    1bc8:	e8 cf       	rjmp	.-48     	; 0x1b9a <vfprintf+0x46>
    1bca:	91 2c       	mov	r9, r1
    1bcc:	21 2c       	mov	r2, r1
    1bce:	31 2c       	mov	r3, r1
    1bd0:	ff e1       	ldi	r31, 0x1F	; 31
    1bd2:	f3 15       	cp	r31, r3
    1bd4:	d8 f0       	brcs	.+54     	; 0x1c0c <vfprintf+0xb8>
    1bd6:	8b 32       	cpi	r24, 0x2B	; 43
    1bd8:	79 f0       	breq	.+30     	; 0x1bf8 <vfprintf+0xa4>
    1bda:	38 f4       	brcc	.+14     	; 0x1bea <vfprintf+0x96>
    1bdc:	80 32       	cpi	r24, 0x20	; 32
    1bde:	79 f0       	breq	.+30     	; 0x1bfe <vfprintf+0xaa>
    1be0:	83 32       	cpi	r24, 0x23	; 35
    1be2:	a1 f4       	brne	.+40     	; 0x1c0c <vfprintf+0xb8>
    1be4:	23 2d       	mov	r18, r3
    1be6:	20 61       	ori	r18, 0x10	; 16
    1be8:	1d c0       	rjmp	.+58     	; 0x1c24 <vfprintf+0xd0>
    1bea:	8d 32       	cpi	r24, 0x2D	; 45
    1bec:	61 f0       	breq	.+24     	; 0x1c06 <vfprintf+0xb2>
    1bee:	80 33       	cpi	r24, 0x30	; 48
    1bf0:	69 f4       	brne	.+26     	; 0x1c0c <vfprintf+0xb8>
    1bf2:	23 2d       	mov	r18, r3
    1bf4:	21 60       	ori	r18, 0x01	; 1
    1bf6:	16 c0       	rjmp	.+44     	; 0x1c24 <vfprintf+0xd0>
    1bf8:	83 2d       	mov	r24, r3
    1bfa:	82 60       	ori	r24, 0x02	; 2
    1bfc:	38 2e       	mov	r3, r24
    1bfe:	e3 2d       	mov	r30, r3
    1c00:	e4 60       	ori	r30, 0x04	; 4
    1c02:	3e 2e       	mov	r3, r30
    1c04:	2a c0       	rjmp	.+84     	; 0x1c5a <vfprintf+0x106>
    1c06:	f3 2d       	mov	r31, r3
    1c08:	f8 60       	ori	r31, 0x08	; 8
    1c0a:	1d c0       	rjmp	.+58     	; 0x1c46 <vfprintf+0xf2>
    1c0c:	37 fc       	sbrc	r3, 7
    1c0e:	2d c0       	rjmp	.+90     	; 0x1c6a <vfprintf+0x116>
    1c10:	20 ed       	ldi	r18, 0xD0	; 208
    1c12:	28 0f       	add	r18, r24
    1c14:	2a 30       	cpi	r18, 0x0A	; 10
    1c16:	40 f0       	brcs	.+16     	; 0x1c28 <vfprintf+0xd4>
    1c18:	8e 32       	cpi	r24, 0x2E	; 46
    1c1a:	b9 f4       	brne	.+46     	; 0x1c4a <vfprintf+0xf6>
    1c1c:	36 fc       	sbrc	r3, 6
    1c1e:	75 c1       	rjmp	.+746    	; 0x1f0a <vfprintf+0x3b6>
    1c20:	23 2d       	mov	r18, r3
    1c22:	20 64       	ori	r18, 0x40	; 64
    1c24:	32 2e       	mov	r3, r18
    1c26:	19 c0       	rjmp	.+50     	; 0x1c5a <vfprintf+0x106>
    1c28:	36 fe       	sbrs	r3, 6
    1c2a:	06 c0       	rjmp	.+12     	; 0x1c38 <vfprintf+0xe4>
    1c2c:	8a e0       	ldi	r24, 0x0A	; 10
    1c2e:	98 9e       	mul	r9, r24
    1c30:	20 0d       	add	r18, r0
    1c32:	11 24       	eor	r1, r1
    1c34:	92 2e       	mov	r9, r18
    1c36:	11 c0       	rjmp	.+34     	; 0x1c5a <vfprintf+0x106>
    1c38:	ea e0       	ldi	r30, 0x0A	; 10
    1c3a:	2e 9e       	mul	r2, r30
    1c3c:	20 0d       	add	r18, r0
    1c3e:	11 24       	eor	r1, r1
    1c40:	22 2e       	mov	r2, r18
    1c42:	f3 2d       	mov	r31, r3
    1c44:	f0 62       	ori	r31, 0x20	; 32
    1c46:	3f 2e       	mov	r3, r31
    1c48:	08 c0       	rjmp	.+16     	; 0x1c5a <vfprintf+0x106>
    1c4a:	8c 36       	cpi	r24, 0x6C	; 108
    1c4c:	21 f4       	brne	.+8      	; 0x1c56 <vfprintf+0x102>
    1c4e:	83 2d       	mov	r24, r3
    1c50:	80 68       	ori	r24, 0x80	; 128
    1c52:	38 2e       	mov	r3, r24
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <vfprintf+0x106>
    1c56:	88 36       	cpi	r24, 0x68	; 104
    1c58:	41 f4       	brne	.+16     	; 0x1c6a <vfprintf+0x116>
    1c5a:	f7 01       	movw	r30, r14
    1c5c:	93 fd       	sbrc	r25, 3
    1c5e:	85 91       	lpm	r24, Z+
    1c60:	93 ff       	sbrs	r25, 3
    1c62:	81 91       	ld	r24, Z+
    1c64:	7f 01       	movw	r14, r30
    1c66:	81 11       	cpse	r24, r1
    1c68:	b3 cf       	rjmp	.-154    	; 0x1bd0 <vfprintf+0x7c>
    1c6a:	98 2f       	mov	r25, r24
    1c6c:	9f 7d       	andi	r25, 0xDF	; 223
    1c6e:	95 54       	subi	r25, 0x45	; 69
    1c70:	93 30       	cpi	r25, 0x03	; 3
    1c72:	28 f4       	brcc	.+10     	; 0x1c7e <vfprintf+0x12a>
    1c74:	0c 5f       	subi	r16, 0xFC	; 252
    1c76:	1f 4f       	sbci	r17, 0xFF	; 255
    1c78:	9f e3       	ldi	r25, 0x3F	; 63
    1c7a:	99 83       	std	Y+1, r25	; 0x01
    1c7c:	0d c0       	rjmp	.+26     	; 0x1c98 <vfprintf+0x144>
    1c7e:	83 36       	cpi	r24, 0x63	; 99
    1c80:	31 f0       	breq	.+12     	; 0x1c8e <vfprintf+0x13a>
    1c82:	83 37       	cpi	r24, 0x73	; 115
    1c84:	71 f0       	breq	.+28     	; 0x1ca2 <vfprintf+0x14e>
    1c86:	83 35       	cpi	r24, 0x53	; 83
    1c88:	09 f0       	breq	.+2      	; 0x1c8c <vfprintf+0x138>
    1c8a:	55 c0       	rjmp	.+170    	; 0x1d36 <vfprintf+0x1e2>
    1c8c:	20 c0       	rjmp	.+64     	; 0x1cce <vfprintf+0x17a>
    1c8e:	f8 01       	movw	r30, r16
    1c90:	80 81       	ld	r24, Z
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	0e 5f       	subi	r16, 0xFE	; 254
    1c96:	1f 4f       	sbci	r17, 0xFF	; 255
    1c98:	88 24       	eor	r8, r8
    1c9a:	83 94       	inc	r8
    1c9c:	91 2c       	mov	r9, r1
    1c9e:	53 01       	movw	r10, r6
    1ca0:	12 c0       	rjmp	.+36     	; 0x1cc6 <vfprintf+0x172>
    1ca2:	28 01       	movw	r4, r16
    1ca4:	f2 e0       	ldi	r31, 0x02	; 2
    1ca6:	4f 0e       	add	r4, r31
    1ca8:	51 1c       	adc	r5, r1
    1caa:	f8 01       	movw	r30, r16
    1cac:	a0 80       	ld	r10, Z
    1cae:	b1 80       	ldd	r11, Z+1	; 0x01
    1cb0:	36 fe       	sbrs	r3, 6
    1cb2:	03 c0       	rjmp	.+6      	; 0x1cba <vfprintf+0x166>
    1cb4:	69 2d       	mov	r22, r9
    1cb6:	70 e0       	ldi	r23, 0x00	; 0
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <vfprintf+0x16a>
    1cba:	6f ef       	ldi	r22, 0xFF	; 255
    1cbc:	7f ef       	ldi	r23, 0xFF	; 255
    1cbe:	c5 01       	movw	r24, r10
    1cc0:	4b d1       	rcall	.+662    	; 0x1f58 <strnlen>
    1cc2:	4c 01       	movw	r8, r24
    1cc4:	82 01       	movw	r16, r4
    1cc6:	f3 2d       	mov	r31, r3
    1cc8:	ff 77       	andi	r31, 0x7F	; 127
    1cca:	3f 2e       	mov	r3, r31
    1ccc:	15 c0       	rjmp	.+42     	; 0x1cf8 <vfprintf+0x1a4>
    1cce:	28 01       	movw	r4, r16
    1cd0:	22 e0       	ldi	r18, 0x02	; 2
    1cd2:	42 0e       	add	r4, r18
    1cd4:	51 1c       	adc	r5, r1
    1cd6:	f8 01       	movw	r30, r16
    1cd8:	a0 80       	ld	r10, Z
    1cda:	b1 80       	ldd	r11, Z+1	; 0x01
    1cdc:	36 fe       	sbrs	r3, 6
    1cde:	03 c0       	rjmp	.+6      	; 0x1ce6 <vfprintf+0x192>
    1ce0:	69 2d       	mov	r22, r9
    1ce2:	70 e0       	ldi	r23, 0x00	; 0
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <vfprintf+0x196>
    1ce6:	6f ef       	ldi	r22, 0xFF	; 255
    1ce8:	7f ef       	ldi	r23, 0xFF	; 255
    1cea:	c5 01       	movw	r24, r10
    1cec:	2a d1       	rcall	.+596    	; 0x1f42 <strnlen_P>
    1cee:	4c 01       	movw	r8, r24
    1cf0:	f3 2d       	mov	r31, r3
    1cf2:	f0 68       	ori	r31, 0x80	; 128
    1cf4:	3f 2e       	mov	r3, r31
    1cf6:	82 01       	movw	r16, r4
    1cf8:	33 fc       	sbrc	r3, 3
    1cfa:	19 c0       	rjmp	.+50     	; 0x1d2e <vfprintf+0x1da>
    1cfc:	82 2d       	mov	r24, r2
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	88 16       	cp	r8, r24
    1d02:	99 06       	cpc	r9, r25
    1d04:	a0 f4       	brcc	.+40     	; 0x1d2e <vfprintf+0x1da>
    1d06:	b6 01       	movw	r22, r12
    1d08:	80 e2       	ldi	r24, 0x20	; 32
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	30 d1       	rcall	.+608    	; 0x1f6e <fputc>
    1d0e:	2a 94       	dec	r2
    1d10:	f5 cf       	rjmp	.-22     	; 0x1cfc <vfprintf+0x1a8>
    1d12:	f5 01       	movw	r30, r10
    1d14:	37 fc       	sbrc	r3, 7
    1d16:	85 91       	lpm	r24, Z+
    1d18:	37 fe       	sbrs	r3, 7
    1d1a:	81 91       	ld	r24, Z+
    1d1c:	5f 01       	movw	r10, r30
    1d1e:	b6 01       	movw	r22, r12
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	25 d1       	rcall	.+586    	; 0x1f6e <fputc>
    1d24:	21 10       	cpse	r2, r1
    1d26:	2a 94       	dec	r2
    1d28:	21 e0       	ldi	r18, 0x01	; 1
    1d2a:	82 1a       	sub	r8, r18
    1d2c:	91 08       	sbc	r9, r1
    1d2e:	81 14       	cp	r8, r1
    1d30:	91 04       	cpc	r9, r1
    1d32:	79 f7       	brne	.-34     	; 0x1d12 <vfprintf+0x1be>
    1d34:	e1 c0       	rjmp	.+450    	; 0x1ef8 <vfprintf+0x3a4>
    1d36:	84 36       	cpi	r24, 0x64	; 100
    1d38:	11 f0       	breq	.+4      	; 0x1d3e <vfprintf+0x1ea>
    1d3a:	89 36       	cpi	r24, 0x69	; 105
    1d3c:	39 f5       	brne	.+78     	; 0x1d8c <vfprintf+0x238>
    1d3e:	f8 01       	movw	r30, r16
    1d40:	37 fe       	sbrs	r3, 7
    1d42:	07 c0       	rjmp	.+14     	; 0x1d52 <vfprintf+0x1fe>
    1d44:	60 81       	ld	r22, Z
    1d46:	71 81       	ldd	r23, Z+1	; 0x01
    1d48:	82 81       	ldd	r24, Z+2	; 0x02
    1d4a:	93 81       	ldd	r25, Z+3	; 0x03
    1d4c:	0c 5f       	subi	r16, 0xFC	; 252
    1d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d50:	08 c0       	rjmp	.+16     	; 0x1d62 <vfprintf+0x20e>
    1d52:	60 81       	ld	r22, Z
    1d54:	71 81       	ldd	r23, Z+1	; 0x01
    1d56:	07 2e       	mov	r0, r23
    1d58:	00 0c       	add	r0, r0
    1d5a:	88 0b       	sbc	r24, r24
    1d5c:	99 0b       	sbc	r25, r25
    1d5e:	0e 5f       	subi	r16, 0xFE	; 254
    1d60:	1f 4f       	sbci	r17, 0xFF	; 255
    1d62:	f3 2d       	mov	r31, r3
    1d64:	ff 76       	andi	r31, 0x6F	; 111
    1d66:	3f 2e       	mov	r3, r31
    1d68:	97 ff       	sbrs	r25, 7
    1d6a:	09 c0       	rjmp	.+18     	; 0x1d7e <vfprintf+0x22a>
    1d6c:	90 95       	com	r25
    1d6e:	80 95       	com	r24
    1d70:	70 95       	com	r23
    1d72:	61 95       	neg	r22
    1d74:	7f 4f       	sbci	r23, 0xFF	; 255
    1d76:	8f 4f       	sbci	r24, 0xFF	; 255
    1d78:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7a:	f0 68       	ori	r31, 0x80	; 128
    1d7c:	3f 2e       	mov	r3, r31
    1d7e:	2a e0       	ldi	r18, 0x0A	; 10
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	a3 01       	movw	r20, r6
    1d84:	30 d1       	rcall	.+608    	; 0x1fe6 <__ultoa_invert>
    1d86:	88 2e       	mov	r8, r24
    1d88:	86 18       	sub	r8, r6
    1d8a:	44 c0       	rjmp	.+136    	; 0x1e14 <vfprintf+0x2c0>
    1d8c:	85 37       	cpi	r24, 0x75	; 117
    1d8e:	31 f4       	brne	.+12     	; 0x1d9c <vfprintf+0x248>
    1d90:	23 2d       	mov	r18, r3
    1d92:	2f 7e       	andi	r18, 0xEF	; 239
    1d94:	b2 2e       	mov	r11, r18
    1d96:	2a e0       	ldi	r18, 0x0A	; 10
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	25 c0       	rjmp	.+74     	; 0x1de6 <vfprintf+0x292>
    1d9c:	93 2d       	mov	r25, r3
    1d9e:	99 7f       	andi	r25, 0xF9	; 249
    1da0:	b9 2e       	mov	r11, r25
    1da2:	8f 36       	cpi	r24, 0x6F	; 111
    1da4:	c1 f0       	breq	.+48     	; 0x1dd6 <vfprintf+0x282>
    1da6:	18 f4       	brcc	.+6      	; 0x1dae <vfprintf+0x25a>
    1da8:	88 35       	cpi	r24, 0x58	; 88
    1daa:	79 f0       	breq	.+30     	; 0x1dca <vfprintf+0x276>
    1dac:	ae c0       	rjmp	.+348    	; 0x1f0a <vfprintf+0x3b6>
    1dae:	80 37       	cpi	r24, 0x70	; 112
    1db0:	19 f0       	breq	.+6      	; 0x1db8 <vfprintf+0x264>
    1db2:	88 37       	cpi	r24, 0x78	; 120
    1db4:	21 f0       	breq	.+8      	; 0x1dbe <vfprintf+0x26a>
    1db6:	a9 c0       	rjmp	.+338    	; 0x1f0a <vfprintf+0x3b6>
    1db8:	e9 2f       	mov	r30, r25
    1dba:	e0 61       	ori	r30, 0x10	; 16
    1dbc:	be 2e       	mov	r11, r30
    1dbe:	b4 fe       	sbrs	r11, 4
    1dc0:	0d c0       	rjmp	.+26     	; 0x1ddc <vfprintf+0x288>
    1dc2:	fb 2d       	mov	r31, r11
    1dc4:	f4 60       	ori	r31, 0x04	; 4
    1dc6:	bf 2e       	mov	r11, r31
    1dc8:	09 c0       	rjmp	.+18     	; 0x1ddc <vfprintf+0x288>
    1dca:	34 fe       	sbrs	r3, 4
    1dcc:	0a c0       	rjmp	.+20     	; 0x1de2 <vfprintf+0x28e>
    1dce:	29 2f       	mov	r18, r25
    1dd0:	26 60       	ori	r18, 0x06	; 6
    1dd2:	b2 2e       	mov	r11, r18
    1dd4:	06 c0       	rjmp	.+12     	; 0x1de2 <vfprintf+0x28e>
    1dd6:	28 e0       	ldi	r18, 0x08	; 8
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	05 c0       	rjmp	.+10     	; 0x1de6 <vfprintf+0x292>
    1ddc:	20 e1       	ldi	r18, 0x10	; 16
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <vfprintf+0x292>
    1de2:	20 e1       	ldi	r18, 0x10	; 16
    1de4:	32 e0       	ldi	r19, 0x02	; 2
    1de6:	f8 01       	movw	r30, r16
    1de8:	b7 fe       	sbrs	r11, 7
    1dea:	07 c0       	rjmp	.+14     	; 0x1dfa <vfprintf+0x2a6>
    1dec:	60 81       	ld	r22, Z
    1dee:	71 81       	ldd	r23, Z+1	; 0x01
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	93 81       	ldd	r25, Z+3	; 0x03
    1df4:	0c 5f       	subi	r16, 0xFC	; 252
    1df6:	1f 4f       	sbci	r17, 0xFF	; 255
    1df8:	06 c0       	rjmp	.+12     	; 0x1e06 <vfprintf+0x2b2>
    1dfa:	60 81       	ld	r22, Z
    1dfc:	71 81       	ldd	r23, Z+1	; 0x01
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	0e 5f       	subi	r16, 0xFE	; 254
    1e04:	1f 4f       	sbci	r17, 0xFF	; 255
    1e06:	a3 01       	movw	r20, r6
    1e08:	ee d0       	rcall	.+476    	; 0x1fe6 <__ultoa_invert>
    1e0a:	88 2e       	mov	r8, r24
    1e0c:	86 18       	sub	r8, r6
    1e0e:	fb 2d       	mov	r31, r11
    1e10:	ff 77       	andi	r31, 0x7F	; 127
    1e12:	3f 2e       	mov	r3, r31
    1e14:	36 fe       	sbrs	r3, 6
    1e16:	0d c0       	rjmp	.+26     	; 0x1e32 <vfprintf+0x2de>
    1e18:	23 2d       	mov	r18, r3
    1e1a:	2e 7f       	andi	r18, 0xFE	; 254
    1e1c:	a2 2e       	mov	r10, r18
    1e1e:	89 14       	cp	r8, r9
    1e20:	58 f4       	brcc	.+22     	; 0x1e38 <vfprintf+0x2e4>
    1e22:	34 fe       	sbrs	r3, 4
    1e24:	0b c0       	rjmp	.+22     	; 0x1e3c <vfprintf+0x2e8>
    1e26:	32 fc       	sbrc	r3, 2
    1e28:	09 c0       	rjmp	.+18     	; 0x1e3c <vfprintf+0x2e8>
    1e2a:	83 2d       	mov	r24, r3
    1e2c:	8e 7e       	andi	r24, 0xEE	; 238
    1e2e:	a8 2e       	mov	r10, r24
    1e30:	05 c0       	rjmp	.+10     	; 0x1e3c <vfprintf+0x2e8>
    1e32:	b8 2c       	mov	r11, r8
    1e34:	a3 2c       	mov	r10, r3
    1e36:	03 c0       	rjmp	.+6      	; 0x1e3e <vfprintf+0x2ea>
    1e38:	b8 2c       	mov	r11, r8
    1e3a:	01 c0       	rjmp	.+2      	; 0x1e3e <vfprintf+0x2ea>
    1e3c:	b9 2c       	mov	r11, r9
    1e3e:	a4 fe       	sbrs	r10, 4
    1e40:	0f c0       	rjmp	.+30     	; 0x1e60 <vfprintf+0x30c>
    1e42:	fe 01       	movw	r30, r28
    1e44:	e8 0d       	add	r30, r8
    1e46:	f1 1d       	adc	r31, r1
    1e48:	80 81       	ld	r24, Z
    1e4a:	80 33       	cpi	r24, 0x30	; 48
    1e4c:	21 f4       	brne	.+8      	; 0x1e56 <vfprintf+0x302>
    1e4e:	9a 2d       	mov	r25, r10
    1e50:	99 7e       	andi	r25, 0xE9	; 233
    1e52:	a9 2e       	mov	r10, r25
    1e54:	09 c0       	rjmp	.+18     	; 0x1e68 <vfprintf+0x314>
    1e56:	a2 fe       	sbrs	r10, 2
    1e58:	06 c0       	rjmp	.+12     	; 0x1e66 <vfprintf+0x312>
    1e5a:	b3 94       	inc	r11
    1e5c:	b3 94       	inc	r11
    1e5e:	04 c0       	rjmp	.+8      	; 0x1e68 <vfprintf+0x314>
    1e60:	8a 2d       	mov	r24, r10
    1e62:	86 78       	andi	r24, 0x86	; 134
    1e64:	09 f0       	breq	.+2      	; 0x1e68 <vfprintf+0x314>
    1e66:	b3 94       	inc	r11
    1e68:	a3 fc       	sbrc	r10, 3
    1e6a:	10 c0       	rjmp	.+32     	; 0x1e8c <vfprintf+0x338>
    1e6c:	a0 fe       	sbrs	r10, 0
    1e6e:	06 c0       	rjmp	.+12     	; 0x1e7c <vfprintf+0x328>
    1e70:	b2 14       	cp	r11, r2
    1e72:	80 f4       	brcc	.+32     	; 0x1e94 <vfprintf+0x340>
    1e74:	28 0c       	add	r2, r8
    1e76:	92 2c       	mov	r9, r2
    1e78:	9b 18       	sub	r9, r11
    1e7a:	0d c0       	rjmp	.+26     	; 0x1e96 <vfprintf+0x342>
    1e7c:	b2 14       	cp	r11, r2
    1e7e:	58 f4       	brcc	.+22     	; 0x1e96 <vfprintf+0x342>
    1e80:	b6 01       	movw	r22, r12
    1e82:	80 e2       	ldi	r24, 0x20	; 32
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	73 d0       	rcall	.+230    	; 0x1f6e <fputc>
    1e88:	b3 94       	inc	r11
    1e8a:	f8 cf       	rjmp	.-16     	; 0x1e7c <vfprintf+0x328>
    1e8c:	b2 14       	cp	r11, r2
    1e8e:	18 f4       	brcc	.+6      	; 0x1e96 <vfprintf+0x342>
    1e90:	2b 18       	sub	r2, r11
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <vfprintf+0x344>
    1e94:	98 2c       	mov	r9, r8
    1e96:	21 2c       	mov	r2, r1
    1e98:	a4 fe       	sbrs	r10, 4
    1e9a:	0f c0       	rjmp	.+30     	; 0x1eba <vfprintf+0x366>
    1e9c:	b6 01       	movw	r22, r12
    1e9e:	80 e3       	ldi	r24, 0x30	; 48
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	65 d0       	rcall	.+202    	; 0x1f6e <fputc>
    1ea4:	a2 fe       	sbrs	r10, 2
    1ea6:	16 c0       	rjmp	.+44     	; 0x1ed4 <vfprintf+0x380>
    1ea8:	a1 fc       	sbrc	r10, 1
    1eaa:	03 c0       	rjmp	.+6      	; 0x1eb2 <vfprintf+0x35e>
    1eac:	88 e7       	ldi	r24, 0x78	; 120
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <vfprintf+0x362>
    1eb2:	88 e5       	ldi	r24, 0x58	; 88
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	b6 01       	movw	r22, r12
    1eb8:	0c c0       	rjmp	.+24     	; 0x1ed2 <vfprintf+0x37e>
    1eba:	8a 2d       	mov	r24, r10
    1ebc:	86 78       	andi	r24, 0x86	; 134
    1ebe:	51 f0       	breq	.+20     	; 0x1ed4 <vfprintf+0x380>
    1ec0:	a1 fe       	sbrs	r10, 1
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <vfprintf+0x374>
    1ec4:	8b e2       	ldi	r24, 0x2B	; 43
    1ec6:	01 c0       	rjmp	.+2      	; 0x1eca <vfprintf+0x376>
    1ec8:	80 e2       	ldi	r24, 0x20	; 32
    1eca:	a7 fc       	sbrc	r10, 7
    1ecc:	8d e2       	ldi	r24, 0x2D	; 45
    1ece:	b6 01       	movw	r22, r12
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	4d d0       	rcall	.+154    	; 0x1f6e <fputc>
    1ed4:	89 14       	cp	r8, r9
    1ed6:	30 f4       	brcc	.+12     	; 0x1ee4 <vfprintf+0x390>
    1ed8:	b6 01       	movw	r22, r12
    1eda:	80 e3       	ldi	r24, 0x30	; 48
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	47 d0       	rcall	.+142    	; 0x1f6e <fputc>
    1ee0:	9a 94       	dec	r9
    1ee2:	f8 cf       	rjmp	.-16     	; 0x1ed4 <vfprintf+0x380>
    1ee4:	8a 94       	dec	r8
    1ee6:	f3 01       	movw	r30, r6
    1ee8:	e8 0d       	add	r30, r8
    1eea:	f1 1d       	adc	r31, r1
    1eec:	80 81       	ld	r24, Z
    1eee:	b6 01       	movw	r22, r12
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	3d d0       	rcall	.+122    	; 0x1f6e <fputc>
    1ef4:	81 10       	cpse	r8, r1
    1ef6:	f6 cf       	rjmp	.-20     	; 0x1ee4 <vfprintf+0x390>
    1ef8:	22 20       	and	r2, r2
    1efa:	09 f4       	brne	.+2      	; 0x1efe <vfprintf+0x3aa>
    1efc:	4e ce       	rjmp	.-868    	; 0x1b9a <vfprintf+0x46>
    1efe:	b6 01       	movw	r22, r12
    1f00:	80 e2       	ldi	r24, 0x20	; 32
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	34 d0       	rcall	.+104    	; 0x1f6e <fputc>
    1f06:	2a 94       	dec	r2
    1f08:	f7 cf       	rjmp	.-18     	; 0x1ef8 <vfprintf+0x3a4>
    1f0a:	f6 01       	movw	r30, r12
    1f0c:	86 81       	ldd	r24, Z+6	; 0x06
    1f0e:	97 81       	ldd	r25, Z+7	; 0x07
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <vfprintf+0x3c2>
    1f12:	8f ef       	ldi	r24, 0xFF	; 255
    1f14:	9f ef       	ldi	r25, 0xFF	; 255
    1f16:	2b 96       	adiw	r28, 0x0b	; 11
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	de bf       	out	0x3e, r29	; 62
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	1f 91       	pop	r17
    1f22:	0f 91       	pop	r16
    1f24:	ff 90       	pop	r15
    1f26:	ef 90       	pop	r14
    1f28:	df 90       	pop	r13
    1f2a:	cf 90       	pop	r12
    1f2c:	bf 90       	pop	r11
    1f2e:	af 90       	pop	r10
    1f30:	9f 90       	pop	r9
    1f32:	8f 90       	pop	r8
    1f34:	7f 90       	pop	r7
    1f36:	6f 90       	pop	r6
    1f38:	5f 90       	pop	r5
    1f3a:	4f 90       	pop	r4
    1f3c:	3f 90       	pop	r3
    1f3e:	2f 90       	pop	r2
    1f40:	08 95       	ret

00001f42 <strnlen_P>:
    1f42:	fc 01       	movw	r30, r24
    1f44:	05 90       	lpm	r0, Z+
    1f46:	61 50       	subi	r22, 0x01	; 1
    1f48:	70 40       	sbci	r23, 0x00	; 0
    1f4a:	01 10       	cpse	r0, r1
    1f4c:	d8 f7       	brcc	.-10     	; 0x1f44 <strnlen_P+0x2>
    1f4e:	80 95       	com	r24
    1f50:	90 95       	com	r25
    1f52:	8e 0f       	add	r24, r30
    1f54:	9f 1f       	adc	r25, r31
    1f56:	08 95       	ret

00001f58 <strnlen>:
    1f58:	fc 01       	movw	r30, r24
    1f5a:	61 50       	subi	r22, 0x01	; 1
    1f5c:	70 40       	sbci	r23, 0x00	; 0
    1f5e:	01 90       	ld	r0, Z+
    1f60:	01 10       	cpse	r0, r1
    1f62:	d8 f7       	brcc	.-10     	; 0x1f5a <strnlen+0x2>
    1f64:	80 95       	com	r24
    1f66:	90 95       	com	r25
    1f68:	8e 0f       	add	r24, r30
    1f6a:	9f 1f       	adc	r25, r31
    1f6c:	08 95       	ret

00001f6e <fputc>:
    1f6e:	0f 93       	push	r16
    1f70:	1f 93       	push	r17
    1f72:	cf 93       	push	r28
    1f74:	df 93       	push	r29
    1f76:	fb 01       	movw	r30, r22
    1f78:	23 81       	ldd	r18, Z+3	; 0x03
    1f7a:	21 fd       	sbrc	r18, 1
    1f7c:	03 c0       	rjmp	.+6      	; 0x1f84 <fputc+0x16>
    1f7e:	8f ef       	ldi	r24, 0xFF	; 255
    1f80:	9f ef       	ldi	r25, 0xFF	; 255
    1f82:	2c c0       	rjmp	.+88     	; 0x1fdc <fputc+0x6e>
    1f84:	22 ff       	sbrs	r18, 2
    1f86:	16 c0       	rjmp	.+44     	; 0x1fb4 <fputc+0x46>
    1f88:	46 81       	ldd	r20, Z+6	; 0x06
    1f8a:	57 81       	ldd	r21, Z+7	; 0x07
    1f8c:	24 81       	ldd	r18, Z+4	; 0x04
    1f8e:	35 81       	ldd	r19, Z+5	; 0x05
    1f90:	42 17       	cp	r20, r18
    1f92:	53 07       	cpc	r21, r19
    1f94:	44 f4       	brge	.+16     	; 0x1fa6 <fputc+0x38>
    1f96:	a0 81       	ld	r26, Z
    1f98:	b1 81       	ldd	r27, Z+1	; 0x01
    1f9a:	9d 01       	movw	r18, r26
    1f9c:	2f 5f       	subi	r18, 0xFF	; 255
    1f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa0:	20 83       	st	Z, r18
    1fa2:	31 83       	std	Z+1, r19	; 0x01
    1fa4:	8c 93       	st	X, r24
    1fa6:	26 81       	ldd	r18, Z+6	; 0x06
    1fa8:	37 81       	ldd	r19, Z+7	; 0x07
    1faa:	2f 5f       	subi	r18, 0xFF	; 255
    1fac:	3f 4f       	sbci	r19, 0xFF	; 255
    1fae:	26 83       	std	Z+6, r18	; 0x06
    1fb0:	37 83       	std	Z+7, r19	; 0x07
    1fb2:	14 c0       	rjmp	.+40     	; 0x1fdc <fputc+0x6e>
    1fb4:	8b 01       	movw	r16, r22
    1fb6:	ec 01       	movw	r28, r24
    1fb8:	fb 01       	movw	r30, r22
    1fba:	00 84       	ldd	r0, Z+8	; 0x08
    1fbc:	f1 85       	ldd	r31, Z+9	; 0x09
    1fbe:	e0 2d       	mov	r30, r0
    1fc0:	19 95       	eicall
    1fc2:	89 2b       	or	r24, r25
    1fc4:	e1 f6       	brne	.-72     	; 0x1f7e <fputc+0x10>
    1fc6:	d8 01       	movw	r26, r16
    1fc8:	16 96       	adiw	r26, 0x06	; 6
    1fca:	8d 91       	ld	r24, X+
    1fcc:	9c 91       	ld	r25, X
    1fce:	17 97       	sbiw	r26, 0x07	; 7
    1fd0:	01 96       	adiw	r24, 0x01	; 1
    1fd2:	16 96       	adiw	r26, 0x06	; 6
    1fd4:	8d 93       	st	X+, r24
    1fd6:	9c 93       	st	X, r25
    1fd8:	17 97       	sbiw	r26, 0x07	; 7
    1fda:	ce 01       	movw	r24, r28
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	1f 91       	pop	r17
    1fe2:	0f 91       	pop	r16
    1fe4:	08 95       	ret

00001fe6 <__ultoa_invert>:
    1fe6:	fa 01       	movw	r30, r20
    1fe8:	aa 27       	eor	r26, r26
    1fea:	28 30       	cpi	r18, 0x08	; 8
    1fec:	51 f1       	breq	.+84     	; 0x2042 <__ultoa_invert+0x5c>
    1fee:	20 31       	cpi	r18, 0x10	; 16
    1ff0:	81 f1       	breq	.+96     	; 0x2052 <__ultoa_invert+0x6c>
    1ff2:	e8 94       	clt
    1ff4:	6f 93       	push	r22
    1ff6:	6e 7f       	andi	r22, 0xFE	; 254
    1ff8:	6e 5f       	subi	r22, 0xFE	; 254
    1ffa:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffc:	8f 4f       	sbci	r24, 0xFF	; 255
    1ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    2000:	af 4f       	sbci	r26, 0xFF	; 255
    2002:	b1 e0       	ldi	r27, 0x01	; 1
    2004:	3e d0       	rcall	.+124    	; 0x2082 <__ultoa_invert+0x9c>
    2006:	b4 e0       	ldi	r27, 0x04	; 4
    2008:	3c d0       	rcall	.+120    	; 0x2082 <__ultoa_invert+0x9c>
    200a:	67 0f       	add	r22, r23
    200c:	78 1f       	adc	r23, r24
    200e:	89 1f       	adc	r24, r25
    2010:	9a 1f       	adc	r25, r26
    2012:	a1 1d       	adc	r26, r1
    2014:	68 0f       	add	r22, r24
    2016:	79 1f       	adc	r23, r25
    2018:	8a 1f       	adc	r24, r26
    201a:	91 1d       	adc	r25, r1
    201c:	a1 1d       	adc	r26, r1
    201e:	6a 0f       	add	r22, r26
    2020:	71 1d       	adc	r23, r1
    2022:	81 1d       	adc	r24, r1
    2024:	91 1d       	adc	r25, r1
    2026:	a1 1d       	adc	r26, r1
    2028:	20 d0       	rcall	.+64     	; 0x206a <__ultoa_invert+0x84>
    202a:	09 f4       	brne	.+2      	; 0x202e <__ultoa_invert+0x48>
    202c:	68 94       	set
    202e:	3f 91       	pop	r19
    2030:	2a e0       	ldi	r18, 0x0A	; 10
    2032:	26 9f       	mul	r18, r22
    2034:	11 24       	eor	r1, r1
    2036:	30 19       	sub	r19, r0
    2038:	30 5d       	subi	r19, 0xD0	; 208
    203a:	31 93       	st	Z+, r19
    203c:	de f6       	brtc	.-74     	; 0x1ff4 <__ultoa_invert+0xe>
    203e:	cf 01       	movw	r24, r30
    2040:	08 95       	ret
    2042:	46 2f       	mov	r20, r22
    2044:	47 70       	andi	r20, 0x07	; 7
    2046:	40 5d       	subi	r20, 0xD0	; 208
    2048:	41 93       	st	Z+, r20
    204a:	b3 e0       	ldi	r27, 0x03	; 3
    204c:	0f d0       	rcall	.+30     	; 0x206c <__ultoa_invert+0x86>
    204e:	c9 f7       	brne	.-14     	; 0x2042 <__ultoa_invert+0x5c>
    2050:	f6 cf       	rjmp	.-20     	; 0x203e <__ultoa_invert+0x58>
    2052:	46 2f       	mov	r20, r22
    2054:	4f 70       	andi	r20, 0x0F	; 15
    2056:	40 5d       	subi	r20, 0xD0	; 208
    2058:	4a 33       	cpi	r20, 0x3A	; 58
    205a:	18 f0       	brcs	.+6      	; 0x2062 <__ultoa_invert+0x7c>
    205c:	49 5d       	subi	r20, 0xD9	; 217
    205e:	31 fd       	sbrc	r19, 1
    2060:	40 52       	subi	r20, 0x20	; 32
    2062:	41 93       	st	Z+, r20
    2064:	02 d0       	rcall	.+4      	; 0x206a <__ultoa_invert+0x84>
    2066:	a9 f7       	brne	.-22     	; 0x2052 <__ultoa_invert+0x6c>
    2068:	ea cf       	rjmp	.-44     	; 0x203e <__ultoa_invert+0x58>
    206a:	b4 e0       	ldi	r27, 0x04	; 4
    206c:	a6 95       	lsr	r26
    206e:	97 95       	ror	r25
    2070:	87 95       	ror	r24
    2072:	77 95       	ror	r23
    2074:	67 95       	ror	r22
    2076:	ba 95       	dec	r27
    2078:	c9 f7       	brne	.-14     	; 0x206c <__ultoa_invert+0x86>
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	61 05       	cpc	r22, r1
    207e:	71 05       	cpc	r23, r1
    2080:	08 95       	ret
    2082:	9b 01       	movw	r18, r22
    2084:	ac 01       	movw	r20, r24
    2086:	0a 2e       	mov	r0, r26
    2088:	06 94       	lsr	r0
    208a:	57 95       	ror	r21
    208c:	47 95       	ror	r20
    208e:	37 95       	ror	r19
    2090:	27 95       	ror	r18
    2092:	ba 95       	dec	r27
    2094:	c9 f7       	brne	.-14     	; 0x2088 <__ultoa_invert+0xa2>
    2096:	62 0f       	add	r22, r18
    2098:	73 1f       	adc	r23, r19
    209a:	84 1f       	adc	r24, r20
    209c:	95 1f       	adc	r25, r21
    209e:	a0 1d       	adc	r26, r0
    20a0:	08 95       	ret

000020a2 <_exit>:
    20a2:	f8 94       	cli

000020a4 <__stop_program>:
    20a4:	ff cf       	rjmp	.-2      	; 0x20a4 <__stop_program>
