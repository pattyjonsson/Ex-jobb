
RTC32_EXAMPLE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  000005fe  00000692  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00802006  00802006  00000698  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000708  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000047d0  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003324  00000000  00000000  00005008  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002752  00000000  00000000  0000832c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  0000aa80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00027fb6  00000000  00000000  0000aca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000889  00000000  00000000  00032c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000334e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00008d30  00000000  00000000  000335df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f3 c0       	rjmp	.+486    	; 0x1e8 <__ctors_end>
   2:	00 00       	nop
   4:	10 c1       	rjmp	.+544    	; 0x226 <__bad_interrupt>
   6:	00 00       	nop
   8:	0e c1       	rjmp	.+540    	; 0x226 <__bad_interrupt>
   a:	00 00       	nop
   c:	0c c1       	rjmp	.+536    	; 0x226 <__bad_interrupt>
   e:	00 00       	nop
  10:	0a c1       	rjmp	.+532    	; 0x226 <__bad_interrupt>
  12:	00 00       	nop
  14:	08 c1       	rjmp	.+528    	; 0x226 <__bad_interrupt>
  16:	00 00       	nop
  18:	06 c1       	rjmp	.+524    	; 0x226 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	04 c1       	rjmp	.+520    	; 0x226 <__bad_interrupt>
  1e:	00 00       	nop
  20:	02 c1       	rjmp	.+516    	; 0x226 <__bad_interrupt>
  22:	00 00       	nop
  24:	00 c1       	rjmp	.+512    	; 0x226 <__bad_interrupt>
  26:	00 00       	nop
  28:	fe c0       	rjmp	.+508    	; 0x226 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	17 c2       	rjmp	.+1070   	; 0x45c <__vector_11>
  2e:	00 00       	nop
  30:	fa c0       	rjmp	.+500    	; 0x226 <__bad_interrupt>
  32:	00 00       	nop
  34:	f8 c0       	rjmp	.+496    	; 0x226 <__bad_interrupt>
  36:	00 00       	nop
  38:	f6 c0       	rjmp	.+492    	; 0x226 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f4 c0       	rjmp	.+488    	; 0x226 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f2 c0       	rjmp	.+484    	; 0x226 <__bad_interrupt>
  42:	00 00       	nop
  44:	f0 c0       	rjmp	.+480    	; 0x226 <__bad_interrupt>
  46:	00 00       	nop
  48:	ee c0       	rjmp	.+476    	; 0x226 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ec c0       	rjmp	.+472    	; 0x226 <__bad_interrupt>
  4e:	00 00       	nop
  50:	ea c0       	rjmp	.+468    	; 0x226 <__bad_interrupt>
  52:	00 00       	nop
  54:	e8 c0       	rjmp	.+464    	; 0x226 <__bad_interrupt>
  56:	00 00       	nop
  58:	e6 c0       	rjmp	.+460    	; 0x226 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e4 c0       	rjmp	.+456    	; 0x226 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e2 c0       	rjmp	.+452    	; 0x226 <__bad_interrupt>
  62:	00 00       	nop
  64:	e0 c0       	rjmp	.+448    	; 0x226 <__bad_interrupt>
  66:	00 00       	nop
  68:	de c0       	rjmp	.+444    	; 0x226 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	dc c0       	rjmp	.+440    	; 0x226 <__bad_interrupt>
  6e:	00 00       	nop
  70:	da c0       	rjmp	.+436    	; 0x226 <__bad_interrupt>
  72:	00 00       	nop
  74:	d8 c0       	rjmp	.+432    	; 0x226 <__bad_interrupt>
  76:	00 00       	nop
  78:	d6 c0       	rjmp	.+428    	; 0x226 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d4 c0       	rjmp	.+424    	; 0x226 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d2 c0       	rjmp	.+420    	; 0x226 <__bad_interrupt>
  82:	00 00       	nop
  84:	d0 c0       	rjmp	.+416    	; 0x226 <__bad_interrupt>
  86:	00 00       	nop
  88:	ce c0       	rjmp	.+412    	; 0x226 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	cc c0       	rjmp	.+408    	; 0x226 <__bad_interrupt>
  8e:	00 00       	nop
  90:	ca c0       	rjmp	.+404    	; 0x226 <__bad_interrupt>
  92:	00 00       	nop
  94:	c8 c0       	rjmp	.+400    	; 0x226 <__bad_interrupt>
  96:	00 00       	nop
  98:	c6 c0       	rjmp	.+396    	; 0x226 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c4 c0       	rjmp	.+392    	; 0x226 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c2 c0       	rjmp	.+388    	; 0x226 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c0 c0       	rjmp	.+384    	; 0x226 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	be c0       	rjmp	.+380    	; 0x226 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	bc c0       	rjmp	.+376    	; 0x226 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	ba c0       	rjmp	.+372    	; 0x226 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	b8 c0       	rjmp	.+368    	; 0x226 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b6 c0       	rjmp	.+364    	; 0x226 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	b4 c0       	rjmp	.+360    	; 0x226 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b2 c0       	rjmp	.+356    	; 0x226 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b0 c0       	rjmp	.+352    	; 0x226 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	ae c0       	rjmp	.+348    	; 0x226 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	ac c0       	rjmp	.+344    	; 0x226 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	aa c0       	rjmp	.+340    	; 0x226 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	a8 c0       	rjmp	.+336    	; 0x226 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a6 c0       	rjmp	.+332    	; 0x226 <__bad_interrupt>
  da:	00 00       	nop
  dc:	a4 c0       	rjmp	.+328    	; 0x226 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a2 c0       	rjmp	.+324    	; 0x226 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a0 c0       	rjmp	.+320    	; 0x226 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	9e c0       	rjmp	.+316    	; 0x226 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	9c c0       	rjmp	.+312    	; 0x226 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	9a c0       	rjmp	.+308    	; 0x226 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	98 c0       	rjmp	.+304    	; 0x226 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	96 c0       	rjmp	.+300    	; 0x226 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	94 c0       	rjmp	.+296    	; 0x226 <__bad_interrupt>
  fe:	00 00       	nop
 100:	92 c0       	rjmp	.+292    	; 0x226 <__bad_interrupt>
 102:	00 00       	nop
 104:	90 c0       	rjmp	.+288    	; 0x226 <__bad_interrupt>
 106:	00 00       	nop
 108:	8e c0       	rjmp	.+284    	; 0x226 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	8c c0       	rjmp	.+280    	; 0x226 <__bad_interrupt>
 10e:	00 00       	nop
 110:	8a c0       	rjmp	.+276    	; 0x226 <__bad_interrupt>
 112:	00 00       	nop
 114:	88 c0       	rjmp	.+272    	; 0x226 <__bad_interrupt>
 116:	00 00       	nop
 118:	86 c0       	rjmp	.+268    	; 0x226 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	84 c0       	rjmp	.+264    	; 0x226 <__bad_interrupt>
 11e:	00 00       	nop
 120:	82 c0       	rjmp	.+260    	; 0x226 <__bad_interrupt>
 122:	00 00       	nop
 124:	80 c0       	rjmp	.+256    	; 0x226 <__bad_interrupt>
 126:	00 00       	nop
 128:	7e c0       	rjmp	.+252    	; 0x226 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	7c c0       	rjmp	.+248    	; 0x226 <__bad_interrupt>
 12e:	00 00       	nop
 130:	7a c0       	rjmp	.+244    	; 0x226 <__bad_interrupt>
 132:	00 00       	nop
 134:	78 c0       	rjmp	.+240    	; 0x226 <__bad_interrupt>
 136:	00 00       	nop
 138:	76 c0       	rjmp	.+236    	; 0x226 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	74 c0       	rjmp	.+232    	; 0x226 <__bad_interrupt>
 13e:	00 00       	nop
 140:	72 c0       	rjmp	.+228    	; 0x226 <__bad_interrupt>
 142:	00 00       	nop
 144:	70 c0       	rjmp	.+224    	; 0x226 <__bad_interrupt>
 146:	00 00       	nop
 148:	6e c0       	rjmp	.+220    	; 0x226 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	6c c0       	rjmp	.+216    	; 0x226 <__bad_interrupt>
 14e:	00 00       	nop
 150:	6a c0       	rjmp	.+212    	; 0x226 <__bad_interrupt>
 152:	00 00       	nop
 154:	68 c0       	rjmp	.+208    	; 0x226 <__bad_interrupt>
 156:	00 00       	nop
 158:	66 c0       	rjmp	.+204    	; 0x226 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	64 c0       	rjmp	.+200    	; 0x226 <__bad_interrupt>
 15e:	00 00       	nop
 160:	62 c0       	rjmp	.+196    	; 0x226 <__bad_interrupt>
 162:	00 00       	nop
 164:	60 c0       	rjmp	.+192    	; 0x226 <__bad_interrupt>
 166:	00 00       	nop
 168:	5e c0       	rjmp	.+188    	; 0x226 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	5c c0       	rjmp	.+184    	; 0x226 <__bad_interrupt>
 16e:	00 00       	nop
 170:	5a c0       	rjmp	.+180    	; 0x226 <__bad_interrupt>
 172:	00 00       	nop
 174:	58 c0       	rjmp	.+176    	; 0x226 <__bad_interrupt>
 176:	00 00       	nop
 178:	56 c0       	rjmp	.+172    	; 0x226 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	54 c0       	rjmp	.+168    	; 0x226 <__bad_interrupt>
 17e:	00 00       	nop
 180:	52 c0       	rjmp	.+164    	; 0x226 <__bad_interrupt>
 182:	00 00       	nop
 184:	50 c0       	rjmp	.+160    	; 0x226 <__bad_interrupt>
 186:	00 00       	nop
 188:	4e c0       	rjmp	.+156    	; 0x226 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	4c c0       	rjmp	.+152    	; 0x226 <__bad_interrupt>
 18e:	00 00       	nop
 190:	4a c0       	rjmp	.+148    	; 0x226 <__bad_interrupt>
 192:	00 00       	nop
 194:	48 c0       	rjmp	.+144    	; 0x226 <__bad_interrupt>
 196:	00 00       	nop
 198:	46 c0       	rjmp	.+140    	; 0x226 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	44 c0       	rjmp	.+136    	; 0x226 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	42 c0       	rjmp	.+132    	; 0x226 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	40 c0       	rjmp	.+128    	; 0x226 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	3e c0       	rjmp	.+124    	; 0x226 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	3c c0       	rjmp	.+120    	; 0x226 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	3a c0       	rjmp	.+116    	; 0x226 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	38 c0       	rjmp	.+112    	; 0x226 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	36 c0       	rjmp	.+108    	; 0x226 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	34 c0       	rjmp	.+104    	; 0x226 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	32 c0       	rjmp	.+100    	; 0x226 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	30 c0       	rjmp	.+96     	; 0x226 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	2e c0       	rjmp	.+92     	; 0x226 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	2c c0       	rjmp	.+88     	; 0x226 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	2a c0       	rjmp	.+84     	; 0x226 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	28 c0       	rjmp	.+80     	; 0x226 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	26 c0       	rjmp	.+76     	; 0x226 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	24 c0       	rjmp	.+72     	; 0x226 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	22 c0       	rjmp	.+68     	; 0x226 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	20 c0       	rjmp	.+64     	; 0x226 <__bad_interrupt>
	...

000001e8 <__ctors_end>:
 1e8:	11 24       	eor	r1, r1
 1ea:	1f be       	out	0x3f, r1	; 63
 1ec:	cf ef       	ldi	r28, 0xFF	; 255
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	df e5       	ldi	r29, 0x5F	; 95
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	00 e0       	ldi	r16, 0x00	; 0
 1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
 1f8:	10 e2       	ldi	r17, 0x20	; 32
 1fa:	a0 e0       	ldi	r26, 0x00	; 0
 1fc:	b0 e2       	ldi	r27, 0x20	; 32
 1fe:	ee ef       	ldi	r30, 0xFE	; 254
 200:	f5 e0       	ldi	r31, 0x05	; 5
 202:	00 e0       	ldi	r16, 0x00	; 0
 204:	0b bf       	out	0x3b, r16	; 59
 206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
 208:	07 90       	elpm	r0, Z+
 20a:	0d 92       	st	X+, r0
 20c:	a6 30       	cpi	r26, 0x06	; 6
 20e:	b1 07       	cpc	r27, r17
 210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
 212:	20 e2       	ldi	r18, 0x20	; 32
 214:	a6 e0       	ldi	r26, 0x06	; 6
 216:	b0 e2       	ldi	r27, 0x20	; 32
 218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
 21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
 21c:	ae 30       	cpi	r26, 0x0E	; 14
 21e:	b2 07       	cpc	r27, r18
 220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
 222:	8b d1       	rcall	.+790    	; 0x53a <main>
 224:	ea c1       	rjmp	.+980    	; 0x5fa <_exit>

00000226 <__bad_interrupt>:
 226:	ec ce       	rjmp	.-552    	; 0x0 <__vectors>

00000228 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
 22e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
 232:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
 236:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
 23a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
 23e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
 242:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 246:	08 95       	ret

00000248 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	1f 92       	push	r1
 24e:	cd b7       	in	r28, 0x3d	; 61
 250:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 252:	9f b7       	in	r25, 0x3f	; 63
 254:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
 256:	f8 94       	cli
	return flags;
 258:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 25a:	e8 2f       	mov	r30, r24
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	e0 59       	subi	r30, 0x90	; 144
 260:	ff 4f       	sbci	r31, 0xFF	; 255
 262:	60 95       	com	r22
 264:	80 81       	ld	r24, Z
 266:	68 23       	and	r22, r24
 268:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 26a:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
 26c:	0f 90       	pop	r0
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 27e:	c6 2f       	mov	r28, r22
 280:	d0 e0       	ldi	r29, 0x00	; 0
 282:	de 01       	movw	r26, r28
 284:	02 2e       	mov	r0, r18
 286:	02 c0       	rjmp	.+4      	; 0x28c <ioport_configure_port_pin+0x18>
 288:	b5 95       	asr	r27
 28a:	a7 95       	ror	r26
 28c:	0a 94       	dec	r0
 28e:	e2 f7       	brpl	.-8      	; 0x288 <ioport_configure_port_pin+0x14>
 290:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 292:	50 8b       	std	Z+16, r21	; 0x10
 294:	2f 5f       	subi	r18, 0xFF	; 255
 296:	3f 4f       	sbci	r19, 0xFF	; 255
 298:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 29a:	28 30       	cpi	r18, 0x08	; 8
 29c:	31 05       	cpc	r19, r1
 29e:	89 f7       	brne	.-30     	; 0x282 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 2a0:	40 ff       	sbrs	r20, 0
 2a2:	0a c0       	rjmp	.+20     	; 0x2b8 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
 2a4:	41 ff       	sbrs	r20, 1
 2a6:	03 c0       	rjmp	.+6      	; 0x2ae <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 2a8:	fc 01       	movw	r30, r24
 2aa:	65 83       	std	Z+5, r22	; 0x05
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 2ae:	fc 01       	movw	r30, r24
 2b0:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 2b2:	fc 01       	movw	r30, r24
 2b4:	61 83       	std	Z+1, r22	; 0x01
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 2b8:	fc 01       	movw	r30, r24
 2ba:	62 83       	std	Z+2, r22	; 0x02
	}
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 2c2:	43 e0       	ldi	r20, 0x03	; 3
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	80 e6       	ldi	r24, 0x60	; 96
 2ca:	96 e0       	ldi	r25, 0x06	; 6
 2cc:	d3 df       	rcall	.-90     	; 0x274 <ioport_configure_port_pin>
 2ce:	43 e0       	ldi	r20, 0x03	; 3
 2d0:	50 e0       	ldi	r21, 0x00	; 0
 2d2:	62 e0       	ldi	r22, 0x02	; 2
 2d4:	80 e6       	ldi	r24, 0x60	; 96
 2d6:	96 e0       	ldi	r25, 0x06	; 6
 2d8:	cd df       	rcall	.-102    	; 0x274 <ioport_configure_port_pin>
 2da:	43 e0       	ldi	r20, 0x03	; 3
 2dc:	50 e0       	ldi	r21, 0x00	; 0
 2de:	64 e0       	ldi	r22, 0x04	; 4
 2e0:	80 e6       	ldi	r24, 0x60	; 96
 2e2:	96 e0       	ldi	r25, 0x06	; 6
 2e4:	c7 df       	rcall	.-114    	; 0x274 <ioport_configure_port_pin>
 2e6:	43 e0       	ldi	r20, 0x03	; 3
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	68 e0       	ldi	r22, 0x08	; 8
 2ec:	80 e6       	ldi	r24, 0x60	; 96
 2ee:	96 e0       	ldi	r25, 0x06	; 6
 2f0:	c1 df       	rcall	.-126    	; 0x274 <ioport_configure_port_pin>
 2f2:	43 e0       	ldi	r20, 0x03	; 3
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	60 e1       	ldi	r22, 0x10	; 16
 2f8:	80 e6       	ldi	r24, 0x60	; 96
 2fa:	96 e0       	ldi	r25, 0x06	; 6
 2fc:	bb df       	rcall	.-138    	; 0x274 <ioport_configure_port_pin>
 2fe:	43 e0       	ldi	r20, 0x03	; 3
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	60 e2       	ldi	r22, 0x20	; 32
 304:	80 e6       	ldi	r24, 0x60	; 96
 306:	96 e0       	ldi	r25, 0x06	; 6
 308:	b5 df       	rcall	.-150    	; 0x274 <ioport_configure_port_pin>
 30a:	43 e0       	ldi	r20, 0x03	; 3
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	60 e4       	ldi	r22, 0x40	; 64
 310:	80 e6       	ldi	r24, 0x60	; 96
 312:	96 e0       	ldi	r25, 0x06	; 6
 314:	af df       	rcall	.-162    	; 0x274 <ioport_configure_port_pin>
 316:	43 e0       	ldi	r20, 0x03	; 3
 318:	50 e0       	ldi	r21, 0x00	; 0
 31a:	60 e8       	ldi	r22, 0x80	; 128
 31c:	80 e6       	ldi	r24, 0x60	; 96
 31e:	96 e0       	ldi	r25, 0x06	; 6
 320:	a9 df       	rcall	.-174    	; 0x274 <ioport_configure_port_pin>
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	58 e1       	ldi	r21, 0x18	; 24
 326:	61 e0       	ldi	r22, 0x01	; 1
 328:	80 ea       	ldi	r24, 0xA0	; 160
 32a:	96 e0       	ldi	r25, 0x06	; 6
 32c:	a3 df       	rcall	.-186    	; 0x274 <ioport_configure_port_pin>
 32e:	40 e0       	ldi	r20, 0x00	; 0
 330:	58 e1       	ldi	r21, 0x18	; 24
 332:	62 e0       	ldi	r22, 0x02	; 2
 334:	80 ea       	ldi	r24, 0xA0	; 160
 336:	96 e0       	ldi	r25, 0x06	; 6
 338:	9d df       	rcall	.-198    	; 0x274 <ioport_configure_port_pin>
 33a:	40 e0       	ldi	r20, 0x00	; 0
 33c:	58 e1       	ldi	r21, 0x18	; 24
 33e:	64 e0       	ldi	r22, 0x04	; 4
 340:	80 ea       	ldi	r24, 0xA0	; 160
 342:	96 e0       	ldi	r25, 0x06	; 6
 344:	97 df       	rcall	.-210    	; 0x274 <ioport_configure_port_pin>
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	58 e1       	ldi	r21, 0x18	; 24
 34a:	68 e0       	ldi	r22, 0x08	; 8
 34c:	80 ea       	ldi	r24, 0xA0	; 160
 34e:	96 e0       	ldi	r25, 0x06	; 6
 350:	91 df       	rcall	.-222    	; 0x274 <ioport_configure_port_pin>
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	58 e1       	ldi	r21, 0x18	; 24
 356:	60 e1       	ldi	r22, 0x10	; 16
 358:	80 ea       	ldi	r24, 0xA0	; 160
 35a:	96 e0       	ldi	r25, 0x06	; 6
 35c:	8b df       	rcall	.-234    	; 0x274 <ioport_configure_port_pin>
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	58 e1       	ldi	r21, 0x18	; 24
 362:	60 e4       	ldi	r22, 0x40	; 64
 364:	80 ea       	ldi	r24, 0xA0	; 160
 366:	96 e0       	ldi	r25, 0x06	; 6
 368:	85 df       	rcall	.-246    	; 0x274 <ioport_configure_port_pin>
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	58 e1       	ldi	r21, 0x18	; 24
 36e:	60 e8       	ldi	r22, 0x80	; 128
 370:	80 ea       	ldi	r24, 0xA0	; 160
 372:	96 e0       	ldi	r25, 0x06	; 6
 374:	7f cf       	rjmp	.-258    	; 0x274 <ioport_configure_port_pin>
 376:	08 95       	ret

00000378 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
 378:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
 37a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
 37c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
 37e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
 380:	60 83       	st	Z, r22
	ret                             // Return to caller
 382:	08 95       	ret

00000384 <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
 384:	04 c0       	rjmp	.+8      	; 0x38e <__portable_avr_delay_cycles+0xa>
 386:	61 50       	subi	r22, 0x01	; 1
 388:	71 09       	sbc	r23, r1
 38a:	81 09       	sbc	r24, r1
 38c:	91 09       	sbc	r25, r1
 38e:	61 15       	cp	r22, r1
 390:	71 05       	cpc	r23, r1
 392:	81 05       	cpc	r24, r1
 394:	91 05       	cpc	r25, r1
 396:	b9 f7       	brne	.-18     	; 0x386 <__portable_avr_delay_cycles+0x2>
 398:	08 95       	ret

0000039a <rtc_get_time>:
 39a:	80 e1       	ldi	r24, 0x10	; 16
 39c:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
 3a0:	e0 e2       	ldi	r30, 0x20	; 32
 3a2:	f4 e0       	ldi	r31, 0x04	; 4
 3a4:	81 81       	ldd	r24, Z+1	; 0x01
 3a6:	84 fd       	sbrc	r24, 4
 3a8:	fd cf       	rjmp	.-6      	; 0x3a4 <rtc_get_time+0xa>
 3aa:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
 3ae:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
 3b2:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
 3b6:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
 3ba:	08 95       	ret

000003bc <rtc_set_alarm>:
 3bc:	e0 e2       	ldi	r30, 0x20	; 32
 3be:	f4 e0       	ldi	r31, 0x04	; 4
 3c0:	24 e0       	ldi	r18, 0x04	; 4
 3c2:	22 83       	std	Z+2, r18	; 0x02
 3c4:	64 87       	std	Z+12, r22	; 0x0c
 3c6:	75 87       	std	Z+13, r23	; 0x0d
 3c8:	86 87       	std	Z+14, r24	; 0x0e
 3ca:	97 87       	std	Z+15, r25	; 0x0f
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	83 83       	std	Z+3, r24	; 0x03
 3d0:	08 95       	ret

000003d2 <rtc_set_callback>:
 3d2:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <rtc_data>
 3d6:	90 93 0d 20 	sts	0x200D, r25	; 0x80200d <rtc_data+0x1>
 3da:	08 95       	ret

000003dc <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
 3e0:	64 e0       	ldi	r22, 0x04	; 4
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	31 df       	rcall	.-414    	; 0x248 <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
 3e6:	c0 ef       	ldi	r28, 0xF0	; 240
 3e8:	d0 e0       	ldi	r29, 0x00	; 0
 3ea:	88 81       	ld	r24, Y
 3ec:	82 60       	ori	r24, 0x02	; 2
 3ee:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	80 ef       	ldi	r24, 0xF0	; 240
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	c0 df       	rcall	.-128    	; 0x378 <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
 3f8:	88 81       	ld	r24, Y
 3fa:	84 60       	ori	r24, 0x04	; 4
 3fc:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
 3fe:	63 e4       	ldi	r22, 0x43	; 67
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	be df       	rcall	.-132    	; 0x384 <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK;
 408:	88 81       	ld	r24, Y
 40a:	88 60       	ori	r24, 0x08	; 8
 40c:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
 40e:	e0 ef       	ldi	r30, 0xF0	; 240
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	81 81       	ldd	r24, Z+1	; 0x01
 414:	83 ff       	sbrs	r24, 3
 416:	fd cf       	rjmp	.-6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
 418:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
 41c:	e0 e2       	ldi	r30, 0x20	; 32
 41e:	f4 e0       	ldi	r31, 0x04	; 4
 420:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
 422:	80 fd       	sbrc	r24, 0
 424:	fd cf       	rjmp	.-6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
 426:	e0 e2       	ldi	r30, 0x20	; 32
 428:	f4 e0       	ldi	r31, 0x04	; 4
 42a:	8f ef       	ldi	r24, 0xFF	; 255
 42c:	9f ef       	ldi	r25, 0xFF	; 255
 42e:	dc 01       	movw	r26, r24
 430:	80 87       	std	Z+8, r24	; 0x08
 432:	91 87       	std	Z+9, r25	; 0x09
 434:	a2 87       	std	Z+10, r26	; 0x0a
 436:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
 438:	14 82       	std	Z+4, r1	; 0x04
 43a:	15 82       	std	Z+5, r1	; 0x05
 43c:	16 82       	std	Z+6, r1	; 0x06
 43e:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
 440:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
 442:	80 fd       	sbrc	r24, 0
 444:	fd cf       	rjmp	.-6      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>

	RTC32.INTCTRL = 0;
 446:	e0 e2       	ldi	r30, 0x20	; 32
 448:	f4 e0       	ldi	r31, 0x04	; 4
 44a:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
 450:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
 452:	80 fd       	sbrc	r24, 0
 454:	fd cf       	rjmp	.-6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
}
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	08 95       	ret

0000045c <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
 45c:	1f 92       	push	r1
 45e:	0f 92       	push	r0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	0f 92       	push	r0
 464:	11 24       	eor	r1, r1
 466:	0b b6       	in	r0, 0x3b	; 59
 468:	0f 92       	push	r0
 46a:	2f 93       	push	r18
 46c:	3f 93       	push	r19
 46e:	4f 93       	push	r20
 470:	5f 93       	push	r21
 472:	6f 93       	push	r22
 474:	7f 93       	push	r23
 476:	8f 93       	push	r24
 478:	9f 93       	push	r25
 47a:	af 93       	push	r26
 47c:	bf 93       	push	r27
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	ef 93       	push	r30
 484:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
 486:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
 48a:	c0 91 0c 20 	lds	r28, 0x200C	; 0x80200c <rtc_data>
 48e:	d0 91 0d 20 	lds	r29, 0x200D	; 0x80200d <rtc_data+0x1>
 492:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
 494:	19 f0       	breq	.+6      	; 0x49c <__vector_11+0x40>
 496:	81 df       	rcall	.-254    	; 0x39a <rtc_get_time>
 498:	fe 01       	movw	r30, r28
}
 49a:	19 95       	eicall
 49c:	ff 91       	pop	r31
 49e:	ef 91       	pop	r30
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	bf 91       	pop	r27
 4a6:	af 91       	pop	r26
 4a8:	9f 91       	pop	r25
 4aa:	8f 91       	pop	r24
 4ac:	7f 91       	pop	r23
 4ae:	6f 91       	pop	r22
 4b0:	5f 91       	pop	r21
 4b2:	4f 91       	pop	r20
 4b4:	3f 91       	pop	r19
 4b6:	2f 91       	pop	r18
 4b8:	0f 90       	pop	r0
 4ba:	0b be       	out	0x3b, r0	; 59
 4bc:	0f 90       	pop	r0
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	0f 90       	pop	r0
 4c2:	1f 90       	pop	r1
 4c4:	18 95       	reti

000004c6 <alarm>:
 *
 * This outputs the last two digits of current time in BCD on the board LEDS,
 * and then reschedules the alarm in 3 seconds.
 */
static void alarm(uint32_t time)
{
 4c6:	8f 92       	push	r8
 4c8:	9f 92       	push	r9
 4ca:	af 92       	push	r10
 4cc:	bf 92       	push	r11
 4ce:	cf 92       	push	r12
 4d0:	df 92       	push	r13
 4d2:	ef 92       	push	r14
 4d4:	ff 92       	push	r15
 4d6:	cf 93       	push	r28
 4d8:	6b 01       	movw	r12, r22
 4da:	7c 01       	movw	r14, r24
	uint8_t bcd;

	// Extract last two digits from time, and put them in bcd
	bcd = time % 10;
 4dc:	0f 2e       	mov	r0, r31
 4de:	fa e0       	ldi	r31, 0x0A	; 10
 4e0:	8f 2e       	mov	r8, r31
 4e2:	91 2c       	mov	r9, r1
 4e4:	a1 2c       	mov	r10, r1
 4e6:	b1 2c       	mov	r11, r1
 4e8:	f0 2d       	mov	r31, r0
 4ea:	a5 01       	movw	r20, r10
 4ec:	94 01       	movw	r18, r8
 4ee:	63 d0       	rcall	.+198    	; 0x5b6 <__udivmodsi4>
 4f0:	c6 2f       	mov	r28, r22
	time -= bcd;
 4f2:	c7 01       	movw	r24, r14
 4f4:	b6 01       	movw	r22, r12
 4f6:	6c 1b       	sub	r22, r28
 4f8:	71 09       	sbc	r23, r1
 4fa:	81 09       	sbc	r24, r1
 4fc:	91 09       	sbc	r25, r1
	time /= 10;
	bcd = bcd | ((time % 10) << 4);
 4fe:	a5 01       	movw	r20, r10
 500:	94 01       	movw	r18, r8
 502:	59 d0       	rcall	.+178    	; 0x5b6 <__udivmodsi4>
 504:	ca 01       	movw	r24, r20
 506:	b9 01       	movw	r22, r18
 508:	a5 01       	movw	r20, r10
 50a:	94 01       	movw	r18, r8
 50c:	54 d0       	rcall	.+168    	; 0x5b6 <__udivmodsi4>
 50e:	62 95       	swap	r22
 510:	60 7f       	andi	r22, 0xF0	; 240

	// LEDS on STK600 are active low, so invert the output
	bcd = ~bcd;

	LED_PORT.OUT = bcd;
 512:	c6 2b       	or	r28, r22
 514:	c0 95       	com	r28
 */
static inline void rtc_set_alarm_relative(uint32_t offset)
{
	Assert(offset >= 2);

	rtc_set_alarm(rtc_get_time() + offset);
 516:	c0 93 64 06 	sts	0x0664, r28	; 0x800664 <__TEXT_REGION_LENGTH__+0x700664>
 51a:	3f df       	rcall	.-386    	; 0x39a <rtc_get_time>
 51c:	6e 5f       	subi	r22, 0xFE	; 254
 51e:	7f 4f       	sbci	r23, 0xFF	; 255
 520:	8f 4f       	sbci	r24, 0xFF	; 255
 522:	9f 4f       	sbci	r25, 0xFF	; 255

	/* Since the next alarm will be rounded up to the next second pass, this will
	 * actually happen in 3 seconds.
	 */
	rtc_set_alarm_relative(2);
}
 524:	4b df       	rcall	.-362    	; 0x3bc <rtc_set_alarm>
 526:	cf 91       	pop	r28
 528:	ff 90       	pop	r15
 52a:	ef 90       	pop	r14
 52c:	df 90       	pop	r13
 52e:	cf 90       	pop	r12
 530:	bf 90       	pop	r11
 532:	af 90       	pop	r10
 534:	9f 90       	pop	r9
 536:	8f 90       	pop	r8
 538:	08 95       	ret

0000053a <main>:
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
 53a:	87 e0       	ldi	r24, 0x07	; 7
 53c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
 */
int main(void)
{
	pmic_init();
	board_init();
	sysclk_init();
 540:	c0 de       	rcall	.-640    	; 0x2c2 <board_init>
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
 542:	72 de       	rcall	.-796    	; 0x228 <sysclk_init>
 544:	e6 e0       	ldi	r30, 0x06	; 6
 546:	f0 e2       	ldi	r31, 0x20	; 32
 548:	10 82       	st	Z, r1
 54a:	11 82       	std	Z+1, r1	; 0x01
 54c:	12 82       	std	Z+2, r1	; 0x02
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
 54e:	13 82       	std	Z+3, r1	; 0x03
	sleepmgr_init();

	rtc_init();
 550:	14 82       	std	Z+4, r1	; 0x04
	rtc_set_callback(alarm);
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	85 83       	std	Z+5, r24	; 0x05
 556:	42 df       	rcall	.-380    	; 0x3dc <rtc_init>

	cpu_irq_enable();
 558:	83 e6       	ldi	r24, 0x63	; 99
 55a:	92 e0       	ldi	r25, 0x02	; 2
 55c:	3a df       	rcall	.-396    	; 0x3d2 <rtc_set_callback>
 55e:	78 94       	sei
 560:	1c df       	rcall	.-456    	; 0x39a <rtc_get_time>
 562:	6d 5f       	subi	r22, 0xFD	; 253
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	8f 4f       	sbci	r24, 0xFF	; 255

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
 568:	9f 4f       	sbci	r25, 0xFF	; 255
 56a:	28 df       	rcall	.-432    	; 0x3bc <rtc_set_alarm>
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
 56c:	26 e0       	ldi	r18, 0x06	; 6
 56e:	30 e2       	ldi	r19, 0x20	; 32
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
 570:	c8 e4       	ldi	r28, 0x48	; 72

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
 572:	d0 e0       	ldi	r29, 0x00	; 0
 574:	f8 94       	cli
 576:	f9 01       	movw	r30, r18
 578:	80 81       	ld	r24, Z
 57a:	81 11       	cpse	r24, r1
 57c:	09 c0       	rjmp	.+18     	; 0x590 <main+0x56>
 57e:	a7 e0       	ldi	r26, 0x07	; 7
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
 580:	b0 e2       	ldi	r27, 0x20	; 32

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
 582:	e0 e0       	ldi	r30, 0x00	; 0
 584:	ef 5f       	subi	r30, 0xFF	; 255
 586:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
 588:	88 23       	and	r24, r24
 58a:	e1 f3       	breq	.-8      	; 0x584 <main+0x4a>
		cpu_irq_enable();
 58c:	e1 11       	cpse	r30, r1
 58e:	02 c0       	rjmp	.+4      	; 0x594 <main+0x5a>
 590:	78 94       	sei

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
 592:	f0 cf       	rjmp	.-32     	; 0x574 <main+0x3a>
 594:	88 81       	ld	r24, Y
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	e1 50       	subi	r30, 0x01	; 1
 59a:	f0 4e       	sbci	r31, 0xE0	; 224
 59c:	81 7f       	andi	r24, 0xF1	; 241
 59e:	90 81       	ld	r25, Z
	sleep_enable();
 5a0:	89 2b       	or	r24, r25
 5a2:	88 83       	st	Y, r24
 5a4:	88 81       	ld	r24, Y

	cpu_irq_enable();
 5a6:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
 5a8:	88 83       	st	Y, r24

	sleep_disable();
 5aa:	78 94       	sei
 5ac:	88 95       	sleep
 5ae:	88 81       	ld	r24, Y
 5b0:	8e 7f       	andi	r24, 0xFE	; 254
 5b2:	88 83       	st	Y, r24
 5b4:	df cf       	rjmp	.-66     	; 0x574 <main+0x3a>

000005b6 <__udivmodsi4>:
 5b6:	a1 e2       	ldi	r26, 0x21	; 33
 5b8:	1a 2e       	mov	r1, r26
 5ba:	aa 1b       	sub	r26, r26
 5bc:	bb 1b       	sub	r27, r27
 5be:	fd 01       	movw	r30, r26
 5c0:	0d c0       	rjmp	.+26     	; 0x5dc <__udivmodsi4_ep>

000005c2 <__udivmodsi4_loop>:
 5c2:	aa 1f       	adc	r26, r26
 5c4:	bb 1f       	adc	r27, r27
 5c6:	ee 1f       	adc	r30, r30
 5c8:	ff 1f       	adc	r31, r31
 5ca:	a2 17       	cp	r26, r18
 5cc:	b3 07       	cpc	r27, r19
 5ce:	e4 07       	cpc	r30, r20
 5d0:	f5 07       	cpc	r31, r21
 5d2:	20 f0       	brcs	.+8      	; 0x5dc <__udivmodsi4_ep>
 5d4:	a2 1b       	sub	r26, r18
 5d6:	b3 0b       	sbc	r27, r19
 5d8:	e4 0b       	sbc	r30, r20
 5da:	f5 0b       	sbc	r31, r21

000005dc <__udivmodsi4_ep>:
 5dc:	66 1f       	adc	r22, r22
 5de:	77 1f       	adc	r23, r23
 5e0:	88 1f       	adc	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	1a 94       	dec	r1
 5e6:	69 f7       	brne	.-38     	; 0x5c2 <__udivmodsi4_loop>
 5e8:	60 95       	com	r22
 5ea:	70 95       	com	r23
 5ec:	80 95       	com	r24
 5ee:	90 95       	com	r25
 5f0:	9b 01       	movw	r18, r22
 5f2:	ac 01       	movw	r20, r24
 5f4:	bd 01       	movw	r22, r26
 5f6:	cf 01       	movw	r24, r30
 5f8:	08 95       	ret

000005fa <_exit>:
 5fa:	f8 94       	cli

000005fc <__stop_program>:
 5fc:	ff cf       	rjmp	.-2      	; 0x5fc <__stop_program>
