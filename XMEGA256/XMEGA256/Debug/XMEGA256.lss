
XMEGA256.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000011a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004a  00802000  00802000  000011a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000011d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006d10  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039db  00000000  00000000  00008158  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a8f  00000000  00000000  0000bb33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e80  00000000  00000000  0000e5c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002fa5c  00000000  00000000  0000f444  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025bb  00000000  00000000  0003eea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  0004145b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000a566  00000000  00000000  0004163b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	1a c1       	rjmp	.+564    	; 0x23a <__bad_interrupt>
       6:	00 00       	nop
       8:	18 c1       	rjmp	.+560    	; 0x23a <__bad_interrupt>
       a:	00 00       	nop
       c:	16 c1       	rjmp	.+556    	; 0x23a <__bad_interrupt>
       e:	00 00       	nop
      10:	14 c1       	rjmp	.+552    	; 0x23a <__bad_interrupt>
      12:	00 00       	nop
      14:	12 c1       	rjmp	.+548    	; 0x23a <__bad_interrupt>
      16:	00 00       	nop
      18:	10 c1       	rjmp	.+544    	; 0x23a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0e c1       	rjmp	.+540    	; 0x23a <__bad_interrupt>
      1e:	00 00       	nop
      20:	0c c1       	rjmp	.+536    	; 0x23a <__bad_interrupt>
      22:	00 00       	nop
      24:	0a c1       	rjmp	.+532    	; 0x23a <__bad_interrupt>
      26:	00 00       	nop
      28:	08 c1       	rjmp	.+528    	; 0x23a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	06 c1       	rjmp	.+524    	; 0x23a <__bad_interrupt>
      2e:	00 00       	nop
      30:	04 c1       	rjmp	.+520    	; 0x23a <__bad_interrupt>
      32:	00 00       	nop
      34:	02 c1       	rjmp	.+516    	; 0x23a <__bad_interrupt>
      36:	00 00       	nop
      38:	11 c1       	rjmp	.+546    	; 0x25c <__vector_14>
      3a:	00 00       	nop
      3c:	3c c1       	rjmp	.+632    	; 0x2b6 <__vector_15>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__vector_16>
      42:	00 00       	nop
      44:	92 c1       	rjmp	.+804    	; 0x36a <__vector_17>
      46:	00 00       	nop
      48:	bd c1       	rjmp	.+890    	; 0x3c4 <__vector_18>
      4a:	00 00       	nop
      4c:	e8 c1       	rjmp	.+976    	; 0x41e <__vector_19>
      4e:	00 00       	nop
      50:	13 c2       	rjmp	.+1062   	; 0x478 <__vector_20>
      52:	00 00       	nop
      54:	3e c2       	rjmp	.+1148   	; 0x4d2 <__vector_21>
      56:	00 00       	nop
      58:	69 c2       	rjmp	.+1234   	; 0x52c <__vector_22>
      5a:	00 00       	nop
      5c:	94 c2       	rjmp	.+1320   	; 0x586 <__vector_23>
      5e:	00 00       	nop
      60:	ec c0       	rjmp	.+472    	; 0x23a <__bad_interrupt>
      62:	00 00       	nop
      64:	ea c0       	rjmp	.+468    	; 0x23a <__bad_interrupt>
      66:	00 00       	nop
      68:	e8 c0       	rjmp	.+464    	; 0x23a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e6 c0       	rjmp	.+460    	; 0x23a <__bad_interrupt>
      6e:	00 00       	nop
      70:	e4 c0       	rjmp	.+456    	; 0x23a <__bad_interrupt>
      72:	00 00       	nop
      74:	e2 c0       	rjmp	.+452    	; 0x23a <__bad_interrupt>
      76:	00 00       	nop
      78:	e0 c0       	rjmp	.+448    	; 0x23a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	de c0       	rjmp	.+444    	; 0x23a <__bad_interrupt>
      7e:	00 00       	nop
      80:	dc c0       	rjmp	.+440    	; 0x23a <__bad_interrupt>
      82:	00 00       	nop
      84:	da c0       	rjmp	.+436    	; 0x23a <__bad_interrupt>
      86:	00 00       	nop
      88:	d8 c0       	rjmp	.+432    	; 0x23a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d6 c0       	rjmp	.+428    	; 0x23a <__bad_interrupt>
      8e:	00 00       	nop
      90:	d4 c0       	rjmp	.+424    	; 0x23a <__bad_interrupt>
      92:	00 00       	nop
      94:	d2 c0       	rjmp	.+420    	; 0x23a <__bad_interrupt>
      96:	00 00       	nop
      98:	d0 c0       	rjmp	.+416    	; 0x23a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ce c0       	rjmp	.+412    	; 0x23a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	cc c0       	rjmp	.+408    	; 0x23a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ca c0       	rjmp	.+404    	; 0x23a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c8 c0       	rjmp	.+400    	; 0x23a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c6 c0       	rjmp	.+396    	; 0x23a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c4 c0       	rjmp	.+392    	; 0x23a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c2 c0       	rjmp	.+388    	; 0x23a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c0 c0       	rjmp	.+384    	; 0x23a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	53 c4       	rjmp	.+2214   	; 0x964 <__vector_47>
      be:	00 00       	nop
      c0:	7e c4       	rjmp	.+2300   	; 0x9be <__vector_48>
      c2:	00 00       	nop
      c4:	a9 c4       	rjmp	.+2386   	; 0xa18 <__vector_49>
      c6:	00 00       	nop
      c8:	d4 c4       	rjmp	.+2472   	; 0xa72 <__vector_50>
      ca:	00 00       	nop
      cc:	ff c4       	rjmp	.+2558   	; 0xacc <__vector_51>
      ce:	00 00       	nop
      d0:	2a c5       	rjmp	.+2644   	; 0xb26 <__vector_52>
      d2:	00 00       	nop
      d4:	55 c5       	rjmp	.+2730   	; 0xb80 <__vector_53>
      d6:	00 00       	nop
      d8:	80 c5       	rjmp	.+2816   	; 0xbda <__vector_54>
      da:	00 00       	nop
      dc:	ab c5       	rjmp	.+2902   	; 0xc34 <__vector_55>
      de:	00 00       	nop
      e0:	d6 c5       	rjmp	.+2988   	; 0xc8e <__vector_56>
      e2:	00 00       	nop
      e4:	aa c0       	rjmp	.+340    	; 0x23a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a8 c0       	rjmp	.+336    	; 0x23a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a6 c0       	rjmp	.+332    	; 0x23a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a4 c0       	rjmp	.+328    	; 0x23a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a2 c0       	rjmp	.+324    	; 0x23a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a0 c0       	rjmp	.+320    	; 0x23a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9e c0       	rjmp	.+316    	; 0x23a <__bad_interrupt>
      fe:	00 00       	nop
     100:	9c c0       	rjmp	.+312    	; 0x23a <__bad_interrupt>
     102:	00 00       	nop
     104:	9a c0       	rjmp	.+308    	; 0x23a <__bad_interrupt>
     106:	00 00       	nop
     108:	98 c0       	rjmp	.+304    	; 0x23a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	96 c0       	rjmp	.+300    	; 0x23a <__bad_interrupt>
     10e:	00 00       	nop
     110:	94 c0       	rjmp	.+296    	; 0x23a <__bad_interrupt>
     112:	00 00       	nop
     114:	92 c0       	rjmp	.+292    	; 0x23a <__bad_interrupt>
     116:	00 00       	nop
     118:	90 c0       	rjmp	.+288    	; 0x23a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	e1 c7       	rjmp	.+4034   	; 0x10e0 <__vector_71>
     11e:	00 00       	nop
     120:	8c c0       	rjmp	.+280    	; 0x23a <__bad_interrupt>
     122:	00 00       	nop
     124:	8a c0       	rjmp	.+276    	; 0x23a <__bad_interrupt>
     126:	00 00       	nop
     128:	88 c0       	rjmp	.+272    	; 0x23a <__bad_interrupt>
     12a:	00 00       	nop
     12c:	86 c0       	rjmp	.+268    	; 0x23a <__bad_interrupt>
     12e:	00 00       	nop
     130:	84 c0       	rjmp	.+264    	; 0x23a <__bad_interrupt>
     132:	00 00       	nop
     134:	55 c2       	rjmp	.+1194   	; 0x5e0 <__vector_77>
     136:	00 00       	nop
     138:	80 c2       	rjmp	.+1280   	; 0x63a <__vector_78>
     13a:	00 00       	nop
     13c:	ab c2       	rjmp	.+1366   	; 0x694 <__vector_79>
     13e:	00 00       	nop
     140:	d6 c2       	rjmp	.+1452   	; 0x6ee <__vector_80>
     142:	00 00       	nop
     144:	01 c3       	rjmp	.+1538   	; 0x748 <__vector_81>
     146:	00 00       	nop
     148:	2c c3       	rjmp	.+1624   	; 0x7a2 <__vector_82>
     14a:	00 00       	nop
     14c:	57 c3       	rjmp	.+1710   	; 0x7fc <__vector_83>
     14e:	00 00       	nop
     150:	82 c3       	rjmp	.+1796   	; 0x856 <__vector_84>
     152:	00 00       	nop
     154:	ad c3       	rjmp	.+1882   	; 0x8b0 <__vector_85>
     156:	00 00       	nop
     158:	d8 c3       	rjmp	.+1968   	; 0x90a <__vector_86>
     15a:	00 00       	nop
     15c:	6e c0       	rjmp	.+220    	; 0x23a <__bad_interrupt>
     15e:	00 00       	nop
     160:	6c c0       	rjmp	.+216    	; 0x23a <__bad_interrupt>
     162:	00 00       	nop
     164:	6a c0       	rjmp	.+212    	; 0x23a <__bad_interrupt>
     166:	00 00       	nop
     168:	68 c0       	rjmp	.+208    	; 0x23a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	66 c0       	rjmp	.+204    	; 0x23a <__bad_interrupt>
     16e:	00 00       	nop
     170:	64 c0       	rjmp	.+200    	; 0x23a <__bad_interrupt>
     172:	00 00       	nop
     174:	62 c0       	rjmp	.+196    	; 0x23a <__bad_interrupt>
     176:	00 00       	nop
     178:	60 c0       	rjmp	.+192    	; 0x23a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5e c0       	rjmp	.+188    	; 0x23a <__bad_interrupt>
     17e:	00 00       	nop
     180:	5c c0       	rjmp	.+184    	; 0x23a <__bad_interrupt>
     182:	00 00       	nop
     184:	5a c0       	rjmp	.+180    	; 0x23a <__bad_interrupt>
     186:	00 00       	nop
     188:	58 c0       	rjmp	.+176    	; 0x23a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	56 c0       	rjmp	.+172    	; 0x23a <__bad_interrupt>
     18e:	00 00       	nop
     190:	54 c0       	rjmp	.+168    	; 0x23a <__bad_interrupt>
     192:	00 00       	nop
     194:	52 c0       	rjmp	.+164    	; 0x23a <__bad_interrupt>
     196:	00 00       	nop
     198:	50 c0       	rjmp	.+160    	; 0x23a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4e c0       	rjmp	.+156    	; 0x23a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4c c0       	rjmp	.+152    	; 0x23a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4a c0       	rjmp	.+148    	; 0x23a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	48 c0       	rjmp	.+144    	; 0x23a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	46 c0       	rjmp	.+140    	; 0x23a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	9b c5       	rjmp	.+2870   	; 0xce8 <__vector_108>
     1b2:	00 00       	nop
     1b4:	c6 c5       	rjmp	.+2956   	; 0xd42 <__vector_109>
     1b6:	00 00       	nop
     1b8:	f1 c5       	rjmp	.+3042   	; 0xd9c <__vector_110>
     1ba:	00 00       	nop
     1bc:	1c c6       	rjmp	.+3128   	; 0xdf6 <__vector_111>
     1be:	00 00       	nop
     1c0:	47 c6       	rjmp	.+3214   	; 0xe50 <__vector_112>
     1c2:	00 00       	nop
     1c4:	72 c6       	rjmp	.+3300   	; 0xeaa <__vector_113>
     1c6:	00 00       	nop
     1c8:	38 c0       	rjmp	.+112    	; 0x23a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	36 c0       	rjmp	.+108    	; 0x23a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	34 c0       	rjmp	.+104    	; 0x23a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	32 c0       	rjmp	.+100    	; 0x23a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	30 c0       	rjmp	.+96     	; 0x23a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	2e c0       	rjmp	.+92     	; 0x23a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2c c0       	rjmp	.+88     	; 0x23a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2a c0       	rjmp	.+84     	; 0x23a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	28 c0       	rjmp	.+80     	; 0x23a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	26 c0       	rjmp	.+76     	; 0x23a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	24 c0       	rjmp	.+72     	; 0x23a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	22 c0       	rjmp	.+68     	; 0x23a <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	20 c0       	rjmp	.+64     	; 0x23a <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e5       	ldi	r29, 0x5F	; 95
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	e0 e3       	ldi	r30, 0x30	; 48
     214:	f1 e1       	ldi	r31, 0x11	; 17
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a0 30       	cpi	r26, 0x00	; 0
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	20 e2       	ldi	r18, 0x20	; 32
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b0 e2       	ldi	r27, 0x20	; 32
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	aa 34       	cpi	r26, 0x4A	; 74
     232:	b2 07       	cpc	r27, r18
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	3d d7       	rcall	.+3706   	; 0x10b2 <main>
     238:	79 c7       	rjmp	.+3826   	; 0x112c <_exit>

0000023a <__bad_interrupt>:
     23a:	e2 ce       	rjmp	.-572    	; 0x0 <__vectors>

0000023c <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     23c:	8f ef       	ldi	r24, 0xFF	; 255
     23e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     242:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     246:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     24a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     24e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     252:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     256:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     25a:	08 95       	ret

0000025c <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     25c:	1f 92       	push	r1
     25e:	0f 92       	push	r0
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	0f 92       	push	r0
     264:	11 24       	eor	r1, r1
     266:	0b b6       	in	r0, 0x3b	; 59
     268:	0f 92       	push	r0
     26a:	2f 93       	push	r18
     26c:	3f 93       	push	r19
     26e:	4f 93       	push	r20
     270:	5f 93       	push	r21
     272:	6f 93       	push	r22
     274:	7f 93       	push	r23
     276:	8f 93       	push	r24
     278:	9f 93       	push	r25
     27a:	af 93       	push	r26
     27c:	bf 93       	push	r27
     27e:	ef 93       	push	r30
     280:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     282:	e0 91 46 20 	lds	r30, 0x2046	; 0x802046 <tc_tcc0_ovf_callback>
     286:	f0 91 47 20 	lds	r31, 0x2047	; 0x802047 <tc_tcc0_ovf_callback+0x1>
     28a:	30 97       	sbiw	r30, 0x00	; 0
     28c:	09 f0       	breq	.+2      	; 0x290 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     28e:	19 95       	eicall
	}
}
     290:	ff 91       	pop	r31
     292:	ef 91       	pop	r30
     294:	bf 91       	pop	r27
     296:	af 91       	pop	r26
     298:	9f 91       	pop	r25
     29a:	8f 91       	pop	r24
     29c:	7f 91       	pop	r23
     29e:	6f 91       	pop	r22
     2a0:	5f 91       	pop	r21
     2a2:	4f 91       	pop	r20
     2a4:	3f 91       	pop	r19
     2a6:	2f 91       	pop	r18
     2a8:	0f 90       	pop	r0
     2aa:	0b be       	out	0x3b, r0	; 59
     2ac:	0f 90       	pop	r0
     2ae:	0f be       	out	0x3f, r0	; 63
     2b0:	0f 90       	pop	r0
     2b2:	1f 90       	pop	r1
     2b4:	18 95       	reti

000002b6 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     2b6:	1f 92       	push	r1
     2b8:	0f 92       	push	r0
     2ba:	0f b6       	in	r0, 0x3f	; 63
     2bc:	0f 92       	push	r0
     2be:	11 24       	eor	r1, r1
     2c0:	0b b6       	in	r0, 0x3b	; 59
     2c2:	0f 92       	push	r0
     2c4:	2f 93       	push	r18
     2c6:	3f 93       	push	r19
     2c8:	4f 93       	push	r20
     2ca:	5f 93       	push	r21
     2cc:	6f 93       	push	r22
     2ce:	7f 93       	push	r23
     2d0:	8f 93       	push	r24
     2d2:	9f 93       	push	r25
     2d4:	af 93       	push	r26
     2d6:	bf 93       	push	r27
     2d8:	ef 93       	push	r30
     2da:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     2dc:	e0 91 44 20 	lds	r30, 0x2044	; 0x802044 <tc_tcc0_err_callback>
     2e0:	f0 91 45 20 	lds	r31, 0x2045	; 0x802045 <tc_tcc0_err_callback+0x1>
     2e4:	30 97       	sbiw	r30, 0x00	; 0
     2e6:	09 f0       	breq	.+2      	; 0x2ea <__vector_15+0x34>
		tc_tcc0_err_callback();
     2e8:	19 95       	eicall
	}
}
     2ea:	ff 91       	pop	r31
     2ec:	ef 91       	pop	r30
     2ee:	bf 91       	pop	r27
     2f0:	af 91       	pop	r26
     2f2:	9f 91       	pop	r25
     2f4:	8f 91       	pop	r24
     2f6:	7f 91       	pop	r23
     2f8:	6f 91       	pop	r22
     2fa:	5f 91       	pop	r21
     2fc:	4f 91       	pop	r20
     2fe:	3f 91       	pop	r19
     300:	2f 91       	pop	r18
     302:	0f 90       	pop	r0
     304:	0b be       	out	0x3b, r0	; 59
     306:	0f 90       	pop	r0
     308:	0f be       	out	0x3f, r0	; 63
     30a:	0f 90       	pop	r0
     30c:	1f 90       	pop	r1
     30e:	18 95       	reti

00000310 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     310:	1f 92       	push	r1
     312:	0f 92       	push	r0
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	0f 92       	push	r0
     318:	11 24       	eor	r1, r1
     31a:	0b b6       	in	r0, 0x3b	; 59
     31c:	0f 92       	push	r0
     31e:	2f 93       	push	r18
     320:	3f 93       	push	r19
     322:	4f 93       	push	r20
     324:	5f 93       	push	r21
     326:	6f 93       	push	r22
     328:	7f 93       	push	r23
     32a:	8f 93       	push	r24
     32c:	9f 93       	push	r25
     32e:	af 93       	push	r26
     330:	bf 93       	push	r27
     332:	ef 93       	push	r30
     334:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     336:	e0 91 42 20 	lds	r30, 0x2042	; 0x802042 <tc_tcc0_cca_callback>
     33a:	f0 91 43 20 	lds	r31, 0x2043	; 0x802043 <tc_tcc0_cca_callback+0x1>
     33e:	30 97       	sbiw	r30, 0x00	; 0
     340:	09 f0       	breq	.+2      	; 0x344 <__vector_16+0x34>
		tc_tcc0_cca_callback();
     342:	19 95       	eicall
	}
}
     344:	ff 91       	pop	r31
     346:	ef 91       	pop	r30
     348:	bf 91       	pop	r27
     34a:	af 91       	pop	r26
     34c:	9f 91       	pop	r25
     34e:	8f 91       	pop	r24
     350:	7f 91       	pop	r23
     352:	6f 91       	pop	r22
     354:	5f 91       	pop	r21
     356:	4f 91       	pop	r20
     358:	3f 91       	pop	r19
     35a:	2f 91       	pop	r18
     35c:	0f 90       	pop	r0
     35e:	0b be       	out	0x3b, r0	; 59
     360:	0f 90       	pop	r0
     362:	0f be       	out	0x3f, r0	; 63
     364:	0f 90       	pop	r0
     366:	1f 90       	pop	r1
     368:	18 95       	reti

0000036a <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     36a:	1f 92       	push	r1
     36c:	0f 92       	push	r0
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	0f 92       	push	r0
     372:	11 24       	eor	r1, r1
     374:	0b b6       	in	r0, 0x3b	; 59
     376:	0f 92       	push	r0
     378:	2f 93       	push	r18
     37a:	3f 93       	push	r19
     37c:	4f 93       	push	r20
     37e:	5f 93       	push	r21
     380:	6f 93       	push	r22
     382:	7f 93       	push	r23
     384:	8f 93       	push	r24
     386:	9f 93       	push	r25
     388:	af 93       	push	r26
     38a:	bf 93       	push	r27
     38c:	ef 93       	push	r30
     38e:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     390:	e0 91 40 20 	lds	r30, 0x2040	; 0x802040 <tc_tcc0_ccb_callback>
     394:	f0 91 41 20 	lds	r31, 0x2041	; 0x802041 <tc_tcc0_ccb_callback+0x1>
     398:	30 97       	sbiw	r30, 0x00	; 0
     39a:	09 f0       	breq	.+2      	; 0x39e <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     39c:	19 95       	eicall
	}
}
     39e:	ff 91       	pop	r31
     3a0:	ef 91       	pop	r30
     3a2:	bf 91       	pop	r27
     3a4:	af 91       	pop	r26
     3a6:	9f 91       	pop	r25
     3a8:	8f 91       	pop	r24
     3aa:	7f 91       	pop	r23
     3ac:	6f 91       	pop	r22
     3ae:	5f 91       	pop	r21
     3b0:	4f 91       	pop	r20
     3b2:	3f 91       	pop	r19
     3b4:	2f 91       	pop	r18
     3b6:	0f 90       	pop	r0
     3b8:	0b be       	out	0x3b, r0	; 59
     3ba:	0f 90       	pop	r0
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	0f 90       	pop	r0
     3c0:	1f 90       	pop	r1
     3c2:	18 95       	reti

000003c4 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     3c4:	1f 92       	push	r1
     3c6:	0f 92       	push	r0
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	0f 92       	push	r0
     3cc:	11 24       	eor	r1, r1
     3ce:	0b b6       	in	r0, 0x3b	; 59
     3d0:	0f 92       	push	r0
     3d2:	2f 93       	push	r18
     3d4:	3f 93       	push	r19
     3d6:	4f 93       	push	r20
     3d8:	5f 93       	push	r21
     3da:	6f 93       	push	r22
     3dc:	7f 93       	push	r23
     3de:	8f 93       	push	r24
     3e0:	9f 93       	push	r25
     3e2:	af 93       	push	r26
     3e4:	bf 93       	push	r27
     3e6:	ef 93       	push	r30
     3e8:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     3ea:	e0 91 3e 20 	lds	r30, 0x203E	; 0x80203e <tc_tcc0_ccc_callback>
     3ee:	f0 91 3f 20 	lds	r31, 0x203F	; 0x80203f <tc_tcc0_ccc_callback+0x1>
     3f2:	30 97       	sbiw	r30, 0x00	; 0
     3f4:	09 f0       	breq	.+2      	; 0x3f8 <__vector_18+0x34>
		tc_tcc0_ccc_callback();
     3f6:	19 95       	eicall
	}
}
     3f8:	ff 91       	pop	r31
     3fa:	ef 91       	pop	r30
     3fc:	bf 91       	pop	r27
     3fe:	af 91       	pop	r26
     400:	9f 91       	pop	r25
     402:	8f 91       	pop	r24
     404:	7f 91       	pop	r23
     406:	6f 91       	pop	r22
     408:	5f 91       	pop	r21
     40a:	4f 91       	pop	r20
     40c:	3f 91       	pop	r19
     40e:	2f 91       	pop	r18
     410:	0f 90       	pop	r0
     412:	0b be       	out	0x3b, r0	; 59
     414:	0f 90       	pop	r0
     416:	0f be       	out	0x3f, r0	; 63
     418:	0f 90       	pop	r0
     41a:	1f 90       	pop	r1
     41c:	18 95       	reti

0000041e <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     41e:	1f 92       	push	r1
     420:	0f 92       	push	r0
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	0f 92       	push	r0
     426:	11 24       	eor	r1, r1
     428:	0b b6       	in	r0, 0x3b	; 59
     42a:	0f 92       	push	r0
     42c:	2f 93       	push	r18
     42e:	3f 93       	push	r19
     430:	4f 93       	push	r20
     432:	5f 93       	push	r21
     434:	6f 93       	push	r22
     436:	7f 93       	push	r23
     438:	8f 93       	push	r24
     43a:	9f 93       	push	r25
     43c:	af 93       	push	r26
     43e:	bf 93       	push	r27
     440:	ef 93       	push	r30
     442:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     444:	e0 91 3c 20 	lds	r30, 0x203C	; 0x80203c <tc_tcc0_ccd_callback>
     448:	f0 91 3d 20 	lds	r31, 0x203D	; 0x80203d <tc_tcc0_ccd_callback+0x1>
     44c:	30 97       	sbiw	r30, 0x00	; 0
     44e:	09 f0       	breq	.+2      	; 0x452 <__vector_19+0x34>
		tc_tcc0_ccd_callback();
     450:	19 95       	eicall
	}
}
     452:	ff 91       	pop	r31
     454:	ef 91       	pop	r30
     456:	bf 91       	pop	r27
     458:	af 91       	pop	r26
     45a:	9f 91       	pop	r25
     45c:	8f 91       	pop	r24
     45e:	7f 91       	pop	r23
     460:	6f 91       	pop	r22
     462:	5f 91       	pop	r21
     464:	4f 91       	pop	r20
     466:	3f 91       	pop	r19
     468:	2f 91       	pop	r18
     46a:	0f 90       	pop	r0
     46c:	0b be       	out	0x3b, r0	; 59
     46e:	0f 90       	pop	r0
     470:	0f be       	out	0x3f, r0	; 63
     472:	0f 90       	pop	r0
     474:	1f 90       	pop	r1
     476:	18 95       	reti

00000478 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     478:	1f 92       	push	r1
     47a:	0f 92       	push	r0
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	0f 92       	push	r0
     480:	11 24       	eor	r1, r1
     482:	0b b6       	in	r0, 0x3b	; 59
     484:	0f 92       	push	r0
     486:	2f 93       	push	r18
     488:	3f 93       	push	r19
     48a:	4f 93       	push	r20
     48c:	5f 93       	push	r21
     48e:	6f 93       	push	r22
     490:	7f 93       	push	r23
     492:	8f 93       	push	r24
     494:	9f 93       	push	r25
     496:	af 93       	push	r26
     498:	bf 93       	push	r27
     49a:	ef 93       	push	r30
     49c:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     49e:	e0 91 3a 20 	lds	r30, 0x203A	; 0x80203a <tc_tcc1_ovf_callback>
     4a2:	f0 91 3b 20 	lds	r31, 0x203B	; 0x80203b <tc_tcc1_ovf_callback+0x1>
     4a6:	30 97       	sbiw	r30, 0x00	; 0
     4a8:	09 f0       	breq	.+2      	; 0x4ac <__vector_20+0x34>
		tc_tcc1_ovf_callback();
     4aa:	19 95       	eicall
	}
}
     4ac:	ff 91       	pop	r31
     4ae:	ef 91       	pop	r30
     4b0:	bf 91       	pop	r27
     4b2:	af 91       	pop	r26
     4b4:	9f 91       	pop	r25
     4b6:	8f 91       	pop	r24
     4b8:	7f 91       	pop	r23
     4ba:	6f 91       	pop	r22
     4bc:	5f 91       	pop	r21
     4be:	4f 91       	pop	r20
     4c0:	3f 91       	pop	r19
     4c2:	2f 91       	pop	r18
     4c4:	0f 90       	pop	r0
     4c6:	0b be       	out	0x3b, r0	; 59
     4c8:	0f 90       	pop	r0
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	0f 90       	pop	r0
     4ce:	1f 90       	pop	r1
     4d0:	18 95       	reti

000004d2 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     4d2:	1f 92       	push	r1
     4d4:	0f 92       	push	r0
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	0f 92       	push	r0
     4da:	11 24       	eor	r1, r1
     4dc:	0b b6       	in	r0, 0x3b	; 59
     4de:	0f 92       	push	r0
     4e0:	2f 93       	push	r18
     4e2:	3f 93       	push	r19
     4e4:	4f 93       	push	r20
     4e6:	5f 93       	push	r21
     4e8:	6f 93       	push	r22
     4ea:	7f 93       	push	r23
     4ec:	8f 93       	push	r24
     4ee:	9f 93       	push	r25
     4f0:	af 93       	push	r26
     4f2:	bf 93       	push	r27
     4f4:	ef 93       	push	r30
     4f6:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     4f8:	e0 91 38 20 	lds	r30, 0x2038	; 0x802038 <tc_tcc1_err_callback>
     4fc:	f0 91 39 20 	lds	r31, 0x2039	; 0x802039 <tc_tcc1_err_callback+0x1>
     500:	30 97       	sbiw	r30, 0x00	; 0
     502:	09 f0       	breq	.+2      	; 0x506 <__vector_21+0x34>
		tc_tcc1_err_callback();
     504:	19 95       	eicall
	}
}
     506:	ff 91       	pop	r31
     508:	ef 91       	pop	r30
     50a:	bf 91       	pop	r27
     50c:	af 91       	pop	r26
     50e:	9f 91       	pop	r25
     510:	8f 91       	pop	r24
     512:	7f 91       	pop	r23
     514:	6f 91       	pop	r22
     516:	5f 91       	pop	r21
     518:	4f 91       	pop	r20
     51a:	3f 91       	pop	r19
     51c:	2f 91       	pop	r18
     51e:	0f 90       	pop	r0
     520:	0b be       	out	0x3b, r0	; 59
     522:	0f 90       	pop	r0
     524:	0f be       	out	0x3f, r0	; 63
     526:	0f 90       	pop	r0
     528:	1f 90       	pop	r1
     52a:	18 95       	reti

0000052c <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     52c:	1f 92       	push	r1
     52e:	0f 92       	push	r0
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	0f 92       	push	r0
     534:	11 24       	eor	r1, r1
     536:	0b b6       	in	r0, 0x3b	; 59
     538:	0f 92       	push	r0
     53a:	2f 93       	push	r18
     53c:	3f 93       	push	r19
     53e:	4f 93       	push	r20
     540:	5f 93       	push	r21
     542:	6f 93       	push	r22
     544:	7f 93       	push	r23
     546:	8f 93       	push	r24
     548:	9f 93       	push	r25
     54a:	af 93       	push	r26
     54c:	bf 93       	push	r27
     54e:	ef 93       	push	r30
     550:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     552:	e0 91 36 20 	lds	r30, 0x2036	; 0x802036 <tc_tcc1_cca_callback>
     556:	f0 91 37 20 	lds	r31, 0x2037	; 0x802037 <tc_tcc1_cca_callback+0x1>
     55a:	30 97       	sbiw	r30, 0x00	; 0
     55c:	09 f0       	breq	.+2      	; 0x560 <__vector_22+0x34>
		tc_tcc1_cca_callback();
     55e:	19 95       	eicall
	}
}
     560:	ff 91       	pop	r31
     562:	ef 91       	pop	r30
     564:	bf 91       	pop	r27
     566:	af 91       	pop	r26
     568:	9f 91       	pop	r25
     56a:	8f 91       	pop	r24
     56c:	7f 91       	pop	r23
     56e:	6f 91       	pop	r22
     570:	5f 91       	pop	r21
     572:	4f 91       	pop	r20
     574:	3f 91       	pop	r19
     576:	2f 91       	pop	r18
     578:	0f 90       	pop	r0
     57a:	0b be       	out	0x3b, r0	; 59
     57c:	0f 90       	pop	r0
     57e:	0f be       	out	0x3f, r0	; 63
     580:	0f 90       	pop	r0
     582:	1f 90       	pop	r1
     584:	18 95       	reti

00000586 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     586:	1f 92       	push	r1
     588:	0f 92       	push	r0
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	0f 92       	push	r0
     58e:	11 24       	eor	r1, r1
     590:	0b b6       	in	r0, 0x3b	; 59
     592:	0f 92       	push	r0
     594:	2f 93       	push	r18
     596:	3f 93       	push	r19
     598:	4f 93       	push	r20
     59a:	5f 93       	push	r21
     59c:	6f 93       	push	r22
     59e:	7f 93       	push	r23
     5a0:	8f 93       	push	r24
     5a2:	9f 93       	push	r25
     5a4:	af 93       	push	r26
     5a6:	bf 93       	push	r27
     5a8:	ef 93       	push	r30
     5aa:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     5ac:	e0 91 34 20 	lds	r30, 0x2034	; 0x802034 <tc_tcc1_ccb_callback>
     5b0:	f0 91 35 20 	lds	r31, 0x2035	; 0x802035 <tc_tcc1_ccb_callback+0x1>
     5b4:	30 97       	sbiw	r30, 0x00	; 0
     5b6:	09 f0       	breq	.+2      	; 0x5ba <__vector_23+0x34>
		tc_tcc1_ccb_callback();
     5b8:	19 95       	eicall
	}
}
     5ba:	ff 91       	pop	r31
     5bc:	ef 91       	pop	r30
     5be:	bf 91       	pop	r27
     5c0:	af 91       	pop	r26
     5c2:	9f 91       	pop	r25
     5c4:	8f 91       	pop	r24
     5c6:	7f 91       	pop	r23
     5c8:	6f 91       	pop	r22
     5ca:	5f 91       	pop	r21
     5cc:	4f 91       	pop	r20
     5ce:	3f 91       	pop	r19
     5d0:	2f 91       	pop	r18
     5d2:	0f 90       	pop	r0
     5d4:	0b be       	out	0x3b, r0	; 59
     5d6:	0f 90       	pop	r0
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	0f 90       	pop	r0
     5dc:	1f 90       	pop	r1
     5de:	18 95       	reti

000005e0 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     5e0:	1f 92       	push	r1
     5e2:	0f 92       	push	r0
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	0f 92       	push	r0
     5e8:	11 24       	eor	r1, r1
     5ea:	0b b6       	in	r0, 0x3b	; 59
     5ec:	0f 92       	push	r0
     5ee:	2f 93       	push	r18
     5f0:	3f 93       	push	r19
     5f2:	4f 93       	push	r20
     5f4:	5f 93       	push	r21
     5f6:	6f 93       	push	r22
     5f8:	7f 93       	push	r23
     5fa:	8f 93       	push	r24
     5fc:	9f 93       	push	r25
     5fe:	af 93       	push	r26
     600:	bf 93       	push	r27
     602:	ef 93       	push	r30
     604:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     606:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <tc_tcd0_ovf_callback>
     60a:	f0 91 33 20 	lds	r31, 0x2033	; 0x802033 <tc_tcd0_ovf_callback+0x1>
     60e:	30 97       	sbiw	r30, 0x00	; 0
     610:	09 f0       	breq	.+2      	; 0x614 <__vector_77+0x34>
		tc_tcd0_ovf_callback();
     612:	19 95       	eicall
	}
}
     614:	ff 91       	pop	r31
     616:	ef 91       	pop	r30
     618:	bf 91       	pop	r27
     61a:	af 91       	pop	r26
     61c:	9f 91       	pop	r25
     61e:	8f 91       	pop	r24
     620:	7f 91       	pop	r23
     622:	6f 91       	pop	r22
     624:	5f 91       	pop	r21
     626:	4f 91       	pop	r20
     628:	3f 91       	pop	r19
     62a:	2f 91       	pop	r18
     62c:	0f 90       	pop	r0
     62e:	0b be       	out	0x3b, r0	; 59
     630:	0f 90       	pop	r0
     632:	0f be       	out	0x3f, r0	; 63
     634:	0f 90       	pop	r0
     636:	1f 90       	pop	r1
     638:	18 95       	reti

0000063a <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     63a:	1f 92       	push	r1
     63c:	0f 92       	push	r0
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	0f 92       	push	r0
     642:	11 24       	eor	r1, r1
     644:	0b b6       	in	r0, 0x3b	; 59
     646:	0f 92       	push	r0
     648:	2f 93       	push	r18
     64a:	3f 93       	push	r19
     64c:	4f 93       	push	r20
     64e:	5f 93       	push	r21
     650:	6f 93       	push	r22
     652:	7f 93       	push	r23
     654:	8f 93       	push	r24
     656:	9f 93       	push	r25
     658:	af 93       	push	r26
     65a:	bf 93       	push	r27
     65c:	ef 93       	push	r30
     65e:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     660:	e0 91 30 20 	lds	r30, 0x2030	; 0x802030 <tc_tcd0_err_callback>
     664:	f0 91 31 20 	lds	r31, 0x2031	; 0x802031 <tc_tcd0_err_callback+0x1>
     668:	30 97       	sbiw	r30, 0x00	; 0
     66a:	09 f0       	breq	.+2      	; 0x66e <__vector_78+0x34>
		tc_tcd0_err_callback();
     66c:	19 95       	eicall
	}
}
     66e:	ff 91       	pop	r31
     670:	ef 91       	pop	r30
     672:	bf 91       	pop	r27
     674:	af 91       	pop	r26
     676:	9f 91       	pop	r25
     678:	8f 91       	pop	r24
     67a:	7f 91       	pop	r23
     67c:	6f 91       	pop	r22
     67e:	5f 91       	pop	r21
     680:	4f 91       	pop	r20
     682:	3f 91       	pop	r19
     684:	2f 91       	pop	r18
     686:	0f 90       	pop	r0
     688:	0b be       	out	0x3b, r0	; 59
     68a:	0f 90       	pop	r0
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	0f 90       	pop	r0
     690:	1f 90       	pop	r1
     692:	18 95       	reti

00000694 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     694:	1f 92       	push	r1
     696:	0f 92       	push	r0
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	0f 92       	push	r0
     69c:	11 24       	eor	r1, r1
     69e:	0b b6       	in	r0, 0x3b	; 59
     6a0:	0f 92       	push	r0
     6a2:	2f 93       	push	r18
     6a4:	3f 93       	push	r19
     6a6:	4f 93       	push	r20
     6a8:	5f 93       	push	r21
     6aa:	6f 93       	push	r22
     6ac:	7f 93       	push	r23
     6ae:	8f 93       	push	r24
     6b0:	9f 93       	push	r25
     6b2:	af 93       	push	r26
     6b4:	bf 93       	push	r27
     6b6:	ef 93       	push	r30
     6b8:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     6ba:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <tc_tcd0_cca_callback>
     6be:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <tc_tcd0_cca_callback+0x1>
     6c2:	30 97       	sbiw	r30, 0x00	; 0
     6c4:	09 f0       	breq	.+2      	; 0x6c8 <__vector_79+0x34>
		tc_tcd0_cca_callback();
     6c6:	19 95       	eicall
	}
}
     6c8:	ff 91       	pop	r31
     6ca:	ef 91       	pop	r30
     6cc:	bf 91       	pop	r27
     6ce:	af 91       	pop	r26
     6d0:	9f 91       	pop	r25
     6d2:	8f 91       	pop	r24
     6d4:	7f 91       	pop	r23
     6d6:	6f 91       	pop	r22
     6d8:	5f 91       	pop	r21
     6da:	4f 91       	pop	r20
     6dc:	3f 91       	pop	r19
     6de:	2f 91       	pop	r18
     6e0:	0f 90       	pop	r0
     6e2:	0b be       	out	0x3b, r0	; 59
     6e4:	0f 90       	pop	r0
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	0f 90       	pop	r0
     6ea:	1f 90       	pop	r1
     6ec:	18 95       	reti

000006ee <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     6ee:	1f 92       	push	r1
     6f0:	0f 92       	push	r0
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	0f 92       	push	r0
     6f6:	11 24       	eor	r1, r1
     6f8:	0b b6       	in	r0, 0x3b	; 59
     6fa:	0f 92       	push	r0
     6fc:	2f 93       	push	r18
     6fe:	3f 93       	push	r19
     700:	4f 93       	push	r20
     702:	5f 93       	push	r21
     704:	6f 93       	push	r22
     706:	7f 93       	push	r23
     708:	8f 93       	push	r24
     70a:	9f 93       	push	r25
     70c:	af 93       	push	r26
     70e:	bf 93       	push	r27
     710:	ef 93       	push	r30
     712:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     714:	e0 91 2c 20 	lds	r30, 0x202C	; 0x80202c <tc_tcd0_ccb_callback>
     718:	f0 91 2d 20 	lds	r31, 0x202D	; 0x80202d <tc_tcd0_ccb_callback+0x1>
     71c:	30 97       	sbiw	r30, 0x00	; 0
     71e:	09 f0       	breq	.+2      	; 0x722 <__vector_80+0x34>
		tc_tcd0_ccb_callback();
     720:	19 95       	eicall
	}
}
     722:	ff 91       	pop	r31
     724:	ef 91       	pop	r30
     726:	bf 91       	pop	r27
     728:	af 91       	pop	r26
     72a:	9f 91       	pop	r25
     72c:	8f 91       	pop	r24
     72e:	7f 91       	pop	r23
     730:	6f 91       	pop	r22
     732:	5f 91       	pop	r21
     734:	4f 91       	pop	r20
     736:	3f 91       	pop	r19
     738:	2f 91       	pop	r18
     73a:	0f 90       	pop	r0
     73c:	0b be       	out	0x3b, r0	; 59
     73e:	0f 90       	pop	r0
     740:	0f be       	out	0x3f, r0	; 63
     742:	0f 90       	pop	r0
     744:	1f 90       	pop	r1
     746:	18 95       	reti

00000748 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     748:	1f 92       	push	r1
     74a:	0f 92       	push	r0
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	0f 92       	push	r0
     750:	11 24       	eor	r1, r1
     752:	0b b6       	in	r0, 0x3b	; 59
     754:	0f 92       	push	r0
     756:	2f 93       	push	r18
     758:	3f 93       	push	r19
     75a:	4f 93       	push	r20
     75c:	5f 93       	push	r21
     75e:	6f 93       	push	r22
     760:	7f 93       	push	r23
     762:	8f 93       	push	r24
     764:	9f 93       	push	r25
     766:	af 93       	push	r26
     768:	bf 93       	push	r27
     76a:	ef 93       	push	r30
     76c:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     76e:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <tc_tcd0_ccc_callback>
     772:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <tc_tcd0_ccc_callback+0x1>
     776:	30 97       	sbiw	r30, 0x00	; 0
     778:	09 f0       	breq	.+2      	; 0x77c <__vector_81+0x34>
		tc_tcd0_ccc_callback();
     77a:	19 95       	eicall
	}
}
     77c:	ff 91       	pop	r31
     77e:	ef 91       	pop	r30
     780:	bf 91       	pop	r27
     782:	af 91       	pop	r26
     784:	9f 91       	pop	r25
     786:	8f 91       	pop	r24
     788:	7f 91       	pop	r23
     78a:	6f 91       	pop	r22
     78c:	5f 91       	pop	r21
     78e:	4f 91       	pop	r20
     790:	3f 91       	pop	r19
     792:	2f 91       	pop	r18
     794:	0f 90       	pop	r0
     796:	0b be       	out	0x3b, r0	; 59
     798:	0f 90       	pop	r0
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	0f 90       	pop	r0
     79e:	1f 90       	pop	r1
     7a0:	18 95       	reti

000007a2 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     7a2:	1f 92       	push	r1
     7a4:	0f 92       	push	r0
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	0f 92       	push	r0
     7aa:	11 24       	eor	r1, r1
     7ac:	0b b6       	in	r0, 0x3b	; 59
     7ae:	0f 92       	push	r0
     7b0:	2f 93       	push	r18
     7b2:	3f 93       	push	r19
     7b4:	4f 93       	push	r20
     7b6:	5f 93       	push	r21
     7b8:	6f 93       	push	r22
     7ba:	7f 93       	push	r23
     7bc:	8f 93       	push	r24
     7be:	9f 93       	push	r25
     7c0:	af 93       	push	r26
     7c2:	bf 93       	push	r27
     7c4:	ef 93       	push	r30
     7c6:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     7c8:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <tc_tcd0_ccd_callback>
     7cc:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <tc_tcd0_ccd_callback+0x1>
     7d0:	30 97       	sbiw	r30, 0x00	; 0
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <__vector_82+0x34>
		tc_tcd0_ccd_callback();
     7d4:	19 95       	eicall
	}
}
     7d6:	ff 91       	pop	r31
     7d8:	ef 91       	pop	r30
     7da:	bf 91       	pop	r27
     7dc:	af 91       	pop	r26
     7de:	9f 91       	pop	r25
     7e0:	8f 91       	pop	r24
     7e2:	7f 91       	pop	r23
     7e4:	6f 91       	pop	r22
     7e6:	5f 91       	pop	r21
     7e8:	4f 91       	pop	r20
     7ea:	3f 91       	pop	r19
     7ec:	2f 91       	pop	r18
     7ee:	0f 90       	pop	r0
     7f0:	0b be       	out	0x3b, r0	; 59
     7f2:	0f 90       	pop	r0
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	0f 90       	pop	r0
     7f8:	1f 90       	pop	r1
     7fa:	18 95       	reti

000007fc <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     7fc:	1f 92       	push	r1
     7fe:	0f 92       	push	r0
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	0f 92       	push	r0
     804:	11 24       	eor	r1, r1
     806:	0b b6       	in	r0, 0x3b	; 59
     808:	0f 92       	push	r0
     80a:	2f 93       	push	r18
     80c:	3f 93       	push	r19
     80e:	4f 93       	push	r20
     810:	5f 93       	push	r21
     812:	6f 93       	push	r22
     814:	7f 93       	push	r23
     816:	8f 93       	push	r24
     818:	9f 93       	push	r25
     81a:	af 93       	push	r26
     81c:	bf 93       	push	r27
     81e:	ef 93       	push	r30
     820:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     822:	e0 91 26 20 	lds	r30, 0x2026	; 0x802026 <tc_tcd1_ovf_callback>
     826:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <tc_tcd1_ovf_callback+0x1>
     82a:	30 97       	sbiw	r30, 0x00	; 0
     82c:	09 f0       	breq	.+2      	; 0x830 <__vector_83+0x34>
		tc_tcd1_ovf_callback();
     82e:	19 95       	eicall
	}
}
     830:	ff 91       	pop	r31
     832:	ef 91       	pop	r30
     834:	bf 91       	pop	r27
     836:	af 91       	pop	r26
     838:	9f 91       	pop	r25
     83a:	8f 91       	pop	r24
     83c:	7f 91       	pop	r23
     83e:	6f 91       	pop	r22
     840:	5f 91       	pop	r21
     842:	4f 91       	pop	r20
     844:	3f 91       	pop	r19
     846:	2f 91       	pop	r18
     848:	0f 90       	pop	r0
     84a:	0b be       	out	0x3b, r0	; 59
     84c:	0f 90       	pop	r0
     84e:	0f be       	out	0x3f, r0	; 63
     850:	0f 90       	pop	r0
     852:	1f 90       	pop	r1
     854:	18 95       	reti

00000856 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     856:	1f 92       	push	r1
     858:	0f 92       	push	r0
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	0f 92       	push	r0
     85e:	11 24       	eor	r1, r1
     860:	0b b6       	in	r0, 0x3b	; 59
     862:	0f 92       	push	r0
     864:	2f 93       	push	r18
     866:	3f 93       	push	r19
     868:	4f 93       	push	r20
     86a:	5f 93       	push	r21
     86c:	6f 93       	push	r22
     86e:	7f 93       	push	r23
     870:	8f 93       	push	r24
     872:	9f 93       	push	r25
     874:	af 93       	push	r26
     876:	bf 93       	push	r27
     878:	ef 93       	push	r30
     87a:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     87c:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <tc_tcd1_err_callback>
     880:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <tc_tcd1_err_callback+0x1>
     884:	30 97       	sbiw	r30, 0x00	; 0
     886:	09 f0       	breq	.+2      	; 0x88a <__vector_84+0x34>
		tc_tcd1_err_callback();
     888:	19 95       	eicall
	}
}
     88a:	ff 91       	pop	r31
     88c:	ef 91       	pop	r30
     88e:	bf 91       	pop	r27
     890:	af 91       	pop	r26
     892:	9f 91       	pop	r25
     894:	8f 91       	pop	r24
     896:	7f 91       	pop	r23
     898:	6f 91       	pop	r22
     89a:	5f 91       	pop	r21
     89c:	4f 91       	pop	r20
     89e:	3f 91       	pop	r19
     8a0:	2f 91       	pop	r18
     8a2:	0f 90       	pop	r0
     8a4:	0b be       	out	0x3b, r0	; 59
     8a6:	0f 90       	pop	r0
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	0f 90       	pop	r0
     8ac:	1f 90       	pop	r1
     8ae:	18 95       	reti

000008b0 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     8b0:	1f 92       	push	r1
     8b2:	0f 92       	push	r0
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	0f 92       	push	r0
     8b8:	11 24       	eor	r1, r1
     8ba:	0b b6       	in	r0, 0x3b	; 59
     8bc:	0f 92       	push	r0
     8be:	2f 93       	push	r18
     8c0:	3f 93       	push	r19
     8c2:	4f 93       	push	r20
     8c4:	5f 93       	push	r21
     8c6:	6f 93       	push	r22
     8c8:	7f 93       	push	r23
     8ca:	8f 93       	push	r24
     8cc:	9f 93       	push	r25
     8ce:	af 93       	push	r26
     8d0:	bf 93       	push	r27
     8d2:	ef 93       	push	r30
     8d4:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     8d6:	e0 91 22 20 	lds	r30, 0x2022	; 0x802022 <tc_tcd1_cca_callback>
     8da:	f0 91 23 20 	lds	r31, 0x2023	; 0x802023 <tc_tcd1_cca_callback+0x1>
     8de:	30 97       	sbiw	r30, 0x00	; 0
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <__vector_85+0x34>
		tc_tcd1_cca_callback();
     8e2:	19 95       	eicall
	}
}
     8e4:	ff 91       	pop	r31
     8e6:	ef 91       	pop	r30
     8e8:	bf 91       	pop	r27
     8ea:	af 91       	pop	r26
     8ec:	9f 91       	pop	r25
     8ee:	8f 91       	pop	r24
     8f0:	7f 91       	pop	r23
     8f2:	6f 91       	pop	r22
     8f4:	5f 91       	pop	r21
     8f6:	4f 91       	pop	r20
     8f8:	3f 91       	pop	r19
     8fa:	2f 91       	pop	r18
     8fc:	0f 90       	pop	r0
     8fe:	0b be       	out	0x3b, r0	; 59
     900:	0f 90       	pop	r0
     902:	0f be       	out	0x3f, r0	; 63
     904:	0f 90       	pop	r0
     906:	1f 90       	pop	r1
     908:	18 95       	reti

0000090a <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     90a:	1f 92       	push	r1
     90c:	0f 92       	push	r0
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	0f 92       	push	r0
     912:	11 24       	eor	r1, r1
     914:	0b b6       	in	r0, 0x3b	; 59
     916:	0f 92       	push	r0
     918:	2f 93       	push	r18
     91a:	3f 93       	push	r19
     91c:	4f 93       	push	r20
     91e:	5f 93       	push	r21
     920:	6f 93       	push	r22
     922:	7f 93       	push	r23
     924:	8f 93       	push	r24
     926:	9f 93       	push	r25
     928:	af 93       	push	r26
     92a:	bf 93       	push	r27
     92c:	ef 93       	push	r30
     92e:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     930:	e0 91 20 20 	lds	r30, 0x2020	; 0x802020 <tc_tcd1_ccb_callback>
     934:	f0 91 21 20 	lds	r31, 0x2021	; 0x802021 <tc_tcd1_ccb_callback+0x1>
     938:	30 97       	sbiw	r30, 0x00	; 0
     93a:	09 f0       	breq	.+2      	; 0x93e <__vector_86+0x34>
		tc_tcd1_ccb_callback();
     93c:	19 95       	eicall
	}
}
     93e:	ff 91       	pop	r31
     940:	ef 91       	pop	r30
     942:	bf 91       	pop	r27
     944:	af 91       	pop	r26
     946:	9f 91       	pop	r25
     948:	8f 91       	pop	r24
     94a:	7f 91       	pop	r23
     94c:	6f 91       	pop	r22
     94e:	5f 91       	pop	r21
     950:	4f 91       	pop	r20
     952:	3f 91       	pop	r19
     954:	2f 91       	pop	r18
     956:	0f 90       	pop	r0
     958:	0b be       	out	0x3b, r0	; 59
     95a:	0f 90       	pop	r0
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	0f 90       	pop	r0
     960:	1f 90       	pop	r1
     962:	18 95       	reti

00000964 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
     964:	1f 92       	push	r1
     966:	0f 92       	push	r0
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	0f 92       	push	r0
     96c:	11 24       	eor	r1, r1
     96e:	0b b6       	in	r0, 0x3b	; 59
     970:	0f 92       	push	r0
     972:	2f 93       	push	r18
     974:	3f 93       	push	r19
     976:	4f 93       	push	r20
     978:	5f 93       	push	r21
     97a:	6f 93       	push	r22
     97c:	7f 93       	push	r23
     97e:	8f 93       	push	r24
     980:	9f 93       	push	r25
     982:	af 93       	push	r26
     984:	bf 93       	push	r27
     986:	ef 93       	push	r30
     988:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
     98a:	e0 91 1e 20 	lds	r30, 0x201E	; 0x80201e <tc_tce0_ovf_callback>
     98e:	f0 91 1f 20 	lds	r31, 0x201F	; 0x80201f <tc_tce0_ovf_callback+0x1>
     992:	30 97       	sbiw	r30, 0x00	; 0
     994:	09 f0       	breq	.+2      	; 0x998 <__vector_47+0x34>
		tc_tce0_ovf_callback();
     996:	19 95       	eicall
	}
}
     998:	ff 91       	pop	r31
     99a:	ef 91       	pop	r30
     99c:	bf 91       	pop	r27
     99e:	af 91       	pop	r26
     9a0:	9f 91       	pop	r25
     9a2:	8f 91       	pop	r24
     9a4:	7f 91       	pop	r23
     9a6:	6f 91       	pop	r22
     9a8:	5f 91       	pop	r21
     9aa:	4f 91       	pop	r20
     9ac:	3f 91       	pop	r19
     9ae:	2f 91       	pop	r18
     9b0:	0f 90       	pop	r0
     9b2:	0b be       	out	0x3b, r0	; 59
     9b4:	0f 90       	pop	r0
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	0f 90       	pop	r0
     9ba:	1f 90       	pop	r1
     9bc:	18 95       	reti

000009be <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     9be:	1f 92       	push	r1
     9c0:	0f 92       	push	r0
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	0f 92       	push	r0
     9c6:	11 24       	eor	r1, r1
     9c8:	0b b6       	in	r0, 0x3b	; 59
     9ca:	0f 92       	push	r0
     9cc:	2f 93       	push	r18
     9ce:	3f 93       	push	r19
     9d0:	4f 93       	push	r20
     9d2:	5f 93       	push	r21
     9d4:	6f 93       	push	r22
     9d6:	7f 93       	push	r23
     9d8:	8f 93       	push	r24
     9da:	9f 93       	push	r25
     9dc:	af 93       	push	r26
     9de:	bf 93       	push	r27
     9e0:	ef 93       	push	r30
     9e2:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     9e4:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <tc_tce0_err_callback>
     9e8:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <tc_tce0_err_callback+0x1>
     9ec:	30 97       	sbiw	r30, 0x00	; 0
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <__vector_48+0x34>
		tc_tce0_err_callback();
     9f0:	19 95       	eicall
	}
}
     9f2:	ff 91       	pop	r31
     9f4:	ef 91       	pop	r30
     9f6:	bf 91       	pop	r27
     9f8:	af 91       	pop	r26
     9fa:	9f 91       	pop	r25
     9fc:	8f 91       	pop	r24
     9fe:	7f 91       	pop	r23
     a00:	6f 91       	pop	r22
     a02:	5f 91       	pop	r21
     a04:	4f 91       	pop	r20
     a06:	3f 91       	pop	r19
     a08:	2f 91       	pop	r18
     a0a:	0f 90       	pop	r0
     a0c:	0b be       	out	0x3b, r0	; 59
     a0e:	0f 90       	pop	r0
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	0f 90       	pop	r0
     a14:	1f 90       	pop	r1
     a16:	18 95       	reti

00000a18 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     a18:	1f 92       	push	r1
     a1a:	0f 92       	push	r0
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	0f 92       	push	r0
     a20:	11 24       	eor	r1, r1
     a22:	0b b6       	in	r0, 0x3b	; 59
     a24:	0f 92       	push	r0
     a26:	2f 93       	push	r18
     a28:	3f 93       	push	r19
     a2a:	4f 93       	push	r20
     a2c:	5f 93       	push	r21
     a2e:	6f 93       	push	r22
     a30:	7f 93       	push	r23
     a32:	8f 93       	push	r24
     a34:	9f 93       	push	r25
     a36:	af 93       	push	r26
     a38:	bf 93       	push	r27
     a3a:	ef 93       	push	r30
     a3c:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
     a3e:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <tc_tce0_cca_callback>
     a42:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <tc_tce0_cca_callback+0x1>
     a46:	30 97       	sbiw	r30, 0x00	; 0
     a48:	09 f0       	breq	.+2      	; 0xa4c <__vector_49+0x34>
		tc_tce0_cca_callback();
     a4a:	19 95       	eicall
	}
}
     a4c:	ff 91       	pop	r31
     a4e:	ef 91       	pop	r30
     a50:	bf 91       	pop	r27
     a52:	af 91       	pop	r26
     a54:	9f 91       	pop	r25
     a56:	8f 91       	pop	r24
     a58:	7f 91       	pop	r23
     a5a:	6f 91       	pop	r22
     a5c:	5f 91       	pop	r21
     a5e:	4f 91       	pop	r20
     a60:	3f 91       	pop	r19
     a62:	2f 91       	pop	r18
     a64:	0f 90       	pop	r0
     a66:	0b be       	out	0x3b, r0	; 59
     a68:	0f 90       	pop	r0
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	0f 90       	pop	r0
     a6e:	1f 90       	pop	r1
     a70:	18 95       	reti

00000a72 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     a72:	1f 92       	push	r1
     a74:	0f 92       	push	r0
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	0f 92       	push	r0
     a7a:	11 24       	eor	r1, r1
     a7c:	0b b6       	in	r0, 0x3b	; 59
     a7e:	0f 92       	push	r0
     a80:	2f 93       	push	r18
     a82:	3f 93       	push	r19
     a84:	4f 93       	push	r20
     a86:	5f 93       	push	r21
     a88:	6f 93       	push	r22
     a8a:	7f 93       	push	r23
     a8c:	8f 93       	push	r24
     a8e:	9f 93       	push	r25
     a90:	af 93       	push	r26
     a92:	bf 93       	push	r27
     a94:	ef 93       	push	r30
     a96:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
     a98:	e0 91 18 20 	lds	r30, 0x2018	; 0x802018 <tc_tce0_ccb_callback>
     a9c:	f0 91 19 20 	lds	r31, 0x2019	; 0x802019 <tc_tce0_ccb_callback+0x1>
     aa0:	30 97       	sbiw	r30, 0x00	; 0
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <__vector_50+0x34>
		tc_tce0_ccb_callback();
     aa4:	19 95       	eicall
	}
}
     aa6:	ff 91       	pop	r31
     aa8:	ef 91       	pop	r30
     aaa:	bf 91       	pop	r27
     aac:	af 91       	pop	r26
     aae:	9f 91       	pop	r25
     ab0:	8f 91       	pop	r24
     ab2:	7f 91       	pop	r23
     ab4:	6f 91       	pop	r22
     ab6:	5f 91       	pop	r21
     ab8:	4f 91       	pop	r20
     aba:	3f 91       	pop	r19
     abc:	2f 91       	pop	r18
     abe:	0f 90       	pop	r0
     ac0:	0b be       	out	0x3b, r0	; 59
     ac2:	0f 90       	pop	r0
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	0f 90       	pop	r0
     ac8:	1f 90       	pop	r1
     aca:	18 95       	reti

00000acc <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
     acc:	1f 92       	push	r1
     ace:	0f 92       	push	r0
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	0f 92       	push	r0
     ad4:	11 24       	eor	r1, r1
     ad6:	0b b6       	in	r0, 0x3b	; 59
     ad8:	0f 92       	push	r0
     ada:	2f 93       	push	r18
     adc:	3f 93       	push	r19
     ade:	4f 93       	push	r20
     ae0:	5f 93       	push	r21
     ae2:	6f 93       	push	r22
     ae4:	7f 93       	push	r23
     ae6:	8f 93       	push	r24
     ae8:	9f 93       	push	r25
     aea:	af 93       	push	r26
     aec:	bf 93       	push	r27
     aee:	ef 93       	push	r30
     af0:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
     af2:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <tc_tce0_ccc_callback>
     af6:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <tc_tce0_ccc_callback+0x1>
     afa:	30 97       	sbiw	r30, 0x00	; 0
     afc:	09 f0       	breq	.+2      	; 0xb00 <__vector_51+0x34>
		tc_tce0_ccc_callback();
     afe:	19 95       	eicall
	}
}
     b00:	ff 91       	pop	r31
     b02:	ef 91       	pop	r30
     b04:	bf 91       	pop	r27
     b06:	af 91       	pop	r26
     b08:	9f 91       	pop	r25
     b0a:	8f 91       	pop	r24
     b0c:	7f 91       	pop	r23
     b0e:	6f 91       	pop	r22
     b10:	5f 91       	pop	r21
     b12:	4f 91       	pop	r20
     b14:	3f 91       	pop	r19
     b16:	2f 91       	pop	r18
     b18:	0f 90       	pop	r0
     b1a:	0b be       	out	0x3b, r0	; 59
     b1c:	0f 90       	pop	r0
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	0f 90       	pop	r0
     b22:	1f 90       	pop	r1
     b24:	18 95       	reti

00000b26 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
     b26:	1f 92       	push	r1
     b28:	0f 92       	push	r0
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	0f 92       	push	r0
     b2e:	11 24       	eor	r1, r1
     b30:	0b b6       	in	r0, 0x3b	; 59
     b32:	0f 92       	push	r0
     b34:	2f 93       	push	r18
     b36:	3f 93       	push	r19
     b38:	4f 93       	push	r20
     b3a:	5f 93       	push	r21
     b3c:	6f 93       	push	r22
     b3e:	7f 93       	push	r23
     b40:	8f 93       	push	r24
     b42:	9f 93       	push	r25
     b44:	af 93       	push	r26
     b46:	bf 93       	push	r27
     b48:	ef 93       	push	r30
     b4a:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
     b4c:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <tc_tce0_ccd_callback>
     b50:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <tc_tce0_ccd_callback+0x1>
     b54:	30 97       	sbiw	r30, 0x00	; 0
     b56:	09 f0       	breq	.+2      	; 0xb5a <__vector_52+0x34>
		tc_tce0_ccd_callback();
     b58:	19 95       	eicall
	}
}
     b5a:	ff 91       	pop	r31
     b5c:	ef 91       	pop	r30
     b5e:	bf 91       	pop	r27
     b60:	af 91       	pop	r26
     b62:	9f 91       	pop	r25
     b64:	8f 91       	pop	r24
     b66:	7f 91       	pop	r23
     b68:	6f 91       	pop	r22
     b6a:	5f 91       	pop	r21
     b6c:	4f 91       	pop	r20
     b6e:	3f 91       	pop	r19
     b70:	2f 91       	pop	r18
     b72:	0f 90       	pop	r0
     b74:	0b be       	out	0x3b, r0	; 59
     b76:	0f 90       	pop	r0
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	0f 90       	pop	r0
     b7c:	1f 90       	pop	r1
     b7e:	18 95       	reti

00000b80 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
     b80:	1f 92       	push	r1
     b82:	0f 92       	push	r0
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	0f 92       	push	r0
     b88:	11 24       	eor	r1, r1
     b8a:	0b b6       	in	r0, 0x3b	; 59
     b8c:	0f 92       	push	r0
     b8e:	2f 93       	push	r18
     b90:	3f 93       	push	r19
     b92:	4f 93       	push	r20
     b94:	5f 93       	push	r21
     b96:	6f 93       	push	r22
     b98:	7f 93       	push	r23
     b9a:	8f 93       	push	r24
     b9c:	9f 93       	push	r25
     b9e:	af 93       	push	r26
     ba0:	bf 93       	push	r27
     ba2:	ef 93       	push	r30
     ba4:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
     ba6:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <tc_tce1_ovf_callback>
     baa:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <tc_tce1_ovf_callback+0x1>
     bae:	30 97       	sbiw	r30, 0x00	; 0
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <__vector_53+0x34>
		tc_tce1_ovf_callback();
     bb2:	19 95       	eicall
	}
}
     bb4:	ff 91       	pop	r31
     bb6:	ef 91       	pop	r30
     bb8:	bf 91       	pop	r27
     bba:	af 91       	pop	r26
     bbc:	9f 91       	pop	r25
     bbe:	8f 91       	pop	r24
     bc0:	7f 91       	pop	r23
     bc2:	6f 91       	pop	r22
     bc4:	5f 91       	pop	r21
     bc6:	4f 91       	pop	r20
     bc8:	3f 91       	pop	r19
     bca:	2f 91       	pop	r18
     bcc:	0f 90       	pop	r0
     bce:	0b be       	out	0x3b, r0	; 59
     bd0:	0f 90       	pop	r0
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	0f 90       	pop	r0
     bd6:	1f 90       	pop	r1
     bd8:	18 95       	reti

00000bda <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
     bda:	1f 92       	push	r1
     bdc:	0f 92       	push	r0
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	0f 92       	push	r0
     be2:	11 24       	eor	r1, r1
     be4:	0b b6       	in	r0, 0x3b	; 59
     be6:	0f 92       	push	r0
     be8:	2f 93       	push	r18
     bea:	3f 93       	push	r19
     bec:	4f 93       	push	r20
     bee:	5f 93       	push	r21
     bf0:	6f 93       	push	r22
     bf2:	7f 93       	push	r23
     bf4:	8f 93       	push	r24
     bf6:	9f 93       	push	r25
     bf8:	af 93       	push	r26
     bfa:	bf 93       	push	r27
     bfc:	ef 93       	push	r30
     bfe:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
     c00:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <tc_tce1_err_callback>
     c04:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <tc_tce1_err_callback+0x1>
     c08:	30 97       	sbiw	r30, 0x00	; 0
     c0a:	09 f0       	breq	.+2      	; 0xc0e <__vector_54+0x34>
		tc_tce1_err_callback();
     c0c:	19 95       	eicall
	}
}
     c0e:	ff 91       	pop	r31
     c10:	ef 91       	pop	r30
     c12:	bf 91       	pop	r27
     c14:	af 91       	pop	r26
     c16:	9f 91       	pop	r25
     c18:	8f 91       	pop	r24
     c1a:	7f 91       	pop	r23
     c1c:	6f 91       	pop	r22
     c1e:	5f 91       	pop	r21
     c20:	4f 91       	pop	r20
     c22:	3f 91       	pop	r19
     c24:	2f 91       	pop	r18
     c26:	0f 90       	pop	r0
     c28:	0b be       	out	0x3b, r0	; 59
     c2a:	0f 90       	pop	r0
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	0f 90       	pop	r0
     c30:	1f 90       	pop	r1
     c32:	18 95       	reti

00000c34 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
     c34:	1f 92       	push	r1
     c36:	0f 92       	push	r0
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	0f 92       	push	r0
     c3c:	11 24       	eor	r1, r1
     c3e:	0b b6       	in	r0, 0x3b	; 59
     c40:	0f 92       	push	r0
     c42:	2f 93       	push	r18
     c44:	3f 93       	push	r19
     c46:	4f 93       	push	r20
     c48:	5f 93       	push	r21
     c4a:	6f 93       	push	r22
     c4c:	7f 93       	push	r23
     c4e:	8f 93       	push	r24
     c50:	9f 93       	push	r25
     c52:	af 93       	push	r26
     c54:	bf 93       	push	r27
     c56:	ef 93       	push	r30
     c58:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
     c5a:	e0 91 0e 20 	lds	r30, 0x200E	; 0x80200e <tc_tce1_cca_callback>
     c5e:	f0 91 0f 20 	lds	r31, 0x200F	; 0x80200f <tc_tce1_cca_callback+0x1>
     c62:	30 97       	sbiw	r30, 0x00	; 0
     c64:	09 f0       	breq	.+2      	; 0xc68 <__vector_55+0x34>
		tc_tce1_cca_callback();
     c66:	19 95       	eicall
	}
}
     c68:	ff 91       	pop	r31
     c6a:	ef 91       	pop	r30
     c6c:	bf 91       	pop	r27
     c6e:	af 91       	pop	r26
     c70:	9f 91       	pop	r25
     c72:	8f 91       	pop	r24
     c74:	7f 91       	pop	r23
     c76:	6f 91       	pop	r22
     c78:	5f 91       	pop	r21
     c7a:	4f 91       	pop	r20
     c7c:	3f 91       	pop	r19
     c7e:	2f 91       	pop	r18
     c80:	0f 90       	pop	r0
     c82:	0b be       	out	0x3b, r0	; 59
     c84:	0f 90       	pop	r0
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	0f 90       	pop	r0
     c8a:	1f 90       	pop	r1
     c8c:	18 95       	reti

00000c8e <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
     c8e:	1f 92       	push	r1
     c90:	0f 92       	push	r0
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	0f 92       	push	r0
     c96:	11 24       	eor	r1, r1
     c98:	0b b6       	in	r0, 0x3b	; 59
     c9a:	0f 92       	push	r0
     c9c:	2f 93       	push	r18
     c9e:	3f 93       	push	r19
     ca0:	4f 93       	push	r20
     ca2:	5f 93       	push	r21
     ca4:	6f 93       	push	r22
     ca6:	7f 93       	push	r23
     ca8:	8f 93       	push	r24
     caa:	9f 93       	push	r25
     cac:	af 93       	push	r26
     cae:	bf 93       	push	r27
     cb0:	ef 93       	push	r30
     cb2:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
     cb4:	e0 91 0c 20 	lds	r30, 0x200C	; 0x80200c <tc_tce1_ccb_callback>
     cb8:	f0 91 0d 20 	lds	r31, 0x200D	; 0x80200d <tc_tce1_ccb_callback+0x1>
     cbc:	30 97       	sbiw	r30, 0x00	; 0
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <__vector_56+0x34>
		tc_tce1_ccb_callback();
     cc0:	19 95       	eicall
	}
}
     cc2:	ff 91       	pop	r31
     cc4:	ef 91       	pop	r30
     cc6:	bf 91       	pop	r27
     cc8:	af 91       	pop	r26
     cca:	9f 91       	pop	r25
     ccc:	8f 91       	pop	r24
     cce:	7f 91       	pop	r23
     cd0:	6f 91       	pop	r22
     cd2:	5f 91       	pop	r21
     cd4:	4f 91       	pop	r20
     cd6:	3f 91       	pop	r19
     cd8:	2f 91       	pop	r18
     cda:	0f 90       	pop	r0
     cdc:	0b be       	out	0x3b, r0	; 59
     cde:	0f 90       	pop	r0
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	0f 90       	pop	r0
     ce4:	1f 90       	pop	r1
     ce6:	18 95       	reti

00000ce8 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
     ce8:	1f 92       	push	r1
     cea:	0f 92       	push	r0
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	0f 92       	push	r0
     cf0:	11 24       	eor	r1, r1
     cf2:	0b b6       	in	r0, 0x3b	; 59
     cf4:	0f 92       	push	r0
     cf6:	2f 93       	push	r18
     cf8:	3f 93       	push	r19
     cfa:	4f 93       	push	r20
     cfc:	5f 93       	push	r21
     cfe:	6f 93       	push	r22
     d00:	7f 93       	push	r23
     d02:	8f 93       	push	r24
     d04:	9f 93       	push	r25
     d06:	af 93       	push	r26
     d08:	bf 93       	push	r27
     d0a:	ef 93       	push	r30
     d0c:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
     d0e:	e0 91 0a 20 	lds	r30, 0x200A	; 0x80200a <tc_tcf0_ovf_callback>
     d12:	f0 91 0b 20 	lds	r31, 0x200B	; 0x80200b <tc_tcf0_ovf_callback+0x1>
     d16:	30 97       	sbiw	r30, 0x00	; 0
     d18:	09 f0       	breq	.+2      	; 0xd1c <__vector_108+0x34>
		tc_tcf0_ovf_callback();
     d1a:	19 95       	eicall
	}
}
     d1c:	ff 91       	pop	r31
     d1e:	ef 91       	pop	r30
     d20:	bf 91       	pop	r27
     d22:	af 91       	pop	r26
     d24:	9f 91       	pop	r25
     d26:	8f 91       	pop	r24
     d28:	7f 91       	pop	r23
     d2a:	6f 91       	pop	r22
     d2c:	5f 91       	pop	r21
     d2e:	4f 91       	pop	r20
     d30:	3f 91       	pop	r19
     d32:	2f 91       	pop	r18
     d34:	0f 90       	pop	r0
     d36:	0b be       	out	0x3b, r0	; 59
     d38:	0f 90       	pop	r0
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	0f 90       	pop	r0
     d3e:	1f 90       	pop	r1
     d40:	18 95       	reti

00000d42 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
     d42:	1f 92       	push	r1
     d44:	0f 92       	push	r0
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	0f 92       	push	r0
     d4a:	11 24       	eor	r1, r1
     d4c:	0b b6       	in	r0, 0x3b	; 59
     d4e:	0f 92       	push	r0
     d50:	2f 93       	push	r18
     d52:	3f 93       	push	r19
     d54:	4f 93       	push	r20
     d56:	5f 93       	push	r21
     d58:	6f 93       	push	r22
     d5a:	7f 93       	push	r23
     d5c:	8f 93       	push	r24
     d5e:	9f 93       	push	r25
     d60:	af 93       	push	r26
     d62:	bf 93       	push	r27
     d64:	ef 93       	push	r30
     d66:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
     d68:	e0 91 08 20 	lds	r30, 0x2008	; 0x802008 <tc_tcf0_err_callback>
     d6c:	f0 91 09 20 	lds	r31, 0x2009	; 0x802009 <tc_tcf0_err_callback+0x1>
     d70:	30 97       	sbiw	r30, 0x00	; 0
     d72:	09 f0       	breq	.+2      	; 0xd76 <__vector_109+0x34>
		tc_tcf0_err_callback();
     d74:	19 95       	eicall
	}
}
     d76:	ff 91       	pop	r31
     d78:	ef 91       	pop	r30
     d7a:	bf 91       	pop	r27
     d7c:	af 91       	pop	r26
     d7e:	9f 91       	pop	r25
     d80:	8f 91       	pop	r24
     d82:	7f 91       	pop	r23
     d84:	6f 91       	pop	r22
     d86:	5f 91       	pop	r21
     d88:	4f 91       	pop	r20
     d8a:	3f 91       	pop	r19
     d8c:	2f 91       	pop	r18
     d8e:	0f 90       	pop	r0
     d90:	0b be       	out	0x3b, r0	; 59
     d92:	0f 90       	pop	r0
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	0f 90       	pop	r0
     d98:	1f 90       	pop	r1
     d9a:	18 95       	reti

00000d9c <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
     d9c:	1f 92       	push	r1
     d9e:	0f 92       	push	r0
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	0f 92       	push	r0
     da4:	11 24       	eor	r1, r1
     da6:	0b b6       	in	r0, 0x3b	; 59
     da8:	0f 92       	push	r0
     daa:	2f 93       	push	r18
     dac:	3f 93       	push	r19
     dae:	4f 93       	push	r20
     db0:	5f 93       	push	r21
     db2:	6f 93       	push	r22
     db4:	7f 93       	push	r23
     db6:	8f 93       	push	r24
     db8:	9f 93       	push	r25
     dba:	af 93       	push	r26
     dbc:	bf 93       	push	r27
     dbe:	ef 93       	push	r30
     dc0:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
     dc2:	e0 91 06 20 	lds	r30, 0x2006	; 0x802006 <tc_tcf0_cca_callback>
     dc6:	f0 91 07 20 	lds	r31, 0x2007	; 0x802007 <tc_tcf0_cca_callback+0x1>
     dca:	30 97       	sbiw	r30, 0x00	; 0
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <__vector_110+0x34>
		tc_tcf0_cca_callback();
     dce:	19 95       	eicall
	}
}
     dd0:	ff 91       	pop	r31
     dd2:	ef 91       	pop	r30
     dd4:	bf 91       	pop	r27
     dd6:	af 91       	pop	r26
     dd8:	9f 91       	pop	r25
     dda:	8f 91       	pop	r24
     ddc:	7f 91       	pop	r23
     dde:	6f 91       	pop	r22
     de0:	5f 91       	pop	r21
     de2:	4f 91       	pop	r20
     de4:	3f 91       	pop	r19
     de6:	2f 91       	pop	r18
     de8:	0f 90       	pop	r0
     dea:	0b be       	out	0x3b, r0	; 59
     dec:	0f 90       	pop	r0
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	0f 90       	pop	r0
     df2:	1f 90       	pop	r1
     df4:	18 95       	reti

00000df6 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
     df6:	1f 92       	push	r1
     df8:	0f 92       	push	r0
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	0f 92       	push	r0
     dfe:	11 24       	eor	r1, r1
     e00:	0b b6       	in	r0, 0x3b	; 59
     e02:	0f 92       	push	r0
     e04:	2f 93       	push	r18
     e06:	3f 93       	push	r19
     e08:	4f 93       	push	r20
     e0a:	5f 93       	push	r21
     e0c:	6f 93       	push	r22
     e0e:	7f 93       	push	r23
     e10:	8f 93       	push	r24
     e12:	9f 93       	push	r25
     e14:	af 93       	push	r26
     e16:	bf 93       	push	r27
     e18:	ef 93       	push	r30
     e1a:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
     e1c:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <tc_tcf0_ccb_callback>
     e20:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <tc_tcf0_ccb_callback+0x1>
     e24:	30 97       	sbiw	r30, 0x00	; 0
     e26:	09 f0       	breq	.+2      	; 0xe2a <__vector_111+0x34>
		tc_tcf0_ccb_callback();
     e28:	19 95       	eicall
	}
}
     e2a:	ff 91       	pop	r31
     e2c:	ef 91       	pop	r30
     e2e:	bf 91       	pop	r27
     e30:	af 91       	pop	r26
     e32:	9f 91       	pop	r25
     e34:	8f 91       	pop	r24
     e36:	7f 91       	pop	r23
     e38:	6f 91       	pop	r22
     e3a:	5f 91       	pop	r21
     e3c:	4f 91       	pop	r20
     e3e:	3f 91       	pop	r19
     e40:	2f 91       	pop	r18
     e42:	0f 90       	pop	r0
     e44:	0b be       	out	0x3b, r0	; 59
     e46:	0f 90       	pop	r0
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	0f 90       	pop	r0
     e4c:	1f 90       	pop	r1
     e4e:	18 95       	reti

00000e50 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
     e50:	1f 92       	push	r1
     e52:	0f 92       	push	r0
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	0f 92       	push	r0
     e58:	11 24       	eor	r1, r1
     e5a:	0b b6       	in	r0, 0x3b	; 59
     e5c:	0f 92       	push	r0
     e5e:	2f 93       	push	r18
     e60:	3f 93       	push	r19
     e62:	4f 93       	push	r20
     e64:	5f 93       	push	r21
     e66:	6f 93       	push	r22
     e68:	7f 93       	push	r23
     e6a:	8f 93       	push	r24
     e6c:	9f 93       	push	r25
     e6e:	af 93       	push	r26
     e70:	bf 93       	push	r27
     e72:	ef 93       	push	r30
     e74:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
     e76:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <tc_tcf0_ccc_callback>
     e7a:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <tc_tcf0_ccc_callback+0x1>
     e7e:	30 97       	sbiw	r30, 0x00	; 0
     e80:	09 f0       	breq	.+2      	; 0xe84 <__vector_112+0x34>
		tc_tcf0_ccc_callback();
     e82:	19 95       	eicall
	}
}
     e84:	ff 91       	pop	r31
     e86:	ef 91       	pop	r30
     e88:	bf 91       	pop	r27
     e8a:	af 91       	pop	r26
     e8c:	9f 91       	pop	r25
     e8e:	8f 91       	pop	r24
     e90:	7f 91       	pop	r23
     e92:	6f 91       	pop	r22
     e94:	5f 91       	pop	r21
     e96:	4f 91       	pop	r20
     e98:	3f 91       	pop	r19
     e9a:	2f 91       	pop	r18
     e9c:	0f 90       	pop	r0
     e9e:	0b be       	out	0x3b, r0	; 59
     ea0:	0f 90       	pop	r0
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	0f 90       	pop	r0
     ea6:	1f 90       	pop	r1
     ea8:	18 95       	reti

00000eaa <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
     eaa:	1f 92       	push	r1
     eac:	0f 92       	push	r0
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	0f 92       	push	r0
     eb2:	11 24       	eor	r1, r1
     eb4:	0b b6       	in	r0, 0x3b	; 59
     eb6:	0f 92       	push	r0
     eb8:	2f 93       	push	r18
     eba:	3f 93       	push	r19
     ebc:	4f 93       	push	r20
     ebe:	5f 93       	push	r21
     ec0:	6f 93       	push	r22
     ec2:	7f 93       	push	r23
     ec4:	8f 93       	push	r24
     ec6:	9f 93       	push	r25
     ec8:	af 93       	push	r26
     eca:	bf 93       	push	r27
     ecc:	ef 93       	push	r30
     ece:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
     ed0:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_end>
     ed4:	f0 91 01 20 	lds	r31, 0x2001	; 0x802001 <__data_end+0x1>
     ed8:	30 97       	sbiw	r30, 0x00	; 0
     eda:	09 f0       	breq	.+2      	; 0xede <__vector_113+0x34>
		tc_tcf0_ccd_callback();
     edc:	19 95       	eicall
	}
}
     ede:	ff 91       	pop	r31
     ee0:	ef 91       	pop	r30
     ee2:	bf 91       	pop	r27
     ee4:	af 91       	pop	r26
     ee6:	9f 91       	pop	r25
     ee8:	8f 91       	pop	r24
     eea:	7f 91       	pop	r23
     eec:	6f 91       	pop	r22
     eee:	5f 91       	pop	r21
     ef0:	4f 91       	pop	r20
     ef2:	3f 91       	pop	r19
     ef4:	2f 91       	pop	r18
     ef6:	0f 90       	pop	r0
     ef8:	0b be       	out	0x3b, r0	; 59
     efa:	0f 90       	pop	r0
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	0f 90       	pop	r0
     f00:	1f 90       	pop	r1
     f02:	18 95       	reti

00000f04 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     f0e:	c6 2f       	mov	r28, r22
     f10:	d0 e0       	ldi	r29, 0x00	; 0
     f12:	de 01       	movw	r26, r28
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <ioport_configure_port_pin+0x18>
     f18:	b5 95       	asr	r27
     f1a:	a7 95       	ror	r26
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <ioport_configure_port_pin+0x14>
     f20:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     f22:	50 8b       	std	Z+16, r21	; 0x10
     f24:	2f 5f       	subi	r18, 0xFF	; 255
     f26:	3f 4f       	sbci	r19, 0xFF	; 255
     f28:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     f2a:	28 30       	cpi	r18, 0x08	; 8
     f2c:	31 05       	cpc	r19, r1
     f2e:	89 f7       	brne	.-30     	; 0xf12 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     f30:	40 ff       	sbrs	r20, 0
     f32:	0a c0       	rjmp	.+20     	; 0xf48 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     f34:	41 ff       	sbrs	r20, 1
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     f38:	fc 01       	movw	r30, r24
     f3a:	65 83       	std	Z+5, r22	; 0x05
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     f3e:	fc 01       	movw	r30, r24
     f40:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     f42:	fc 01       	movw	r30, r24
     f44:	61 83       	std	Z+1, r22	; 0x01
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     f48:	fc 01       	movw	r30, r24
     f4a:	62 83       	std	Z+2, r22	; 0x02
	}
}
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	08 95       	ret

00000f52 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     f52:	43 e0       	ldi	r20, 0x03	; 3
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	61 e0       	ldi	r22, 0x01	; 1
     f58:	80 ee       	ldi	r24, 0xE0	; 224
     f5a:	97 e0       	ldi	r25, 0x07	; 7
     f5c:	d3 df       	rcall	.-90     	; 0xf04 <ioport_configure_port_pin>
     f5e:	43 e0       	ldi	r20, 0x03	; 3
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	62 e0       	ldi	r22, 0x02	; 2
     f64:	80 ee       	ldi	r24, 0xE0	; 224
     f66:	97 e0       	ldi	r25, 0x07	; 7
     f68:	cd df       	rcall	.-102    	; 0xf04 <ioport_configure_port_pin>
     f6a:	43 e0       	ldi	r20, 0x03	; 3
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	60 e1       	ldi	r22, 0x10	; 16
     f70:	80 e6       	ldi	r24, 0x60	; 96
     f72:	96 e0       	ldi	r25, 0x06	; 6
     f74:	c7 df       	rcall	.-114    	; 0xf04 <ioport_configure_port_pin>
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	50 e4       	ldi	r21, 0x40	; 64
     f7a:	60 e2       	ldi	r22, 0x20	; 32
     f7c:	80 e6       	ldi	r24, 0x60	; 96
     f7e:	96 e0       	ldi	r25, 0x06	; 6
     f80:	c1 df       	rcall	.-126    	; 0xf04 <ioport_configure_port_pin>
     f82:	40 e0       	ldi	r20, 0x00	; 0
     f84:	5b e1       	ldi	r21, 0x1B	; 27
     f86:	60 e2       	ldi	r22, 0x20	; 32
     f88:	80 e8       	ldi	r24, 0x80	; 128
     f8a:	96 e0       	ldi	r25, 0x06	; 6
     f8c:	bb df       	rcall	.-138    	; 0xf04 <ioport_configure_port_pin>
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	5b e1       	ldi	r21, 0x1B	; 27
     f92:	62 e0       	ldi	r22, 0x02	; 2
     f94:	80 ea       	ldi	r24, 0xA0	; 160
     f96:	96 e0       	ldi	r25, 0x06	; 6
     f98:	b5 df       	rcall	.-150    	; 0xf04 <ioport_configure_port_pin>
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	5b e1       	ldi	r21, 0x1B	; 27
     f9e:	64 e0       	ldi	r22, 0x04	; 4
     fa0:	80 ea       	ldi	r24, 0xA0	; 160
     fa2:	96 e0       	ldi	r25, 0x06	; 6
     fa4:	af df       	rcall	.-162    	; 0xf04 <ioport_configure_port_pin>
     fa6:	43 e0       	ldi	r20, 0x03	; 3
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	62 e0       	ldi	r22, 0x02	; 2
     fac:	80 e6       	ldi	r24, 0x60	; 96
     fae:	96 e0       	ldi	r25, 0x06	; 6
     fb0:	a9 df       	rcall	.-174    	; 0xf04 <ioport_configure_port_pin>
     fb2:	43 e0       	ldi	r20, 0x03	; 3
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	68 e0       	ldi	r22, 0x08	; 8
     fb8:	80 e6       	ldi	r24, 0x60	; 96
     fba:	96 e0       	ldi	r25, 0x06	; 6
     fbc:	a3 df       	rcall	.-186    	; 0xf04 <ioport_configure_port_pin>
     fbe:	43 e0       	ldi	r20, 0x03	; 3
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	68 e0       	ldi	r22, 0x08	; 8
     fc4:	80 ea       	ldi	r24, 0xA0	; 160
     fc6:	96 e0       	ldi	r25, 0x06	; 6
     fc8:	9d df       	rcall	.-198    	; 0xf04 <ioport_configure_port_pin>
     fca:	43 e0       	ldi	r20, 0x03	; 3
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	80 e6       	ldi	r24, 0x60	; 96
     fd2:	96 e0       	ldi	r25, 0x06	; 6
     fd4:	97 df       	rcall	.-210    	; 0xf04 <ioport_configure_port_pin>
     fd6:	43 e0       	ldi	r20, 0x03	; 3
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	68 e0       	ldi	r22, 0x08	; 8
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	96 e0       	ldi	r25, 0x06	; 6
     fe0:	91 df       	rcall	.-222    	; 0xf04 <ioport_configure_port_pin>
     fe2:	41 e0       	ldi	r20, 0x01	; 1
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	60 e1       	ldi	r22, 0x10	; 16
     fe8:	80 e8       	ldi	r24, 0x80	; 128
     fea:	96 e0       	ldi	r25, 0x06	; 6
     fec:	8b df       	rcall	.-234    	; 0xf04 <ioport_configure_port_pin>
     fee:	43 e0       	ldi	r20, 0x03	; 3
     ff0:	50 e0       	ldi	r21, 0x00	; 0
     ff2:	62 e0       	ldi	r22, 0x02	; 2
     ff4:	80 e6       	ldi	r24, 0x60	; 96
     ff6:	96 e0       	ldi	r25, 0x06	; 6
     ff8:	85 df       	rcall	.-246    	; 0xf04 <ioport_configure_port_pin>
     ffa:	43 e0       	ldi	r20, 0x03	; 3
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	68 e0       	ldi	r22, 0x08	; 8
    1000:	80 e6       	ldi	r24, 0x60	; 96
    1002:	96 e0       	ldi	r25, 0x06	; 6
    1004:	7f df       	rcall	.-258    	; 0xf04 <ioport_configure_port_pin>
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	64 e0       	ldi	r22, 0x04	; 4
    100c:	80 e6       	ldi	r24, 0x60	; 96
    100e:	96 e0       	ldi	r25, 0x06	; 6
    1010:	79 df       	rcall	.-270    	; 0xf04 <ioport_configure_port_pin>
    1012:	43 e0       	ldi	r20, 0x03	; 3
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	60 e1       	ldi	r22, 0x10	; 16
    1018:	80 ea       	ldi	r24, 0xA0	; 160
    101a:	96 e0       	ldi	r25, 0x06	; 6
    101c:	73 df       	rcall	.-282    	; 0xf04 <ioport_configure_port_pin>
    101e:	40 e0       	ldi	r20, 0x00	; 0
    1020:	50 e0       	ldi	r21, 0x00	; 0
    1022:	61 e0       	ldi	r22, 0x01	; 1
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	96 e0       	ldi	r25, 0x06	; 6
    1028:	6d df       	rcall	.-294    	; 0xf04 <ioport_configure_port_pin>
    102a:	40 e0       	ldi	r20, 0x00	; 0
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	64 e0       	ldi	r22, 0x04	; 4
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	96 e0       	ldi	r25, 0x06	; 6
    1034:	67 df       	rcall	.-306    	; 0xf04 <ioport_configure_port_pin>
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	62 e0       	ldi	r22, 0x02	; 2
    103c:	80 e2       	ldi	r24, 0x20	; 32
    103e:	96 e0       	ldi	r25, 0x06	; 6
    1040:	61 df       	rcall	.-318    	; 0xf04 <ioport_configure_port_pin>
    1042:	43 e0       	ldi	r20, 0x03	; 3
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	68 e0       	ldi	r22, 0x08	; 8
    1048:	80 e4       	ldi	r24, 0x40	; 64
    104a:	96 e0       	ldi	r25, 0x06	; 6
    104c:	5b df       	rcall	.-330    	; 0xf04 <ioport_configure_port_pin>
    104e:	40 e0       	ldi	r20, 0x00	; 0
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	64 e0       	ldi	r22, 0x04	; 4
    1054:	80 e4       	ldi	r24, 0x40	; 64
    1056:	96 e0       	ldi	r25, 0x06	; 6
    1058:	55 df       	rcall	.-342    	; 0xf04 <ioport_configure_port_pin>
    105a:	43 e0       	ldi	r20, 0x03	; 3
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	68 e0       	ldi	r22, 0x08	; 8
    1060:	80 e6       	ldi	r24, 0x60	; 96
    1062:	96 e0       	ldi	r25, 0x06	; 6
    1064:	4f df       	rcall	.-354    	; 0xf04 <ioport_configure_port_pin>
    1066:	40 e0       	ldi	r20, 0x00	; 0
    1068:	50 e0       	ldi	r21, 0x00	; 0
    106a:	64 e0       	ldi	r22, 0x04	; 4
    106c:	80 e6       	ldi	r24, 0x60	; 96
    106e:	96 e0       	ldi	r25, 0x06	; 6
    1070:	49 df       	rcall	.-366    	; 0xf04 <ioport_configure_port_pin>
    1072:	43 e0       	ldi	r20, 0x03	; 3
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	68 e0       	ldi	r22, 0x08	; 8
    1078:	80 e8       	ldi	r24, 0x80	; 128
    107a:	96 e0       	ldi	r25, 0x06	; 6
    107c:	43 df       	rcall	.-378    	; 0xf04 <ioport_configure_port_pin>
    107e:	40 e0       	ldi	r20, 0x00	; 0
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	64 e0       	ldi	r22, 0x04	; 4
    1084:	80 e8       	ldi	r24, 0x80	; 128
    1086:	96 e0       	ldi	r25, 0x06	; 6
    1088:	3d cf       	rjmp	.-390    	; 0xf04 <ioport_configure_port_pin>
    108a:	08 95       	ret

0000108c <ADC_init>:

}


void ADC_init(void){
CCP = 0xD8;
    108c:	88 ed       	ldi	r24, 0xD8	; 216
    108e:	84 bf       	out	0x34, r24	; 52
CLK.PSCTRL = CLK_PSADIV_2_gc;
    1090:	84 e0       	ldi	r24, 0x04	; 4
    1092:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
ADCA.CTRLB = ADC_CURRLIMIT_HIGH_gc;
    1096:	e0 e0       	ldi	r30, 0x00	; 0
    1098:	f2 e0       	ldi	r31, 0x02	; 2
    109a:	80 e6       	ldi	r24, 0x60	; 96
    109c:	81 83       	std	Z+1, r24	; 0x01
ADCA.REFCTRL = ADC_REFSEL_INTVCC_gc;
    109e:	80 e1       	ldi	r24, 0x10	; 16
    10a0:	82 83       	std	Z+2, r24	; 0x02
ADCA.PRESCALER = ADC_PRESCALER_DIV4_gc;
    10a2:	14 82       	std	Z+4, r1	; 0x04
ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	80 a3       	std	Z+32, r24	; 0x20
ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;
    10a8:	11 a2       	std	Z+33, r1	; 0x21
ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_HI_gc;
    10aa:	93 e0       	ldi	r25, 0x03	; 3
    10ac:	92 a3       	std	Z+34, r25	; 0x22
ADCA.CTRLA = ADC_ENABLE_bm;
    10ae:	80 83       	st	Z, r24
    10b0:	08 95       	ret

000010b2 <main>:
	
	


	sysclk_init();
	board_init();
    10b2:	c4 d8       	rcall	.-3704   	; 0x23c <sysclk_init>
    10b4:	4e df       	rcall	.-356    	; 0xf52 <board_init>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    10b6:	80 e2       	ldi	r24, 0x20	; 32
    10b8:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
/*
set_sleep_mode(SLEEP_MODE_PWR_SAVE);
sleep_enable();
sleep_cpu();
*/
	ADC_init();
    10bc:	e7 df       	rcall	.-50     	; 0x108c <ADC_init>
	
	set_sleep_mode(SLEEP_MODE_IDLE);
    10be:	e8 e4       	ldi	r30, 0x48	; 72
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	81 7f       	andi	r24, 0xF1	; 241
    10c6:	80 83       	st	Z, r24
	sleep_enable();
    10c8:	80 81       	ld	r24, Z
    10ca:	81 60       	ori	r24, 0x01	; 1
    10cc:	80 83       	st	Z, r24
	ADCA.CH0.CTRL = ADC_CH_START_bm;
    10ce:	80 e8       	ldi	r24, 0x80	; 128
    10d0:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
	PMIC.CTRL = PMIC_HILVLEN_bm;
    10d4:	84 e0       	ldi	r24, 0x04	; 4
    10d6:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    10da:	78 94       	sei
	while (1)
	{
	sleep_cpu();
    10dc:	88 95       	sleep
    10de:	fe cf       	rjmp	.-4      	; 0x10dc <main+0x2a>

000010e0 <__vector_71>:
	

	/* Insert application code here, after the board has been initialized. */
}

ISR (ADCA_CH0_vect){
    10e0:	1f 92       	push	r1
    10e2:	0f 92       	push	r0
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	0f 92       	push	r0
    10e8:	11 24       	eor	r1, r1
    10ea:	0b b6       	in	r0, 0x3b	; 59
    10ec:	0f 92       	push	r0
    10ee:	8f 93       	push	r24
    10f0:	9f 93       	push	r25
    10f2:	ef 93       	push	r30
    10f4:	ff 93       	push	r31
	//ADC results
	adc_results = ADCA_CH0RES;
    10f6:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
    10fa:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
    10fe:	80 93 48 20 	sts	0x2048, r24	; 0x802048 <adc_results>
    1102:	90 93 49 20 	sts	0x2049, r25	; 0x802049 <adc_results+0x1>
	ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
    1106:	e0 e0       	ldi	r30, 0x00	; 0
    1108:	f2 e0       	ldi	r31, 0x02	; 2
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	83 a3       	std	Z+35, r24	; 0x23
	//start conversion from ADC channel 0
	ADCA.CH0.CTRL = ADC_CH_START_bm;
    110e:	90 e8       	ldi	r25, 0x80	; 128
    1110:	90 a3       	std	Z+32, r25	; 0x20

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    1112:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <__TEXT_REGION_LENGTH__+0x7007e7>
	ioport_toggle_pin(LED0_GPIO);
    1116:	ff 91       	pop	r31
    1118:	ef 91       	pop	r30
    111a:	9f 91       	pop	r25
    111c:	8f 91       	pop	r24
    111e:	0f 90       	pop	r0
    1120:	0b be       	out	0x3b, r0	; 59
    1122:	0f 90       	pop	r0
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	0f 90       	pop	r0
    1128:	1f 90       	pop	r1
    112a:	18 95       	reti

0000112c <_exit>:
    112c:	f8 94       	cli

0000112e <__stop_program>:
    112e:	ff cf       	rjmp	.-2      	; 0x112e <__stop_program>
