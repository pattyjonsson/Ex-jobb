
TC_EXAMPLE11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000159a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000160e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000056  00802000  00802000  0000160e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000160e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00001640  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  00001688  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008c8a  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000043d6  00000000  00000000  0000a6a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004972  00000000  00000000  0000ea78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000141c  00000000  00000000  000133ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00030f5d  00000000  00000000  00014808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000034f4  00000000  00000000  00045765  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  00048c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b1ba  00000000  00000000  00048f31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	1c c1       	rjmp	.+568    	; 0x23e <__bad_interrupt>
       6:	00 00       	nop
       8:	1a c1       	rjmp	.+564    	; 0x23e <__bad_interrupt>
       a:	00 00       	nop
       c:	18 c1       	rjmp	.+560    	; 0x23e <__bad_interrupt>
       e:	00 00       	nop
      10:	16 c1       	rjmp	.+556    	; 0x23e <__bad_interrupt>
      12:	00 00       	nop
      14:	14 c1       	rjmp	.+552    	; 0x23e <__bad_interrupt>
      16:	00 00       	nop
      18:	12 c1       	rjmp	.+548    	; 0x23e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	10 c1       	rjmp	.+544    	; 0x23e <__bad_interrupt>
      1e:	00 00       	nop
      20:	0e c1       	rjmp	.+540    	; 0x23e <__bad_interrupt>
      22:	00 00       	nop
      24:	0c c1       	rjmp	.+536    	; 0x23e <__bad_interrupt>
      26:	00 00       	nop
      28:	0a c1       	rjmp	.+532    	; 0x23e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e0 c3       	rjmp	.+1984   	; 0x7ee <__vector_11>
      2e:	00 00       	nop
      30:	06 c1       	rjmp	.+524    	; 0x23e <__bad_interrupt>
      32:	00 00       	nop
      34:	04 c1       	rjmp	.+520    	; 0x23e <__bad_interrupt>
      36:	00 00       	nop
      38:	0f c4       	rjmp	.+2078   	; 0x858 <__vector_14>
      3a:	00 00       	nop
      3c:	3a c4       	rjmp	.+2164   	; 0x8b2 <__vector_15>
      3e:	00 00       	nop
      40:	65 c4       	rjmp	.+2250   	; 0x90c <__vector_16>
      42:	00 00       	nop
      44:	90 c4       	rjmp	.+2336   	; 0x966 <__vector_17>
      46:	00 00       	nop
      48:	bb c4       	rjmp	.+2422   	; 0x9c0 <__vector_18>
      4a:	00 00       	nop
      4c:	e6 c4       	rjmp	.+2508   	; 0xa1a <__vector_19>
      4e:	00 00       	nop
      50:	11 c5       	rjmp	.+2594   	; 0xa74 <__vector_20>
      52:	00 00       	nop
      54:	3c c5       	rjmp	.+2680   	; 0xace <__vector_21>
      56:	00 00       	nop
      58:	67 c5       	rjmp	.+2766   	; 0xb28 <__vector_22>
      5a:	00 00       	nop
      5c:	92 c5       	rjmp	.+2852   	; 0xb82 <__vector_23>
      5e:	00 00       	nop
      60:	ee c0       	rjmp	.+476    	; 0x23e <__bad_interrupt>
      62:	00 00       	nop
      64:	ec c0       	rjmp	.+472    	; 0x23e <__bad_interrupt>
      66:	00 00       	nop
      68:	ea c0       	rjmp	.+468    	; 0x23e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e8 c0       	rjmp	.+464    	; 0x23e <__bad_interrupt>
      6e:	00 00       	nop
      70:	e6 c0       	rjmp	.+460    	; 0x23e <__bad_interrupt>
      72:	00 00       	nop
      74:	e4 c0       	rjmp	.+456    	; 0x23e <__bad_interrupt>
      76:	00 00       	nop
      78:	e2 c0       	rjmp	.+452    	; 0x23e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e0 c0       	rjmp	.+448    	; 0x23e <__bad_interrupt>
      7e:	00 00       	nop
      80:	de c0       	rjmp	.+444    	; 0x23e <__bad_interrupt>
      82:	00 00       	nop
      84:	dc c0       	rjmp	.+440    	; 0x23e <__bad_interrupt>
      86:	00 00       	nop
      88:	da c0       	rjmp	.+436    	; 0x23e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d8 c0       	rjmp	.+432    	; 0x23e <__bad_interrupt>
      8e:	00 00       	nop
      90:	d6 c0       	rjmp	.+428    	; 0x23e <__bad_interrupt>
      92:	00 00       	nop
      94:	d4 c0       	rjmp	.+424    	; 0x23e <__bad_interrupt>
      96:	00 00       	nop
      98:	d2 c0       	rjmp	.+420    	; 0x23e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6e c2       	rjmp	.+1244   	; 0x57a <__vector_39>
      9e:	00 00       	nop
      a0:	9e c2       	rjmp	.+1340   	; 0x5de <__vector_40>
      a2:	00 00       	nop
      a4:	ce c2       	rjmp	.+1436   	; 0x642 <__vector_41>
      a6:	00 00       	nop
      a8:	fe c2       	rjmp	.+1532   	; 0x6a6 <__vector_42>
      aa:	00 00       	nop
      ac:	c8 c0       	rjmp	.+400    	; 0x23e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c6 c0       	rjmp	.+396    	; 0x23e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c4 c0       	rjmp	.+392    	; 0x23e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c2 c0       	rjmp	.+388    	; 0x23e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	51 c7       	rjmp	.+3746   	; 0xf60 <__vector_47>
      be:	00 00       	nop
      c0:	7c c7       	rjmp	.+3832   	; 0xfba <__vector_48>
      c2:	00 00       	nop
      c4:	a7 c7       	rjmp	.+3918   	; 0x1014 <__vector_49>
      c6:	00 00       	nop
      c8:	d2 c7       	rjmp	.+4004   	; 0x106e <__vector_50>
      ca:	00 00       	nop
      cc:	fd c7       	rjmp	.+4090   	; 0x10c8 <__vector_51>
      ce:	00 00       	nop
      d0:	0c 94 91 08 	jmp	0x1122	; 0x1122 <__vector_52>
      d4:	0c 94 be 08 	jmp	0x117c	; 0x117c <__vector_53>
      d8:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <__vector_54>
      dc:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__vector_55>
      e0:	0c 94 45 09 	jmp	0x128a	; 0x128a <__vector_56>
      e4:	ac c0       	rjmp	.+344    	; 0x23e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	aa c0       	rjmp	.+340    	; 0x23e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a8 c0       	rjmp	.+336    	; 0x23e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a6 c0       	rjmp	.+332    	; 0x23e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a4 c0       	rjmp	.+328    	; 0x23e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a2 c0       	rjmp	.+324    	; 0x23e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a0 c0       	rjmp	.+320    	; 0x23e <__bad_interrupt>
      fe:	00 00       	nop
     100:	9e c0       	rjmp	.+316    	; 0x23e <__bad_interrupt>
     102:	00 00       	nop
     104:	9c c0       	rjmp	.+312    	; 0x23e <__bad_interrupt>
     106:	00 00       	nop
     108:	9a c0       	rjmp	.+308    	; 0x23e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	98 c0       	rjmp	.+304    	; 0x23e <__bad_interrupt>
     10e:	00 00       	nop
     110:	96 c0       	rjmp	.+300    	; 0x23e <__bad_interrupt>
     112:	00 00       	nop
     114:	94 c0       	rjmp	.+296    	; 0x23e <__bad_interrupt>
     116:	00 00       	nop
     118:	92 c0       	rjmp	.+292    	; 0x23e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	66 c1       	rjmp	.+716    	; 0x3ea <__vector_71>
     11e:	00 00       	nop
     120:	96 c1       	rjmp	.+812    	; 0x44e <__vector_72>
     122:	00 00       	nop
     124:	c6 c1       	rjmp	.+908    	; 0x4b2 <__vector_73>
     126:	00 00       	nop
     128:	f6 c1       	rjmp	.+1004   	; 0x516 <__vector_74>
     12a:	00 00       	nop
     12c:	88 c0       	rjmp	.+272    	; 0x23e <__bad_interrupt>
     12e:	00 00       	nop
     130:	86 c0       	rjmp	.+268    	; 0x23e <__bad_interrupt>
     132:	00 00       	nop
     134:	53 c5       	rjmp	.+2726   	; 0xbdc <__vector_77>
     136:	00 00       	nop
     138:	7e c5       	rjmp	.+2812   	; 0xc36 <__vector_78>
     13a:	00 00       	nop
     13c:	a9 c5       	rjmp	.+2898   	; 0xc90 <__vector_79>
     13e:	00 00       	nop
     140:	d4 c5       	rjmp	.+2984   	; 0xcea <__vector_80>
     142:	00 00       	nop
     144:	ff c5       	rjmp	.+3070   	; 0xd44 <__vector_81>
     146:	00 00       	nop
     148:	2a c6       	rjmp	.+3156   	; 0xd9e <__vector_82>
     14a:	00 00       	nop
     14c:	55 c6       	rjmp	.+3242   	; 0xdf8 <__vector_83>
     14e:	00 00       	nop
     150:	80 c6       	rjmp	.+3328   	; 0xe52 <__vector_84>
     152:	00 00       	nop
     154:	ab c6       	rjmp	.+3414   	; 0xeac <__vector_85>
     156:	00 00       	nop
     158:	d6 c6       	rjmp	.+3500   	; 0xf06 <__vector_86>
     15a:	00 00       	nop
     15c:	70 c0       	rjmp	.+224    	; 0x23e <__bad_interrupt>
     15e:	00 00       	nop
     160:	6e c0       	rjmp	.+220    	; 0x23e <__bad_interrupt>
     162:	00 00       	nop
     164:	6c c0       	rjmp	.+216    	; 0x23e <__bad_interrupt>
     166:	00 00       	nop
     168:	6a c0       	rjmp	.+212    	; 0x23e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	68 c0       	rjmp	.+208    	; 0x23e <__bad_interrupt>
     16e:	00 00       	nop
     170:	66 c0       	rjmp	.+204    	; 0x23e <__bad_interrupt>
     172:	00 00       	nop
     174:	64 c0       	rjmp	.+200    	; 0x23e <__bad_interrupt>
     176:	00 00       	nop
     178:	62 c0       	rjmp	.+196    	; 0x23e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	60 c0       	rjmp	.+192    	; 0x23e <__bad_interrupt>
     17e:	00 00       	nop
     180:	5e c0       	rjmp	.+188    	; 0x23e <__bad_interrupt>
     182:	00 00       	nop
     184:	5c c0       	rjmp	.+184    	; 0x23e <__bad_interrupt>
     186:	00 00       	nop
     188:	5a c0       	rjmp	.+180    	; 0x23e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	58 c0       	rjmp	.+176    	; 0x23e <__bad_interrupt>
     18e:	00 00       	nop
     190:	56 c0       	rjmp	.+172    	; 0x23e <__bad_interrupt>
     192:	00 00       	nop
     194:	54 c0       	rjmp	.+168    	; 0x23e <__bad_interrupt>
     196:	00 00       	nop
     198:	52 c0       	rjmp	.+164    	; 0x23e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	50 c0       	rjmp	.+160    	; 0x23e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4e c0       	rjmp	.+156    	; 0x23e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4c c0       	rjmp	.+152    	; 0x23e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4a c0       	rjmp	.+148    	; 0x23e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	48 c0       	rjmp	.+144    	; 0x23e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <__vector_108>
     1b4:	0c 94 9f 09 	jmp	0x133e	; 0x133e <__vector_109>
     1b8:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__vector_110>
     1bc:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__vector_111>
     1c0:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__vector_112>
     1c4:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__vector_113>
     1c8:	3a c0       	rjmp	.+116    	; 0x23e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	38 c0       	rjmp	.+112    	; 0x23e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	36 c0       	rjmp	.+108    	; 0x23e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	34 c0       	rjmp	.+104    	; 0x23e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	32 c0       	rjmp	.+100    	; 0x23e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	30 c0       	rjmp	.+96     	; 0x23e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2e c0       	rjmp	.+92     	; 0x23e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2c c0       	rjmp	.+88     	; 0x23e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2a c0       	rjmp	.+84     	; 0x23e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	28 c0       	rjmp	.+80     	; 0x23e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	26 c0       	rjmp	.+76     	; 0x23e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	24 c0       	rjmp	.+72     	; 0x23e <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	22 c0       	rjmp	.+68     	; 0x23e <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e5       	ldi	r29, 0x5F	; 95
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	ea e9       	ldi	r30, 0x9A	; 154
     214:	f5 e1       	ldi	r31, 0x15	; 21
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a0 30       	cpi	r26, 0x00	; 0
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	20 e2       	ldi	r18, 0x20	; 32
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b0 e2       	ldi	r27, 0x20	; 32
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a6 35       	cpi	r26, 0x56	; 86
     232:	b2 07       	cpc	r27, r18
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 9d 0a 	call	0x153a	; 0x153a <main>
     23a:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <_exit>

0000023e <__bad_interrupt>:
     23e:	e0 ce       	rjmp	.-576    	; 0x0 <__vectors>

00000240 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     240:	8f ef       	ldi	r24, 0xFF	; 255
     242:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     246:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     24a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     24e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     252:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     256:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     25a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     25e:	08 95       	ret

00000260 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	1f 92       	push	r1
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     26a:	9f b7       	in	r25, 0x3f	; 63
     26c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     26e:	f8 94       	cli
	return flags;
     270:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     272:	e8 2f       	mov	r30, r24
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	e0 59       	subi	r30, 0x90	; 144
     278:	ff 4f       	sbci	r31, 0xFF	; 255
     27a:	60 95       	com	r22
     27c:	80 81       	ld	r24, Z
     27e:	68 23       	and	r22, r24
     280:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     282:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     284:	0f 90       	pop	r0
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	08 95       	ret

0000028c <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     296:	c6 2f       	mov	r28, r22
     298:	d0 e0       	ldi	r29, 0x00	; 0
     29a:	de 01       	movw	r26, r28
     29c:	02 2e       	mov	r0, r18
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <ioport_configure_port_pin+0x18>
     2a0:	b5 95       	asr	r27
     2a2:	a7 95       	ror	r26
     2a4:	0a 94       	dec	r0
     2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <ioport_configure_port_pin+0x14>
     2a8:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     2aa:	50 8b       	std	Z+16, r21	; 0x10
     2ac:	2f 5f       	subi	r18, 0xFF	; 255
     2ae:	3f 4f       	sbci	r19, 0xFF	; 255
     2b0:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     2b2:	28 30       	cpi	r18, 0x08	; 8
     2b4:	31 05       	cpc	r19, r1
     2b6:	89 f7       	brne	.-30     	; 0x29a <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     2b8:	40 ff       	sbrs	r20, 0
     2ba:	0a c0       	rjmp	.+20     	; 0x2d0 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     2bc:	41 ff       	sbrs	r20, 1
     2be:	03 c0       	rjmp	.+6      	; 0x2c6 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     2c0:	fc 01       	movw	r30, r24
     2c2:	65 83       	std	Z+5, r22	; 0x05
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     2c6:	fc 01       	movw	r30, r24
     2c8:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     2ca:	fc 01       	movw	r30, r24
     2cc:	61 83       	std	Z+1, r22	; 0x01
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     2d0:	fc 01       	movw	r30, r24
     2d2:	62 83       	std	Z+2, r22	; 0x02
	}
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	08 95       	ret

000002da <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     2da:	43 e0       	ldi	r20, 0x03	; 3
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	80 ee       	ldi	r24, 0xE0	; 224
     2e2:	97 e0       	ldi	r25, 0x07	; 7
     2e4:	d3 df       	rcall	.-90     	; 0x28c <ioport_configure_port_pin>
     2e6:	43 e0       	ldi	r20, 0x03	; 3
     2e8:	50 e0       	ldi	r21, 0x00	; 0
     2ea:	62 e0       	ldi	r22, 0x02	; 2
     2ec:	80 ee       	ldi	r24, 0xE0	; 224
     2ee:	97 e0       	ldi	r25, 0x07	; 7
     2f0:	cd df       	rcall	.-102    	; 0x28c <ioport_configure_port_pin>
     2f2:	43 e0       	ldi	r20, 0x03	; 3
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	60 e1       	ldi	r22, 0x10	; 16
     2f8:	80 e6       	ldi	r24, 0x60	; 96
     2fa:	96 e0       	ldi	r25, 0x06	; 6
     2fc:	c7 df       	rcall	.-114    	; 0x28c <ioport_configure_port_pin>
     2fe:	41 e0       	ldi	r20, 0x01	; 1
     300:	50 e4       	ldi	r21, 0x40	; 64
     302:	60 e2       	ldi	r22, 0x20	; 32
     304:	80 e6       	ldi	r24, 0x60	; 96
     306:	96 e0       	ldi	r25, 0x06	; 6
     308:	c1 df       	rcall	.-126    	; 0x28c <ioport_configure_port_pin>
     30a:	40 e0       	ldi	r20, 0x00	; 0
     30c:	5b e1       	ldi	r21, 0x1B	; 27
     30e:	60 e2       	ldi	r22, 0x20	; 32
     310:	80 e8       	ldi	r24, 0x80	; 128
     312:	96 e0       	ldi	r25, 0x06	; 6
     314:	bb df       	rcall	.-138    	; 0x28c <ioport_configure_port_pin>
     316:	40 e0       	ldi	r20, 0x00	; 0
     318:	5b e1       	ldi	r21, 0x1B	; 27
     31a:	62 e0       	ldi	r22, 0x02	; 2
     31c:	80 ea       	ldi	r24, 0xA0	; 160
     31e:	96 e0       	ldi	r25, 0x06	; 6
     320:	b5 df       	rcall	.-150    	; 0x28c <ioport_configure_port_pin>
     322:	40 e0       	ldi	r20, 0x00	; 0
     324:	5b e1       	ldi	r21, 0x1B	; 27
     326:	64 e0       	ldi	r22, 0x04	; 4
     328:	80 ea       	ldi	r24, 0xA0	; 160
     32a:	96 e0       	ldi	r25, 0x06	; 6
     32c:	af df       	rcall	.-162    	; 0x28c <ioport_configure_port_pin>
     32e:	40 e0       	ldi	r20, 0x00	; 0
     330:	50 e0       	ldi	r21, 0x00	; 0
     332:	61 e0       	ldi	r22, 0x01	; 1
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	96 e0       	ldi	r25, 0x06	; 6
     338:	a9 df       	rcall	.-174    	; 0x28c <ioport_configure_port_pin>
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	50 e0       	ldi	r21, 0x00	; 0
     33e:	64 e0       	ldi	r22, 0x04	; 4
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	96 e0       	ldi	r25, 0x06	; 6
     344:	a3 df       	rcall	.-186    	; 0x28c <ioport_configure_port_pin>
     346:	40 e0       	ldi	r20, 0x00	; 0
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	62 e0       	ldi	r22, 0x02	; 2
     34c:	80 e2       	ldi	r24, 0x20	; 32
     34e:	96 e0       	ldi	r25, 0x06	; 6
     350:	9d cf       	rjmp	.-198    	; 0x28c <ioport_configure_port_pin>
     352:	08 95       	ret

00000354 <adc_enable_clock>:

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     354:	81 15       	cp	r24, r1
     356:	22 e0       	ldi	r18, 0x02	; 2
     358:	92 07       	cpc	r25, r18
     35a:	61 f4       	brne	.+24     	; 0x374 <adc_enable_clock+0x20>
     35c:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <adca_enable_count>
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	98 0f       	add	r25, r24
     364:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <adca_enable_count>
     368:	81 11       	cpse	r24, r1
     36a:	12 c0       	rjmp	.+36     	; 0x390 <adc_enable_clock+0x3c>
     36c:	62 e0       	ldi	r22, 0x02	; 2
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	77 cf       	rjmp	.-274    	; 0x260 <sysclk_enable_module>
     372:	08 95       	ret
     374:	80 34       	cpi	r24, 0x40	; 64
     376:	92 40       	sbci	r25, 0x02	; 2
     378:	59 f4       	brne	.+22     	; 0x390 <adc_enable_clock+0x3c>
     37a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_end>
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	98 0f       	add	r25, r24
     382:	90 93 00 20 	sts	0x2000, r25	; 0x802000 <__data_end>
     386:	81 11       	cpse	r24, r1
     388:	03 c0       	rjmp	.+6      	; 0x390 <adc_enable_clock+0x3c>
     38a:	62 e0       	ldi	r22, 0x02	; 2
     38c:	82 e0       	ldi	r24, 0x02	; 2
     38e:	68 cf       	rjmp	.-304    	; 0x260 <sysclk_enable_module>
     390:	08 95       	ret

00000392 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	1f 93       	push	r17
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	1f 92       	push	r1
     39e:	1f 92       	push	r1
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3a6:	8f b7       	in	r24, 0x3f	; 63
     3a8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     3aa:	f8 94       	cli
	return flags;
     3ac:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     3ae:	c7 01       	movw	r24, r14
     3b0:	d1 df       	rcall	.-94     	; 0x354 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     3b2:	f7 01       	movw	r30, r14
     3b4:	80 81       	ld	r24, Z
     3b6:	81 60       	ori	r24, 0x01	; 1
     3b8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3ba:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     3bc:	80 91 4b 20 	lds	r24, 0x204B	; 0x80204b <sleepmgr_locks+0x1>
     3c0:	8f 3f       	cpi	r24, 0xFF	; 255
     3c2:	09 f4       	brne	.+2      	; 0x3c6 <adc_enable+0x34>
     3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3c6:	8f b7       	in	r24, 0x3f	; 63
     3c8:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     3ca:	f8 94       	cli
	return flags;
     3cc:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     3ce:	ea e4       	ldi	r30, 0x4A	; 74
     3d0:	f0 e2       	ldi	r31, 0x20	; 32
     3d2:	81 81       	ldd	r24, Z+1	; 0x01
     3d4:	8f 5f       	subi	r24, 0xFF	; 255
     3d6:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3d8:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	08 95       	ret

000003ea <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     3ea:	1f 92       	push	r1
     3ec:	0f 92       	push	r0
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	0f 92       	push	r0
     3f2:	11 24       	eor	r1, r1
     3f4:	0b b6       	in	r0, 0x3b	; 59
     3f6:	0f 92       	push	r0
     3f8:	2f 93       	push	r18
     3fa:	3f 93       	push	r19
     3fc:	4f 93       	push	r20
     3fe:	5f 93       	push	r21
     400:	6f 93       	push	r22
     402:	7f 93       	push	r23
     404:	8f 93       	push	r24
     406:	9f 93       	push	r25
     408:	af 93       	push	r26
     40a:	bf 93       	push	r27
     40c:	ef 93       	push	r30
     40e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     410:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     414:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     418:	e0 91 52 20 	lds	r30, 0x2052	; 0x802052 <adca_callback>
     41c:	f0 91 53 20 	lds	r31, 0x2053	; 0x802053 <adca_callback+0x1>
     420:	61 e0       	ldi	r22, 0x01	; 1
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	92 e0       	ldi	r25, 0x02	; 2
     426:	19 95       	eicall
}
     428:	ff 91       	pop	r31
     42a:	ef 91       	pop	r30
     42c:	bf 91       	pop	r27
     42e:	af 91       	pop	r26
     430:	9f 91       	pop	r25
     432:	8f 91       	pop	r24
     434:	7f 91       	pop	r23
     436:	6f 91       	pop	r22
     438:	5f 91       	pop	r21
     43a:	4f 91       	pop	r20
     43c:	3f 91       	pop	r19
     43e:	2f 91       	pop	r18
     440:	0f 90       	pop	r0
     442:	0b be       	out	0x3b, r0	; 59
     444:	0f 90       	pop	r0
     446:	0f be       	out	0x3f, r0	; 63
     448:	0f 90       	pop	r0
     44a:	1f 90       	pop	r1
     44c:	18 95       	reti

0000044e <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     44e:	1f 92       	push	r1
     450:	0f 92       	push	r0
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	0f 92       	push	r0
     456:	11 24       	eor	r1, r1
     458:	0b b6       	in	r0, 0x3b	; 59
     45a:	0f 92       	push	r0
     45c:	2f 93       	push	r18
     45e:	3f 93       	push	r19
     460:	4f 93       	push	r20
     462:	5f 93       	push	r21
     464:	6f 93       	push	r22
     466:	7f 93       	push	r23
     468:	8f 93       	push	r24
     46a:	9f 93       	push	r25
     46c:	af 93       	push	r26
     46e:	bf 93       	push	r27
     470:	ef 93       	push	r30
     472:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     474:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     478:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     47c:	e0 91 52 20 	lds	r30, 0x2052	; 0x802052 <adca_callback>
     480:	f0 91 53 20 	lds	r31, 0x2053	; 0x802053 <adca_callback+0x1>
     484:	62 e0       	ldi	r22, 0x02	; 2
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	19 95       	eicall
}
     48c:	ff 91       	pop	r31
     48e:	ef 91       	pop	r30
     490:	bf 91       	pop	r27
     492:	af 91       	pop	r26
     494:	9f 91       	pop	r25
     496:	8f 91       	pop	r24
     498:	7f 91       	pop	r23
     49a:	6f 91       	pop	r22
     49c:	5f 91       	pop	r21
     49e:	4f 91       	pop	r20
     4a0:	3f 91       	pop	r19
     4a2:	2f 91       	pop	r18
     4a4:	0f 90       	pop	r0
     4a6:	0b be       	out	0x3b, r0	; 59
     4a8:	0f 90       	pop	r0
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	0f 90       	pop	r0
     4ae:	1f 90       	pop	r1
     4b0:	18 95       	reti

000004b2 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     4b2:	1f 92       	push	r1
     4b4:	0f 92       	push	r0
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	0f 92       	push	r0
     4ba:	11 24       	eor	r1, r1
     4bc:	0b b6       	in	r0, 0x3b	; 59
     4be:	0f 92       	push	r0
     4c0:	2f 93       	push	r18
     4c2:	3f 93       	push	r19
     4c4:	4f 93       	push	r20
     4c6:	5f 93       	push	r21
     4c8:	6f 93       	push	r22
     4ca:	7f 93       	push	r23
     4cc:	8f 93       	push	r24
     4ce:	9f 93       	push	r25
     4d0:	af 93       	push	r26
     4d2:	bf 93       	push	r27
     4d4:	ef 93       	push	r30
     4d6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     4d8:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     4dc:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     4e0:	e0 91 52 20 	lds	r30, 0x2052	; 0x802052 <adca_callback>
     4e4:	f0 91 53 20 	lds	r31, 0x2053	; 0x802053 <adca_callback+0x1>
     4e8:	64 e0       	ldi	r22, 0x04	; 4
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	92 e0       	ldi	r25, 0x02	; 2
     4ee:	19 95       	eicall
}
     4f0:	ff 91       	pop	r31
     4f2:	ef 91       	pop	r30
     4f4:	bf 91       	pop	r27
     4f6:	af 91       	pop	r26
     4f8:	9f 91       	pop	r25
     4fa:	8f 91       	pop	r24
     4fc:	7f 91       	pop	r23
     4fe:	6f 91       	pop	r22
     500:	5f 91       	pop	r21
     502:	4f 91       	pop	r20
     504:	3f 91       	pop	r19
     506:	2f 91       	pop	r18
     508:	0f 90       	pop	r0
     50a:	0b be       	out	0x3b, r0	; 59
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     516:	1f 92       	push	r1
     518:	0f 92       	push	r0
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	0f 92       	push	r0
     51e:	11 24       	eor	r1, r1
     520:	0b b6       	in	r0, 0x3b	; 59
     522:	0f 92       	push	r0
     524:	2f 93       	push	r18
     526:	3f 93       	push	r19
     528:	4f 93       	push	r20
     52a:	5f 93       	push	r21
     52c:	6f 93       	push	r22
     52e:	7f 93       	push	r23
     530:	8f 93       	push	r24
     532:	9f 93       	push	r25
     534:	af 93       	push	r26
     536:	bf 93       	push	r27
     538:	ef 93       	push	r30
     53a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     53c:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     540:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     544:	e0 91 52 20 	lds	r30, 0x2052	; 0x802052 <adca_callback>
     548:	f0 91 53 20 	lds	r31, 0x2053	; 0x802053 <adca_callback+0x1>
     54c:	68 e0       	ldi	r22, 0x08	; 8
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	19 95       	eicall
}
     554:	ff 91       	pop	r31
     556:	ef 91       	pop	r30
     558:	bf 91       	pop	r27
     55a:	af 91       	pop	r26
     55c:	9f 91       	pop	r25
     55e:	8f 91       	pop	r24
     560:	7f 91       	pop	r23
     562:	6f 91       	pop	r22
     564:	5f 91       	pop	r21
     566:	4f 91       	pop	r20
     568:	3f 91       	pop	r19
     56a:	2f 91       	pop	r18
     56c:	0f 90       	pop	r0
     56e:	0b be       	out	0x3b, r0	; 59
     570:	0f 90       	pop	r0
     572:	0f be       	out	0x3f, r0	; 63
     574:	0f 90       	pop	r0
     576:	1f 90       	pop	r1
     578:	18 95       	reti

0000057a <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     57a:	1f 92       	push	r1
     57c:	0f 92       	push	r0
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	0f 92       	push	r0
     582:	11 24       	eor	r1, r1
     584:	0b b6       	in	r0, 0x3b	; 59
     586:	0f 92       	push	r0
     588:	2f 93       	push	r18
     58a:	3f 93       	push	r19
     58c:	4f 93       	push	r20
     58e:	5f 93       	push	r21
     590:	6f 93       	push	r22
     592:	7f 93       	push	r23
     594:	8f 93       	push	r24
     596:	9f 93       	push	r25
     598:	af 93       	push	r26
     59a:	bf 93       	push	r27
     59c:	ef 93       	push	r30
     59e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     5a0:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     5a4:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     5a8:	e0 91 50 20 	lds	r30, 0x2050	; 0x802050 <adcb_callback>
     5ac:	f0 91 51 20 	lds	r31, 0x2051	; 0x802051 <adcb_callback+0x1>
     5b0:	61 e0       	ldi	r22, 0x01	; 1
     5b2:	80 e4       	ldi	r24, 0x40	; 64
     5b4:	92 e0       	ldi	r25, 0x02	; 2
     5b6:	19 95       	eicall
}
     5b8:	ff 91       	pop	r31
     5ba:	ef 91       	pop	r30
     5bc:	bf 91       	pop	r27
     5be:	af 91       	pop	r26
     5c0:	9f 91       	pop	r25
     5c2:	8f 91       	pop	r24
     5c4:	7f 91       	pop	r23
     5c6:	6f 91       	pop	r22
     5c8:	5f 91       	pop	r21
     5ca:	4f 91       	pop	r20
     5cc:	3f 91       	pop	r19
     5ce:	2f 91       	pop	r18
     5d0:	0f 90       	pop	r0
     5d2:	0b be       	out	0x3b, r0	; 59
     5d4:	0f 90       	pop	r0
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	0f 90       	pop	r0
     5da:	1f 90       	pop	r1
     5dc:	18 95       	reti

000005de <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     5de:	1f 92       	push	r1
     5e0:	0f 92       	push	r0
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	0f 92       	push	r0
     5e6:	11 24       	eor	r1, r1
     5e8:	0b b6       	in	r0, 0x3b	; 59
     5ea:	0f 92       	push	r0
     5ec:	2f 93       	push	r18
     5ee:	3f 93       	push	r19
     5f0:	4f 93       	push	r20
     5f2:	5f 93       	push	r21
     5f4:	6f 93       	push	r22
     5f6:	7f 93       	push	r23
     5f8:	8f 93       	push	r24
     5fa:	9f 93       	push	r25
     5fc:	af 93       	push	r26
     5fe:	bf 93       	push	r27
     600:	ef 93       	push	r30
     602:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     604:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     608:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     60c:	e0 91 50 20 	lds	r30, 0x2050	; 0x802050 <adcb_callback>
     610:	f0 91 51 20 	lds	r31, 0x2051	; 0x802051 <adcb_callback+0x1>
     614:	62 e0       	ldi	r22, 0x02	; 2
     616:	80 e4       	ldi	r24, 0x40	; 64
     618:	92 e0       	ldi	r25, 0x02	; 2
     61a:	19 95       	eicall
}
     61c:	ff 91       	pop	r31
     61e:	ef 91       	pop	r30
     620:	bf 91       	pop	r27
     622:	af 91       	pop	r26
     624:	9f 91       	pop	r25
     626:	8f 91       	pop	r24
     628:	7f 91       	pop	r23
     62a:	6f 91       	pop	r22
     62c:	5f 91       	pop	r21
     62e:	4f 91       	pop	r20
     630:	3f 91       	pop	r19
     632:	2f 91       	pop	r18
     634:	0f 90       	pop	r0
     636:	0b be       	out	0x3b, r0	; 59
     638:	0f 90       	pop	r0
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	0f 90       	pop	r0
     63e:	1f 90       	pop	r1
     640:	18 95       	reti

00000642 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     642:	1f 92       	push	r1
     644:	0f 92       	push	r0
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	0f 92       	push	r0
     64a:	11 24       	eor	r1, r1
     64c:	0b b6       	in	r0, 0x3b	; 59
     64e:	0f 92       	push	r0
     650:	2f 93       	push	r18
     652:	3f 93       	push	r19
     654:	4f 93       	push	r20
     656:	5f 93       	push	r21
     658:	6f 93       	push	r22
     65a:	7f 93       	push	r23
     65c:	8f 93       	push	r24
     65e:	9f 93       	push	r25
     660:	af 93       	push	r26
     662:	bf 93       	push	r27
     664:	ef 93       	push	r30
     666:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     668:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     66c:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     670:	e0 91 50 20 	lds	r30, 0x2050	; 0x802050 <adcb_callback>
     674:	f0 91 51 20 	lds	r31, 0x2051	; 0x802051 <adcb_callback+0x1>
     678:	64 e0       	ldi	r22, 0x04	; 4
     67a:	80 e4       	ldi	r24, 0x40	; 64
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	19 95       	eicall
}
     680:	ff 91       	pop	r31
     682:	ef 91       	pop	r30
     684:	bf 91       	pop	r27
     686:	af 91       	pop	r26
     688:	9f 91       	pop	r25
     68a:	8f 91       	pop	r24
     68c:	7f 91       	pop	r23
     68e:	6f 91       	pop	r22
     690:	5f 91       	pop	r21
     692:	4f 91       	pop	r20
     694:	3f 91       	pop	r19
     696:	2f 91       	pop	r18
     698:	0f 90       	pop	r0
     69a:	0b be       	out	0x3b, r0	; 59
     69c:	0f 90       	pop	r0
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	0f 90       	pop	r0
     6a2:	1f 90       	pop	r1
     6a4:	18 95       	reti

000006a6 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     6a6:	1f 92       	push	r1
     6a8:	0f 92       	push	r0
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	0f 92       	push	r0
     6ae:	11 24       	eor	r1, r1
     6b0:	0b b6       	in	r0, 0x3b	; 59
     6b2:	0f 92       	push	r0
     6b4:	2f 93       	push	r18
     6b6:	3f 93       	push	r19
     6b8:	4f 93       	push	r20
     6ba:	5f 93       	push	r21
     6bc:	6f 93       	push	r22
     6be:	7f 93       	push	r23
     6c0:	8f 93       	push	r24
     6c2:	9f 93       	push	r25
     6c4:	af 93       	push	r26
     6c6:	bf 93       	push	r27
     6c8:	ef 93       	push	r30
     6ca:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     6cc:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     6d0:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     6d4:	e0 91 50 20 	lds	r30, 0x2050	; 0x802050 <adcb_callback>
     6d8:	f0 91 51 20 	lds	r31, 0x2051	; 0x802051 <adcb_callback+0x1>
     6dc:	68 e0       	ldi	r22, 0x08	; 8
     6de:	80 e4       	ldi	r24, 0x40	; 64
     6e0:	92 e0       	ldi	r25, 0x02	; 2
     6e2:	19 95       	eicall
}
     6e4:	ff 91       	pop	r31
     6e6:	ef 91       	pop	r30
     6e8:	bf 91       	pop	r27
     6ea:	af 91       	pop	r26
     6ec:	9f 91       	pop	r25
     6ee:	8f 91       	pop	r24
     6f0:	7f 91       	pop	r23
     6f2:	6f 91       	pop	r22
     6f4:	5f 91       	pop	r21
     6f6:	4f 91       	pop	r20
     6f8:	3f 91       	pop	r19
     6fa:	2f 91       	pop	r18
     6fc:	0f 90       	pop	r0
     6fe:	0b be       	out	0x3b, r0	; 59
     700:	0f 90       	pop	r0
     702:	0f be       	out	0x3f, r0	; 63
     704:	0f 90       	pop	r0
     706:	1f 90       	pop	r1
     708:	18 95       	reti

0000070a <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     70a:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     70c:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     70e:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     710:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     712:	60 83       	st	Z, r22
	ret                             // Return to caller
     714:	08 95       	ret

00000716 <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
     716:	04 c0       	rjmp	.+8      	; 0x720 <__portable_avr_delay_cycles+0xa>
     718:	61 50       	subi	r22, 0x01	; 1
     71a:	71 09       	sbc	r23, r1
     71c:	81 09       	sbc	r24, r1
     71e:	91 09       	sbc	r25, r1
     720:	61 15       	cp	r22, r1
     722:	71 05       	cpc	r23, r1
     724:	81 05       	cpc	r24, r1
     726:	91 05       	cpc	r25, r1
     728:	b9 f7       	brne	.-18     	; 0x718 <__portable_avr_delay_cycles+0x2>
     72a:	08 95       	ret

0000072c <rtc_get_time>:
     72c:	80 e1       	ldi	r24, 0x10	; 16
     72e:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     732:	e0 e2       	ldi	r30, 0x20	; 32
     734:	f4 e0       	ldi	r31, 0x04	; 4
     736:	81 81       	ldd	r24, Z+1	; 0x01
     738:	84 fd       	sbrc	r24, 4
     73a:	fd cf       	rjmp	.-6      	; 0x736 <rtc_get_time+0xa>
     73c:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
     740:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     744:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     748:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
     74c:	08 95       	ret

0000074e <rtc_set_alarm>:
     74e:	e0 e2       	ldi	r30, 0x20	; 32
     750:	f4 e0       	ldi	r31, 0x04	; 4
     752:	24 e0       	ldi	r18, 0x04	; 4
     754:	22 83       	std	Z+2, r18	; 0x02
     756:	64 87       	std	Z+12, r22	; 0x0c
     758:	75 87       	std	Z+13, r23	; 0x0d
     75a:	86 87       	std	Z+14, r24	; 0x0e
     75c:	97 87       	std	Z+15, r25	; 0x0f
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	83 83       	std	Z+3, r24	; 0x03
     762:	08 95       	ret

00000764 <rtc_set_callback>:
     764:	80 93 54 20 	sts	0x2054, r24	; 0x802054 <rtc_data>
     768:	90 93 55 20 	sts	0x2055, r25	; 0x802055 <rtc_data+0x1>
     76c:	08 95       	ret

0000076e <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     772:	64 e0       	ldi	r22, 0x04	; 4
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	74 dd       	rcall	.-1304   	; 0x260 <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
     778:	c0 ef       	ldi	r28, 0xF0	; 240
     77a:	d0 e0       	ldi	r29, 0x00	; 0
     77c:	88 81       	ld	r24, Y
     77e:	82 60       	ori	r24, 0x02	; 2
     780:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	80 ef       	ldi	r24, 0xF0	; 240
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	c0 df       	rcall	.-128    	; 0x70a <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
     78a:	88 81       	ld	r24, Y
     78c:	84 60       	ori	r24, 0x04	; 4
     78e:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
     790:	63 e4       	ldi	r22, 0x43	; 67
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	be df       	rcall	.-132    	; 0x716 <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK;
     79a:	88 81       	ld	r24, Y
     79c:	88 60       	ori	r24, 0x08	; 8
     79e:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
     7a0:	e0 ef       	ldi	r30, 0xF0	; 240
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	81 81       	ldd	r24, Z+1	; 0x01
     7a6:	83 ff       	sbrs	r24, 3
     7a8:	fd cf       	rjmp	.-6      	; 0x7a4 <rtc_init+0x36>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
     7aa:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     7ae:	e0 e2       	ldi	r30, 0x20	; 32
     7b0:	f4 e0       	ldi	r31, 0x04	; 4
     7b2:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
     7b4:	80 fd       	sbrc	r24, 0
     7b6:	fd cf       	rjmp	.-6      	; 0x7b2 <rtc_init+0x44>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
     7b8:	e0 e2       	ldi	r30, 0x20	; 32
     7ba:	f4 e0       	ldi	r31, 0x04	; 4
     7bc:	8f ef       	ldi	r24, 0xFF	; 255
     7be:	9f ef       	ldi	r25, 0xFF	; 255
     7c0:	dc 01       	movw	r26, r24
     7c2:	80 87       	std	Z+8, r24	; 0x08
     7c4:	91 87       	std	Z+9, r25	; 0x09
     7c6:	a2 87       	std	Z+10, r26	; 0x0a
     7c8:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
     7ca:	14 82       	std	Z+4, r1	; 0x04
     7cc:	15 82       	std	Z+5, r1	; 0x05
     7ce:	16 82       	std	Z+6, r1	; 0x06
     7d0:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     7d2:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
     7d4:	80 fd       	sbrc	r24, 0
     7d6:	fd cf       	rjmp	.-6      	; 0x7d2 <rtc_init+0x64>

	RTC32.INTCTRL = 0;
     7d8:	e0 e2       	ldi	r30, 0x20	; 32
     7da:	f4 e0       	ldi	r31, 0x04	; 4
     7dc:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     7e2:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
     7e4:	80 fd       	sbrc	r24, 0
     7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <rtc_init+0x74>
}
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
     7ee:	1f 92       	push	r1
     7f0:	0f 92       	push	r0
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	0f 92       	push	r0
     7f6:	11 24       	eor	r1, r1
     7f8:	0b b6       	in	r0, 0x3b	; 59
     7fa:	0f 92       	push	r0
     7fc:	2f 93       	push	r18
     7fe:	3f 93       	push	r19
     800:	4f 93       	push	r20
     802:	5f 93       	push	r21
     804:	6f 93       	push	r22
     806:	7f 93       	push	r23
     808:	8f 93       	push	r24
     80a:	9f 93       	push	r25
     80c:	af 93       	push	r26
     80e:	bf 93       	push	r27
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	ef 93       	push	r30
     816:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
     818:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
     81c:	c0 91 54 20 	lds	r28, 0x2054	; 0x802054 <rtc_data>
     820:	d0 91 55 20 	lds	r29, 0x2055	; 0x802055 <rtc_data+0x1>
     824:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
     826:	19 f0       	breq	.+6      	; 0x82e <__vector_11+0x40>
     828:	81 df       	rcall	.-254    	; 0x72c <rtc_get_time>
     82a:	fe 01       	movw	r30, r28
}
     82c:	19 95       	eicall
     82e:	ff 91       	pop	r31
     830:	ef 91       	pop	r30
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	bf 91       	pop	r27
     838:	af 91       	pop	r26
     83a:	9f 91       	pop	r25
     83c:	8f 91       	pop	r24
     83e:	7f 91       	pop	r23
     840:	6f 91       	pop	r22
     842:	5f 91       	pop	r21
     844:	4f 91       	pop	r20
     846:	3f 91       	pop	r19
     848:	2f 91       	pop	r18
     84a:	0f 90       	pop	r0
     84c:	0b be       	out	0x3b, r0	; 59
     84e:	0f 90       	pop	r0
     850:	0f be       	out	0x3f, r0	; 63
     852:	0f 90       	pop	r0
     854:	1f 90       	pop	r1
     856:	18 95       	reti

00000858 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     858:	1f 92       	push	r1
     85a:	0f 92       	push	r0
     85c:	0f b6       	in	r0, 0x3f	; 63
     85e:	0f 92       	push	r0
     860:	11 24       	eor	r1, r1
     862:	0b b6       	in	r0, 0x3b	; 59
     864:	0f 92       	push	r0
     866:	2f 93       	push	r18
     868:	3f 93       	push	r19
     86a:	4f 93       	push	r20
     86c:	5f 93       	push	r21
     86e:	6f 93       	push	r22
     870:	7f 93       	push	r23
     872:	8f 93       	push	r24
     874:	9f 93       	push	r25
     876:	af 93       	push	r26
     878:	bf 93       	push	r27
     87a:	ef 93       	push	r30
     87c:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     87e:	e0 91 48 20 	lds	r30, 0x2048	; 0x802048 <tc_tcc0_ovf_callback>
     882:	f0 91 49 20 	lds	r31, 0x2049	; 0x802049 <tc_tcc0_ovf_callback+0x1>
     886:	30 97       	sbiw	r30, 0x00	; 0
     888:	09 f0       	breq	.+2      	; 0x88c <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     88a:	19 95       	eicall
	}
}
     88c:	ff 91       	pop	r31
     88e:	ef 91       	pop	r30
     890:	bf 91       	pop	r27
     892:	af 91       	pop	r26
     894:	9f 91       	pop	r25
     896:	8f 91       	pop	r24
     898:	7f 91       	pop	r23
     89a:	6f 91       	pop	r22
     89c:	5f 91       	pop	r21
     89e:	4f 91       	pop	r20
     8a0:	3f 91       	pop	r19
     8a2:	2f 91       	pop	r18
     8a4:	0f 90       	pop	r0
     8a6:	0b be       	out	0x3b, r0	; 59
     8a8:	0f 90       	pop	r0
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	0f 90       	pop	r0
     8ae:	1f 90       	pop	r1
     8b0:	18 95       	reti

000008b2 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     8b2:	1f 92       	push	r1
     8b4:	0f 92       	push	r0
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	0f 92       	push	r0
     8ba:	11 24       	eor	r1, r1
     8bc:	0b b6       	in	r0, 0x3b	; 59
     8be:	0f 92       	push	r0
     8c0:	2f 93       	push	r18
     8c2:	3f 93       	push	r19
     8c4:	4f 93       	push	r20
     8c6:	5f 93       	push	r21
     8c8:	6f 93       	push	r22
     8ca:	7f 93       	push	r23
     8cc:	8f 93       	push	r24
     8ce:	9f 93       	push	r25
     8d0:	af 93       	push	r26
     8d2:	bf 93       	push	r27
     8d4:	ef 93       	push	r30
     8d6:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     8d8:	e0 91 46 20 	lds	r30, 0x2046	; 0x802046 <tc_tcc0_err_callback>
     8dc:	f0 91 47 20 	lds	r31, 0x2047	; 0x802047 <tc_tcc0_err_callback+0x1>
     8e0:	30 97       	sbiw	r30, 0x00	; 0
     8e2:	09 f0       	breq	.+2      	; 0x8e6 <__vector_15+0x34>
		tc_tcc0_err_callback();
     8e4:	19 95       	eicall
	}
}
     8e6:	ff 91       	pop	r31
     8e8:	ef 91       	pop	r30
     8ea:	bf 91       	pop	r27
     8ec:	af 91       	pop	r26
     8ee:	9f 91       	pop	r25
     8f0:	8f 91       	pop	r24
     8f2:	7f 91       	pop	r23
     8f4:	6f 91       	pop	r22
     8f6:	5f 91       	pop	r21
     8f8:	4f 91       	pop	r20
     8fa:	3f 91       	pop	r19
     8fc:	2f 91       	pop	r18
     8fe:	0f 90       	pop	r0
     900:	0b be       	out	0x3b, r0	; 59
     902:	0f 90       	pop	r0
     904:	0f be       	out	0x3f, r0	; 63
     906:	0f 90       	pop	r0
     908:	1f 90       	pop	r1
     90a:	18 95       	reti

0000090c <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     90c:	1f 92       	push	r1
     90e:	0f 92       	push	r0
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	0f 92       	push	r0
     914:	11 24       	eor	r1, r1
     916:	0b b6       	in	r0, 0x3b	; 59
     918:	0f 92       	push	r0
     91a:	2f 93       	push	r18
     91c:	3f 93       	push	r19
     91e:	4f 93       	push	r20
     920:	5f 93       	push	r21
     922:	6f 93       	push	r22
     924:	7f 93       	push	r23
     926:	8f 93       	push	r24
     928:	9f 93       	push	r25
     92a:	af 93       	push	r26
     92c:	bf 93       	push	r27
     92e:	ef 93       	push	r30
     930:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     932:	e0 91 44 20 	lds	r30, 0x2044	; 0x802044 <tc_tcc0_cca_callback>
     936:	f0 91 45 20 	lds	r31, 0x2045	; 0x802045 <tc_tcc0_cca_callback+0x1>
     93a:	30 97       	sbiw	r30, 0x00	; 0
     93c:	09 f0       	breq	.+2      	; 0x940 <__vector_16+0x34>
		tc_tcc0_cca_callback();
     93e:	19 95       	eicall
	}
}
     940:	ff 91       	pop	r31
     942:	ef 91       	pop	r30
     944:	bf 91       	pop	r27
     946:	af 91       	pop	r26
     948:	9f 91       	pop	r25
     94a:	8f 91       	pop	r24
     94c:	7f 91       	pop	r23
     94e:	6f 91       	pop	r22
     950:	5f 91       	pop	r21
     952:	4f 91       	pop	r20
     954:	3f 91       	pop	r19
     956:	2f 91       	pop	r18
     958:	0f 90       	pop	r0
     95a:	0b be       	out	0x3b, r0	; 59
     95c:	0f 90       	pop	r0
     95e:	0f be       	out	0x3f, r0	; 63
     960:	0f 90       	pop	r0
     962:	1f 90       	pop	r1
     964:	18 95       	reti

00000966 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     966:	1f 92       	push	r1
     968:	0f 92       	push	r0
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	0f 92       	push	r0
     96e:	11 24       	eor	r1, r1
     970:	0b b6       	in	r0, 0x3b	; 59
     972:	0f 92       	push	r0
     974:	2f 93       	push	r18
     976:	3f 93       	push	r19
     978:	4f 93       	push	r20
     97a:	5f 93       	push	r21
     97c:	6f 93       	push	r22
     97e:	7f 93       	push	r23
     980:	8f 93       	push	r24
     982:	9f 93       	push	r25
     984:	af 93       	push	r26
     986:	bf 93       	push	r27
     988:	ef 93       	push	r30
     98a:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     98c:	e0 91 42 20 	lds	r30, 0x2042	; 0x802042 <tc_tcc0_ccb_callback>
     990:	f0 91 43 20 	lds	r31, 0x2043	; 0x802043 <tc_tcc0_ccb_callback+0x1>
     994:	30 97       	sbiw	r30, 0x00	; 0
     996:	09 f0       	breq	.+2      	; 0x99a <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     998:	19 95       	eicall
	}
}
     99a:	ff 91       	pop	r31
     99c:	ef 91       	pop	r30
     99e:	bf 91       	pop	r27
     9a0:	af 91       	pop	r26
     9a2:	9f 91       	pop	r25
     9a4:	8f 91       	pop	r24
     9a6:	7f 91       	pop	r23
     9a8:	6f 91       	pop	r22
     9aa:	5f 91       	pop	r21
     9ac:	4f 91       	pop	r20
     9ae:	3f 91       	pop	r19
     9b0:	2f 91       	pop	r18
     9b2:	0f 90       	pop	r0
     9b4:	0b be       	out	0x3b, r0	; 59
     9b6:	0f 90       	pop	r0
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	0f 90       	pop	r0
     9bc:	1f 90       	pop	r1
     9be:	18 95       	reti

000009c0 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     9c0:	1f 92       	push	r1
     9c2:	0f 92       	push	r0
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	0f 92       	push	r0
     9c8:	11 24       	eor	r1, r1
     9ca:	0b b6       	in	r0, 0x3b	; 59
     9cc:	0f 92       	push	r0
     9ce:	2f 93       	push	r18
     9d0:	3f 93       	push	r19
     9d2:	4f 93       	push	r20
     9d4:	5f 93       	push	r21
     9d6:	6f 93       	push	r22
     9d8:	7f 93       	push	r23
     9da:	8f 93       	push	r24
     9dc:	9f 93       	push	r25
     9de:	af 93       	push	r26
     9e0:	bf 93       	push	r27
     9e2:	ef 93       	push	r30
     9e4:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     9e6:	e0 91 40 20 	lds	r30, 0x2040	; 0x802040 <tc_tcc0_ccc_callback>
     9ea:	f0 91 41 20 	lds	r31, 0x2041	; 0x802041 <tc_tcc0_ccc_callback+0x1>
     9ee:	30 97       	sbiw	r30, 0x00	; 0
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <__vector_18+0x34>
		tc_tcc0_ccc_callback();
     9f2:	19 95       	eicall
	}
}
     9f4:	ff 91       	pop	r31
     9f6:	ef 91       	pop	r30
     9f8:	bf 91       	pop	r27
     9fa:	af 91       	pop	r26
     9fc:	9f 91       	pop	r25
     9fe:	8f 91       	pop	r24
     a00:	7f 91       	pop	r23
     a02:	6f 91       	pop	r22
     a04:	5f 91       	pop	r21
     a06:	4f 91       	pop	r20
     a08:	3f 91       	pop	r19
     a0a:	2f 91       	pop	r18
     a0c:	0f 90       	pop	r0
     a0e:	0b be       	out	0x3b, r0	; 59
     a10:	0f 90       	pop	r0
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	0f 90       	pop	r0
     a16:	1f 90       	pop	r1
     a18:	18 95       	reti

00000a1a <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     a1a:	1f 92       	push	r1
     a1c:	0f 92       	push	r0
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	0f 92       	push	r0
     a22:	11 24       	eor	r1, r1
     a24:	0b b6       	in	r0, 0x3b	; 59
     a26:	0f 92       	push	r0
     a28:	2f 93       	push	r18
     a2a:	3f 93       	push	r19
     a2c:	4f 93       	push	r20
     a2e:	5f 93       	push	r21
     a30:	6f 93       	push	r22
     a32:	7f 93       	push	r23
     a34:	8f 93       	push	r24
     a36:	9f 93       	push	r25
     a38:	af 93       	push	r26
     a3a:	bf 93       	push	r27
     a3c:	ef 93       	push	r30
     a3e:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     a40:	e0 91 3e 20 	lds	r30, 0x203E	; 0x80203e <tc_tcc0_ccd_callback>
     a44:	f0 91 3f 20 	lds	r31, 0x203F	; 0x80203f <tc_tcc0_ccd_callback+0x1>
     a48:	30 97       	sbiw	r30, 0x00	; 0
     a4a:	09 f0       	breq	.+2      	; 0xa4e <__vector_19+0x34>
		tc_tcc0_ccd_callback();
     a4c:	19 95       	eicall
	}
}
     a4e:	ff 91       	pop	r31
     a50:	ef 91       	pop	r30
     a52:	bf 91       	pop	r27
     a54:	af 91       	pop	r26
     a56:	9f 91       	pop	r25
     a58:	8f 91       	pop	r24
     a5a:	7f 91       	pop	r23
     a5c:	6f 91       	pop	r22
     a5e:	5f 91       	pop	r21
     a60:	4f 91       	pop	r20
     a62:	3f 91       	pop	r19
     a64:	2f 91       	pop	r18
     a66:	0f 90       	pop	r0
     a68:	0b be       	out	0x3b, r0	; 59
     a6a:	0f 90       	pop	r0
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	0f 90       	pop	r0
     a70:	1f 90       	pop	r1
     a72:	18 95       	reti

00000a74 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     a74:	1f 92       	push	r1
     a76:	0f 92       	push	r0
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	0f 92       	push	r0
     a7c:	11 24       	eor	r1, r1
     a7e:	0b b6       	in	r0, 0x3b	; 59
     a80:	0f 92       	push	r0
     a82:	2f 93       	push	r18
     a84:	3f 93       	push	r19
     a86:	4f 93       	push	r20
     a88:	5f 93       	push	r21
     a8a:	6f 93       	push	r22
     a8c:	7f 93       	push	r23
     a8e:	8f 93       	push	r24
     a90:	9f 93       	push	r25
     a92:	af 93       	push	r26
     a94:	bf 93       	push	r27
     a96:	ef 93       	push	r30
     a98:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     a9a:	e0 91 3c 20 	lds	r30, 0x203C	; 0x80203c <tc_tcc1_ovf_callback>
     a9e:	f0 91 3d 20 	lds	r31, 0x203D	; 0x80203d <tc_tcc1_ovf_callback+0x1>
     aa2:	30 97       	sbiw	r30, 0x00	; 0
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
     aa6:	19 95       	eicall
	}
}
     aa8:	ff 91       	pop	r31
     aaa:	ef 91       	pop	r30
     aac:	bf 91       	pop	r27
     aae:	af 91       	pop	r26
     ab0:	9f 91       	pop	r25
     ab2:	8f 91       	pop	r24
     ab4:	7f 91       	pop	r23
     ab6:	6f 91       	pop	r22
     ab8:	5f 91       	pop	r21
     aba:	4f 91       	pop	r20
     abc:	3f 91       	pop	r19
     abe:	2f 91       	pop	r18
     ac0:	0f 90       	pop	r0
     ac2:	0b be       	out	0x3b, r0	; 59
     ac4:	0f 90       	pop	r0
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	0f 90       	pop	r0
     aca:	1f 90       	pop	r1
     acc:	18 95       	reti

00000ace <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     ace:	1f 92       	push	r1
     ad0:	0f 92       	push	r0
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	0f 92       	push	r0
     ad6:	11 24       	eor	r1, r1
     ad8:	0b b6       	in	r0, 0x3b	; 59
     ada:	0f 92       	push	r0
     adc:	2f 93       	push	r18
     ade:	3f 93       	push	r19
     ae0:	4f 93       	push	r20
     ae2:	5f 93       	push	r21
     ae4:	6f 93       	push	r22
     ae6:	7f 93       	push	r23
     ae8:	8f 93       	push	r24
     aea:	9f 93       	push	r25
     aec:	af 93       	push	r26
     aee:	bf 93       	push	r27
     af0:	ef 93       	push	r30
     af2:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     af4:	e0 91 3a 20 	lds	r30, 0x203A	; 0x80203a <tc_tcc1_err_callback>
     af8:	f0 91 3b 20 	lds	r31, 0x203B	; 0x80203b <tc_tcc1_err_callback+0x1>
     afc:	30 97       	sbiw	r30, 0x00	; 0
     afe:	09 f0       	breq	.+2      	; 0xb02 <__vector_21+0x34>
		tc_tcc1_err_callback();
     b00:	19 95       	eicall
	}
}
     b02:	ff 91       	pop	r31
     b04:	ef 91       	pop	r30
     b06:	bf 91       	pop	r27
     b08:	af 91       	pop	r26
     b0a:	9f 91       	pop	r25
     b0c:	8f 91       	pop	r24
     b0e:	7f 91       	pop	r23
     b10:	6f 91       	pop	r22
     b12:	5f 91       	pop	r21
     b14:	4f 91       	pop	r20
     b16:	3f 91       	pop	r19
     b18:	2f 91       	pop	r18
     b1a:	0f 90       	pop	r0
     b1c:	0b be       	out	0x3b, r0	; 59
     b1e:	0f 90       	pop	r0
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	0f 90       	pop	r0
     b24:	1f 90       	pop	r1
     b26:	18 95       	reti

00000b28 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     b28:	1f 92       	push	r1
     b2a:	0f 92       	push	r0
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	0f 92       	push	r0
     b30:	11 24       	eor	r1, r1
     b32:	0b b6       	in	r0, 0x3b	; 59
     b34:	0f 92       	push	r0
     b36:	2f 93       	push	r18
     b38:	3f 93       	push	r19
     b3a:	4f 93       	push	r20
     b3c:	5f 93       	push	r21
     b3e:	6f 93       	push	r22
     b40:	7f 93       	push	r23
     b42:	8f 93       	push	r24
     b44:	9f 93       	push	r25
     b46:	af 93       	push	r26
     b48:	bf 93       	push	r27
     b4a:	ef 93       	push	r30
     b4c:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     b4e:	e0 91 38 20 	lds	r30, 0x2038	; 0x802038 <tc_tcc1_cca_callback>
     b52:	f0 91 39 20 	lds	r31, 0x2039	; 0x802039 <tc_tcc1_cca_callback+0x1>
     b56:	30 97       	sbiw	r30, 0x00	; 0
     b58:	09 f0       	breq	.+2      	; 0xb5c <__vector_22+0x34>
		tc_tcc1_cca_callback();
     b5a:	19 95       	eicall
	}
}
     b5c:	ff 91       	pop	r31
     b5e:	ef 91       	pop	r30
     b60:	bf 91       	pop	r27
     b62:	af 91       	pop	r26
     b64:	9f 91       	pop	r25
     b66:	8f 91       	pop	r24
     b68:	7f 91       	pop	r23
     b6a:	6f 91       	pop	r22
     b6c:	5f 91       	pop	r21
     b6e:	4f 91       	pop	r20
     b70:	3f 91       	pop	r19
     b72:	2f 91       	pop	r18
     b74:	0f 90       	pop	r0
     b76:	0b be       	out	0x3b, r0	; 59
     b78:	0f 90       	pop	r0
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	0f 90       	pop	r0
     b7e:	1f 90       	pop	r1
     b80:	18 95       	reti

00000b82 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     b82:	1f 92       	push	r1
     b84:	0f 92       	push	r0
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	0f 92       	push	r0
     b8a:	11 24       	eor	r1, r1
     b8c:	0b b6       	in	r0, 0x3b	; 59
     b8e:	0f 92       	push	r0
     b90:	2f 93       	push	r18
     b92:	3f 93       	push	r19
     b94:	4f 93       	push	r20
     b96:	5f 93       	push	r21
     b98:	6f 93       	push	r22
     b9a:	7f 93       	push	r23
     b9c:	8f 93       	push	r24
     b9e:	9f 93       	push	r25
     ba0:	af 93       	push	r26
     ba2:	bf 93       	push	r27
     ba4:	ef 93       	push	r30
     ba6:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     ba8:	e0 91 36 20 	lds	r30, 0x2036	; 0x802036 <tc_tcc1_ccb_callback>
     bac:	f0 91 37 20 	lds	r31, 0x2037	; 0x802037 <tc_tcc1_ccb_callback+0x1>
     bb0:	30 97       	sbiw	r30, 0x00	; 0
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
     bb4:	19 95       	eicall
	}
}
     bb6:	ff 91       	pop	r31
     bb8:	ef 91       	pop	r30
     bba:	bf 91       	pop	r27
     bbc:	af 91       	pop	r26
     bbe:	9f 91       	pop	r25
     bc0:	8f 91       	pop	r24
     bc2:	7f 91       	pop	r23
     bc4:	6f 91       	pop	r22
     bc6:	5f 91       	pop	r21
     bc8:	4f 91       	pop	r20
     bca:	3f 91       	pop	r19
     bcc:	2f 91       	pop	r18
     bce:	0f 90       	pop	r0
     bd0:	0b be       	out	0x3b, r0	; 59
     bd2:	0f 90       	pop	r0
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	0f 90       	pop	r0
     bd8:	1f 90       	pop	r1
     bda:	18 95       	reti

00000bdc <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     bdc:	1f 92       	push	r1
     bde:	0f 92       	push	r0
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	0f 92       	push	r0
     be4:	11 24       	eor	r1, r1
     be6:	0b b6       	in	r0, 0x3b	; 59
     be8:	0f 92       	push	r0
     bea:	2f 93       	push	r18
     bec:	3f 93       	push	r19
     bee:	4f 93       	push	r20
     bf0:	5f 93       	push	r21
     bf2:	6f 93       	push	r22
     bf4:	7f 93       	push	r23
     bf6:	8f 93       	push	r24
     bf8:	9f 93       	push	r25
     bfa:	af 93       	push	r26
     bfc:	bf 93       	push	r27
     bfe:	ef 93       	push	r30
     c00:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     c02:	e0 91 34 20 	lds	r30, 0x2034	; 0x802034 <tc_tcd0_ovf_callback>
     c06:	f0 91 35 20 	lds	r31, 0x2035	; 0x802035 <tc_tcd0_ovf_callback+0x1>
     c0a:	30 97       	sbiw	r30, 0x00	; 0
     c0c:	09 f0       	breq	.+2      	; 0xc10 <__vector_77+0x34>
		tc_tcd0_ovf_callback();
     c0e:	19 95       	eicall
	}
}
     c10:	ff 91       	pop	r31
     c12:	ef 91       	pop	r30
     c14:	bf 91       	pop	r27
     c16:	af 91       	pop	r26
     c18:	9f 91       	pop	r25
     c1a:	8f 91       	pop	r24
     c1c:	7f 91       	pop	r23
     c1e:	6f 91       	pop	r22
     c20:	5f 91       	pop	r21
     c22:	4f 91       	pop	r20
     c24:	3f 91       	pop	r19
     c26:	2f 91       	pop	r18
     c28:	0f 90       	pop	r0
     c2a:	0b be       	out	0x3b, r0	; 59
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	0f 90       	pop	r0
     c32:	1f 90       	pop	r1
     c34:	18 95       	reti

00000c36 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     c36:	1f 92       	push	r1
     c38:	0f 92       	push	r0
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	0f 92       	push	r0
     c3e:	11 24       	eor	r1, r1
     c40:	0b b6       	in	r0, 0x3b	; 59
     c42:	0f 92       	push	r0
     c44:	2f 93       	push	r18
     c46:	3f 93       	push	r19
     c48:	4f 93       	push	r20
     c4a:	5f 93       	push	r21
     c4c:	6f 93       	push	r22
     c4e:	7f 93       	push	r23
     c50:	8f 93       	push	r24
     c52:	9f 93       	push	r25
     c54:	af 93       	push	r26
     c56:	bf 93       	push	r27
     c58:	ef 93       	push	r30
     c5a:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     c5c:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <tc_tcd0_err_callback>
     c60:	f0 91 33 20 	lds	r31, 0x2033	; 0x802033 <tc_tcd0_err_callback+0x1>
     c64:	30 97       	sbiw	r30, 0x00	; 0
     c66:	09 f0       	breq	.+2      	; 0xc6a <__vector_78+0x34>
		tc_tcd0_err_callback();
     c68:	19 95       	eicall
	}
}
     c6a:	ff 91       	pop	r31
     c6c:	ef 91       	pop	r30
     c6e:	bf 91       	pop	r27
     c70:	af 91       	pop	r26
     c72:	9f 91       	pop	r25
     c74:	8f 91       	pop	r24
     c76:	7f 91       	pop	r23
     c78:	6f 91       	pop	r22
     c7a:	5f 91       	pop	r21
     c7c:	4f 91       	pop	r20
     c7e:	3f 91       	pop	r19
     c80:	2f 91       	pop	r18
     c82:	0f 90       	pop	r0
     c84:	0b be       	out	0x3b, r0	; 59
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	0f 90       	pop	r0
     c8c:	1f 90       	pop	r1
     c8e:	18 95       	reti

00000c90 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     c90:	1f 92       	push	r1
     c92:	0f 92       	push	r0
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	0f 92       	push	r0
     c98:	11 24       	eor	r1, r1
     c9a:	0b b6       	in	r0, 0x3b	; 59
     c9c:	0f 92       	push	r0
     c9e:	2f 93       	push	r18
     ca0:	3f 93       	push	r19
     ca2:	4f 93       	push	r20
     ca4:	5f 93       	push	r21
     ca6:	6f 93       	push	r22
     ca8:	7f 93       	push	r23
     caa:	8f 93       	push	r24
     cac:	9f 93       	push	r25
     cae:	af 93       	push	r26
     cb0:	bf 93       	push	r27
     cb2:	ef 93       	push	r30
     cb4:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     cb6:	e0 91 30 20 	lds	r30, 0x2030	; 0x802030 <tc_tcd0_cca_callback>
     cba:	f0 91 31 20 	lds	r31, 0x2031	; 0x802031 <tc_tcd0_cca_callback+0x1>
     cbe:	30 97       	sbiw	r30, 0x00	; 0
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <__vector_79+0x34>
		tc_tcd0_cca_callback();
     cc2:	19 95       	eicall
	}
}
     cc4:	ff 91       	pop	r31
     cc6:	ef 91       	pop	r30
     cc8:	bf 91       	pop	r27
     cca:	af 91       	pop	r26
     ccc:	9f 91       	pop	r25
     cce:	8f 91       	pop	r24
     cd0:	7f 91       	pop	r23
     cd2:	6f 91       	pop	r22
     cd4:	5f 91       	pop	r21
     cd6:	4f 91       	pop	r20
     cd8:	3f 91       	pop	r19
     cda:	2f 91       	pop	r18
     cdc:	0f 90       	pop	r0
     cde:	0b be       	out	0x3b, r0	; 59
     ce0:	0f 90       	pop	r0
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	0f 90       	pop	r0
     ce6:	1f 90       	pop	r1
     ce8:	18 95       	reti

00000cea <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     cea:	1f 92       	push	r1
     cec:	0f 92       	push	r0
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	0f 92       	push	r0
     cf2:	11 24       	eor	r1, r1
     cf4:	0b b6       	in	r0, 0x3b	; 59
     cf6:	0f 92       	push	r0
     cf8:	2f 93       	push	r18
     cfa:	3f 93       	push	r19
     cfc:	4f 93       	push	r20
     cfe:	5f 93       	push	r21
     d00:	6f 93       	push	r22
     d02:	7f 93       	push	r23
     d04:	8f 93       	push	r24
     d06:	9f 93       	push	r25
     d08:	af 93       	push	r26
     d0a:	bf 93       	push	r27
     d0c:	ef 93       	push	r30
     d0e:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     d10:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <tc_tcd0_ccb_callback>
     d14:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <tc_tcd0_ccb_callback+0x1>
     d18:	30 97       	sbiw	r30, 0x00	; 0
     d1a:	09 f0       	breq	.+2      	; 0xd1e <__vector_80+0x34>
		tc_tcd0_ccb_callback();
     d1c:	19 95       	eicall
	}
}
     d1e:	ff 91       	pop	r31
     d20:	ef 91       	pop	r30
     d22:	bf 91       	pop	r27
     d24:	af 91       	pop	r26
     d26:	9f 91       	pop	r25
     d28:	8f 91       	pop	r24
     d2a:	7f 91       	pop	r23
     d2c:	6f 91       	pop	r22
     d2e:	5f 91       	pop	r21
     d30:	4f 91       	pop	r20
     d32:	3f 91       	pop	r19
     d34:	2f 91       	pop	r18
     d36:	0f 90       	pop	r0
     d38:	0b be       	out	0x3b, r0	; 59
     d3a:	0f 90       	pop	r0
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	0f 90       	pop	r0
     d40:	1f 90       	pop	r1
     d42:	18 95       	reti

00000d44 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     d44:	1f 92       	push	r1
     d46:	0f 92       	push	r0
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	0f 92       	push	r0
     d4c:	11 24       	eor	r1, r1
     d4e:	0b b6       	in	r0, 0x3b	; 59
     d50:	0f 92       	push	r0
     d52:	2f 93       	push	r18
     d54:	3f 93       	push	r19
     d56:	4f 93       	push	r20
     d58:	5f 93       	push	r21
     d5a:	6f 93       	push	r22
     d5c:	7f 93       	push	r23
     d5e:	8f 93       	push	r24
     d60:	9f 93       	push	r25
     d62:	af 93       	push	r26
     d64:	bf 93       	push	r27
     d66:	ef 93       	push	r30
     d68:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     d6a:	e0 91 2c 20 	lds	r30, 0x202C	; 0x80202c <tc_tcd0_ccc_callback>
     d6e:	f0 91 2d 20 	lds	r31, 0x202D	; 0x80202d <tc_tcd0_ccc_callback+0x1>
     d72:	30 97       	sbiw	r30, 0x00	; 0
     d74:	09 f0       	breq	.+2      	; 0xd78 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
     d76:	19 95       	eicall
	}
}
     d78:	ff 91       	pop	r31
     d7a:	ef 91       	pop	r30
     d7c:	bf 91       	pop	r27
     d7e:	af 91       	pop	r26
     d80:	9f 91       	pop	r25
     d82:	8f 91       	pop	r24
     d84:	7f 91       	pop	r23
     d86:	6f 91       	pop	r22
     d88:	5f 91       	pop	r21
     d8a:	4f 91       	pop	r20
     d8c:	3f 91       	pop	r19
     d8e:	2f 91       	pop	r18
     d90:	0f 90       	pop	r0
     d92:	0b be       	out	0x3b, r0	; 59
     d94:	0f 90       	pop	r0
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	0f 90       	pop	r0
     d9a:	1f 90       	pop	r1
     d9c:	18 95       	reti

00000d9e <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     d9e:	1f 92       	push	r1
     da0:	0f 92       	push	r0
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	0f 92       	push	r0
     da6:	11 24       	eor	r1, r1
     da8:	0b b6       	in	r0, 0x3b	; 59
     daa:	0f 92       	push	r0
     dac:	2f 93       	push	r18
     dae:	3f 93       	push	r19
     db0:	4f 93       	push	r20
     db2:	5f 93       	push	r21
     db4:	6f 93       	push	r22
     db6:	7f 93       	push	r23
     db8:	8f 93       	push	r24
     dba:	9f 93       	push	r25
     dbc:	af 93       	push	r26
     dbe:	bf 93       	push	r27
     dc0:	ef 93       	push	r30
     dc2:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     dc4:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <tc_tcd0_ccd_callback>
     dc8:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <tc_tcd0_ccd_callback+0x1>
     dcc:	30 97       	sbiw	r30, 0x00	; 0
     dce:	09 f0       	breq	.+2      	; 0xdd2 <__vector_82+0x34>
		tc_tcd0_ccd_callback();
     dd0:	19 95       	eicall
	}
}
     dd2:	ff 91       	pop	r31
     dd4:	ef 91       	pop	r30
     dd6:	bf 91       	pop	r27
     dd8:	af 91       	pop	r26
     dda:	9f 91       	pop	r25
     ddc:	8f 91       	pop	r24
     dde:	7f 91       	pop	r23
     de0:	6f 91       	pop	r22
     de2:	5f 91       	pop	r21
     de4:	4f 91       	pop	r20
     de6:	3f 91       	pop	r19
     de8:	2f 91       	pop	r18
     dea:	0f 90       	pop	r0
     dec:	0b be       	out	0x3b, r0	; 59
     dee:	0f 90       	pop	r0
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	0f 90       	pop	r0
     df4:	1f 90       	pop	r1
     df6:	18 95       	reti

00000df8 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     df8:	1f 92       	push	r1
     dfa:	0f 92       	push	r0
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	0f 92       	push	r0
     e00:	11 24       	eor	r1, r1
     e02:	0b b6       	in	r0, 0x3b	; 59
     e04:	0f 92       	push	r0
     e06:	2f 93       	push	r18
     e08:	3f 93       	push	r19
     e0a:	4f 93       	push	r20
     e0c:	5f 93       	push	r21
     e0e:	6f 93       	push	r22
     e10:	7f 93       	push	r23
     e12:	8f 93       	push	r24
     e14:	9f 93       	push	r25
     e16:	af 93       	push	r26
     e18:	bf 93       	push	r27
     e1a:	ef 93       	push	r30
     e1c:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     e1e:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <tc_tcd1_ovf_callback>
     e22:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <tc_tcd1_ovf_callback+0x1>
     e26:	30 97       	sbiw	r30, 0x00	; 0
     e28:	09 f0       	breq	.+2      	; 0xe2c <__vector_83+0x34>
		tc_tcd1_ovf_callback();
     e2a:	19 95       	eicall
	}
}
     e2c:	ff 91       	pop	r31
     e2e:	ef 91       	pop	r30
     e30:	bf 91       	pop	r27
     e32:	af 91       	pop	r26
     e34:	9f 91       	pop	r25
     e36:	8f 91       	pop	r24
     e38:	7f 91       	pop	r23
     e3a:	6f 91       	pop	r22
     e3c:	5f 91       	pop	r21
     e3e:	4f 91       	pop	r20
     e40:	3f 91       	pop	r19
     e42:	2f 91       	pop	r18
     e44:	0f 90       	pop	r0
     e46:	0b be       	out	0x3b, r0	; 59
     e48:	0f 90       	pop	r0
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	0f 90       	pop	r0
     e4e:	1f 90       	pop	r1
     e50:	18 95       	reti

00000e52 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     e52:	1f 92       	push	r1
     e54:	0f 92       	push	r0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	0b b6       	in	r0, 0x3b	; 59
     e5e:	0f 92       	push	r0
     e60:	2f 93       	push	r18
     e62:	3f 93       	push	r19
     e64:	4f 93       	push	r20
     e66:	5f 93       	push	r21
     e68:	6f 93       	push	r22
     e6a:	7f 93       	push	r23
     e6c:	8f 93       	push	r24
     e6e:	9f 93       	push	r25
     e70:	af 93       	push	r26
     e72:	bf 93       	push	r27
     e74:	ef 93       	push	r30
     e76:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     e78:	e0 91 26 20 	lds	r30, 0x2026	; 0x802026 <tc_tcd1_err_callback>
     e7c:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <tc_tcd1_err_callback+0x1>
     e80:	30 97       	sbiw	r30, 0x00	; 0
     e82:	09 f0       	breq	.+2      	; 0xe86 <__vector_84+0x34>
		tc_tcd1_err_callback();
     e84:	19 95       	eicall
	}
}
     e86:	ff 91       	pop	r31
     e88:	ef 91       	pop	r30
     e8a:	bf 91       	pop	r27
     e8c:	af 91       	pop	r26
     e8e:	9f 91       	pop	r25
     e90:	8f 91       	pop	r24
     e92:	7f 91       	pop	r23
     e94:	6f 91       	pop	r22
     e96:	5f 91       	pop	r21
     e98:	4f 91       	pop	r20
     e9a:	3f 91       	pop	r19
     e9c:	2f 91       	pop	r18
     e9e:	0f 90       	pop	r0
     ea0:	0b be       	out	0x3b, r0	; 59
     ea2:	0f 90       	pop	r0
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	0f 90       	pop	r0
     ea8:	1f 90       	pop	r1
     eaa:	18 95       	reti

00000eac <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     eac:	1f 92       	push	r1
     eae:	0f 92       	push	r0
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	0f 92       	push	r0
     eb4:	11 24       	eor	r1, r1
     eb6:	0b b6       	in	r0, 0x3b	; 59
     eb8:	0f 92       	push	r0
     eba:	2f 93       	push	r18
     ebc:	3f 93       	push	r19
     ebe:	4f 93       	push	r20
     ec0:	5f 93       	push	r21
     ec2:	6f 93       	push	r22
     ec4:	7f 93       	push	r23
     ec6:	8f 93       	push	r24
     ec8:	9f 93       	push	r25
     eca:	af 93       	push	r26
     ecc:	bf 93       	push	r27
     ece:	ef 93       	push	r30
     ed0:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     ed2:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <tc_tcd1_cca_callback>
     ed6:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <tc_tcd1_cca_callback+0x1>
     eda:	30 97       	sbiw	r30, 0x00	; 0
     edc:	09 f0       	breq	.+2      	; 0xee0 <__vector_85+0x34>
		tc_tcd1_cca_callback();
     ede:	19 95       	eicall
	}
}
     ee0:	ff 91       	pop	r31
     ee2:	ef 91       	pop	r30
     ee4:	bf 91       	pop	r27
     ee6:	af 91       	pop	r26
     ee8:	9f 91       	pop	r25
     eea:	8f 91       	pop	r24
     eec:	7f 91       	pop	r23
     eee:	6f 91       	pop	r22
     ef0:	5f 91       	pop	r21
     ef2:	4f 91       	pop	r20
     ef4:	3f 91       	pop	r19
     ef6:	2f 91       	pop	r18
     ef8:	0f 90       	pop	r0
     efa:	0b be       	out	0x3b, r0	; 59
     efc:	0f 90       	pop	r0
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	0f 90       	pop	r0
     f02:	1f 90       	pop	r1
     f04:	18 95       	reti

00000f06 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     f06:	1f 92       	push	r1
     f08:	0f 92       	push	r0
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	0f 92       	push	r0
     f0e:	11 24       	eor	r1, r1
     f10:	0b b6       	in	r0, 0x3b	; 59
     f12:	0f 92       	push	r0
     f14:	2f 93       	push	r18
     f16:	3f 93       	push	r19
     f18:	4f 93       	push	r20
     f1a:	5f 93       	push	r21
     f1c:	6f 93       	push	r22
     f1e:	7f 93       	push	r23
     f20:	8f 93       	push	r24
     f22:	9f 93       	push	r25
     f24:	af 93       	push	r26
     f26:	bf 93       	push	r27
     f28:	ef 93       	push	r30
     f2a:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     f2c:	e0 91 22 20 	lds	r30, 0x2022	; 0x802022 <tc_tcd1_ccb_callback>
     f30:	f0 91 23 20 	lds	r31, 0x2023	; 0x802023 <tc_tcd1_ccb_callback+0x1>
     f34:	30 97       	sbiw	r30, 0x00	; 0
     f36:	09 f0       	breq	.+2      	; 0xf3a <__vector_86+0x34>
		tc_tcd1_ccb_callback();
     f38:	19 95       	eicall
	}
}
     f3a:	ff 91       	pop	r31
     f3c:	ef 91       	pop	r30
     f3e:	bf 91       	pop	r27
     f40:	af 91       	pop	r26
     f42:	9f 91       	pop	r25
     f44:	8f 91       	pop	r24
     f46:	7f 91       	pop	r23
     f48:	6f 91       	pop	r22
     f4a:	5f 91       	pop	r21
     f4c:	4f 91       	pop	r20
     f4e:	3f 91       	pop	r19
     f50:	2f 91       	pop	r18
     f52:	0f 90       	pop	r0
     f54:	0b be       	out	0x3b, r0	; 59
     f56:	0f 90       	pop	r0
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	0f 90       	pop	r0
     f5c:	1f 90       	pop	r1
     f5e:	18 95       	reti

00000f60 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
     f60:	1f 92       	push	r1
     f62:	0f 92       	push	r0
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	0f 92       	push	r0
     f68:	11 24       	eor	r1, r1
     f6a:	0b b6       	in	r0, 0x3b	; 59
     f6c:	0f 92       	push	r0
     f6e:	2f 93       	push	r18
     f70:	3f 93       	push	r19
     f72:	4f 93       	push	r20
     f74:	5f 93       	push	r21
     f76:	6f 93       	push	r22
     f78:	7f 93       	push	r23
     f7a:	8f 93       	push	r24
     f7c:	9f 93       	push	r25
     f7e:	af 93       	push	r26
     f80:	bf 93       	push	r27
     f82:	ef 93       	push	r30
     f84:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
     f86:	e0 91 20 20 	lds	r30, 0x2020	; 0x802020 <tc_tce0_ovf_callback>
     f8a:	f0 91 21 20 	lds	r31, 0x2021	; 0x802021 <tc_tce0_ovf_callback+0x1>
     f8e:	30 97       	sbiw	r30, 0x00	; 0
     f90:	09 f0       	breq	.+2      	; 0xf94 <__vector_47+0x34>
		tc_tce0_ovf_callback();
     f92:	19 95       	eicall
	}
}
     f94:	ff 91       	pop	r31
     f96:	ef 91       	pop	r30
     f98:	bf 91       	pop	r27
     f9a:	af 91       	pop	r26
     f9c:	9f 91       	pop	r25
     f9e:	8f 91       	pop	r24
     fa0:	7f 91       	pop	r23
     fa2:	6f 91       	pop	r22
     fa4:	5f 91       	pop	r21
     fa6:	4f 91       	pop	r20
     fa8:	3f 91       	pop	r19
     faa:	2f 91       	pop	r18
     fac:	0f 90       	pop	r0
     fae:	0b be       	out	0x3b, r0	; 59
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti

00000fba <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     fba:	1f 92       	push	r1
     fbc:	0f 92       	push	r0
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	0f 92       	push	r0
     fc2:	11 24       	eor	r1, r1
     fc4:	0b b6       	in	r0, 0x3b	; 59
     fc6:	0f 92       	push	r0
     fc8:	2f 93       	push	r18
     fca:	3f 93       	push	r19
     fcc:	4f 93       	push	r20
     fce:	5f 93       	push	r21
     fd0:	6f 93       	push	r22
     fd2:	7f 93       	push	r23
     fd4:	8f 93       	push	r24
     fd6:	9f 93       	push	r25
     fd8:	af 93       	push	r26
     fda:	bf 93       	push	r27
     fdc:	ef 93       	push	r30
     fde:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     fe0:	e0 91 1e 20 	lds	r30, 0x201E	; 0x80201e <tc_tce0_err_callback>
     fe4:	f0 91 1f 20 	lds	r31, 0x201F	; 0x80201f <tc_tce0_err_callback+0x1>
     fe8:	30 97       	sbiw	r30, 0x00	; 0
     fea:	09 f0       	breq	.+2      	; 0xfee <__vector_48+0x34>
		tc_tce0_err_callback();
     fec:	19 95       	eicall
	}
}
     fee:	ff 91       	pop	r31
     ff0:	ef 91       	pop	r30
     ff2:	bf 91       	pop	r27
     ff4:	af 91       	pop	r26
     ff6:	9f 91       	pop	r25
     ff8:	8f 91       	pop	r24
     ffa:	7f 91       	pop	r23
     ffc:	6f 91       	pop	r22
     ffe:	5f 91       	pop	r21
    1000:	4f 91       	pop	r20
    1002:	3f 91       	pop	r19
    1004:	2f 91       	pop	r18
    1006:	0f 90       	pop	r0
    1008:	0b be       	out	0x3b, r0	; 59
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	0f 90       	pop	r0
    1010:	1f 90       	pop	r1
    1012:	18 95       	reti

00001014 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1014:	1f 92       	push	r1
    1016:	0f 92       	push	r0
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	0f 92       	push	r0
    101c:	11 24       	eor	r1, r1
    101e:	0b b6       	in	r0, 0x3b	; 59
    1020:	0f 92       	push	r0
    1022:	2f 93       	push	r18
    1024:	3f 93       	push	r19
    1026:	4f 93       	push	r20
    1028:	5f 93       	push	r21
    102a:	6f 93       	push	r22
    102c:	7f 93       	push	r23
    102e:	8f 93       	push	r24
    1030:	9f 93       	push	r25
    1032:	af 93       	push	r26
    1034:	bf 93       	push	r27
    1036:	ef 93       	push	r30
    1038:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    103a:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <tc_tce0_cca_callback>
    103e:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <tc_tce0_cca_callback+0x1>
    1042:	30 97       	sbiw	r30, 0x00	; 0
    1044:	09 f0       	breq	.+2      	; 0x1048 <__vector_49+0x34>
		tc_tce0_cca_callback();
    1046:	19 95       	eicall
	}
}
    1048:	ff 91       	pop	r31
    104a:	ef 91       	pop	r30
    104c:	bf 91       	pop	r27
    104e:	af 91       	pop	r26
    1050:	9f 91       	pop	r25
    1052:	8f 91       	pop	r24
    1054:	7f 91       	pop	r23
    1056:	6f 91       	pop	r22
    1058:	5f 91       	pop	r21
    105a:	4f 91       	pop	r20
    105c:	3f 91       	pop	r19
    105e:	2f 91       	pop	r18
    1060:	0f 90       	pop	r0
    1062:	0b be       	out	0x3b, r0	; 59
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	0f 90       	pop	r0
    106a:	1f 90       	pop	r1
    106c:	18 95       	reti

0000106e <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    106e:	1f 92       	push	r1
    1070:	0f 92       	push	r0
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	0f 92       	push	r0
    1076:	11 24       	eor	r1, r1
    1078:	0b b6       	in	r0, 0x3b	; 59
    107a:	0f 92       	push	r0
    107c:	2f 93       	push	r18
    107e:	3f 93       	push	r19
    1080:	4f 93       	push	r20
    1082:	5f 93       	push	r21
    1084:	6f 93       	push	r22
    1086:	7f 93       	push	r23
    1088:	8f 93       	push	r24
    108a:	9f 93       	push	r25
    108c:	af 93       	push	r26
    108e:	bf 93       	push	r27
    1090:	ef 93       	push	r30
    1092:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1094:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <tc_tce0_ccb_callback>
    1098:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <tc_tce0_ccb_callback+0x1>
    109c:	30 97       	sbiw	r30, 0x00	; 0
    109e:	09 f0       	breq	.+2      	; 0x10a2 <__vector_50+0x34>
		tc_tce0_ccb_callback();
    10a0:	19 95       	eicall
	}
}
    10a2:	ff 91       	pop	r31
    10a4:	ef 91       	pop	r30
    10a6:	bf 91       	pop	r27
    10a8:	af 91       	pop	r26
    10aa:	9f 91       	pop	r25
    10ac:	8f 91       	pop	r24
    10ae:	7f 91       	pop	r23
    10b0:	6f 91       	pop	r22
    10b2:	5f 91       	pop	r21
    10b4:	4f 91       	pop	r20
    10b6:	3f 91       	pop	r19
    10b8:	2f 91       	pop	r18
    10ba:	0f 90       	pop	r0
    10bc:	0b be       	out	0x3b, r0	; 59
    10be:	0f 90       	pop	r0
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	0f 90       	pop	r0
    10c4:	1f 90       	pop	r1
    10c6:	18 95       	reti

000010c8 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    10c8:	1f 92       	push	r1
    10ca:	0f 92       	push	r0
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	0f 92       	push	r0
    10d0:	11 24       	eor	r1, r1
    10d2:	0b b6       	in	r0, 0x3b	; 59
    10d4:	0f 92       	push	r0
    10d6:	2f 93       	push	r18
    10d8:	3f 93       	push	r19
    10da:	4f 93       	push	r20
    10dc:	5f 93       	push	r21
    10de:	6f 93       	push	r22
    10e0:	7f 93       	push	r23
    10e2:	8f 93       	push	r24
    10e4:	9f 93       	push	r25
    10e6:	af 93       	push	r26
    10e8:	bf 93       	push	r27
    10ea:	ef 93       	push	r30
    10ec:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    10ee:	e0 91 18 20 	lds	r30, 0x2018	; 0x802018 <tc_tce0_ccc_callback>
    10f2:	f0 91 19 20 	lds	r31, 0x2019	; 0x802019 <tc_tce0_ccc_callback+0x1>
    10f6:	30 97       	sbiw	r30, 0x00	; 0
    10f8:	09 f0       	breq	.+2      	; 0x10fc <__vector_51+0x34>
		tc_tce0_ccc_callback();
    10fa:	19 95       	eicall
	}
}
    10fc:	ff 91       	pop	r31
    10fe:	ef 91       	pop	r30
    1100:	bf 91       	pop	r27
    1102:	af 91       	pop	r26
    1104:	9f 91       	pop	r25
    1106:	8f 91       	pop	r24
    1108:	7f 91       	pop	r23
    110a:	6f 91       	pop	r22
    110c:	5f 91       	pop	r21
    110e:	4f 91       	pop	r20
    1110:	3f 91       	pop	r19
    1112:	2f 91       	pop	r18
    1114:	0f 90       	pop	r0
    1116:	0b be       	out	0x3b, r0	; 59
    1118:	0f 90       	pop	r0
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	0f 90       	pop	r0
    111e:	1f 90       	pop	r1
    1120:	18 95       	reti

00001122 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1122:	1f 92       	push	r1
    1124:	0f 92       	push	r0
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	0f 92       	push	r0
    112a:	11 24       	eor	r1, r1
    112c:	0b b6       	in	r0, 0x3b	; 59
    112e:	0f 92       	push	r0
    1130:	2f 93       	push	r18
    1132:	3f 93       	push	r19
    1134:	4f 93       	push	r20
    1136:	5f 93       	push	r21
    1138:	6f 93       	push	r22
    113a:	7f 93       	push	r23
    113c:	8f 93       	push	r24
    113e:	9f 93       	push	r25
    1140:	af 93       	push	r26
    1142:	bf 93       	push	r27
    1144:	ef 93       	push	r30
    1146:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1148:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <tc_tce0_ccd_callback>
    114c:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <tc_tce0_ccd_callback+0x1>
    1150:	30 97       	sbiw	r30, 0x00	; 0
    1152:	09 f0       	breq	.+2      	; 0x1156 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    1154:	19 95       	eicall
	}
}
    1156:	ff 91       	pop	r31
    1158:	ef 91       	pop	r30
    115a:	bf 91       	pop	r27
    115c:	af 91       	pop	r26
    115e:	9f 91       	pop	r25
    1160:	8f 91       	pop	r24
    1162:	7f 91       	pop	r23
    1164:	6f 91       	pop	r22
    1166:	5f 91       	pop	r21
    1168:	4f 91       	pop	r20
    116a:	3f 91       	pop	r19
    116c:	2f 91       	pop	r18
    116e:	0f 90       	pop	r0
    1170:	0b be       	out	0x3b, r0	; 59
    1172:	0f 90       	pop	r0
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	0f 90       	pop	r0
    1178:	1f 90       	pop	r1
    117a:	18 95       	reti

0000117c <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    117c:	1f 92       	push	r1
    117e:	0f 92       	push	r0
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	0f 92       	push	r0
    1184:	11 24       	eor	r1, r1
    1186:	0b b6       	in	r0, 0x3b	; 59
    1188:	0f 92       	push	r0
    118a:	2f 93       	push	r18
    118c:	3f 93       	push	r19
    118e:	4f 93       	push	r20
    1190:	5f 93       	push	r21
    1192:	6f 93       	push	r22
    1194:	7f 93       	push	r23
    1196:	8f 93       	push	r24
    1198:	9f 93       	push	r25
    119a:	af 93       	push	r26
    119c:	bf 93       	push	r27
    119e:	ef 93       	push	r30
    11a0:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    11a2:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <tc_tce1_ovf_callback>
    11a6:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <tc_tce1_ovf_callback+0x1>
    11aa:	30 97       	sbiw	r30, 0x00	; 0
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <__vector_53+0x34>
		tc_tce1_ovf_callback();
    11ae:	19 95       	eicall
	}
}
    11b0:	ff 91       	pop	r31
    11b2:	ef 91       	pop	r30
    11b4:	bf 91       	pop	r27
    11b6:	af 91       	pop	r26
    11b8:	9f 91       	pop	r25
    11ba:	8f 91       	pop	r24
    11bc:	7f 91       	pop	r23
    11be:	6f 91       	pop	r22
    11c0:	5f 91       	pop	r21
    11c2:	4f 91       	pop	r20
    11c4:	3f 91       	pop	r19
    11c6:	2f 91       	pop	r18
    11c8:	0f 90       	pop	r0
    11ca:	0b be       	out	0x3b, r0	; 59
    11cc:	0f 90       	pop	r0
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	0f 90       	pop	r0
    11d2:	1f 90       	pop	r1
    11d4:	18 95       	reti

000011d6 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    11d6:	1f 92       	push	r1
    11d8:	0f 92       	push	r0
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	0f 92       	push	r0
    11de:	11 24       	eor	r1, r1
    11e0:	0b b6       	in	r0, 0x3b	; 59
    11e2:	0f 92       	push	r0
    11e4:	2f 93       	push	r18
    11e6:	3f 93       	push	r19
    11e8:	4f 93       	push	r20
    11ea:	5f 93       	push	r21
    11ec:	6f 93       	push	r22
    11ee:	7f 93       	push	r23
    11f0:	8f 93       	push	r24
    11f2:	9f 93       	push	r25
    11f4:	af 93       	push	r26
    11f6:	bf 93       	push	r27
    11f8:	ef 93       	push	r30
    11fa:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    11fc:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <tc_tce1_err_callback>
    1200:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <tc_tce1_err_callback+0x1>
    1204:	30 97       	sbiw	r30, 0x00	; 0
    1206:	09 f0       	breq	.+2      	; 0x120a <__vector_54+0x34>
		tc_tce1_err_callback();
    1208:	19 95       	eicall
	}
}
    120a:	ff 91       	pop	r31
    120c:	ef 91       	pop	r30
    120e:	bf 91       	pop	r27
    1210:	af 91       	pop	r26
    1212:	9f 91       	pop	r25
    1214:	8f 91       	pop	r24
    1216:	7f 91       	pop	r23
    1218:	6f 91       	pop	r22
    121a:	5f 91       	pop	r21
    121c:	4f 91       	pop	r20
    121e:	3f 91       	pop	r19
    1220:	2f 91       	pop	r18
    1222:	0f 90       	pop	r0
    1224:	0b be       	out	0x3b, r0	; 59
    1226:	0f 90       	pop	r0
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	0f 90       	pop	r0
    122c:	1f 90       	pop	r1
    122e:	18 95       	reti

00001230 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    1230:	1f 92       	push	r1
    1232:	0f 92       	push	r0
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	0f 92       	push	r0
    1238:	11 24       	eor	r1, r1
    123a:	0b b6       	in	r0, 0x3b	; 59
    123c:	0f 92       	push	r0
    123e:	2f 93       	push	r18
    1240:	3f 93       	push	r19
    1242:	4f 93       	push	r20
    1244:	5f 93       	push	r21
    1246:	6f 93       	push	r22
    1248:	7f 93       	push	r23
    124a:	8f 93       	push	r24
    124c:	9f 93       	push	r25
    124e:	af 93       	push	r26
    1250:	bf 93       	push	r27
    1252:	ef 93       	push	r30
    1254:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    1256:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <tc_tce1_cca_callback>
    125a:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <tc_tce1_cca_callback+0x1>
    125e:	30 97       	sbiw	r30, 0x00	; 0
    1260:	09 f0       	breq	.+2      	; 0x1264 <__vector_55+0x34>
		tc_tce1_cca_callback();
    1262:	19 95       	eicall
	}
}
    1264:	ff 91       	pop	r31
    1266:	ef 91       	pop	r30
    1268:	bf 91       	pop	r27
    126a:	af 91       	pop	r26
    126c:	9f 91       	pop	r25
    126e:	8f 91       	pop	r24
    1270:	7f 91       	pop	r23
    1272:	6f 91       	pop	r22
    1274:	5f 91       	pop	r21
    1276:	4f 91       	pop	r20
    1278:	3f 91       	pop	r19
    127a:	2f 91       	pop	r18
    127c:	0f 90       	pop	r0
    127e:	0b be       	out	0x3b, r0	; 59
    1280:	0f 90       	pop	r0
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	0f 90       	pop	r0
    1286:	1f 90       	pop	r1
    1288:	18 95       	reti

0000128a <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    128a:	1f 92       	push	r1
    128c:	0f 92       	push	r0
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	0f 92       	push	r0
    1292:	11 24       	eor	r1, r1
    1294:	0b b6       	in	r0, 0x3b	; 59
    1296:	0f 92       	push	r0
    1298:	2f 93       	push	r18
    129a:	3f 93       	push	r19
    129c:	4f 93       	push	r20
    129e:	5f 93       	push	r21
    12a0:	6f 93       	push	r22
    12a2:	7f 93       	push	r23
    12a4:	8f 93       	push	r24
    12a6:	9f 93       	push	r25
    12a8:	af 93       	push	r26
    12aa:	bf 93       	push	r27
    12ac:	ef 93       	push	r30
    12ae:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    12b0:	e0 91 0e 20 	lds	r30, 0x200E	; 0x80200e <tc_tce1_ccb_callback>
    12b4:	f0 91 0f 20 	lds	r31, 0x200F	; 0x80200f <tc_tce1_ccb_callback+0x1>
    12b8:	30 97       	sbiw	r30, 0x00	; 0
    12ba:	09 f0       	breq	.+2      	; 0x12be <__vector_56+0x34>
		tc_tce1_ccb_callback();
    12bc:	19 95       	eicall
	}
}
    12be:	ff 91       	pop	r31
    12c0:	ef 91       	pop	r30
    12c2:	bf 91       	pop	r27
    12c4:	af 91       	pop	r26
    12c6:	9f 91       	pop	r25
    12c8:	8f 91       	pop	r24
    12ca:	7f 91       	pop	r23
    12cc:	6f 91       	pop	r22
    12ce:	5f 91       	pop	r21
    12d0:	4f 91       	pop	r20
    12d2:	3f 91       	pop	r19
    12d4:	2f 91       	pop	r18
    12d6:	0f 90       	pop	r0
    12d8:	0b be       	out	0x3b, r0	; 59
    12da:	0f 90       	pop	r0
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	0f 90       	pop	r0
    12e0:	1f 90       	pop	r1
    12e2:	18 95       	reti

000012e4 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    12e4:	1f 92       	push	r1
    12e6:	0f 92       	push	r0
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	0f 92       	push	r0
    12ec:	11 24       	eor	r1, r1
    12ee:	0b b6       	in	r0, 0x3b	; 59
    12f0:	0f 92       	push	r0
    12f2:	2f 93       	push	r18
    12f4:	3f 93       	push	r19
    12f6:	4f 93       	push	r20
    12f8:	5f 93       	push	r21
    12fa:	6f 93       	push	r22
    12fc:	7f 93       	push	r23
    12fe:	8f 93       	push	r24
    1300:	9f 93       	push	r25
    1302:	af 93       	push	r26
    1304:	bf 93       	push	r27
    1306:	ef 93       	push	r30
    1308:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    130a:	e0 91 0c 20 	lds	r30, 0x200C	; 0x80200c <tc_tcf0_ovf_callback>
    130e:	f0 91 0d 20 	lds	r31, 0x200D	; 0x80200d <tc_tcf0_ovf_callback+0x1>
    1312:	30 97       	sbiw	r30, 0x00	; 0
    1314:	09 f0       	breq	.+2      	; 0x1318 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    1316:	19 95       	eicall
	}
}
    1318:	ff 91       	pop	r31
    131a:	ef 91       	pop	r30
    131c:	bf 91       	pop	r27
    131e:	af 91       	pop	r26
    1320:	9f 91       	pop	r25
    1322:	8f 91       	pop	r24
    1324:	7f 91       	pop	r23
    1326:	6f 91       	pop	r22
    1328:	5f 91       	pop	r21
    132a:	4f 91       	pop	r20
    132c:	3f 91       	pop	r19
    132e:	2f 91       	pop	r18
    1330:	0f 90       	pop	r0
    1332:	0b be       	out	0x3b, r0	; 59
    1334:	0f 90       	pop	r0
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	0f 90       	pop	r0
    133a:	1f 90       	pop	r1
    133c:	18 95       	reti

0000133e <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    133e:	1f 92       	push	r1
    1340:	0f 92       	push	r0
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	0f 92       	push	r0
    1346:	11 24       	eor	r1, r1
    1348:	0b b6       	in	r0, 0x3b	; 59
    134a:	0f 92       	push	r0
    134c:	2f 93       	push	r18
    134e:	3f 93       	push	r19
    1350:	4f 93       	push	r20
    1352:	5f 93       	push	r21
    1354:	6f 93       	push	r22
    1356:	7f 93       	push	r23
    1358:	8f 93       	push	r24
    135a:	9f 93       	push	r25
    135c:	af 93       	push	r26
    135e:	bf 93       	push	r27
    1360:	ef 93       	push	r30
    1362:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    1364:	e0 91 0a 20 	lds	r30, 0x200A	; 0x80200a <tc_tcf0_err_callback>
    1368:	f0 91 0b 20 	lds	r31, 0x200B	; 0x80200b <tc_tcf0_err_callback+0x1>
    136c:	30 97       	sbiw	r30, 0x00	; 0
    136e:	09 f0       	breq	.+2      	; 0x1372 <__vector_109+0x34>
		tc_tcf0_err_callback();
    1370:	19 95       	eicall
	}
}
    1372:	ff 91       	pop	r31
    1374:	ef 91       	pop	r30
    1376:	bf 91       	pop	r27
    1378:	af 91       	pop	r26
    137a:	9f 91       	pop	r25
    137c:	8f 91       	pop	r24
    137e:	7f 91       	pop	r23
    1380:	6f 91       	pop	r22
    1382:	5f 91       	pop	r21
    1384:	4f 91       	pop	r20
    1386:	3f 91       	pop	r19
    1388:	2f 91       	pop	r18
    138a:	0f 90       	pop	r0
    138c:	0b be       	out	0x3b, r0	; 59
    138e:	0f 90       	pop	r0
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	0f 90       	pop	r0
    1394:	1f 90       	pop	r1
    1396:	18 95       	reti

00001398 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1398:	1f 92       	push	r1
    139a:	0f 92       	push	r0
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	0f 92       	push	r0
    13a0:	11 24       	eor	r1, r1
    13a2:	0b b6       	in	r0, 0x3b	; 59
    13a4:	0f 92       	push	r0
    13a6:	2f 93       	push	r18
    13a8:	3f 93       	push	r19
    13aa:	4f 93       	push	r20
    13ac:	5f 93       	push	r21
    13ae:	6f 93       	push	r22
    13b0:	7f 93       	push	r23
    13b2:	8f 93       	push	r24
    13b4:	9f 93       	push	r25
    13b6:	af 93       	push	r26
    13b8:	bf 93       	push	r27
    13ba:	ef 93       	push	r30
    13bc:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    13be:	e0 91 08 20 	lds	r30, 0x2008	; 0x802008 <tc_tcf0_cca_callback>
    13c2:	f0 91 09 20 	lds	r31, 0x2009	; 0x802009 <tc_tcf0_cca_callback+0x1>
    13c6:	30 97       	sbiw	r30, 0x00	; 0
    13c8:	09 f0       	breq	.+2      	; 0x13cc <__vector_110+0x34>
		tc_tcf0_cca_callback();
    13ca:	19 95       	eicall
	}
}
    13cc:	ff 91       	pop	r31
    13ce:	ef 91       	pop	r30
    13d0:	bf 91       	pop	r27
    13d2:	af 91       	pop	r26
    13d4:	9f 91       	pop	r25
    13d6:	8f 91       	pop	r24
    13d8:	7f 91       	pop	r23
    13da:	6f 91       	pop	r22
    13dc:	5f 91       	pop	r21
    13de:	4f 91       	pop	r20
    13e0:	3f 91       	pop	r19
    13e2:	2f 91       	pop	r18
    13e4:	0f 90       	pop	r0
    13e6:	0b be       	out	0x3b, r0	; 59
    13e8:	0f 90       	pop	r0
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	0f 90       	pop	r0
    13ee:	1f 90       	pop	r1
    13f0:	18 95       	reti

000013f2 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    13f2:	1f 92       	push	r1
    13f4:	0f 92       	push	r0
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	0f 92       	push	r0
    13fa:	11 24       	eor	r1, r1
    13fc:	0b b6       	in	r0, 0x3b	; 59
    13fe:	0f 92       	push	r0
    1400:	2f 93       	push	r18
    1402:	3f 93       	push	r19
    1404:	4f 93       	push	r20
    1406:	5f 93       	push	r21
    1408:	6f 93       	push	r22
    140a:	7f 93       	push	r23
    140c:	8f 93       	push	r24
    140e:	9f 93       	push	r25
    1410:	af 93       	push	r26
    1412:	bf 93       	push	r27
    1414:	ef 93       	push	r30
    1416:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1418:	e0 91 06 20 	lds	r30, 0x2006	; 0x802006 <tc_tcf0_ccb_callback>
    141c:	f0 91 07 20 	lds	r31, 0x2007	; 0x802007 <tc_tcf0_ccb_callback+0x1>
    1420:	30 97       	sbiw	r30, 0x00	; 0
    1422:	09 f0       	breq	.+2      	; 0x1426 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    1424:	19 95       	eicall
	}
}
    1426:	ff 91       	pop	r31
    1428:	ef 91       	pop	r30
    142a:	bf 91       	pop	r27
    142c:	af 91       	pop	r26
    142e:	9f 91       	pop	r25
    1430:	8f 91       	pop	r24
    1432:	7f 91       	pop	r23
    1434:	6f 91       	pop	r22
    1436:	5f 91       	pop	r21
    1438:	4f 91       	pop	r20
    143a:	3f 91       	pop	r19
    143c:	2f 91       	pop	r18
    143e:	0f 90       	pop	r0
    1440:	0b be       	out	0x3b, r0	; 59
    1442:	0f 90       	pop	r0
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	0f 90       	pop	r0
    1448:	1f 90       	pop	r1
    144a:	18 95       	reti

0000144c <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    144c:	1f 92       	push	r1
    144e:	0f 92       	push	r0
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	0f 92       	push	r0
    1454:	11 24       	eor	r1, r1
    1456:	0b b6       	in	r0, 0x3b	; 59
    1458:	0f 92       	push	r0
    145a:	2f 93       	push	r18
    145c:	3f 93       	push	r19
    145e:	4f 93       	push	r20
    1460:	5f 93       	push	r21
    1462:	6f 93       	push	r22
    1464:	7f 93       	push	r23
    1466:	8f 93       	push	r24
    1468:	9f 93       	push	r25
    146a:	af 93       	push	r26
    146c:	bf 93       	push	r27
    146e:	ef 93       	push	r30
    1470:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1472:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <tc_tcf0_ccc_callback>
    1476:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <tc_tcf0_ccc_callback+0x1>
    147a:	30 97       	sbiw	r30, 0x00	; 0
    147c:	09 f0       	breq	.+2      	; 0x1480 <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    147e:	19 95       	eicall
	}
}
    1480:	ff 91       	pop	r31
    1482:	ef 91       	pop	r30
    1484:	bf 91       	pop	r27
    1486:	af 91       	pop	r26
    1488:	9f 91       	pop	r25
    148a:	8f 91       	pop	r24
    148c:	7f 91       	pop	r23
    148e:	6f 91       	pop	r22
    1490:	5f 91       	pop	r21
    1492:	4f 91       	pop	r20
    1494:	3f 91       	pop	r19
    1496:	2f 91       	pop	r18
    1498:	0f 90       	pop	r0
    149a:	0b be       	out	0x3b, r0	; 59
    149c:	0f 90       	pop	r0
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	0f 90       	pop	r0
    14a2:	1f 90       	pop	r1
    14a4:	18 95       	reti

000014a6 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    14a6:	1f 92       	push	r1
    14a8:	0f 92       	push	r0
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	0f 92       	push	r0
    14ae:	11 24       	eor	r1, r1
    14b0:	0b b6       	in	r0, 0x3b	; 59
    14b2:	0f 92       	push	r0
    14b4:	2f 93       	push	r18
    14b6:	3f 93       	push	r19
    14b8:	4f 93       	push	r20
    14ba:	5f 93       	push	r21
    14bc:	6f 93       	push	r22
    14be:	7f 93       	push	r23
    14c0:	8f 93       	push	r24
    14c2:	9f 93       	push	r25
    14c4:	af 93       	push	r26
    14c6:	bf 93       	push	r27
    14c8:	ef 93       	push	r30
    14ca:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    14cc:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <tc_tcf0_ccd_callback>
    14d0:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <tc_tcf0_ccd_callback+0x1>
    14d4:	30 97       	sbiw	r30, 0x00	; 0
    14d6:	09 f0       	breq	.+2      	; 0x14da <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    14d8:	19 95       	eicall
	}
}
    14da:	ff 91       	pop	r31
    14dc:	ef 91       	pop	r30
    14de:	bf 91       	pop	r27
    14e0:	af 91       	pop	r26
    14e2:	9f 91       	pop	r25
    14e4:	8f 91       	pop	r24
    14e6:	7f 91       	pop	r23
    14e8:	6f 91       	pop	r22
    14ea:	5f 91       	pop	r21
    14ec:	4f 91       	pop	r20
    14ee:	3f 91       	pop	r19
    14f0:	2f 91       	pop	r18
    14f2:	0f 90       	pop	r0
    14f4:	0b be       	out	0x3b, r0	; 59
    14f6:	0f 90       	pop	r0
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	0f 90       	pop	r0
    14fc:	1f 90       	pop	r1
    14fe:	18 95       	reti

00001500 <alarm>:
ADCA.REFCTRL=ADC_REFSEL_INTVCC_gc;
ADCA.PRESCALER=ADC_PRESCALER_DIV4_gc;
ADCA.CH0.CTRL= ADC_CH_INPUTMODE_SINGLEENDED_gc;
ADCA.CH0.MUXCTRL=ADC_CH_MUXPOS_PIN0_gc;
ADCA.CH0.INTCTRL=ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_HI_gc;
ADCA.CTRLA=ADC_ENABLE_bm;
    1500:	15 d9       	rcall	.-3542   	; 0x72c <rtc_get_time>
    1502:	6e 5f       	subi	r22, 0xFE	; 254
    1504:	7f 4f       	sbci	r23, 0xFF	; 255
    1506:	8f 4f       	sbci	r24, 0xFF	; 255
    1508:	9f 4f       	sbci	r25, 0xFF	; 255
    150a:	21 d9       	rcall	.-3518   	; 0x74e <rtc_set_alarm>
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <__TEXT_REGION_LENGTH__+0x7007e7>
    1512:	08 95       	ret

00001514 <disable_JTAG>:

/************************************************************************/
/* Lowers power consumption                                                                     */
/************************************************************************/
void disable_JTAG(void){
CCP = CCP_IOREG_gc;
    1514:	88 ed       	ldi	r24, 0xD8	; 216
    1516:	84 bf       	out	0x34, r24	; 52
MCU.MCUCR=MCU_JTAGD_bm;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
    151e:	08 95       	ret

00001520 <disable_peripherals>:
PR.PRPD= PR_TWI_bm | PR_USART0_bm | PR_USART1_bm | PR_SPI_bm | PR_HIRES_bm | PR_TC0_bm | PR_TC1_bm;
PR.PRPE= PR_TWI_bm | PR_USART0_bm | PR_USART1_bm | PR_SPI_bm | PR_HIRES_bm | PR_TC0_bm | PR_TC1_bm;
PR.PRPF= PR_TWI_bm | PR_USART0_bm | PR_USART1_bm | PR_SPI_bm | PR_HIRES_bm | PR_TC0_bm | PR_TC1_bm;
}

static void alarm(uint32_t time){
    1520:	e0 e7       	ldi	r30, 0x70	; 112
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	83 e5       	ldi	r24, 0x53	; 83
    1526:	80 83       	st	Z, r24
    1528:	85 e0       	ldi	r24, 0x05	; 5
    152a:	81 83       	std	Z+1, r24	; 0x01
    152c:	82 83       	std	Z+2, r24	; 0x02
    152e:	8f e7       	ldi	r24, 0x7F	; 127
    1530:	83 83       	std	Z+3, r24	; 0x03
    1532:	84 83       	std	Z+4, r24	; 0x04
    1534:	85 83       	std	Z+5, r24	; 0x05
    1536:	86 83       	std	Z+6, r24	; 0x06
    1538:	08 95       	ret

0000153a <main>:
    153a:	87 e0       	ldi	r24, 0x07	; 7
    153c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1540:	0e 94 6d 01 	call	0x2da	; 0x2da <board_init>
    1544:	0e 94 20 01 	call	0x240	; 0x240 <sysclk_init>
    1548:	ea e4       	ldi	r30, 0x4A	; 74
    154a:	f0 e2       	ldi	r31, 0x20	; 32
    154c:	10 82       	st	Z, r1
    154e:	11 82       	std	Z+1, r1	; 0x01
    1550:	12 82       	std	Z+2, r1	; 0x02
    1552:	13 82       	std	Z+3, r1	; 0x03
    1554:	14 82       	std	Z+4, r1	; 0x04
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	85 83       	std	Z+5, r24	; 0x05
    155a:	dc df       	rcall	.-72     	; 0x1514 <disable_JTAG>
    155c:	e1 df       	rcall	.-62     	; 0x1520 <disable_peripherals>
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	92 e0       	ldi	r25, 0x02	; 2
    1562:	0e 94 c9 01 	call	0x392	; 0x392 <adc_enable>
    1566:	03 d9       	rcall	.-3578   	; 0x76e <rtc_init>
    1568:	80 e8       	ldi	r24, 0x80	; 128
    156a:	9a e0       	ldi	r25, 0x0A	; 10
    156c:	fb d8       	rcall	.-3594   	; 0x764 <rtc_set_callback>
    156e:	78 94       	sei
    1570:	e8 e4       	ldi	r30, 0x48	; 72
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	81 60       	ori	r24, 0x01	; 1
    1578:	80 83       	st	Z, r24
    157a:	d8 d8       	rcall	.-3664   	; 0x72c <rtc_get_time>
    157c:	6d 5f       	subi	r22, 0xFD	; 253
    157e:	7f 4f       	sbci	r23, 0xFF	; 255
    1580:	8f 4f       	sbci	r24, 0xFF	; 255
    1582:	9f 4f       	sbci	r25, 0xFF	; 255
    1584:	e4 d8       	rcall	.-3640   	; 0x74e <rtc_set_alarm>
    1586:	e8 e4       	ldi	r30, 0x48	; 72
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	81 7f       	andi	r24, 0xF1	; 241
    158e:	86 60       	ori	r24, 0x06	; 6
    1590:	80 83       	st	Z, r24
    1592:	88 95       	sleep
    1594:	fa cf       	rjmp	.-12     	; 0x158a <main+0x50>

00001596 <_exit>:
    1596:	f8 94       	cli

00001598 <__stop_program>:
    1598:	ff cf       	rjmp	.-2      	; 0x1598 <__stop_program>
