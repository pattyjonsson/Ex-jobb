
LOW_POWER_DEMO_XMEGA1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  00000a10  00000aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00802006  00802006  00000aaa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aaa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00000adc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000b20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007814  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a8f  00000000  00000000  00008484  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c74  00000000  00000000  0000bf13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  0000eb88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002e99c  00000000  00000000  0000ee18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dbe  00000000  00000000  0003d7b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0003e572  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000a3e6  00000000  00000000  0003e68a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	1a c1       	rjmp	.+564    	; 0x23a <__bad_interrupt>
   6:	00 00       	nop
   8:	18 c1       	rjmp	.+560    	; 0x23a <__bad_interrupt>
   a:	00 00       	nop
   c:	16 c1       	rjmp	.+556    	; 0x23a <__bad_interrupt>
   e:	00 00       	nop
  10:	14 c1       	rjmp	.+552    	; 0x23a <__bad_interrupt>
  12:	00 00       	nop
  14:	12 c1       	rjmp	.+548    	; 0x23a <__bad_interrupt>
  16:	00 00       	nop
  18:	10 c1       	rjmp	.+544    	; 0x23a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0e c1       	rjmp	.+540    	; 0x23a <__bad_interrupt>
  1e:	00 00       	nop
  20:	0c c1       	rjmp	.+536    	; 0x23a <__bad_interrupt>
  22:	00 00       	nop
  24:	0a c1       	rjmp	.+532    	; 0x23a <__bad_interrupt>
  26:	00 00       	nop
  28:	08 c1       	rjmp	.+528    	; 0x23a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	06 c1       	rjmp	.+524    	; 0x23a <__bad_interrupt>
  2e:	00 00       	nop
  30:	04 c1       	rjmp	.+520    	; 0x23a <__bad_interrupt>
  32:	00 00       	nop
  34:	02 c1       	rjmp	.+516    	; 0x23a <__bad_interrupt>
  36:	00 00       	nop
  38:	00 c1       	rjmp	.+512    	; 0x23a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fe c0       	rjmp	.+508    	; 0x23a <__bad_interrupt>
  3e:	00 00       	nop
  40:	fc c0       	rjmp	.+504    	; 0x23a <__bad_interrupt>
  42:	00 00       	nop
  44:	fa c0       	rjmp	.+500    	; 0x23a <__bad_interrupt>
  46:	00 00       	nop
  48:	f8 c0       	rjmp	.+496    	; 0x23a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f6 c0       	rjmp	.+492    	; 0x23a <__bad_interrupt>
  4e:	00 00       	nop
  50:	f4 c0       	rjmp	.+488    	; 0x23a <__bad_interrupt>
  52:	00 00       	nop
  54:	f2 c0       	rjmp	.+484    	; 0x23a <__bad_interrupt>
  56:	00 00       	nop
  58:	f0 c0       	rjmp	.+480    	; 0x23a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ee c0       	rjmp	.+476    	; 0x23a <__bad_interrupt>
  5e:	00 00       	nop
  60:	ec c0       	rjmp	.+472    	; 0x23a <__bad_interrupt>
  62:	00 00       	nop
  64:	ea c0       	rjmp	.+468    	; 0x23a <__bad_interrupt>
  66:	00 00       	nop
  68:	e8 c0       	rjmp	.+464    	; 0x23a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e6 c0       	rjmp	.+460    	; 0x23a <__bad_interrupt>
  6e:	00 00       	nop
  70:	e4 c0       	rjmp	.+456    	; 0x23a <__bad_interrupt>
  72:	00 00       	nop
  74:	e2 c0       	rjmp	.+452    	; 0x23a <__bad_interrupt>
  76:	00 00       	nop
  78:	e0 c0       	rjmp	.+448    	; 0x23a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	de c0       	rjmp	.+444    	; 0x23a <__bad_interrupt>
  7e:	00 00       	nop
  80:	dc c0       	rjmp	.+440    	; 0x23a <__bad_interrupt>
  82:	00 00       	nop
  84:	da c0       	rjmp	.+436    	; 0x23a <__bad_interrupt>
  86:	00 00       	nop
  88:	d8 c0       	rjmp	.+432    	; 0x23a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d6 c0       	rjmp	.+428    	; 0x23a <__bad_interrupt>
  8e:	00 00       	nop
  90:	d4 c0       	rjmp	.+424    	; 0x23a <__bad_interrupt>
  92:	00 00       	nop
  94:	d2 c0       	rjmp	.+420    	; 0x23a <__bad_interrupt>
  96:	00 00       	nop
  98:	d0 c0       	rjmp	.+416    	; 0x23a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ce c0       	rjmp	.+412    	; 0x23a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	cc c0       	rjmp	.+408    	; 0x23a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	ca c0       	rjmp	.+404    	; 0x23a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c8 c0       	rjmp	.+400    	; 0x23a <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2e c3       	rjmp	.+1628   	; 0x70a <__vector_43>
  ae:	00 00       	nop
  b0:	c4 c0       	rjmp	.+392    	; 0x23a <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c2 c0       	rjmp	.+388    	; 0x23a <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c0 c0       	rjmp	.+384    	; 0x23a <__bad_interrupt>
  ba:	00 00       	nop
  bc:	be c0       	rjmp	.+380    	; 0x23a <__bad_interrupt>
  be:	00 00       	nop
  c0:	bc c0       	rjmp	.+376    	; 0x23a <__bad_interrupt>
  c2:	00 00       	nop
  c4:	ba c0       	rjmp	.+372    	; 0x23a <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b8 c0       	rjmp	.+368    	; 0x23a <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b6 c0       	rjmp	.+364    	; 0x23a <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b4 c0       	rjmp	.+360    	; 0x23a <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b2 c0       	rjmp	.+356    	; 0x23a <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b0 c0       	rjmp	.+352    	; 0x23a <__bad_interrupt>
  da:	00 00       	nop
  dc:	ae c0       	rjmp	.+348    	; 0x23a <__bad_interrupt>
  de:	00 00       	nop
  e0:	ac c0       	rjmp	.+344    	; 0x23a <__bad_interrupt>
  e2:	00 00       	nop
  e4:	aa c0       	rjmp	.+340    	; 0x23a <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a8 c0       	rjmp	.+336    	; 0x23a <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a6 c0       	rjmp	.+332    	; 0x23a <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a4 c0       	rjmp	.+328    	; 0x23a <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a2 c0       	rjmp	.+324    	; 0x23a <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a0 c0       	rjmp	.+320    	; 0x23a <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9e c0       	rjmp	.+316    	; 0x23a <__bad_interrupt>
  fe:	00 00       	nop
 100:	9c c0       	rjmp	.+312    	; 0x23a <__bad_interrupt>
 102:	00 00       	nop
 104:	9a c0       	rjmp	.+308    	; 0x23a <__bad_interrupt>
 106:	00 00       	nop
 108:	98 c0       	rjmp	.+304    	; 0x23a <__bad_interrupt>
 10a:	00 00       	nop
 10c:	96 c0       	rjmp	.+300    	; 0x23a <__bad_interrupt>
 10e:	00 00       	nop
 110:	94 c0       	rjmp	.+296    	; 0x23a <__bad_interrupt>
 112:	00 00       	nop
 114:	92 c0       	rjmp	.+292    	; 0x23a <__bad_interrupt>
 116:	00 00       	nop
 118:	90 c0       	rjmp	.+288    	; 0x23a <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8e c0       	rjmp	.+284    	; 0x23a <__bad_interrupt>
 11e:	00 00       	nop
 120:	8c c0       	rjmp	.+280    	; 0x23a <__bad_interrupt>
 122:	00 00       	nop
 124:	8a c0       	rjmp	.+276    	; 0x23a <__bad_interrupt>
 126:	00 00       	nop
 128:	88 c0       	rjmp	.+272    	; 0x23a <__bad_interrupt>
 12a:	00 00       	nop
 12c:	86 c0       	rjmp	.+268    	; 0x23a <__bad_interrupt>
 12e:	00 00       	nop
 130:	84 c0       	rjmp	.+264    	; 0x23a <__bad_interrupt>
 132:	00 00       	nop
 134:	82 c0       	rjmp	.+260    	; 0x23a <__bad_interrupt>
 136:	00 00       	nop
 138:	80 c0       	rjmp	.+256    	; 0x23a <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7e c0       	rjmp	.+252    	; 0x23a <__bad_interrupt>
 13e:	00 00       	nop
 140:	7c c0       	rjmp	.+248    	; 0x23a <__bad_interrupt>
 142:	00 00       	nop
 144:	7a c0       	rjmp	.+244    	; 0x23a <__bad_interrupt>
 146:	00 00       	nop
 148:	78 c0       	rjmp	.+240    	; 0x23a <__bad_interrupt>
 14a:	00 00       	nop
 14c:	76 c0       	rjmp	.+236    	; 0x23a <__bad_interrupt>
 14e:	00 00       	nop
 150:	74 c0       	rjmp	.+232    	; 0x23a <__bad_interrupt>
 152:	00 00       	nop
 154:	72 c0       	rjmp	.+228    	; 0x23a <__bad_interrupt>
 156:	00 00       	nop
 158:	70 c0       	rjmp	.+224    	; 0x23a <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6e c0       	rjmp	.+220    	; 0x23a <__bad_interrupt>
 15e:	00 00       	nop
 160:	6c c0       	rjmp	.+216    	; 0x23a <__bad_interrupt>
 162:	00 00       	nop
 164:	6a c0       	rjmp	.+212    	; 0x23a <__bad_interrupt>
 166:	00 00       	nop
 168:	68 c0       	rjmp	.+208    	; 0x23a <__bad_interrupt>
 16a:	00 00       	nop
 16c:	66 c0       	rjmp	.+204    	; 0x23a <__bad_interrupt>
 16e:	00 00       	nop
 170:	64 c0       	rjmp	.+200    	; 0x23a <__bad_interrupt>
 172:	00 00       	nop
 174:	62 c0       	rjmp	.+196    	; 0x23a <__bad_interrupt>
 176:	00 00       	nop
 178:	60 c0       	rjmp	.+192    	; 0x23a <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5e c0       	rjmp	.+188    	; 0x23a <__bad_interrupt>
 17e:	00 00       	nop
 180:	5c c0       	rjmp	.+184    	; 0x23a <__bad_interrupt>
 182:	00 00       	nop
 184:	5a c0       	rjmp	.+180    	; 0x23a <__bad_interrupt>
 186:	00 00       	nop
 188:	58 c0       	rjmp	.+176    	; 0x23a <__bad_interrupt>
 18a:	00 00       	nop
 18c:	56 c0       	rjmp	.+172    	; 0x23a <__bad_interrupt>
 18e:	00 00       	nop
 190:	54 c0       	rjmp	.+168    	; 0x23a <__bad_interrupt>
 192:	00 00       	nop
 194:	52 c0       	rjmp	.+164    	; 0x23a <__bad_interrupt>
 196:	00 00       	nop
 198:	50 c0       	rjmp	.+160    	; 0x23a <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4e c0       	rjmp	.+156    	; 0x23a <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	f5 c2       	rjmp	.+1514   	; 0x78c <__vector_104>
 1a2:	00 00       	nop
 1a4:	4a c0       	rjmp	.+148    	; 0x23a <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	48 c0       	rjmp	.+144    	; 0x23a <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	46 c0       	rjmp	.+140    	; 0x23a <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	44 c0       	rjmp	.+136    	; 0x23a <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	42 c0       	rjmp	.+132    	; 0x23a <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	40 c0       	rjmp	.+128    	; 0x23a <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3e c0       	rjmp	.+124    	; 0x23a <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	3c c0       	rjmp	.+120    	; 0x23a <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3a c0       	rjmp	.+116    	; 0x23a <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	38 c0       	rjmp	.+112    	; 0x23a <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	36 c0       	rjmp	.+108    	; 0x23a <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	34 c0       	rjmp	.+104    	; 0x23a <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	32 c0       	rjmp	.+100    	; 0x23a <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	30 c0       	rjmp	.+96     	; 0x23a <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2e c0       	rjmp	.+92     	; 0x23a <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	2c c0       	rjmp	.+88     	; 0x23a <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2a c0       	rjmp	.+84     	; 0x23a <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	28 c0       	rjmp	.+80     	; 0x23a <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	26 c0       	rjmp	.+76     	; 0x23a <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	24 c0       	rjmp	.+72     	; 0x23a <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	22 c0       	rjmp	.+68     	; 0x23a <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	20 c0       	rjmp	.+64     	; 0x23a <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e0 e1       	ldi	r30, 0x10	; 16
 214:	fa e0       	ldi	r31, 0x0A	; 10
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a6 30       	cpi	r26, 0x06	; 6
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	20 e2       	ldi	r18, 0x20	; 32
 228:	a6 e0       	ldi	r26, 0x06	; 6
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	ad 30       	cpi	r26, 0x0D	; 13
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	eb d2       	rcall	.+1494   	; 0x80e <main>
 238:	e9 c3       	rjmp	.+2002   	; 0xa0c <_exit>

0000023a <__bad_interrupt>:
 23a:	e2 ce       	rjmp	.-572    	; 0x0 <__vectors>

0000023c <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;

	cpu_irq_restore(flags);
}
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
 242:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
 246:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
 24a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
 24e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
 252:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
 256:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 25a:	08 95       	ret

0000025c <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	1f 92       	push	r1
 262:	cd b7       	in	r28, 0x3d	; 61
 264:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 266:	9f b7       	in	r25, 0x3f	; 63
 268:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
 26a:	f8 94       	cli
	return flags;
 26c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
 26e:	e8 2f       	mov	r30, r24
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	e0 59       	subi	r30, 0x90	; 144
 274:	ff 4f       	sbci	r31, 0xFF	; 255
 276:	80 81       	ld	r24, Z
 278:	68 2b       	or	r22, r24
 27a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 27c:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
 27e:	0f 90       	pop	r0
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 290:	c6 2f       	mov	r28, r22
 292:	d0 e0       	ldi	r29, 0x00	; 0
 294:	de 01       	movw	r26, r28
 296:	02 2e       	mov	r0, r18
 298:	02 c0       	rjmp	.+4      	; 0x29e <ioport_configure_port_pin+0x18>
 29a:	b5 95       	asr	r27
 29c:	a7 95       	ror	r26
 29e:	0a 94       	dec	r0
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <ioport_configure_port_pin+0x14>
 2a2:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 2a4:	50 8b       	std	Z+16, r21	; 0x10
 2a6:	2f 5f       	subi	r18, 0xFF	; 255
 2a8:	3f 4f       	sbci	r19, 0xFF	; 255
 2aa:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 2ac:	28 30       	cpi	r18, 0x08	; 8
 2ae:	31 05       	cpc	r19, r1
 2b0:	89 f7       	brne	.-30     	; 0x294 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 2b2:	40 ff       	sbrs	r20, 0
 2b4:	0a c0       	rjmp	.+20     	; 0x2ca <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
 2b6:	41 ff       	sbrs	r20, 1
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 2ba:	fc 01       	movw	r30, r24
 2bc:	65 83       	std	Z+5, r22	; 0x05
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 2c0:	fc 01       	movw	r30, r24
 2c2:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 2c4:	fc 01       	movw	r30, r24
 2c6:	61 83       	std	Z+1, r22	; 0x01
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 2ca:	fc 01       	movw	r30, r24
 2cc:	62 83       	std	Z+2, r22	; 0x02
	}
}
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 2d4:	43 e0       	ldi	r20, 0x03	; 3
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	80 ee       	ldi	r24, 0xE0	; 224
 2dc:	97 e0       	ldi	r25, 0x07	; 7
 2de:	d3 df       	rcall	.-90     	; 0x286 <ioport_configure_port_pin>
 2e0:	43 e0       	ldi	r20, 0x03	; 3
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	62 e0       	ldi	r22, 0x02	; 2
 2e6:	80 ee       	ldi	r24, 0xE0	; 224
 2e8:	97 e0       	ldi	r25, 0x07	; 7
 2ea:	cd df       	rcall	.-102    	; 0x286 <ioport_configure_port_pin>
 2ec:	43 e0       	ldi	r20, 0x03	; 3
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	60 e1       	ldi	r22, 0x10	; 16
 2f2:	80 e6       	ldi	r24, 0x60	; 96
 2f4:	96 e0       	ldi	r25, 0x06	; 6
 2f6:	c7 df       	rcall	.-114    	; 0x286 <ioport_configure_port_pin>
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	50 e4       	ldi	r21, 0x40	; 64
 2fc:	60 e2       	ldi	r22, 0x20	; 32
 2fe:	80 e6       	ldi	r24, 0x60	; 96
 300:	96 e0       	ldi	r25, 0x06	; 6
 302:	c1 df       	rcall	.-126    	; 0x286 <ioport_configure_port_pin>
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	5b e1       	ldi	r21, 0x1B	; 27
 308:	60 e2       	ldi	r22, 0x20	; 32
 30a:	80 e8       	ldi	r24, 0x80	; 128
 30c:	96 e0       	ldi	r25, 0x06	; 6
 30e:	bb df       	rcall	.-138    	; 0x286 <ioport_configure_port_pin>
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	5b e1       	ldi	r21, 0x1B	; 27
 314:	62 e0       	ldi	r22, 0x02	; 2
 316:	80 ea       	ldi	r24, 0xA0	; 160
 318:	96 e0       	ldi	r25, 0x06	; 6
 31a:	b5 df       	rcall	.-150    	; 0x286 <ioport_configure_port_pin>
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	5b e1       	ldi	r21, 0x1B	; 27
 320:	64 e0       	ldi	r22, 0x04	; 4
 322:	80 ea       	ldi	r24, 0xA0	; 160
 324:	96 e0       	ldi	r25, 0x06	; 6
 326:	af cf       	rjmp	.-162    	; 0x286 <ioport_configure_port_pin>
 328:	08 95       	ret

0000032a <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
 32a:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
 32c:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
 32e:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
 330:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
 332:	60 83       	st	Z, r22
	ret                             // Return to caller
 334:	08 95       	ret

00000336 <wdt_disable>:
 *  automatically ignored during the change enable period. Disable functions
 *  operate asynchronously with immediate effect.
 */
void wdt_disable(void)
{
	uint8_t temp = (WDT.CTRL & ~WDT_ENABLE_bm) | (1 << WDT_CEN_bp);
 336:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	ccp_write_io((void *)&WDT.CTRL, temp);
 33a:	6c 7f       	andi	r22, 0xFC	; 252
 33c:	61 60       	ori	r22, 0x01	; 1
 33e:	80 e8       	ldi	r24, 0x80	; 128
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	f3 cf       	rjmp	.-26     	; 0x32a <ccp_write_io>
 344:	08 95       	ret

00000346 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
 346:	04 c0       	rjmp	.+8      	; 0x350 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
 348:	61 50       	subi	r22, 0x01	; 1
 34a:	71 09       	sbc	r23, r1
 34c:	81 09       	sbc	r24, r1
 34e:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 350:	61 15       	cp	r22, r1
 352:	71 05       	cpc	r23, r1
 354:	81 05       	cpc	r24, r1
 356:	91 05       	cpc	r25, r1
 358:	b9 f7       	brne	.-18     	; 0x348 <__portable_avr_delay_cycles+0x2>
 35a:	08 95       	ret

0000035c <lowpower_interrupt>:
 *
 * This function updates the sleep mode locks so that the device cycles through
 * the different sleep modes.
 */
static void lowpower_interrupt(void)
{
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
 364:	2c 97       	sbiw	r28, 0x0c	; 12
 366:	cd bf       	out	0x3d, r28	; 61
 368:	de bf       	out	0x3e, r29	; 62
	static uint8_t state = 0;

	switch (state) {
 36a:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 36e:	83 30       	cpi	r24, 0x03	; 3
 370:	09 f4       	brne	.+2      	; 0x374 <lowpower_interrupt+0x18>
 372:	76 c0       	rjmp	.+236    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 374:	30 f4       	brcc	.+12     	; 0x382 <lowpower_interrupt+0x26>
 376:	81 30       	cpi	r24, 0x01	; 1
 378:	69 f1       	breq	.+90     	; 0x3d4 <lowpower_interrupt+0x78>
 37a:	82 30       	cpi	r24, 0x02	; 2
 37c:	09 f4       	brne	.+2      	; 0x380 <lowpower_interrupt+0x24>
 37e:	4d c0       	rjmp	.+154    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 380:	06 c0       	rjmp	.+12     	; 0x38e <lowpower_interrupt+0x32>
 382:	84 30       	cpi	r24, 0x04	; 4
 384:	09 f4       	brne	.+2      	; 0x388 <lowpower_interrupt+0x2c>
 386:	8f c0       	rjmp	.+286    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 388:	85 30       	cpi	r24, 0x05	; 5
 38a:	09 f4       	brne	.+2      	; 0x38e <lowpower_interrupt+0x32>
 38c:	af c0       	rjmp	.+350    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
 38e:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <sleepmgr_locks>
 392:	81 11       	cpse	r24, r1
 394:	01 c0       	rjmp	.+2      	; 0x398 <lowpower_interrupt+0x3c>
 396:	ff cf       	rjmp	.-2      	; 0x396 <lowpower_interrupt+0x3a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 398:	8f b7       	in	r24, 0x3f	; 63
 39a:	8b 87       	std	Y+11, r24	; 0x0b
	cpu_irq_disable();
 39c:	f8 94       	cli
	return flags;
 39e:	9b 85       	ldd	r25, Y+11	; 0x0b
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
 3a0:	e7 e0       	ldi	r30, 0x07	; 7
 3a2:	f0 e2       	ldi	r31, 0x20	; 32
 3a4:	80 81       	ld	r24, Z
 3a6:	81 50       	subi	r24, 0x01	; 1
 3a8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 3aa:	9f bf       	out	0x3f, r25	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
 3ac:	81 81       	ldd	r24, Z+1	; 0x01
 3ae:	8f 3f       	cpi	r24, 0xFF	; 255
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <lowpower_interrupt+0x58>
 3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <lowpower_interrupt+0x56>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 3b4:	8f b7       	in	r24, 0x3f	; 63
 3b6:	8c 87       	std	Y+12, r24	; 0x0c
	cpu_irq_disable();
 3b8:	f8 94       	cli
	return flags;
 3ba:	9c 85       	ldd	r25, Y+12	; 0x0c
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
 3bc:	e7 e0       	ldi	r30, 0x07	; 7
 3be:	f0 e2       	ldi	r31, 0x20	; 32
 3c0:	81 81       	ldd	r24, Z+1	; 0x01
 3c2:	8f 5f       	subi	r24, 0xFF	; 255
 3c4:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 3c6:	9f bf       	out	0x3f, r25	; 63
	/* The device starts out in active mode. Go to Idle. */
	default:
	case 0:
		sleepmgr_unlock_mode(SLEEPMGR_ACTIVE);
		sleepmgr_lock_mode(SLEEPMGR_IDLE);
		++state;
 3c8:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 3cc:	8f 5f       	subi	r24, 0xFF	; 255
 3ce:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <__data_end>
		break;
 3d2:	ac c0       	rjmp	.+344    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
 3d4:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <sleepmgr_locks+0x1>
 3d8:	81 11       	cpse	r24, r1
 3da:	01 c0       	rjmp	.+2      	; 0x3de <lowpower_interrupt+0x82>
 3dc:	ff cf       	rjmp	.-2      	; 0x3dc <lowpower_interrupt+0x80>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 3de:	8f b7       	in	r24, 0x3f	; 63
 3e0:	89 87       	std	Y+9, r24	; 0x09
	cpu_irq_disable();
 3e2:	f8 94       	cli
	return flags;
 3e4:	99 85       	ldd	r25, Y+9	; 0x09
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
 3e6:	e7 e0       	ldi	r30, 0x07	; 7
 3e8:	f0 e2       	ldi	r31, 0x20	; 32
 3ea:	81 81       	ldd	r24, Z+1	; 0x01
 3ec:	81 50       	subi	r24, 0x01	; 1
 3ee:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 3f0:	9f bf       	out	0x3f, r25	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
 3f2:	82 81       	ldd	r24, Z+2	; 0x02
 3f4:	8f 3f       	cpi	r24, 0xFF	; 255
 3f6:	09 f4       	brne	.+2      	; 0x3fa <lowpower_interrupt+0x9e>
 3f8:	ff cf       	rjmp	.-2      	; 0x3f8 <lowpower_interrupt+0x9c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 3fa:	8f b7       	in	r24, 0x3f	; 63
 3fc:	8a 87       	std	Y+10, r24	; 0x0a
	cpu_irq_disable();
 3fe:	f8 94       	cli
	return flags;
 400:	9a 85       	ldd	r25, Y+10	; 0x0a
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
 402:	e7 e0       	ldi	r30, 0x07	; 7
 404:	f0 e2       	ldi	r31, 0x20	; 32
 406:	82 81       	ldd	r24, Z+2	; 0x02
 408:	8f 5f       	subi	r24, 0xFF	; 255
 40a:	82 83       	std	Z+2, r24	; 0x02
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 40c:	9f bf       	out	0x3f, r25	; 63

	/* Go to extended Standby */
	case 1:
		sleepmgr_unlock_mode(SLEEPMGR_IDLE);
		sleepmgr_lock_mode(SLEEPMGR_ESTDBY);
		++state;
 40e:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 412:	8f 5f       	subi	r24, 0xFF	; 255
 414:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <__data_end>
		break;
 418:	89 c0       	rjmp	.+274    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
 41a:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <sleepmgr_locks+0x2>
 41e:	81 11       	cpse	r24, r1
 420:	01 c0       	rjmp	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 422:	ff cf       	rjmp	.-2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 424:	8f b7       	in	r24, 0x3f	; 63
 426:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
 428:	f8 94       	cli
	return flags;
 42a:	9f 81       	ldd	r25, Y+7	; 0x07
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
 42c:	e7 e0       	ldi	r30, 0x07	; 7
 42e:	f0 e2       	ldi	r31, 0x20	; 32
 430:	82 81       	ldd	r24, Z+2	; 0x02
 432:	81 50       	subi	r24, 0x01	; 1
 434:	82 83       	std	Z+2, r24	; 0x02
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 436:	9f bf       	out	0x3f, r25	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
 438:	83 81       	ldd	r24, Z+3	; 0x03
 43a:	8f 3f       	cpi	r24, 0xFF	; 255
 43c:	09 f4       	brne	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43e:	ff cf       	rjmp	.-2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 440:	8f b7       	in	r24, 0x3f	; 63
 442:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
 444:	f8 94       	cli
	return flags;
 446:	98 85       	ldd	r25, Y+8	; 0x08
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
 448:	e7 e0       	ldi	r30, 0x07	; 7
 44a:	f0 e2       	ldi	r31, 0x20	; 32
 44c:	83 81       	ldd	r24, Z+3	; 0x03
 44e:	8f 5f       	subi	r24, 0xFF	; 255
 450:	83 83       	std	Z+3, r24	; 0x03
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 452:	9f bf       	out	0x3f, r25	; 63

	/* Go to power save */
	case 2:
		sleepmgr_unlock_mode(SLEEPMGR_ESTDBY);
		sleepmgr_lock_mode(SLEEPMGR_PSAVE);
		++state;
 454:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 458:	8f 5f       	subi	r24, 0xFF	; 255
 45a:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <__data_end>
		break;
 45e:	66 c0       	rjmp	.+204    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
 460:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <sleepmgr_locks+0x3>
 464:	81 11       	cpse	r24, r1
 466:	01 c0       	rjmp	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 468:	ff cf       	rjmp	.-2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 46a:	8f b7       	in	r24, 0x3f	; 63
 46c:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
 46e:	f8 94       	cli
	return flags;
 470:	9d 81       	ldd	r25, Y+5	; 0x05
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
 472:	e7 e0       	ldi	r30, 0x07	; 7
 474:	f0 e2       	ldi	r31, 0x20	; 32
 476:	83 81       	ldd	r24, Z+3	; 0x03
 478:	81 50       	subi	r24, 0x01	; 1
 47a:	83 83       	std	Z+3, r24	; 0x03
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 47c:	9f bf       	out	0x3f, r25	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
 47e:	84 81       	ldd	r24, Z+4	; 0x04
 480:	8f 3f       	cpi	r24, 0xFF	; 255
 482:	09 f4       	brne	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 484:	ff cf       	rjmp	.-2      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 486:	8f b7       	in	r24, 0x3f	; 63
 488:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
 48a:	f8 94       	cli
	return flags;
 48c:	9e 81       	ldd	r25, Y+6	; 0x06
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
 48e:	e7 e0       	ldi	r30, 0x07	; 7
 490:	f0 e2       	ldi	r31, 0x20	; 32
 492:	84 81       	ldd	r24, Z+4	; 0x04
 494:	8f 5f       	subi	r24, 0xFF	; 255
 496:	84 83       	std	Z+4, r24	; 0x04
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 498:	9f bf       	out	0x3f, r25	; 63

	/* Go to standby */
	case 3:
		sleepmgr_unlock_mode(SLEEPMGR_PSAVE);
		sleepmgr_lock_mode(SLEEPMGR_STDBY);
		++state;
 49a:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 49e:	8f 5f       	subi	r24, 0xFF	; 255
 4a0:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <__data_end>
		break;
 4a4:	43 c0       	rjmp	.+134    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
 4a6:	80 91 0b 20 	lds	r24, 0x200B	; 0x80200b <sleepmgr_locks+0x4>
 4aa:	81 11       	cpse	r24, r1
 4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4ae:	ff cf       	rjmp	.-2      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 4b0:	8f b7       	in	r24, 0x3f	; 63
 4b2:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
 4b4:	f8 94       	cli
	return flags;
 4b6:	9b 81       	ldd	r25, Y+3	; 0x03
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
 4b8:	e7 e0       	ldi	r30, 0x07	; 7
 4ba:	f0 e2       	ldi	r31, 0x20	; 32
 4bc:	84 81       	ldd	r24, Z+4	; 0x04
 4be:	81 50       	subi	r24, 0x01	; 1
 4c0:	84 83       	std	Z+4, r24	; 0x04
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 4c2:	9f bf       	out	0x3f, r25	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
 4c4:	85 81       	ldd	r24, Z+5	; 0x05
 4c6:	8f 3f       	cpi	r24, 0xFF	; 255
 4c8:	09 f4       	brne	.+2      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4ca:	ff cf       	rjmp	.-2      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 4cc:	8f b7       	in	r24, 0x3f	; 63
 4ce:	8c 83       	std	Y+4, r24	; 0x04
	cpu_irq_disable();
 4d0:	f8 94       	cli
	return flags;
 4d2:	9c 81       	ldd	r25, Y+4	; 0x04
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
 4d4:	e7 e0       	ldi	r30, 0x07	; 7
 4d6:	f0 e2       	ldi	r31, 0x20	; 32
 4d8:	85 81       	ldd	r24, Z+5	; 0x05
 4da:	8f 5f       	subi	r24, 0xFF	; 255
 4dc:	85 83       	std	Z+5, r24	; 0x05
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 4de:	9f bf       	out	0x3f, r25	; 63

	/* Go to power down */
	case 4:
		sleepmgr_unlock_mode(SLEEPMGR_STDBY);
		sleepmgr_lock_mode(SLEEPMGR_PDOWN);
		++state;
 4e0:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 4e4:	8f 5f       	subi	r24, 0xFF	; 255
 4e6:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <__data_end>
		break;
 4ea:	20 c0       	rjmp	.+64     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
 4ec:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <sleepmgr_locks+0x5>
 4f0:	81 11       	cpse	r24, r1
 4f2:	01 c0       	rjmp	.+2      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4f4:	ff cf       	rjmp	.-2      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 4f6:	8f b7       	in	r24, 0x3f	; 63
 4f8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 4fa:	f8 94       	cli
	return flags;
 4fc:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
 4fe:	e7 e0       	ldi	r30, 0x07	; 7
 500:	f0 e2       	ldi	r31, 0x20	; 32
 502:	85 81       	ldd	r24, Z+5	; 0x05
 504:	81 50       	subi	r24, 0x01	; 1
 506:	85 83       	std	Z+5, r24	; 0x05
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 508:	9f bf       	out	0x3f, r25	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
 50a:	81 81       	ldd	r24, Z+1	; 0x01
 50c:	8f 3f       	cpi	r24, 0xFF	; 255
 50e:	09 f4       	brne	.+2      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 510:	ff cf       	rjmp	.-2      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 512:	8f b7       	in	r24, 0x3f	; 63
 514:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
 516:	f8 94       	cli
	return flags;
 518:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
 51a:	e7 e0       	ldi	r30, 0x07	; 7
 51c:	f0 e2       	ldi	r31, 0x20	; 32
 51e:	81 81       	ldd	r24, Z+1	; 0x01
 520:	8f 5f       	subi	r24, 0xFF	; 255
 522:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 524:	9f bf       	out	0x3f, r25	; 63

	/* Go back to idle */
	case 5:
		sleepmgr_unlock_mode(SLEEPMGR_PDOWN);
		sleepmgr_lock_mode(SLEEPMGR_IDLE);
		state = 1;
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <__data_end>
		break;
	}
}
 52c:	2c 96       	adiw	r28, 0x0c	; 12
 52e:	cd bf       	out	0x3d, r28	; 61
 530:	de bf       	out	0x3e, r29	; 62
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	08 95       	ret

00000538 <sysclk_disable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_disable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
 538:	00 97       	sbiw	r24, 0x00	; 0
 53a:	09 f4       	brne	.+2      	; 0x53e <sysclk_disable_peripheral_clock+0x6>
 53c:	e5 c0       	rjmp	.+458    	; 0x708 <sysclk_disable_peripheral_clock+0x1d0>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
 53e:	80 3c       	cpi	r24, 0xC0	; 192
 540:	91 05       	cpc	r25, r1
 542:	21 f4       	brne	.+8      	; 0x54c <sysclk_disable_peripheral_clock+0x14>
		sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
 544:	60 e1       	ldi	r22, 0x10	; 16
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	89 ce       	rjmp	.-750    	; 0x25c <sysclk_disable_module>
 54a:	08 95       	ret
	else if (module == &RTC) {
		sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
 54c:	80 38       	cpi	r24, 0x80	; 128
 54e:	21 e0       	ldi	r18, 0x01	; 1
 550:	92 07       	cpc	r25, r18
 552:	21 f4       	brne	.+8      	; 0x55c <sysclk_disable_peripheral_clock+0x24>
		sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
 554:	62 e0       	ldi	r22, 0x02	; 2
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	81 ce       	rjmp	.-766    	; 0x25c <sysclk_disable_module>
 55a:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
 55c:	81 15       	cp	r24, r1
 55e:	21 e0       	ldi	r18, 0x01	; 1
 560:	92 07       	cpc	r25, r18
		sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
 562:	21 f4       	brne	.+8      	; 0x56c <sysclk_disable_peripheral_clock+0x34>
 564:	61 e0       	ldi	r22, 0x01	; 1
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	79 ce       	rjmp	.-782    	; 0x25c <sysclk_disable_module>
	else if (module == &EDMA) {
		sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
 56a:	08 95       	ret
 56c:	80 38       	cpi	r24, 0x80	; 128
 56e:	23 e0       	ldi	r18, 0x03	; 3
		sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_AC);
 570:	92 07       	cpc	r25, r18
 572:	21 f4       	brne	.+8      	; 0x57c <sysclk_disable_peripheral_clock+0x44>
 574:	61 e0       	ldi	r22, 0x01	; 1
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	71 ce       	rjmp	.-798    	; 0x25c <sysclk_disable_module>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
 57a:	08 95       	ret
 57c:	80 39       	cpi	r24, 0x90	; 144
 57e:	23 e0       	ldi	r18, 0x03	; 3
		sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_AC);
 580:	92 07       	cpc	r25, r18
 582:	21 f4       	brne	.+8      	; 0x58c <sysclk_disable_peripheral_clock+0x54>
 584:	61 e0       	ldi	r22, 0x01	; 1
 586:	82 e0       	ldi	r24, 0x02	; 2
 588:	69 ce       	rjmp	.-814    	; 0x25c <sysclk_disable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
 58a:	08 95       	ret
 58c:	81 15       	cp	r24, r1
 58e:	22 e0       	ldi	r18, 0x02	; 2
		sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
 590:	92 07       	cpc	r25, r18
 592:	21 f4       	brne	.+8      	; 0x59c <sysclk_disable_peripheral_clock+0x64>
 594:	62 e0       	ldi	r22, 0x02	; 2
 596:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
 598:	61 ce       	rjmp	.-830    	; 0x25c <sysclk_disable_module>
 59a:	08 95       	ret
 59c:	80 34       	cpi	r24, 0x40	; 64
		sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
 59e:	22 e0       	ldi	r18, 0x02	; 2
 5a0:	92 07       	cpc	r25, r18
 5a2:	21 f4       	brne	.+8      	; 0x5ac <sysclk_disable_peripheral_clock+0x74>
 5a4:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
 5a6:	82 e0       	ldi	r24, 0x02	; 2
 5a8:	59 ce       	rjmp	.-846    	; 0x25c <sysclk_disable_module>
 5aa:	08 95       	ret
 5ac:	80 32       	cpi	r24, 0x20	; 32
		sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_DAC);
 5ae:	23 e0       	ldi	r18, 0x03	; 3
 5b0:	92 07       	cpc	r25, r18
 5b2:	21 f4       	brne	.+8      	; 0x5bc <sysclk_disable_peripheral_clock+0x84>
 5b4:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	51 ce       	rjmp	.-862    	; 0x25c <sysclk_disable_module>
 5ba:	08 95       	ret
 5bc:	81 15       	cp	r24, r1
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC0);
 5be:	28 e0       	ldi	r18, 0x08	; 8
 5c0:	92 07       	cpc	r25, r18
 5c2:	21 f4       	brne	.+8      	; 0x5cc <sysclk_disable_peripheral_clock+0x94>
 5c4:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
 5c6:	83 e0       	ldi	r24, 0x03	; 3
 5c8:	49 ce       	rjmp	.-878    	; 0x25c <sysclk_disable_module>
 5ca:	08 95       	ret
 5cc:	81 15       	cp	r24, r1
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC0);
 5ce:	29 e0       	ldi	r18, 0x09	; 9
 5d0:	92 07       	cpc	r25, r18
 5d2:	21 f4       	brne	.+8      	; 0x5dc <sysclk_disable_peripheral_clock+0xa4>
 5d4:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
 5d6:	84 e0       	ldi	r24, 0x04	; 4
 5d8:	41 ce       	rjmp	.-894    	; 0x25c <sysclk_disable_module>
 5da:	08 95       	ret
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_TC0);
 5dc:	81 15       	cp	r24, r1
 5de:	2a e0       	ldi	r18, 0x0A	; 10
 5e0:	92 07       	cpc	r25, r18
 5e2:	21 f4       	brne	.+8      	; 0x5ec <sysclk_disable_peripheral_clock+0xb4>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
 5e4:	61 e0       	ldi	r22, 0x01	; 1
 5e6:	85 e0       	ldi	r24, 0x05	; 5
 5e8:	39 ce       	rjmp	.-910    	; 0x25c <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_F, SYSCLK_TC0);
 5ea:	08 95       	ret
 5ec:	81 15       	cp	r24, r1
 5ee:	2b e0       	ldi	r18, 0x0B	; 11
 5f0:	92 07       	cpc	r25, r18
 5f2:	21 f4       	brne	.+8      	; 0x5fc <sysclk_disable_peripheral_clock+0xc4>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
 5f4:	61 e0       	ldi	r22, 0x01	; 1
 5f6:	86 e0       	ldi	r24, 0x06	; 6
 5f8:	31 ce       	rjmp	.-926    	; 0x25c <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC1);
 5fa:	08 95       	ret
 5fc:	80 34       	cpi	r24, 0x40	; 64
 5fe:	28 e0       	ldi	r18, 0x08	; 8
 600:	92 07       	cpc	r25, r18
 602:	21 f4       	brne	.+8      	; 0x60c <sysclk_disable_peripheral_clock+0xd4>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
 604:	62 e0       	ldi	r22, 0x02	; 2
 606:	83 e0       	ldi	r24, 0x03	; 3
 608:	29 ce       	rjmp	.-942    	; 0x25c <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC1);
 60a:	08 95       	ret
 60c:	80 34       	cpi	r24, 0x40	; 64
 60e:	29 e0       	ldi	r18, 0x09	; 9
 610:	92 07       	cpc	r25, r18
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
 612:	21 f4       	brne	.+8      	; 0x61c <sysclk_disable_peripheral_clock+0xe4>
 614:	62 e0       	ldi	r22, 0x02	; 2
 616:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_TC1);
 618:	21 ce       	rjmp	.-958    	; 0x25c <sysclk_disable_module>
 61a:	08 95       	ret
 61c:	80 34       	cpi	r24, 0x40	; 64
 61e:	2a e0       	ldi	r18, 0x0A	; 10
	else if (module == &TCD5) {
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
 620:	92 07       	cpc	r25, r18
 622:	21 f4       	brne	.+8      	; 0x62c <sysclk_disable_peripheral_clock+0xf4>
 624:	62 e0       	ldi	r22, 0x02	; 2
 626:	85 e0       	ldi	r24, 0x05	; 5
			sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
 628:	19 ce       	rjmp	.-974    	; 0x25c <sysclk_disable_module>
 62a:	08 95       	ret
 62c:	80 39       	cpi	r24, 0x90	; 144
 62e:	28 e0       	ldi	r18, 0x08	; 8
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
 630:	92 07       	cpc	r25, r18
 632:	21 f4       	brne	.+8      	; 0x63c <sysclk_disable_peripheral_clock+0x104>
 634:	64 e0       	ldi	r22, 0x04	; 4
 636:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
 638:	11 ce       	rjmp	.-990    	; 0x25c <sysclk_disable_module>
 63a:	08 95       	ret
 63c:	80 39       	cpi	r24, 0x90	; 144
 63e:	29 e0       	ldi	r18, 0x09	; 9
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
 640:	92 07       	cpc	r25, r18
 642:	21 f4       	brne	.+8      	; 0x64c <sysclk_disable_peripheral_clock+0x114>
 644:	64 e0       	ldi	r22, 0x04	; 4
 646:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
 648:	09 ce       	rjmp	.-1006   	; 0x25c <sysclk_disable_module>
 64a:	08 95       	ret
 64c:	80 39       	cpi	r24, 0x90	; 144
 64e:	2a e0       	ldi	r18, 0x0A	; 10
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
 650:	92 07       	cpc	r25, r18
 652:	21 f4       	brne	.+8      	; 0x65c <sysclk_disable_peripheral_clock+0x124>
 654:	64 e0       	ldi	r22, 0x04	; 4
		sysclk_disable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
 656:	85 e0       	ldi	r24, 0x05	; 5
 658:	01 ce       	rjmp	.-1022   	; 0x25c <sysclk_disable_module>
 65a:	08 95       	ret
 65c:	80 39       	cpi	r24, 0x90	; 144
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
 65e:	2b e0       	ldi	r18, 0x0B	; 11
 660:	92 07       	cpc	r25, r18
 662:	21 f4       	brne	.+8      	; 0x66c <sysclk_disable_peripheral_clock+0x134>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_SPI);
 664:	64 e0       	ldi	r22, 0x04	; 4
 666:	86 e0       	ldi	r24, 0x06	; 6
 668:	f9 cd       	rjmp	.-1038   	; 0x25c <sysclk_disable_module>
 66a:	08 95       	ret
 66c:	80 3c       	cpi	r24, 0xC0	; 192
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
 66e:	28 e0       	ldi	r18, 0x08	; 8
 670:	92 07       	cpc	r25, r18
 672:	21 f4       	brne	.+8      	; 0x67c <sysclk_disable_peripheral_clock+0x144>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_SPI);
 674:	68 e0       	ldi	r22, 0x08	; 8
 676:	83 e0       	ldi	r24, 0x03	; 3
 678:	f1 cd       	rjmp	.-1054   	; 0x25c <sysclk_disable_module>
 67a:	08 95       	ret
 67c:	80 3c       	cpi	r24, 0xC0	; 192
	else if (module == &SPIF) {
		sysclk_disable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
 67e:	29 e0       	ldi	r18, 0x09	; 9
 680:	92 07       	cpc	r25, r18
 682:	21 f4       	brne	.+8      	; 0x68c <sysclk_disable_peripheral_clock+0x154>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_USART0);
 684:	68 e0       	ldi	r22, 0x08	; 8
 686:	84 e0       	ldi	r24, 0x04	; 4
 688:	e9 cd       	rjmp	.-1070   	; 0x25c <sysclk_disable_module>
 68a:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
 68c:	80 3a       	cpi	r24, 0xA0	; 160
 68e:	28 e0       	ldi	r18, 0x08	; 8
 690:	92 07       	cpc	r25, r18
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_USART0);
 692:	21 f4       	brne	.+8      	; 0x69c <sysclk_disable_peripheral_clock+0x164>
 694:	60 e1       	ldi	r22, 0x10	; 16
 696:	83 e0       	ldi	r24, 0x03	; 3
 698:	e1 cd       	rjmp	.-1086   	; 0x25c <sysclk_disable_module>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
 69a:	08 95       	ret
 69c:	80 3a       	cpi	r24, 0xA0	; 160
 69e:	29 e0       	ldi	r18, 0x09	; 9
 6a0:	92 07       	cpc	r25, r18
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_USART0);
 6a2:	21 f4       	brne	.+8      	; 0x6ac <sysclk_disable_peripheral_clock+0x174>
 6a4:	60 e1       	ldi	r22, 0x10	; 16
 6a6:	84 e0       	ldi	r24, 0x04	; 4
 6a8:	d9 cd       	rjmp	.-1102   	; 0x25c <sysclk_disable_module>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
 6aa:	08 95       	ret
 6ac:	80 3a       	cpi	r24, 0xA0	; 160
 6ae:	2a e0       	ldi	r18, 0x0A	; 10
 6b0:	92 07       	cpc	r25, r18
		sysclk_disable_module(SYSCLK_PORT_F, SYSCLK_USART0);
 6b2:	21 f4       	brne	.+8      	; 0x6bc <sysclk_disable_peripheral_clock+0x184>
 6b4:	60 e1       	ldi	r22, 0x10	; 16
 6b6:	85 e0       	ldi	r24, 0x05	; 5
 6b8:	d1 cd       	rjmp	.-1118   	; 0x25c <sysclk_disable_module>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
 6ba:	08 95       	ret
 6bc:	80 3a       	cpi	r24, 0xA0	; 160
 6be:	2b e0       	ldi	r18, 0x0B	; 11
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_USART1);
 6c0:	92 07       	cpc	r25, r18
 6c2:	21 f4       	brne	.+8      	; 0x6cc <sysclk_disable_peripheral_clock+0x194>
 6c4:	60 e1       	ldi	r22, 0x10	; 16
 6c6:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
 6c8:	c9 cd       	rjmp	.-1134   	; 0x25c <sysclk_disable_module>
 6ca:	08 95       	ret
 6cc:	80 3b       	cpi	r24, 0xB0	; 176
 6ce:	28 e0       	ldi	r18, 0x08	; 8
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_USART1);
 6d0:	92 07       	cpc	r25, r18
 6d2:	21 f4       	brne	.+8      	; 0x6dc <sysclk_disable_peripheral_clock+0x1a4>
 6d4:	60 e2       	ldi	r22, 0x20	; 32
 6d6:	83 e0       	ldi	r24, 0x03	; 3
 6d8:	c1 cd       	rjmp	.-1150   	; 0x25c <sysclk_disable_module>
	else if (module == &USARTF1) {
		sysclk_disable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
 6da:	08 95       	ret
 6dc:	80 3b       	cpi	r24, 0xB0	; 176
 6de:	29 e0       	ldi	r18, 0x09	; 9
 6e0:	92 07       	cpc	r25, r18
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TWI);
 6e2:	21 f4       	brne	.+8      	; 0x6ec <sysclk_disable_peripheral_clock+0x1b4>
 6e4:	60 e2       	ldi	r22, 0x20	; 32
 6e6:	84 e0       	ldi	r24, 0x04	; 4
 6e8:	b9 cd       	rjmp	.-1166   	; 0x25c <sysclk_disable_module>
 6ea:	08 95       	ret
	else if (module == &TWID) {
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
 6ec:	80 38       	cpi	r24, 0x80	; 128
 6ee:	24 e0       	ldi	r18, 0x04	; 4
 6f0:	92 07       	cpc	r25, r18
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_TWI);
 6f2:	21 f4       	brne	.+8      	; 0x6fc <sysclk_disable_peripheral_clock+0x1c4>
 6f4:	60 e4       	ldi	r22, 0x40	; 64
 6f6:	83 e0       	ldi	r24, 0x03	; 3
 6f8:	b1 cd       	rjmp	.-1182   	; 0x25c <sysclk_disable_module>
 6fa:	08 95       	ret
 6fc:	80 3a       	cpi	r24, 0xA0	; 160
 6fe:	94 40       	sbci	r25, 0x04	; 4
 700:	19 f4       	brne	.+6      	; 0x708 <sysclk_disable_peripheral_clock+0x1d0>
 702:	60 e4       	ldi	r22, 0x40	; 64
 704:	85 e0       	ldi	r24, 0x05	; 5
 706:	aa cd       	rjmp	.-1196   	; 0x25c <sysclk_disable_module>
 708:	08 95       	ret

0000070a <__vector_43>:
 * from the switches to not generate more than one interrupt per press.
 * It also waits till a switch is no longer pressed before going back to the
 * main routine.
 */
ISR(SWITCH0_INT_VECT)
{
 70a:	1f 92       	push	r1
 70c:	0f 92       	push	r0
 70e:	0f b6       	in	r0, 0x3f	; 63
 710:	0f 92       	push	r0
 712:	11 24       	eor	r1, r1
 714:	0b b6       	in	r0, 0x3b	; 59
 716:	0f 92       	push	r0
 718:	2f 93       	push	r18
 71a:	3f 93       	push	r19
 71c:	4f 93       	push	r20
 71e:	5f 93       	push	r21
 720:	6f 93       	push	r22
 722:	7f 93       	push	r23
 724:	8f 93       	push	r24
 726:	9f 93       	push	r25
 728:	af 93       	push	r26
 72a:	bf 93       	push	r27
 72c:	ef 93       	push	r30
 72e:	ff 93       	push	r31
	uint8_t switchport;

	cpu_irq_disable();
 730:	f8 94       	cli
	delay_ms(10);
 732:	66 e0       	ldi	r22, 0x06	; 6
 734:	7d e0       	ldi	r23, 0x0D	; 13
 736:	80 e0       	ldi	r24, 0x00	; 0
 738:	90 e0       	ldi	r25, 0x00	; 0
	lowpower_interrupt();
 73a:	05 de       	rcall	.-1014   	; 0x346 <__portable_avr_delay_cycles>
 73c:	0f de       	rcall	.-994    	; 0x35c <lowpower_interrupt>

	/* Make sure button is released before continuing */
	switchport = SWITCHPORT0.IN | ~SWITCHMASK0;
 73e:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	while (switchport != 0xFF) {
 742:	8f 6d       	ori	r24, 0xDF	; 223
 744:	8f 3f       	cpi	r24, 0xFF	; 255
 746:	31 f0       	breq	.+12     	; 0x754 <__vector_43+0x4a>
		switchport = (SWITCHPORT0.IN | ~SWITCHMASK0);
 748:	e0 e8       	ldi	r30, 0x80	; 128
 74a:	f6 e0       	ldi	r31, 0x06	; 6
 74c:	80 85       	ldd	r24, Z+8	; 0x08
	delay_ms(10);
	lowpower_interrupt();

	/* Make sure button is released before continuing */
	switchport = SWITCHPORT0.IN | ~SWITCHMASK0;
	while (switchport != 0xFF) {
 74e:	8f 6d       	ori	r24, 0xDF	; 223
 750:	8f 3f       	cpi	r24, 0xFF	; 255
 752:	e1 f7       	brne	.-8      	; 0x74c <__vector_43+0x42>
		switchport = (SWITCHPORT0.IN | ~SWITCHMASK0);
	}
	delay_ms(10);
 754:	66 e0       	ldi	r22, 0x06	; 6
 756:	7d e0       	ldi	r23, 0x0D	; 13
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	f4 dd       	rcall	.-1048   	; 0x346 <__portable_avr_delay_cycles>

	/* Clear interrupt that was generated due to bouncing */
	SWITCHPORT0.INTFLAGS = PORT_INT0IF_bm;
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <__TEXT_REGION_LENGTH__+0x70068c>
	cpu_irq_enable();
 764:	78 94       	sei
}
 766:	ff 91       	pop	r31
 768:	ef 91       	pop	r30
 76a:	bf 91       	pop	r27
 76c:	af 91       	pop	r26
 76e:	9f 91       	pop	r25
 770:	8f 91       	pop	r24
 772:	7f 91       	pop	r23
 774:	6f 91       	pop	r22
 776:	5f 91       	pop	r21
 778:	4f 91       	pop	r20
 77a:	3f 91       	pop	r19
 77c:	2f 91       	pop	r18
 77e:	0f 90       	pop	r0
 780:	0b be       	out	0x3b, r0	; 59
 782:	0f 90       	pop	r0
 784:	0f be       	out	0x3f, r0	; 63
 786:	0f 90       	pop	r0
 788:	1f 90       	pop	r1
 78a:	18 95       	reti

0000078c <__vector_104>:
 * from the switches to not generate more than one interrupt per press.
 * It also waits till a switch is no longer pressed before going back to the
 * main routine.
 */
ISR(SWITCH1_INT_VECT)
{
 78c:	1f 92       	push	r1
 78e:	0f 92       	push	r0
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	0f 92       	push	r0
 794:	11 24       	eor	r1, r1
 796:	0b b6       	in	r0, 0x3b	; 59
 798:	0f 92       	push	r0
 79a:	2f 93       	push	r18
 79c:	3f 93       	push	r19
 79e:	4f 93       	push	r20
 7a0:	5f 93       	push	r21
 7a2:	6f 93       	push	r22
 7a4:	7f 93       	push	r23
 7a6:	8f 93       	push	r24
 7a8:	9f 93       	push	r25
 7aa:	af 93       	push	r26
 7ac:	bf 93       	push	r27
 7ae:	ef 93       	push	r30
 7b0:	ff 93       	push	r31
	uint8_t switchport;
	cpu_irq_disable();
 7b2:	f8 94       	cli
	delay_ms(10);
 7b4:	66 e0       	ldi	r22, 0x06	; 6
 7b6:	7d e0       	ldi	r23, 0x0D	; 13
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	90 e0       	ldi	r25, 0x00	; 0
	lowpower_interrupt();
 7bc:	c4 dd       	rcall	.-1144   	; 0x346 <__portable_avr_delay_cycles>
 7be:	ce dd       	rcall	.-1124   	; 0x35c <lowpower_interrupt>

	/* Make sure button is released before continuing */
	switchport = SWITCHPORT1.IN | ~SWITCHMASK1;
 7c0:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
	while (switchport != 0xFF) {
 7c4:	89 6f       	ori	r24, 0xF9	; 249
 7c6:	8f 3f       	cpi	r24, 0xFF	; 255
 7c8:	31 f0       	breq	.+12     	; 0x7d6 <__vector_104+0x4a>
		switchport = (SWITCHPORT1.IN | ~SWITCHMASK1);
 7ca:	e0 ea       	ldi	r30, 0xA0	; 160
 7cc:	f6 e0       	ldi	r31, 0x06	; 6
 7ce:	80 85       	ldd	r24, Z+8	; 0x08
	delay_ms(10);
	lowpower_interrupt();

	/* Make sure button is released before continuing */
	switchport = SWITCHPORT1.IN | ~SWITCHMASK1;
	while (switchport != 0xFF) {
 7d0:	89 6f       	ori	r24, 0xF9	; 249
 7d2:	8f 3f       	cpi	r24, 0xFF	; 255
 7d4:	e1 f7       	brne	.-8      	; 0x7ce <__vector_104+0x42>
		switchport = (SWITCHPORT1.IN | ~SWITCHMASK1);
	}
	delay_ms(10);
 7d6:	66 e0       	ldi	r22, 0x06	; 6
 7d8:	7d e0       	ldi	r23, 0x0D	; 13
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	b3 dd       	rcall	.-1178   	; 0x346 <__portable_avr_delay_cycles>

	/* Clear interrupt that was generated due to bouncing */
	SWITCHPORT1.INTFLAGS = PORT_INT0IF_bm;
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <__TEXT_REGION_LENGTH__+0x7006ac>
	cpu_irq_enable();
 7e6:	78 94       	sei
}
 7e8:	ff 91       	pop	r31
 7ea:	ef 91       	pop	r30
 7ec:	bf 91       	pop	r27
 7ee:	af 91       	pop	r26
 7f0:	9f 91       	pop	r25
 7f2:	8f 91       	pop	r24
 7f4:	7f 91       	pop	r23
 7f6:	6f 91       	pop	r22
 7f8:	5f 91       	pop	r21
 7fa:	4f 91       	pop	r20
 7fc:	3f 91       	pop	r19
 7fe:	2f 91       	pop	r18
 800:	0f 90       	pop	r0
 802:	0b be       	out	0x3b, r0	; 59
 804:	0f 90       	pop	r0
 806:	0f be       	out	0x3f, r0	; 63
 808:	0f 90       	pop	r0
 80a:	1f 90       	pop	r1
 80c:	18 95       	reti

0000080e <main>:
 * before initializing the sleep manager interrupts on switchports.
 * The device is then put to sleep, and the sleep mode is configured by the
 * interrupt routines.
 */
int main(void)
{
 80e:	cf 93       	push	r28
 810:	df 93       	push	r29
 812:	1f 92       	push	r1
 814:	cd b7       	in	r28, 0x3d	; 61
	board_init();
	sysclk_init();
 816:	de b7       	in	r29, 0x3e	; 62
 * \ref conf_low_power_demo.h )
 */
static void lowpower_init(void)
{
	/* Disable unused modules */
	sysclk_disable_peripheral_clock(&AES);
 818:	5d dd       	rcall	.-1350   	; 0x2d4 <board_init>
 81a:	10 dd       	rcall	.-1504   	; 0x23c <sysclk_init>
	sysclk_disable_peripheral_clock(&DMA);
 81c:	80 ec       	ldi	r24, 0xC0	; 192
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	8b de       	rcall	.-746    	; 0x538 <sysclk_disable_peripheral_clock>
	sysclk_disable_peripheral_clock(&EVSYS);
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	91 e0       	ldi	r25, 0x01	; 1
	sysclk_disable_peripheral_clock(&RTC);
	sysclk_disable_peripheral_clock(&EBI);
#endif

	/* Disable TWI */
	sysclk_disable_peripheral_clock(&TWIC);
 826:	88 de       	rcall	.-752    	; 0x538 <sysclk_disable_peripheral_clock>
 828:	80 e8       	ldi	r24, 0x80	; 128
#if AVR8_PART_IS_DEFINED(ATxmega128A1)
	sysclk_disable_peripheral_clock(&TWID);
#endif
	sysclk_disable_peripheral_clock(&TWIE);
 82a:	91 e0       	ldi	r25, 0x01	; 1
 82c:	85 de       	rcall	.-758    	; 0x538 <sysclk_disable_peripheral_clock>
 82e:	80 e8       	ldi	r24, 0x80	; 128
#if AVR8_PART_IS_DEFINED(ATxmega128A1)
	sysclk_disable_peripheral_clock(&TWIF);
#endif

	/* Disable SPI */
	sysclk_disable_peripheral_clock(&SPIC);
 830:	94 e0       	ldi	r25, 0x04	; 4
 832:	82 de       	rcall	.-764    	; 0x538 <sysclk_disable_peripheral_clock>
	sysclk_disable_peripheral_clock(&SPID);
 834:	80 ea       	ldi	r24, 0xA0	; 160
 836:	94 e0       	ldi	r25, 0x04	; 4
#if AVR8_PART_IS_DEFINED(ATxmega128A1)
	sysclk_disable_peripheral_clock(&SPIF);
#endif

	/* Disable USART */
	sysclk_disable_peripheral_clock(&USARTC0);
 838:	7f de       	rcall	.-770    	; 0x538 <sysclk_disable_peripheral_clock>
 83a:	80 ec       	ldi	r24, 0xC0	; 192
 83c:	98 e0       	ldi	r25, 0x08	; 8
	sysclk_disable_peripheral_clock(&USARTC1);
 83e:	7c de       	rcall	.-776    	; 0x538 <sysclk_disable_peripheral_clock>
 840:	80 ec       	ldi	r24, 0xC0	; 192
	sysclk_disable_peripheral_clock(&USARTD0);
 842:	99 e0       	ldi	r25, 0x09	; 9
 844:	79 de       	rcall	.-782    	; 0x538 <sysclk_disable_peripheral_clock>
	sysclk_disable_peripheral_clock(&USARTD1);
 846:	80 ea       	ldi	r24, 0xA0	; 160
 848:	98 e0       	ldi	r25, 0x08	; 8
 84a:	76 de       	rcall	.-788    	; 0x538 <sysclk_disable_peripheral_clock>
	sysclk_disable_peripheral_clock(&USARTE0);
 84c:	80 eb       	ldi	r24, 0xB0	; 176
 84e:	98 e0       	ldi	r25, 0x08	; 8
#if AVR8_PART_IS_DEFINED(ATxmega128A1)
	sysclk_disable_peripheral_clock(&USARTE1);
#endif
	sysclk_disable_peripheral_clock(&USARTF0);
 850:	73 de       	rcall	.-794    	; 0x538 <sysclk_disable_peripheral_clock>
 852:	80 ea       	ldi	r24, 0xA0	; 160
#if AVR8_PART_IS_DEFINED(ATxmega128A1)
	sysclk_disable_peripheral_clock(&USARTF1);
#endif

	/* Disable timers/counters */
	sysclk_disable_peripheral_clock(&TCC0);
 854:	99 e0       	ldi	r25, 0x09	; 9
 856:	70 de       	rcall	.-800    	; 0x538 <sysclk_disable_peripheral_clock>
 858:	80 eb       	ldi	r24, 0xB0	; 176
	sysclk_disable_peripheral_clock(&TCC1);
 85a:	99 e0       	ldi	r25, 0x09	; 9
 85c:	6d de       	rcall	.-806    	; 0x538 <sysclk_disable_peripheral_clock>
	sysclk_disable_peripheral_clock(&TCD0);
 85e:	80 ea       	ldi	r24, 0xA0	; 160
 860:	9a e0       	ldi	r25, 0x0A	; 10
	sysclk_disable_peripheral_clock(&TCD1);
 862:	6a de       	rcall	.-812    	; 0x538 <sysclk_disable_peripheral_clock>
 864:	80 ea       	ldi	r24, 0xA0	; 160
 866:	9b e0       	ldi	r25, 0x0B	; 11
	sysclk_disable_peripheral_clock(&TCE0);
 868:	67 de       	rcall	.-818    	; 0x538 <sysclk_disable_peripheral_clock>
 86a:	80 e0       	ldi	r24, 0x00	; 0
	sysclk_disable_peripheral_clock(&TCE1);
 86c:	98 e0       	ldi	r25, 0x08	; 8
 86e:	64 de       	rcall	.-824    	; 0x538 <sysclk_disable_peripheral_clock>
	sysclk_disable_peripheral_clock(&TCF0);
 870:	80 e4       	ldi	r24, 0x40	; 64
 872:	98 e0       	ldi	r25, 0x08	; 8
 874:	61 de       	rcall	.-830    	; 0x538 <sysclk_disable_peripheral_clock>
#if AVR8_PART_IS_DEFINED(ATxmega128A1)
	sysclk_disable_peripheral_clock(&TCF1);
#endif

	/* Disable HIRES */
	sysclk_disable_peripheral_clock(&HIRESC);
 876:	80 e0       	ldi	r24, 0x00	; 0
 878:	99 e0       	ldi	r25, 0x09	; 9
	sysclk_disable_peripheral_clock(&HIRESD);
 87a:	5e de       	rcall	.-836    	; 0x538 <sysclk_disable_peripheral_clock>
 87c:	80 e4       	ldi	r24, 0x40	; 64
 87e:	99 e0       	ldi	r25, 0x09	; 9
	sysclk_disable_peripheral_clock(&HIRESE);
 880:	5b de       	rcall	.-842    	; 0x538 <sysclk_disable_peripheral_clock>
 882:	80 e0       	ldi	r24, 0x00	; 0
 884:	9a e0       	ldi	r25, 0x0A	; 10
	sysclk_disable_peripheral_clock(&HIRESF);
 886:	58 de       	rcall	.-848    	; 0x538 <sysclk_disable_peripheral_clock>
 888:	80 e4       	ldi	r24, 0x40	; 64
 88a:	9a e0       	ldi	r25, 0x0A	; 10

	/* Disable analog modules */
	sysclk_disable_peripheral_clock(&ACA);
 88c:	55 de       	rcall	.-854    	; 0x538 <sysclk_disable_peripheral_clock>
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	9b e0       	ldi	r25, 0x0B	; 11
	sysclk_disable_peripheral_clock(&ADCA);
 892:	52 de       	rcall	.-860    	; 0x538 <sysclk_disable_peripheral_clock>
 894:	80 e9       	ldi	r24, 0x90	; 144
 896:	98 e0       	ldi	r25, 0x08	; 8
#if AVR8_PART_IS_DEFINED(ATxmega128A1)
	sysclk_disable_peripheral_clock(&DACA);
#endif
	sysclk_disable_peripheral_clock(&ACB);
 898:	4f de       	rcall	.-866    	; 0x538 <sysclk_disable_peripheral_clock>
 89a:	80 e9       	ldi	r24, 0x90	; 144
 89c:	99 e0       	ldi	r25, 0x09	; 9
	sysclk_disable_peripheral_clock(&ADCB);
 89e:	4c de       	rcall	.-872    	; 0x538 <sysclk_disable_peripheral_clock>
 8a0:	80 e9       	ldi	r24, 0x90	; 144
 8a2:	9a e0       	ldi	r25, 0x0A	; 10
	sysclk_disable_peripheral_clock(&DACB);
 8a4:	49 de       	rcall	.-878    	; 0x538 <sysclk_disable_peripheral_clock>
 8a6:	80 e9       	ldi	r24, 0x90	; 144
 8a8:	9b e0       	ldi	r25, 0x0B	; 11

	/* Enable pull-up on all I/O pins */
	ioport_configure_port_pin(&PORTA, 0xF4,
 8aa:	46 de       	rcall	.-884    	; 0x538 <sysclk_disable_peripheral_clock>
 8ac:	80 e8       	ldi	r24, 0x80	; 128
 8ae:	93 e0       	ldi	r25, 0x03	; 3
 8b0:	43 de       	rcall	.-890    	; 0x538 <sysclk_disable_peripheral_clock>
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	92 e0       	ldi	r25, 0x02	; 2
			IOPORT_DIR_INPUT | IOPORT_PULL_UP);
	ioport_configure_port_pin(&PORTA,
 8b6:	40 de       	rcall	.-896    	; 0x538 <sysclk_disable_peripheral_clock>
 8b8:	80 e9       	ldi	r24, 0x90	; 144
 8ba:	93 e0       	ldi	r25, 0x03	; 3
 8bc:	3d de       	rcall	.-902    	; 0x538 <sysclk_disable_peripheral_clock>
 8be:	80 e4       	ldi	r24, 0x40	; 64
 8c0:	92 e0       	ldi	r25, 0x02	; 2
			0x03, IOPORT_DIR_INPUT | IOPORT_INPUT_DISABLE);
	ioport_configure_port_pin(&PORTB, 0x7F,
 8c2:	3a de       	rcall	.-908    	; 0x538 <sysclk_disable_peripheral_clock>
 8c4:	80 e2       	ldi	r24, 0x20	; 32
 8c6:	93 e0       	ldi	r25, 0x03	; 3
 8c8:	37 de       	rcall	.-914    	; 0x538 <sysclk_disable_peripheral_clock>
 8ca:	40 e0       	ldi	r20, 0x00	; 0
 8cc:	58 e1       	ldi	r21, 0x18	; 24
			IOPORT_DIR_INPUT | IOPORT_PULL_UP);
	ioport_configure_port_pin(&PORTC, 0xFF,
 8ce:	64 ef       	ldi	r22, 0xF4	; 244
 8d0:	80 e0       	ldi	r24, 0x00	; 0
 8d2:	96 e0       	ldi	r25, 0x06	; 6
 8d4:	d8 dc       	rcall	.-1616   	; 0x286 <ioport_configure_port_pin>
			IOPORT_DIR_INPUT | IOPORT_PULL_UP);
	ioport_configure_port_pin(&PORTD, 0x3F,
 8d6:	40 e0       	ldi	r20, 0x00	; 0
 8d8:	57 e0       	ldi	r21, 0x07	; 7
 8da:	63 e0       	ldi	r22, 0x03	; 3
 8dc:	80 e0       	ldi	r24, 0x00	; 0
 8de:	96 e0       	ldi	r25, 0x06	; 6
 8e0:	d2 dc       	rcall	.-1628   	; 0x286 <ioport_configure_port_pin>
 8e2:	40 e0       	ldi	r20, 0x00	; 0
			IOPORT_DIR_INPUT | IOPORT_PULL_UP);
	ioport_configure_port_pin(&PORTE, 0x0F,
 8e4:	58 e1       	ldi	r21, 0x18	; 24
 8e6:	6f e7       	ldi	r22, 0x7F	; 127
 8e8:	80 e2       	ldi	r24, 0x20	; 32
 8ea:	96 e0       	ldi	r25, 0x06	; 6
 8ec:	cc dc       	rcall	.-1640   	; 0x286 <ioport_configure_port_pin>
 8ee:	40 e0       	ldi	r20, 0x00	; 0
 8f0:	58 e1       	ldi	r21, 0x18	; 24
			IOPORT_DIR_INPUT | IOPORT_PULL_UP);
	ioport_configure_port_pin(&PORTF, 0xFF,
 8f2:	6f ef       	ldi	r22, 0xFF	; 255
 8f4:	80 e4       	ldi	r24, 0x40	; 64
 8f6:	96 e0       	ldi	r25, 0x06	; 6
 8f8:	c6 dc       	rcall	.-1652   	; 0x286 <ioport_configure_port_pin>
 8fa:	40 e0       	ldi	r20, 0x00	; 0
 8fc:	58 e1       	ldi	r21, 0x18	; 24
 8fe:	6f e3       	ldi	r22, 0x3F	; 63
			IOPORT_DIR_INPUT | IOPORT_PULL_UP);
	ioport_configure_port_pin(&PORTR, 0x03,
 900:	80 e6       	ldi	r24, 0x60	; 96
 902:	96 e0       	ldi	r25, 0x06	; 6
 904:	c0 dc       	rcall	.-1664   	; 0x286 <ioport_configure_port_pin>
 906:	40 e0       	ldi	r20, 0x00	; 0
 908:	58 e1       	ldi	r21, 0x18	; 24
 90a:	6f e0       	ldi	r22, 0x0F	; 15
 90c:	80 e8       	ldi	r24, 0x80	; 128
 90e:	96 e0       	ldi	r25, 0x06	; 6
 910:	ba dc       	rcall	.-1676   	; 0x286 <ioport_configure_port_pin>
 912:	40 e0       	ldi	r20, 0x00	; 0
 914:	58 e1       	ldi	r21, 0x18	; 24
 916:	6f ef       	ldi	r22, 0xFF	; 255
 918:	80 ea       	ldi	r24, 0xA0	; 160
 91a:	96 e0       	ldi	r25, 0x06	; 6
	ioport_configure_port_pin(&PORTQ, 0x0F,
			IOPORT_DIR_INPUT | IOPORT_PULL_UP);
#endif

	/* Disable Watchdog timer */
	wdt_disable();
 91c:	b4 dc       	rcall	.-1688   	; 0x286 <ioport_configure_port_pin>
 91e:	40 e0       	ldi	r20, 0x00	; 0

	/* Enable EEPROM and Flash power reduction mode. */
	ccp_write_io((uint8_t *)&NVM.CTRLB, NVM_EPRM_bm | NVM_FPRM_bm);
 920:	58 e1       	ldi	r21, 0x18	; 24
 922:	63 e0       	ldi	r22, 0x03	; 3
 924:	80 ee       	ldi	r24, 0xE0	; 224
 926:	97 e0       	ldi	r25, 0x07	; 7
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
 928:	ae dc       	rcall	.-1700   	; 0x286 <ioport_configure_port_pin>
 92a:	40 e0       	ldi	r20, 0x00	; 0
 92c:	50 e0       	ldi	r21, 0x00	; 0
 92e:	68 e0       	ldi	r22, 0x08	; 8
 930:	80 e0       	ldi	r24, 0x00	; 0
 932:	96 e0       	ldi	r25, 0x06	; 6
 934:	a8 dc       	rcall	.-1712   	; 0x286 <ioport_configure_port_pin>
 936:	ff dc       	rcall	.-1538   	; 0x336 <wdt_disable>
 938:	66 e0       	ldi	r22, 0x06	; 6
 93a:	8c ec       	ldi	r24, 0xCC	; 204
 93c:	91 e0       	ldi	r25, 0x01	; 1
 93e:	f5 dc       	rcall	.-1558   	; 0x32a <ccp_write_io>
 940:	07 e0       	ldi	r16, 0x07	; 7
 942:	10 e2       	ldi	r17, 0x20	; 32
 944:	d8 01       	movw	r26, r16
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
 946:	1c 92       	st	X, r1
 948:	11 96       	adiw	r26, 0x01	; 1
 94a:	1c 92       	st	X, r1
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
 94c:	11 97       	sbiw	r26, 0x01	; 1
 94e:	12 96       	adiw	r26, 0x02	; 2
 950:	1c 92       	st	X, r1
	sleepmgr_init();

	/* Enable interrupts from switchports on
	 * low level to sense all interrupts */
	pmic_init();
	SWITCHPORT0.INTCTRL = SWITCHPORT_INT_LEVEL;
 952:	12 97       	sbiw	r26, 0x02	; 2
 954:	13 96       	adiw	r26, 0x03	; 3
 956:	1c 92       	st	X, r1
 958:	13 97       	sbiw	r26, 0x03	; 3
 95a:	14 96       	adiw	r26, 0x04	; 4
 95c:	1c 92       	st	X, r1
	SWITCHPORT1.INTCTRL = SWITCHPORT_INT_LEVEL;
 95e:	14 97       	sbiw	r26, 0x04	; 4
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	15 96       	adiw	r26, 0x05	; 5
	SWITCHPORT0.INT0MASK = SWITCHMASK0;
 964:	8c 93       	st	X, r24
 966:	87 e0       	ldi	r24, 0x07	; 7
 968:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	SWITCHPORT1.INT0MASK = SWITCHMASK1;
 96c:	a0 e8       	ldi	r26, 0x80	; 128
	ioport_configure_port_pin(&SWITCHPORT0,
 96e:	b6 e0       	ldi	r27, 0x06	; 6
 970:	82 e0       	ldi	r24, 0x02	; 2
 972:	19 96       	adiw	r26, 0x09	; 9
 974:	8c 93       	st	X, r24
 976:	19 97       	sbiw	r26, 0x09	; 9
 978:	e0 ea       	ldi	r30, 0xA0	; 160
 97a:	f6 e0       	ldi	r31, 0x06	; 6
			SWITCHMASK0, IOPORT_LEVEL | IOPORT_PULL_UP);
	ioport_configure_port_pin(&SWITCHPORT1,
 97c:	81 87       	std	Z+9, r24	; 0x09
 97e:	80 e2       	ldi	r24, 0x20	; 32
 980:	1a 96       	adiw	r26, 0x0a	; 10
 982:	8c 93       	st	X, r24
 984:	86 e0       	ldi	r24, 0x06	; 6
 986:	82 87       	std	Z+10, r24	; 0x0a
 988:	40 e0       	ldi	r20, 0x00	; 0
			SWITCHMASK1, IOPORT_LEVEL | IOPORT_PULL_UP);
	cpu_irq_enable();
 98a:	5b e1       	ldi	r21, 0x1B	; 27
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
 98c:	60 e2       	ldi	r22, 0x20	; 32
 98e:	80 e8       	ldi	r24, 0x80	; 128
 990:	96 e0       	ldi	r25, 0x06	; 6
 992:	79 dc       	rcall	.-1806   	; 0x286 <ioport_configure_port_pin>
 994:	40 e0       	ldi	r20, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 996:	5b e1       	ldi	r21, 0x1B	; 27
 998:	66 e0       	ldi	r22, 0x06	; 6
	cpu_irq_disable();
 99a:	80 ea       	ldi	r24, 0xA0	; 160
	return flags;
 99c:	96 e0       	ldi	r25, 0x06	; 6
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
 99e:	73 dc       	rcall	.-1818   	; 0x286 <ioport_configure_port_pin>
 9a0:	78 94       	sei
 9a2:	f8 01       	movw	r30, r16
 9a4:	80 81       	ld	r24, Z
 9a6:	8f 3f       	cpi	r24, 0xFF	; 255
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 9a8:	09 f4       	brne	.+2      	; 0x9ac <main+0x19e>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
 9aa:	ff cf       	rjmp	.-2      	; 0x9aa <main+0x19c>
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
 9ac:	8f b7       	in	r24, 0x3f	; 63
 9ae:	89 83       	std	Y+1, r24	; 0x01
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
 9b0:	f8 94       	cli

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
 9b2:	99 81       	ldd	r25, Y+1	; 0x01
 9b4:	e7 e0       	ldi	r30, 0x07	; 7
 9b6:	f0 e2       	ldi	r31, 0x20	; 32
 9b8:	80 81       	ld	r24, Z
 9ba:	8f 5f       	subi	r24, 0xFF	; 255
 9bc:	80 83       	st	Z, r24
 9be:	9f bf       	out	0x3f, r25	; 63
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
 9c0:	af 01       	movw	r20, r30

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
 9c2:	28 e4       	ldi	r18, 0x48	; 72
 9c4:	30 e0       	ldi	r19, 0x00	; 0
 9c6:	f8 94       	cli
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
 9c8:	da 01       	movw	r26, r20
 9ca:	8c 91       	ld	r24, X
		cpu_irq_enable();
 9cc:	81 11       	cpse	r24, r1
 9ce:	09 c0       	rjmp	.+18     	; 0x9e2 <main+0x1d4>
 9d0:	a8 e0       	ldi	r26, 0x08	; 8
 9d2:	b0 e2       	ldi	r27, 0x20	; 32

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
 9d4:	e0 e0       	ldi	r30, 0x00	; 0
 9d6:	ef 5f       	subi	r30, 0xFF	; 255
 9d8:	8d 91       	ld	r24, X+
 9da:	88 23       	and	r24, r24
 9dc:	e1 f3       	breq	.-8      	; 0x9d6 <main+0x1c8>
 9de:	e1 11       	cpse	r30, r1
 9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <main+0x1d8>
	sleep_enable();
 9e2:	78 94       	sei
 9e4:	f0 cf       	rjmp	.-32     	; 0x9c6 <main+0x1b8>
 9e6:	d9 01       	movw	r26, r18

	cpu_irq_enable();
 9e8:	8c 91       	ld	r24, X
	sleep_enter();
 9ea:	f0 e0       	ldi	r31, 0x00	; 0

	sleep_disable();
 9ec:	e1 50       	subi	r30, 0x01	; 1
 9ee:	f0 4e       	sbci	r31, 0xE0	; 224
 9f0:	81 7f       	andi	r24, 0xF1	; 241
 9f2:	90 81       	ld	r25, Z
 9f4:	89 2b       	or	r24, r25
 9f6:	8c 93       	st	X, r24
 9f8:	8c 91       	ld	r24, X
 9fa:	81 60       	ori	r24, 0x01	; 1
 9fc:	8c 93       	st	X, r24
 9fe:	78 94       	sei
 a00:	88 95       	sleep
 a02:	f9 01       	movw	r30, r18
 a04:	80 81       	ld	r24, Z
 a06:	8e 7f       	andi	r24, 0xFE	; 254
 a08:	80 83       	st	Z, r24
 a0a:	dd cf       	rjmp	.-70     	; 0x9c6 <main+0x1b8>

00000a0c <_exit>:
 a0c:	f8 94       	cli

00000a0e <__stop_program>:
 a0e:	ff cf       	rjmp	.-2      	; 0xa0e <__stop_program>
