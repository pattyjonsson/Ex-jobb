
TC_EXAMPLE11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000172a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007c  00802000  00802000  0000172a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000172a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  0000175c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000094f3  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004163  00000000  00000000  0000af93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000040eb  00000000  00000000  0000f0f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001310  00000000  00000000  000131e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002facb  00000000  00000000  000144f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000035d0  00000000  00000000  00043fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0004758f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000acd8  00000000  00000000  00047807  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	1c c1       	rjmp	.+568    	; 0x23e <__bad_interrupt>
       6:	00 00       	nop
       8:	1a c1       	rjmp	.+564    	; 0x23e <__bad_interrupt>
       a:	00 00       	nop
       c:	18 c1       	rjmp	.+560    	; 0x23e <__bad_interrupt>
       e:	00 00       	nop
      10:	16 c1       	rjmp	.+556    	; 0x23e <__bad_interrupt>
      12:	00 00       	nop
      14:	14 c1       	rjmp	.+552    	; 0x23e <__bad_interrupt>
      16:	00 00       	nop
      18:	12 c1       	rjmp	.+548    	; 0x23e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	10 c1       	rjmp	.+544    	; 0x23e <__bad_interrupt>
      1e:	00 00       	nop
      20:	0e c1       	rjmp	.+540    	; 0x23e <__bad_interrupt>
      22:	00 00       	nop
      24:	0c c1       	rjmp	.+536    	; 0x23e <__bad_interrupt>
      26:	00 00       	nop
      28:	0a c1       	rjmp	.+532    	; 0x23e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	08 c1       	rjmp	.+528    	; 0x23e <__bad_interrupt>
      2e:	00 00       	nop
      30:	06 c1       	rjmp	.+524    	; 0x23e <__bad_interrupt>
      32:	00 00       	nop
      34:	04 c1       	rjmp	.+520    	; 0x23e <__bad_interrupt>
      36:	00 00       	nop
      38:	68 c3       	rjmp	.+1744   	; 0x70a <__vector_14>
      3a:	00 00       	nop
      3c:	93 c3       	rjmp	.+1830   	; 0x764 <__vector_15>
      3e:	00 00       	nop
      40:	be c3       	rjmp	.+1916   	; 0x7be <__vector_16>
      42:	00 00       	nop
      44:	e9 c3       	rjmp	.+2002   	; 0x818 <__vector_17>
      46:	00 00       	nop
      48:	14 c4       	rjmp	.+2088   	; 0x872 <__vector_18>
      4a:	00 00       	nop
      4c:	3f c4       	rjmp	.+2174   	; 0x8cc <__vector_19>
      4e:	00 00       	nop
      50:	6a c4       	rjmp	.+2260   	; 0x926 <__vector_20>
      52:	00 00       	nop
      54:	95 c4       	rjmp	.+2346   	; 0x980 <__vector_21>
      56:	00 00       	nop
      58:	c0 c4       	rjmp	.+2432   	; 0x9da <__vector_22>
      5a:	00 00       	nop
      5c:	eb c4       	rjmp	.+2518   	; 0xa34 <__vector_23>
      5e:	00 00       	nop
      60:	ee c0       	rjmp	.+476    	; 0x23e <__bad_interrupt>
      62:	00 00       	nop
      64:	ec c0       	rjmp	.+472    	; 0x23e <__bad_interrupt>
      66:	00 00       	nop
      68:	ea c0       	rjmp	.+468    	; 0x23e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e8 c0       	rjmp	.+464    	; 0x23e <__bad_interrupt>
      6e:	00 00       	nop
      70:	e6 c0       	rjmp	.+460    	; 0x23e <__bad_interrupt>
      72:	00 00       	nop
      74:	e4 c0       	rjmp	.+456    	; 0x23e <__bad_interrupt>
      76:	00 00       	nop
      78:	e2 c0       	rjmp	.+452    	; 0x23e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e0 c0       	rjmp	.+448    	; 0x23e <__bad_interrupt>
      7e:	00 00       	nop
      80:	de c0       	rjmp	.+444    	; 0x23e <__bad_interrupt>
      82:	00 00       	nop
      84:	dc c0       	rjmp	.+440    	; 0x23e <__bad_interrupt>
      86:	00 00       	nop
      88:	da c0       	rjmp	.+436    	; 0x23e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d8 c0       	rjmp	.+432    	; 0x23e <__bad_interrupt>
      8e:	00 00       	nop
      90:	d6 c0       	rjmp	.+428    	; 0x23e <__bad_interrupt>
      92:	00 00       	nop
      94:	d4 c0       	rjmp	.+424    	; 0x23e <__bad_interrupt>
      96:	00 00       	nop
      98:	d2 c0       	rjmp	.+420    	; 0x23e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6e c2       	rjmp	.+1244   	; 0x57a <__vector_39>
      9e:	00 00       	nop
      a0:	9e c2       	rjmp	.+1340   	; 0x5de <__vector_40>
      a2:	00 00       	nop
      a4:	ce c2       	rjmp	.+1436   	; 0x642 <__vector_41>
      a6:	00 00       	nop
      a8:	fe c2       	rjmp	.+1532   	; 0x6a6 <__vector_42>
      aa:	00 00       	nop
      ac:	c8 c0       	rjmp	.+400    	; 0x23e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c6 c0       	rjmp	.+396    	; 0x23e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c4 c0       	rjmp	.+392    	; 0x23e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c2 c0       	rjmp	.+388    	; 0x23e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	aa c6       	rjmp	.+3412   	; 0xe12 <__vector_47>
      be:	00 00       	nop
      c0:	d5 c6       	rjmp	.+3498   	; 0xe6c <__vector_48>
      c2:	00 00       	nop
      c4:	00 c7       	rjmp	.+3584   	; 0xec6 <__vector_49>
      c6:	00 00       	nop
      c8:	2b c7       	rjmp	.+3670   	; 0xf20 <__vector_50>
      ca:	00 00       	nop
      cc:	56 c7       	rjmp	.+3756   	; 0xf7a <__vector_51>
      ce:	00 00       	nop
      d0:	81 c7       	rjmp	.+3842   	; 0xfd4 <__vector_52>
      d2:	00 00       	nop
      d4:	ac c7       	rjmp	.+3928   	; 0x102e <__vector_53>
      d6:	00 00       	nop
      d8:	d7 c7       	rjmp	.+4014   	; 0x1088 <__vector_54>
      da:	00 00       	nop
      dc:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__vector_55>
      e0:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__vector_56>
      e4:	ac c0       	rjmp	.+344    	; 0x23e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	aa c0       	rjmp	.+340    	; 0x23e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a8 c0       	rjmp	.+336    	; 0x23e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a6 c0       	rjmp	.+332    	; 0x23e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a4 c0       	rjmp	.+328    	; 0x23e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a2 c0       	rjmp	.+324    	; 0x23e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a0 c0       	rjmp	.+320    	; 0x23e <__bad_interrupt>
      fe:	00 00       	nop
     100:	9e c0       	rjmp	.+316    	; 0x23e <__bad_interrupt>
     102:	00 00       	nop
     104:	9c c0       	rjmp	.+312    	; 0x23e <__bad_interrupt>
     106:	00 00       	nop
     108:	9a c0       	rjmp	.+308    	; 0x23e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	98 c0       	rjmp	.+304    	; 0x23e <__bad_interrupt>
     10e:	00 00       	nop
     110:	96 c0       	rjmp	.+300    	; 0x23e <__bad_interrupt>
     112:	00 00       	nop
     114:	94 c0       	rjmp	.+296    	; 0x23e <__bad_interrupt>
     116:	00 00       	nop
     118:	92 c0       	rjmp	.+292    	; 0x23e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	66 c1       	rjmp	.+716    	; 0x3ea <__vector_71>
     11e:	00 00       	nop
     120:	96 c1       	rjmp	.+812    	; 0x44e <__vector_72>
     122:	00 00       	nop
     124:	c6 c1       	rjmp	.+908    	; 0x4b2 <__vector_73>
     126:	00 00       	nop
     128:	f6 c1       	rjmp	.+1004   	; 0x516 <__vector_74>
     12a:	00 00       	nop
     12c:	88 c0       	rjmp	.+272    	; 0x23e <__bad_interrupt>
     12e:	00 00       	nop
     130:	86 c0       	rjmp	.+268    	; 0x23e <__bad_interrupt>
     132:	00 00       	nop
     134:	ac c4       	rjmp	.+2392   	; 0xa8e <__vector_77>
     136:	00 00       	nop
     138:	d7 c4       	rjmp	.+2478   	; 0xae8 <__vector_78>
     13a:	00 00       	nop
     13c:	02 c5       	rjmp	.+2564   	; 0xb42 <__vector_79>
     13e:	00 00       	nop
     140:	2d c5       	rjmp	.+2650   	; 0xb9c <__vector_80>
     142:	00 00       	nop
     144:	58 c5       	rjmp	.+2736   	; 0xbf6 <__vector_81>
     146:	00 00       	nop
     148:	83 c5       	rjmp	.+2822   	; 0xc50 <__vector_82>
     14a:	00 00       	nop
     14c:	ae c5       	rjmp	.+2908   	; 0xcaa <__vector_83>
     14e:	00 00       	nop
     150:	d9 c5       	rjmp	.+2994   	; 0xd04 <__vector_84>
     152:	00 00       	nop
     154:	04 c6       	rjmp	.+3080   	; 0xd5e <__vector_85>
     156:	00 00       	nop
     158:	2f c6       	rjmp	.+3166   	; 0xdb8 <__vector_86>
     15a:	00 00       	nop
     15c:	70 c0       	rjmp	.+224    	; 0x23e <__bad_interrupt>
     15e:	00 00       	nop
     160:	6e c0       	rjmp	.+220    	; 0x23e <__bad_interrupt>
     162:	00 00       	nop
     164:	6c c0       	rjmp	.+216    	; 0x23e <__bad_interrupt>
     166:	00 00       	nop
     168:	6a c0       	rjmp	.+212    	; 0x23e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	68 c0       	rjmp	.+208    	; 0x23e <__bad_interrupt>
     16e:	00 00       	nop
     170:	66 c0       	rjmp	.+204    	; 0x23e <__bad_interrupt>
     172:	00 00       	nop
     174:	64 c0       	rjmp	.+200    	; 0x23e <__bad_interrupt>
     176:	00 00       	nop
     178:	62 c0       	rjmp	.+196    	; 0x23e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	60 c0       	rjmp	.+192    	; 0x23e <__bad_interrupt>
     17e:	00 00       	nop
     180:	5e c0       	rjmp	.+188    	; 0x23e <__bad_interrupt>
     182:	00 00       	nop
     184:	5c c0       	rjmp	.+184    	; 0x23e <__bad_interrupt>
     186:	00 00       	nop
     188:	5a c0       	rjmp	.+180    	; 0x23e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	58 c0       	rjmp	.+176    	; 0x23e <__bad_interrupt>
     18e:	00 00       	nop
     190:	56 c0       	rjmp	.+172    	; 0x23e <__bad_interrupt>
     192:	00 00       	nop
     194:	54 c0       	rjmp	.+168    	; 0x23e <__bad_interrupt>
     196:	00 00       	nop
     198:	52 c0       	rjmp	.+164    	; 0x23e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	50 c0       	rjmp	.+160    	; 0x23e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4e c0       	rjmp	.+156    	; 0x23e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4c c0       	rjmp	.+152    	; 0x23e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4a c0       	rjmp	.+148    	; 0x23e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	48 c0       	rjmp	.+144    	; 0x23e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	f2 c7       	rjmp	.+4068   	; 0x1196 <__vector_108>
     1b2:	00 00       	nop
     1b4:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <__vector_109>
     1b8:	0c 94 25 09 	jmp	0x124a	; 0x124a <__vector_110>
     1bc:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__vector_111>
     1c0:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__vector_112>
     1c4:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <__vector_113>
     1c8:	3a c0       	rjmp	.+116    	; 0x23e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	38 c0       	rjmp	.+112    	; 0x23e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	36 c0       	rjmp	.+108    	; 0x23e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	34 c0       	rjmp	.+104    	; 0x23e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	32 c0       	rjmp	.+100    	; 0x23e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	30 c0       	rjmp	.+96     	; 0x23e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2e c0       	rjmp	.+92     	; 0x23e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2c c0       	rjmp	.+88     	; 0x23e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2a c0       	rjmp	.+84     	; 0x23e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	28 c0       	rjmp	.+80     	; 0x23e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	26 c0       	rjmp	.+76     	; 0x23e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	24 c0       	rjmp	.+72     	; 0x23e <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	22 c0       	rjmp	.+68     	; 0x23e <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e5       	ldi	r29, 0x5F	; 95
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	e6 eb       	ldi	r30, 0xB6	; 182
     214:	f6 e1       	ldi	r31, 0x16	; 22
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a0 30       	cpi	r26, 0x00	; 0
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	20 e2       	ldi	r18, 0x20	; 32
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b0 e2       	ldi	r27, 0x20	; 32
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	ac 37       	cpi	r26, 0x7C	; 124
     232:	b2 07       	cpc	r27, r18
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 cd 0a 	call	0x159a	; 0x159a <main>
     23a:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <_exit>

0000023e <__bad_interrupt>:
     23e:	e0 ce       	rjmp	.-576    	; 0x0 <__vectors>

00000240 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     240:	8f ef       	ldi	r24, 0xFF	; 255
     242:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     246:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     24a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     24e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     252:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     256:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     25a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     25e:	08 95       	ret

00000260 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	1f 92       	push	r1
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     26a:	9f b7       	in	r25, 0x3f	; 63
     26c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     26e:	f8 94       	cli
	return flags;
     270:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     272:	e8 2f       	mov	r30, r24
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	e0 59       	subi	r30, 0x90	; 144
     278:	ff 4f       	sbci	r31, 0xFF	; 255
     27a:	60 95       	com	r22
     27c:	80 81       	ld	r24, Z
     27e:	68 23       	and	r22, r24
     280:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     282:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     284:	0f 90       	pop	r0
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	08 95       	ret

0000028c <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     296:	c6 2f       	mov	r28, r22
     298:	d0 e0       	ldi	r29, 0x00	; 0
     29a:	de 01       	movw	r26, r28
     29c:	02 2e       	mov	r0, r18
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <ioport_configure_port_pin+0x18>
     2a0:	b5 95       	asr	r27
     2a2:	a7 95       	ror	r26
     2a4:	0a 94       	dec	r0
     2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <ioport_configure_port_pin+0x14>
     2a8:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     2aa:	50 8b       	std	Z+16, r21	; 0x10
     2ac:	2f 5f       	subi	r18, 0xFF	; 255
     2ae:	3f 4f       	sbci	r19, 0xFF	; 255
     2b0:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     2b2:	28 30       	cpi	r18, 0x08	; 8
     2b4:	31 05       	cpc	r19, r1
     2b6:	89 f7       	brne	.-30     	; 0x29a <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     2b8:	40 ff       	sbrs	r20, 0
     2ba:	0a c0       	rjmp	.+20     	; 0x2d0 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     2bc:	41 ff       	sbrs	r20, 1
     2be:	03 c0       	rjmp	.+6      	; 0x2c6 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     2c0:	fc 01       	movw	r30, r24
     2c2:	65 83       	std	Z+5, r22	; 0x05
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     2c6:	fc 01       	movw	r30, r24
     2c8:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     2ca:	fc 01       	movw	r30, r24
     2cc:	61 83       	std	Z+1, r22	; 0x01
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     2d0:	fc 01       	movw	r30, r24
     2d2:	62 83       	std	Z+2, r22	; 0x02
	}
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	08 95       	ret

000002da <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     2da:	43 e0       	ldi	r20, 0x03	; 3
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	80 ee       	ldi	r24, 0xE0	; 224
     2e2:	97 e0       	ldi	r25, 0x07	; 7
     2e4:	d3 df       	rcall	.-90     	; 0x28c <ioport_configure_port_pin>
     2e6:	43 e0       	ldi	r20, 0x03	; 3
     2e8:	50 e0       	ldi	r21, 0x00	; 0
     2ea:	62 e0       	ldi	r22, 0x02	; 2
     2ec:	80 ee       	ldi	r24, 0xE0	; 224
     2ee:	97 e0       	ldi	r25, 0x07	; 7
     2f0:	cd df       	rcall	.-102    	; 0x28c <ioport_configure_port_pin>
     2f2:	43 e0       	ldi	r20, 0x03	; 3
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	60 e1       	ldi	r22, 0x10	; 16
     2f8:	80 e6       	ldi	r24, 0x60	; 96
     2fa:	96 e0       	ldi	r25, 0x06	; 6
     2fc:	c7 df       	rcall	.-114    	; 0x28c <ioport_configure_port_pin>
     2fe:	41 e0       	ldi	r20, 0x01	; 1
     300:	50 e4       	ldi	r21, 0x40	; 64
     302:	60 e2       	ldi	r22, 0x20	; 32
     304:	80 e6       	ldi	r24, 0x60	; 96
     306:	96 e0       	ldi	r25, 0x06	; 6
     308:	c1 df       	rcall	.-126    	; 0x28c <ioport_configure_port_pin>
     30a:	40 e0       	ldi	r20, 0x00	; 0
     30c:	5b e1       	ldi	r21, 0x1B	; 27
     30e:	60 e2       	ldi	r22, 0x20	; 32
     310:	80 e8       	ldi	r24, 0x80	; 128
     312:	96 e0       	ldi	r25, 0x06	; 6
     314:	bb df       	rcall	.-138    	; 0x28c <ioport_configure_port_pin>
     316:	40 e0       	ldi	r20, 0x00	; 0
     318:	5b e1       	ldi	r21, 0x1B	; 27
     31a:	62 e0       	ldi	r22, 0x02	; 2
     31c:	80 ea       	ldi	r24, 0xA0	; 160
     31e:	96 e0       	ldi	r25, 0x06	; 6
     320:	b5 df       	rcall	.-150    	; 0x28c <ioport_configure_port_pin>
     322:	40 e0       	ldi	r20, 0x00	; 0
     324:	5b e1       	ldi	r21, 0x1B	; 27
     326:	64 e0       	ldi	r22, 0x04	; 4
     328:	80 ea       	ldi	r24, 0xA0	; 160
     32a:	96 e0       	ldi	r25, 0x06	; 6
     32c:	af df       	rcall	.-162    	; 0x28c <ioport_configure_port_pin>
     32e:	40 e0       	ldi	r20, 0x00	; 0
     330:	50 e0       	ldi	r21, 0x00	; 0
     332:	61 e0       	ldi	r22, 0x01	; 1
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	96 e0       	ldi	r25, 0x06	; 6
     338:	a9 df       	rcall	.-174    	; 0x28c <ioport_configure_port_pin>
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	50 e0       	ldi	r21, 0x00	; 0
     33e:	64 e0       	ldi	r22, 0x04	; 4
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	96 e0       	ldi	r25, 0x06	; 6
     344:	a3 df       	rcall	.-186    	; 0x28c <ioport_configure_port_pin>
     346:	40 e0       	ldi	r20, 0x00	; 0
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	62 e0       	ldi	r22, 0x02	; 2
     34c:	80 e2       	ldi	r24, 0x20	; 32
     34e:	96 e0       	ldi	r25, 0x06	; 6
     350:	9d cf       	rjmp	.-198    	; 0x28c <ioport_configure_port_pin>
     352:	08 95       	ret

00000354 <adc_enable_clock>:

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     354:	81 15       	cp	r24, r1
     356:	22 e0       	ldi	r18, 0x02	; 2
     358:	92 07       	cpc	r25, r18
     35a:	61 f4       	brne	.+24     	; 0x374 <adc_enable_clock+0x20>
     35c:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <adca_enable_count>
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	98 0f       	add	r25, r24
     364:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <adca_enable_count>
     368:	81 11       	cpse	r24, r1
     36a:	12 c0       	rjmp	.+36     	; 0x390 <adc_enable_clock+0x3c>
     36c:	62 e0       	ldi	r22, 0x02	; 2
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	77 cf       	rjmp	.-274    	; 0x260 <sysclk_enable_module>
     372:	08 95       	ret
     374:	80 34       	cpi	r24, 0x40	; 64
     376:	92 40       	sbci	r25, 0x02	; 2
     378:	59 f4       	brne	.+22     	; 0x390 <adc_enable_clock+0x3c>
     37a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_end>
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	98 0f       	add	r25, r24
     382:	90 93 00 20 	sts	0x2000, r25	; 0x802000 <__data_end>
     386:	81 11       	cpse	r24, r1
     388:	03 c0       	rjmp	.+6      	; 0x390 <adc_enable_clock+0x3c>
     38a:	62 e0       	ldi	r22, 0x02	; 2
     38c:	82 e0       	ldi	r24, 0x02	; 2
     38e:	68 cf       	rjmp	.-304    	; 0x260 <sysclk_enable_module>
     390:	08 95       	ret

00000392 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	1f 93       	push	r17
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	1f 92       	push	r1
     39e:	1f 92       	push	r1
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3a6:	8f b7       	in	r24, 0x3f	; 63
     3a8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     3aa:	f8 94       	cli
	return flags;
     3ac:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     3ae:	c7 01       	movw	r24, r14
     3b0:	d1 df       	rcall	.-94     	; 0x354 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     3b2:	f7 01       	movw	r30, r14
     3b4:	80 81       	ld	r24, Z
     3b6:	81 60       	ori	r24, 0x01	; 1
     3b8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3ba:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     3bc:	80 91 73 20 	lds	r24, 0x2073	; 0x802073 <sleepmgr_locks+0x1>
     3c0:	8f 3f       	cpi	r24, 0xFF	; 255
     3c2:	09 f4       	brne	.+2      	; 0x3c6 <adc_enable+0x34>
     3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3c6:	8f b7       	in	r24, 0x3f	; 63
     3c8:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     3ca:	f8 94       	cli
	return flags;
     3cc:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     3ce:	e2 e7       	ldi	r30, 0x72	; 114
     3d0:	f0 e2       	ldi	r31, 0x20	; 32
     3d2:	81 81       	ldd	r24, Z+1	; 0x01
     3d4:	8f 5f       	subi	r24, 0xFF	; 255
     3d6:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3d8:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	08 95       	ret

000003ea <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     3ea:	1f 92       	push	r1
     3ec:	0f 92       	push	r0
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	0f 92       	push	r0
     3f2:	11 24       	eor	r1, r1
     3f4:	0b b6       	in	r0, 0x3b	; 59
     3f6:	0f 92       	push	r0
     3f8:	2f 93       	push	r18
     3fa:	3f 93       	push	r19
     3fc:	4f 93       	push	r20
     3fe:	5f 93       	push	r21
     400:	6f 93       	push	r22
     402:	7f 93       	push	r23
     404:	8f 93       	push	r24
     406:	9f 93       	push	r25
     408:	af 93       	push	r26
     40a:	bf 93       	push	r27
     40c:	ef 93       	push	r30
     40e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     410:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     414:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     418:	e0 91 7a 20 	lds	r30, 0x207A	; 0x80207a <adca_callback>
     41c:	f0 91 7b 20 	lds	r31, 0x207B	; 0x80207b <adca_callback+0x1>
     420:	61 e0       	ldi	r22, 0x01	; 1
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	92 e0       	ldi	r25, 0x02	; 2
     426:	19 95       	eicall
}
     428:	ff 91       	pop	r31
     42a:	ef 91       	pop	r30
     42c:	bf 91       	pop	r27
     42e:	af 91       	pop	r26
     430:	9f 91       	pop	r25
     432:	8f 91       	pop	r24
     434:	7f 91       	pop	r23
     436:	6f 91       	pop	r22
     438:	5f 91       	pop	r21
     43a:	4f 91       	pop	r20
     43c:	3f 91       	pop	r19
     43e:	2f 91       	pop	r18
     440:	0f 90       	pop	r0
     442:	0b be       	out	0x3b, r0	; 59
     444:	0f 90       	pop	r0
     446:	0f be       	out	0x3f, r0	; 63
     448:	0f 90       	pop	r0
     44a:	1f 90       	pop	r1
     44c:	18 95       	reti

0000044e <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     44e:	1f 92       	push	r1
     450:	0f 92       	push	r0
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	0f 92       	push	r0
     456:	11 24       	eor	r1, r1
     458:	0b b6       	in	r0, 0x3b	; 59
     45a:	0f 92       	push	r0
     45c:	2f 93       	push	r18
     45e:	3f 93       	push	r19
     460:	4f 93       	push	r20
     462:	5f 93       	push	r21
     464:	6f 93       	push	r22
     466:	7f 93       	push	r23
     468:	8f 93       	push	r24
     46a:	9f 93       	push	r25
     46c:	af 93       	push	r26
     46e:	bf 93       	push	r27
     470:	ef 93       	push	r30
     472:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     474:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     478:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     47c:	e0 91 7a 20 	lds	r30, 0x207A	; 0x80207a <adca_callback>
     480:	f0 91 7b 20 	lds	r31, 0x207B	; 0x80207b <adca_callback+0x1>
     484:	62 e0       	ldi	r22, 0x02	; 2
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	19 95       	eicall
}
     48c:	ff 91       	pop	r31
     48e:	ef 91       	pop	r30
     490:	bf 91       	pop	r27
     492:	af 91       	pop	r26
     494:	9f 91       	pop	r25
     496:	8f 91       	pop	r24
     498:	7f 91       	pop	r23
     49a:	6f 91       	pop	r22
     49c:	5f 91       	pop	r21
     49e:	4f 91       	pop	r20
     4a0:	3f 91       	pop	r19
     4a2:	2f 91       	pop	r18
     4a4:	0f 90       	pop	r0
     4a6:	0b be       	out	0x3b, r0	; 59
     4a8:	0f 90       	pop	r0
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	0f 90       	pop	r0
     4ae:	1f 90       	pop	r1
     4b0:	18 95       	reti

000004b2 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     4b2:	1f 92       	push	r1
     4b4:	0f 92       	push	r0
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	0f 92       	push	r0
     4ba:	11 24       	eor	r1, r1
     4bc:	0b b6       	in	r0, 0x3b	; 59
     4be:	0f 92       	push	r0
     4c0:	2f 93       	push	r18
     4c2:	3f 93       	push	r19
     4c4:	4f 93       	push	r20
     4c6:	5f 93       	push	r21
     4c8:	6f 93       	push	r22
     4ca:	7f 93       	push	r23
     4cc:	8f 93       	push	r24
     4ce:	9f 93       	push	r25
     4d0:	af 93       	push	r26
     4d2:	bf 93       	push	r27
     4d4:	ef 93       	push	r30
     4d6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     4d8:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     4dc:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     4e0:	e0 91 7a 20 	lds	r30, 0x207A	; 0x80207a <adca_callback>
     4e4:	f0 91 7b 20 	lds	r31, 0x207B	; 0x80207b <adca_callback+0x1>
     4e8:	64 e0       	ldi	r22, 0x04	; 4
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	92 e0       	ldi	r25, 0x02	; 2
     4ee:	19 95       	eicall
}
     4f0:	ff 91       	pop	r31
     4f2:	ef 91       	pop	r30
     4f4:	bf 91       	pop	r27
     4f6:	af 91       	pop	r26
     4f8:	9f 91       	pop	r25
     4fa:	8f 91       	pop	r24
     4fc:	7f 91       	pop	r23
     4fe:	6f 91       	pop	r22
     500:	5f 91       	pop	r21
     502:	4f 91       	pop	r20
     504:	3f 91       	pop	r19
     506:	2f 91       	pop	r18
     508:	0f 90       	pop	r0
     50a:	0b be       	out	0x3b, r0	; 59
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     516:	1f 92       	push	r1
     518:	0f 92       	push	r0
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	0f 92       	push	r0
     51e:	11 24       	eor	r1, r1
     520:	0b b6       	in	r0, 0x3b	; 59
     522:	0f 92       	push	r0
     524:	2f 93       	push	r18
     526:	3f 93       	push	r19
     528:	4f 93       	push	r20
     52a:	5f 93       	push	r21
     52c:	6f 93       	push	r22
     52e:	7f 93       	push	r23
     530:	8f 93       	push	r24
     532:	9f 93       	push	r25
     534:	af 93       	push	r26
     536:	bf 93       	push	r27
     538:	ef 93       	push	r30
     53a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     53c:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     540:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     544:	e0 91 7a 20 	lds	r30, 0x207A	; 0x80207a <adca_callback>
     548:	f0 91 7b 20 	lds	r31, 0x207B	; 0x80207b <adca_callback+0x1>
     54c:	68 e0       	ldi	r22, 0x08	; 8
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	19 95       	eicall
}
     554:	ff 91       	pop	r31
     556:	ef 91       	pop	r30
     558:	bf 91       	pop	r27
     55a:	af 91       	pop	r26
     55c:	9f 91       	pop	r25
     55e:	8f 91       	pop	r24
     560:	7f 91       	pop	r23
     562:	6f 91       	pop	r22
     564:	5f 91       	pop	r21
     566:	4f 91       	pop	r20
     568:	3f 91       	pop	r19
     56a:	2f 91       	pop	r18
     56c:	0f 90       	pop	r0
     56e:	0b be       	out	0x3b, r0	; 59
     570:	0f 90       	pop	r0
     572:	0f be       	out	0x3f, r0	; 63
     574:	0f 90       	pop	r0
     576:	1f 90       	pop	r1
     578:	18 95       	reti

0000057a <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     57a:	1f 92       	push	r1
     57c:	0f 92       	push	r0
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	0f 92       	push	r0
     582:	11 24       	eor	r1, r1
     584:	0b b6       	in	r0, 0x3b	; 59
     586:	0f 92       	push	r0
     588:	2f 93       	push	r18
     58a:	3f 93       	push	r19
     58c:	4f 93       	push	r20
     58e:	5f 93       	push	r21
     590:	6f 93       	push	r22
     592:	7f 93       	push	r23
     594:	8f 93       	push	r24
     596:	9f 93       	push	r25
     598:	af 93       	push	r26
     59a:	bf 93       	push	r27
     59c:	ef 93       	push	r30
     59e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     5a0:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     5a4:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     5a8:	e0 91 78 20 	lds	r30, 0x2078	; 0x802078 <adcb_callback>
     5ac:	f0 91 79 20 	lds	r31, 0x2079	; 0x802079 <adcb_callback+0x1>
     5b0:	61 e0       	ldi	r22, 0x01	; 1
     5b2:	80 e4       	ldi	r24, 0x40	; 64
     5b4:	92 e0       	ldi	r25, 0x02	; 2
     5b6:	19 95       	eicall
}
     5b8:	ff 91       	pop	r31
     5ba:	ef 91       	pop	r30
     5bc:	bf 91       	pop	r27
     5be:	af 91       	pop	r26
     5c0:	9f 91       	pop	r25
     5c2:	8f 91       	pop	r24
     5c4:	7f 91       	pop	r23
     5c6:	6f 91       	pop	r22
     5c8:	5f 91       	pop	r21
     5ca:	4f 91       	pop	r20
     5cc:	3f 91       	pop	r19
     5ce:	2f 91       	pop	r18
     5d0:	0f 90       	pop	r0
     5d2:	0b be       	out	0x3b, r0	; 59
     5d4:	0f 90       	pop	r0
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	0f 90       	pop	r0
     5da:	1f 90       	pop	r1
     5dc:	18 95       	reti

000005de <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     5de:	1f 92       	push	r1
     5e0:	0f 92       	push	r0
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	0f 92       	push	r0
     5e6:	11 24       	eor	r1, r1
     5e8:	0b b6       	in	r0, 0x3b	; 59
     5ea:	0f 92       	push	r0
     5ec:	2f 93       	push	r18
     5ee:	3f 93       	push	r19
     5f0:	4f 93       	push	r20
     5f2:	5f 93       	push	r21
     5f4:	6f 93       	push	r22
     5f6:	7f 93       	push	r23
     5f8:	8f 93       	push	r24
     5fa:	9f 93       	push	r25
     5fc:	af 93       	push	r26
     5fe:	bf 93       	push	r27
     600:	ef 93       	push	r30
     602:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     604:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     608:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     60c:	e0 91 78 20 	lds	r30, 0x2078	; 0x802078 <adcb_callback>
     610:	f0 91 79 20 	lds	r31, 0x2079	; 0x802079 <adcb_callback+0x1>
     614:	62 e0       	ldi	r22, 0x02	; 2
     616:	80 e4       	ldi	r24, 0x40	; 64
     618:	92 e0       	ldi	r25, 0x02	; 2
     61a:	19 95       	eicall
}
     61c:	ff 91       	pop	r31
     61e:	ef 91       	pop	r30
     620:	bf 91       	pop	r27
     622:	af 91       	pop	r26
     624:	9f 91       	pop	r25
     626:	8f 91       	pop	r24
     628:	7f 91       	pop	r23
     62a:	6f 91       	pop	r22
     62c:	5f 91       	pop	r21
     62e:	4f 91       	pop	r20
     630:	3f 91       	pop	r19
     632:	2f 91       	pop	r18
     634:	0f 90       	pop	r0
     636:	0b be       	out	0x3b, r0	; 59
     638:	0f 90       	pop	r0
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	0f 90       	pop	r0
     63e:	1f 90       	pop	r1
     640:	18 95       	reti

00000642 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     642:	1f 92       	push	r1
     644:	0f 92       	push	r0
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	0f 92       	push	r0
     64a:	11 24       	eor	r1, r1
     64c:	0b b6       	in	r0, 0x3b	; 59
     64e:	0f 92       	push	r0
     650:	2f 93       	push	r18
     652:	3f 93       	push	r19
     654:	4f 93       	push	r20
     656:	5f 93       	push	r21
     658:	6f 93       	push	r22
     65a:	7f 93       	push	r23
     65c:	8f 93       	push	r24
     65e:	9f 93       	push	r25
     660:	af 93       	push	r26
     662:	bf 93       	push	r27
     664:	ef 93       	push	r30
     666:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     668:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     66c:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     670:	e0 91 78 20 	lds	r30, 0x2078	; 0x802078 <adcb_callback>
     674:	f0 91 79 20 	lds	r31, 0x2079	; 0x802079 <adcb_callback+0x1>
     678:	64 e0       	ldi	r22, 0x04	; 4
     67a:	80 e4       	ldi	r24, 0x40	; 64
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	19 95       	eicall
}
     680:	ff 91       	pop	r31
     682:	ef 91       	pop	r30
     684:	bf 91       	pop	r27
     686:	af 91       	pop	r26
     688:	9f 91       	pop	r25
     68a:	8f 91       	pop	r24
     68c:	7f 91       	pop	r23
     68e:	6f 91       	pop	r22
     690:	5f 91       	pop	r21
     692:	4f 91       	pop	r20
     694:	3f 91       	pop	r19
     696:	2f 91       	pop	r18
     698:	0f 90       	pop	r0
     69a:	0b be       	out	0x3b, r0	; 59
     69c:	0f 90       	pop	r0
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	0f 90       	pop	r0
     6a2:	1f 90       	pop	r1
     6a4:	18 95       	reti

000006a6 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     6a6:	1f 92       	push	r1
     6a8:	0f 92       	push	r0
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	0f 92       	push	r0
     6ae:	11 24       	eor	r1, r1
     6b0:	0b b6       	in	r0, 0x3b	; 59
     6b2:	0f 92       	push	r0
     6b4:	2f 93       	push	r18
     6b6:	3f 93       	push	r19
     6b8:	4f 93       	push	r20
     6ba:	5f 93       	push	r21
     6bc:	6f 93       	push	r22
     6be:	7f 93       	push	r23
     6c0:	8f 93       	push	r24
     6c2:	9f 93       	push	r25
     6c4:	af 93       	push	r26
     6c6:	bf 93       	push	r27
     6c8:	ef 93       	push	r30
     6ca:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     6cc:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     6d0:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     6d4:	e0 91 78 20 	lds	r30, 0x2078	; 0x802078 <adcb_callback>
     6d8:	f0 91 79 20 	lds	r31, 0x2079	; 0x802079 <adcb_callback+0x1>
     6dc:	68 e0       	ldi	r22, 0x08	; 8
     6de:	80 e4       	ldi	r24, 0x40	; 64
     6e0:	92 e0       	ldi	r25, 0x02	; 2
     6e2:	19 95       	eicall
}
     6e4:	ff 91       	pop	r31
     6e6:	ef 91       	pop	r30
     6e8:	bf 91       	pop	r27
     6ea:	af 91       	pop	r26
     6ec:	9f 91       	pop	r25
     6ee:	8f 91       	pop	r24
     6f0:	7f 91       	pop	r23
     6f2:	6f 91       	pop	r22
     6f4:	5f 91       	pop	r21
     6f6:	4f 91       	pop	r20
     6f8:	3f 91       	pop	r19
     6fa:	2f 91       	pop	r18
     6fc:	0f 90       	pop	r0
     6fe:	0b be       	out	0x3b, r0	; 59
     700:	0f 90       	pop	r0
     702:	0f be       	out	0x3f, r0	; 63
     704:	0f 90       	pop	r0
     706:	1f 90       	pop	r1
     708:	18 95       	reti

0000070a <__vector_14>:
		tc_tce1_err_callback = callback;
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
		tc_tcf0_err_callback = callback;
     70a:	1f 92       	push	r1
     70c:	0f 92       	push	r0
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	0f 92       	push	r0
     712:	11 24       	eor	r1, r1
     714:	0b b6       	in	r0, 0x3b	; 59
     716:	0f 92       	push	r0
     718:	2f 93       	push	r18
     71a:	3f 93       	push	r19
     71c:	4f 93       	push	r20
     71e:	5f 93       	push	r21
     720:	6f 93       	push	r22
     722:	7f 93       	push	r23
     724:	8f 93       	push	r24
     726:	9f 93       	push	r25
     728:	af 93       	push	r26
     72a:	bf 93       	push	r27
     72c:	ef 93       	push	r30
     72e:	ff 93       	push	r31
     730:	e0 91 48 20 	lds	r30, 0x2048	; 0x802048 <tc_tcc0_ovf_callback>
     734:	f0 91 49 20 	lds	r31, 0x2049	; 0x802049 <tc_tcc0_ovf_callback+0x1>
     738:	30 97       	sbiw	r30, 0x00	; 0
     73a:	09 f0       	breq	.+2      	; 0x73e <__vector_14+0x34>
     73c:	19 95       	eicall
     73e:	ff 91       	pop	r31
     740:	ef 91       	pop	r30
     742:	bf 91       	pop	r27
     744:	af 91       	pop	r26
     746:	9f 91       	pop	r25
     748:	8f 91       	pop	r24
     74a:	7f 91       	pop	r23
     74c:	6f 91       	pop	r22
     74e:	5f 91       	pop	r21
     750:	4f 91       	pop	r20
     752:	3f 91       	pop	r19
     754:	2f 91       	pop	r18
     756:	0f 90       	pop	r0
     758:	0b be       	out	0x3b, r0	; 59
     75a:	0f 90       	pop	r0
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	0f 90       	pop	r0
     760:	1f 90       	pop	r1
     762:	18 95       	reti

00000764 <__vector_15>:
     764:	1f 92       	push	r1
     766:	0f 92       	push	r0
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	0f 92       	push	r0
     76c:	11 24       	eor	r1, r1
     76e:	0b b6       	in	r0, 0x3b	; 59
     770:	0f 92       	push	r0
     772:	2f 93       	push	r18
     774:	3f 93       	push	r19
     776:	4f 93       	push	r20
     778:	5f 93       	push	r21
     77a:	6f 93       	push	r22
     77c:	7f 93       	push	r23
     77e:	8f 93       	push	r24
     780:	9f 93       	push	r25
     782:	af 93       	push	r26
     784:	bf 93       	push	r27
     786:	ef 93       	push	r30
     788:	ff 93       	push	r31
     78a:	e0 91 46 20 	lds	r30, 0x2046	; 0x802046 <tc_tcc0_err_callback>
     78e:	f0 91 47 20 	lds	r31, 0x2047	; 0x802047 <tc_tcc0_err_callback+0x1>
     792:	30 97       	sbiw	r30, 0x00	; 0
     794:	09 f0       	breq	.+2      	; 0x798 <__vector_15+0x34>
     796:	19 95       	eicall
     798:	ff 91       	pop	r31
     79a:	ef 91       	pop	r30
     79c:	bf 91       	pop	r27
     79e:	af 91       	pop	r26
     7a0:	9f 91       	pop	r25
     7a2:	8f 91       	pop	r24
     7a4:	7f 91       	pop	r23
     7a6:	6f 91       	pop	r22
     7a8:	5f 91       	pop	r21
     7aa:	4f 91       	pop	r20
     7ac:	3f 91       	pop	r19
     7ae:	2f 91       	pop	r18
     7b0:	0f 90       	pop	r0
     7b2:	0b be       	out	0x3b, r0	; 59
     7b4:	0f 90       	pop	r0
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	0f 90       	pop	r0
     7ba:	1f 90       	pop	r1
     7bc:	18 95       	reti

000007be <__vector_16>:
     7be:	1f 92       	push	r1
     7c0:	0f 92       	push	r0
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	0f 92       	push	r0
     7c6:	11 24       	eor	r1, r1
     7c8:	0b b6       	in	r0, 0x3b	; 59
     7ca:	0f 92       	push	r0
     7cc:	2f 93       	push	r18
     7ce:	3f 93       	push	r19
     7d0:	4f 93       	push	r20
     7d2:	5f 93       	push	r21
     7d4:	6f 93       	push	r22
     7d6:	7f 93       	push	r23
     7d8:	8f 93       	push	r24
     7da:	9f 93       	push	r25
     7dc:	af 93       	push	r26
     7de:	bf 93       	push	r27
     7e0:	ef 93       	push	r30
     7e2:	ff 93       	push	r31
     7e4:	e0 91 44 20 	lds	r30, 0x2044	; 0x802044 <tc_tcc0_cca_callback>
     7e8:	f0 91 45 20 	lds	r31, 0x2045	; 0x802045 <tc_tcc0_cca_callback+0x1>
     7ec:	30 97       	sbiw	r30, 0x00	; 0
     7ee:	09 f0       	breq	.+2      	; 0x7f2 <__vector_16+0x34>
     7f0:	19 95       	eicall
     7f2:	ff 91       	pop	r31
     7f4:	ef 91       	pop	r30
     7f6:	bf 91       	pop	r27
     7f8:	af 91       	pop	r26
     7fa:	9f 91       	pop	r25
     7fc:	8f 91       	pop	r24
     7fe:	7f 91       	pop	r23
     800:	6f 91       	pop	r22
     802:	5f 91       	pop	r21
     804:	4f 91       	pop	r20
     806:	3f 91       	pop	r19
     808:	2f 91       	pop	r18
     80a:	0f 90       	pop	r0
     80c:	0b be       	out	0x3b, r0	; 59
     80e:	0f 90       	pop	r0
     810:	0f be       	out	0x3f, r0	; 63
     812:	0f 90       	pop	r0
     814:	1f 90       	pop	r1
     816:	18 95       	reti

00000818 <__vector_17>:
     818:	1f 92       	push	r1
     81a:	0f 92       	push	r0
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	0f 92       	push	r0
     820:	11 24       	eor	r1, r1
     822:	0b b6       	in	r0, 0x3b	; 59
     824:	0f 92       	push	r0
     826:	2f 93       	push	r18
     828:	3f 93       	push	r19
     82a:	4f 93       	push	r20
     82c:	5f 93       	push	r21
     82e:	6f 93       	push	r22
     830:	7f 93       	push	r23
     832:	8f 93       	push	r24
     834:	9f 93       	push	r25
     836:	af 93       	push	r26
     838:	bf 93       	push	r27
     83a:	ef 93       	push	r30
     83c:	ff 93       	push	r31
     83e:	e0 91 42 20 	lds	r30, 0x2042	; 0x802042 <tc_tcc0_ccb_callback>
     842:	f0 91 43 20 	lds	r31, 0x2043	; 0x802043 <tc_tcc0_ccb_callback+0x1>
     846:	30 97       	sbiw	r30, 0x00	; 0
     848:	09 f0       	breq	.+2      	; 0x84c <__vector_17+0x34>
     84a:	19 95       	eicall
     84c:	ff 91       	pop	r31
     84e:	ef 91       	pop	r30
     850:	bf 91       	pop	r27
     852:	af 91       	pop	r26
     854:	9f 91       	pop	r25
     856:	8f 91       	pop	r24
     858:	7f 91       	pop	r23
     85a:	6f 91       	pop	r22
     85c:	5f 91       	pop	r21
     85e:	4f 91       	pop	r20
     860:	3f 91       	pop	r19
     862:	2f 91       	pop	r18
     864:	0f 90       	pop	r0
     866:	0b be       	out	0x3b, r0	; 59
     868:	0f 90       	pop	r0
     86a:	0f be       	out	0x3f, r0	; 63
     86c:	0f 90       	pop	r0
     86e:	1f 90       	pop	r1
     870:	18 95       	reti

00000872 <__vector_18>:
     872:	1f 92       	push	r1
     874:	0f 92       	push	r0
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	0f 92       	push	r0
     87a:	11 24       	eor	r1, r1
     87c:	0b b6       	in	r0, 0x3b	; 59
     87e:	0f 92       	push	r0
     880:	2f 93       	push	r18
     882:	3f 93       	push	r19
     884:	4f 93       	push	r20
     886:	5f 93       	push	r21
     888:	6f 93       	push	r22
     88a:	7f 93       	push	r23
     88c:	8f 93       	push	r24
     88e:	9f 93       	push	r25
     890:	af 93       	push	r26
     892:	bf 93       	push	r27
     894:	ef 93       	push	r30
     896:	ff 93       	push	r31
     898:	e0 91 40 20 	lds	r30, 0x2040	; 0x802040 <tc_tcc0_ccc_callback>
     89c:	f0 91 41 20 	lds	r31, 0x2041	; 0x802041 <tc_tcc0_ccc_callback+0x1>
     8a0:	30 97       	sbiw	r30, 0x00	; 0
     8a2:	09 f0       	breq	.+2      	; 0x8a6 <__vector_18+0x34>
     8a4:	19 95       	eicall
     8a6:	ff 91       	pop	r31
     8a8:	ef 91       	pop	r30
     8aa:	bf 91       	pop	r27
     8ac:	af 91       	pop	r26
     8ae:	9f 91       	pop	r25
     8b0:	8f 91       	pop	r24
     8b2:	7f 91       	pop	r23
     8b4:	6f 91       	pop	r22
     8b6:	5f 91       	pop	r21
     8b8:	4f 91       	pop	r20
     8ba:	3f 91       	pop	r19
     8bc:	2f 91       	pop	r18
     8be:	0f 90       	pop	r0
     8c0:	0b be       	out	0x3b, r0	; 59
     8c2:	0f 90       	pop	r0
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	0f 90       	pop	r0
     8c8:	1f 90       	pop	r1
     8ca:	18 95       	reti

000008cc <__vector_19>:
     8cc:	1f 92       	push	r1
     8ce:	0f 92       	push	r0
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	0f 92       	push	r0
     8d4:	11 24       	eor	r1, r1
     8d6:	0b b6       	in	r0, 0x3b	; 59
     8d8:	0f 92       	push	r0
     8da:	2f 93       	push	r18
     8dc:	3f 93       	push	r19
     8de:	4f 93       	push	r20
     8e0:	5f 93       	push	r21
     8e2:	6f 93       	push	r22
     8e4:	7f 93       	push	r23
     8e6:	8f 93       	push	r24
     8e8:	9f 93       	push	r25
     8ea:	af 93       	push	r26
     8ec:	bf 93       	push	r27
     8ee:	ef 93       	push	r30
     8f0:	ff 93       	push	r31
     8f2:	e0 91 3e 20 	lds	r30, 0x203E	; 0x80203e <tc_tcc0_ccd_callback>
     8f6:	f0 91 3f 20 	lds	r31, 0x203F	; 0x80203f <tc_tcc0_ccd_callback+0x1>
     8fa:	30 97       	sbiw	r30, 0x00	; 0
     8fc:	09 f0       	breq	.+2      	; 0x900 <__vector_19+0x34>
     8fe:	19 95       	eicall
     900:	ff 91       	pop	r31
     902:	ef 91       	pop	r30
     904:	bf 91       	pop	r27
     906:	af 91       	pop	r26
     908:	9f 91       	pop	r25
     90a:	8f 91       	pop	r24
     90c:	7f 91       	pop	r23
     90e:	6f 91       	pop	r22
     910:	5f 91       	pop	r21
     912:	4f 91       	pop	r20
     914:	3f 91       	pop	r19
     916:	2f 91       	pop	r18
     918:	0f 90       	pop	r0
     91a:	0b be       	out	0x3b, r0	; 59
     91c:	0f 90       	pop	r0
     91e:	0f be       	out	0x3f, r0	; 63
     920:	0f 90       	pop	r0
     922:	1f 90       	pop	r1
     924:	18 95       	reti

00000926 <__vector_20>:
     926:	1f 92       	push	r1
     928:	0f 92       	push	r0
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	0f 92       	push	r0
     92e:	11 24       	eor	r1, r1
     930:	0b b6       	in	r0, 0x3b	; 59
     932:	0f 92       	push	r0
     934:	2f 93       	push	r18
     936:	3f 93       	push	r19
     938:	4f 93       	push	r20
     93a:	5f 93       	push	r21
     93c:	6f 93       	push	r22
     93e:	7f 93       	push	r23
     940:	8f 93       	push	r24
     942:	9f 93       	push	r25
     944:	af 93       	push	r26
     946:	bf 93       	push	r27
     948:	ef 93       	push	r30
     94a:	ff 93       	push	r31
     94c:	e0 91 3c 20 	lds	r30, 0x203C	; 0x80203c <tc_tcc1_ovf_callback>
     950:	f0 91 3d 20 	lds	r31, 0x203D	; 0x80203d <tc_tcc1_ovf_callback+0x1>
     954:	30 97       	sbiw	r30, 0x00	; 0
     956:	09 f0       	breq	.+2      	; 0x95a <__vector_20+0x34>
     958:	19 95       	eicall
     95a:	ff 91       	pop	r31
     95c:	ef 91       	pop	r30
     95e:	bf 91       	pop	r27
     960:	af 91       	pop	r26
     962:	9f 91       	pop	r25
     964:	8f 91       	pop	r24
     966:	7f 91       	pop	r23
     968:	6f 91       	pop	r22
     96a:	5f 91       	pop	r21
     96c:	4f 91       	pop	r20
     96e:	3f 91       	pop	r19
     970:	2f 91       	pop	r18
     972:	0f 90       	pop	r0
     974:	0b be       	out	0x3b, r0	; 59
     976:	0f 90       	pop	r0
     978:	0f be       	out	0x3f, r0	; 63
     97a:	0f 90       	pop	r0
     97c:	1f 90       	pop	r1
     97e:	18 95       	reti

00000980 <__vector_21>:
     980:	1f 92       	push	r1
     982:	0f 92       	push	r0
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	0f 92       	push	r0
     988:	11 24       	eor	r1, r1
     98a:	0b b6       	in	r0, 0x3b	; 59
     98c:	0f 92       	push	r0
     98e:	2f 93       	push	r18
     990:	3f 93       	push	r19
     992:	4f 93       	push	r20
     994:	5f 93       	push	r21
     996:	6f 93       	push	r22
     998:	7f 93       	push	r23
     99a:	8f 93       	push	r24
     99c:	9f 93       	push	r25
     99e:	af 93       	push	r26
     9a0:	bf 93       	push	r27
     9a2:	ef 93       	push	r30
     9a4:	ff 93       	push	r31
     9a6:	e0 91 3a 20 	lds	r30, 0x203A	; 0x80203a <tc_tcc1_err_callback>
     9aa:	f0 91 3b 20 	lds	r31, 0x203B	; 0x80203b <tc_tcc1_err_callback+0x1>
     9ae:	30 97       	sbiw	r30, 0x00	; 0
     9b0:	09 f0       	breq	.+2      	; 0x9b4 <__vector_21+0x34>
     9b2:	19 95       	eicall
     9b4:	ff 91       	pop	r31
     9b6:	ef 91       	pop	r30
     9b8:	bf 91       	pop	r27
     9ba:	af 91       	pop	r26
     9bc:	9f 91       	pop	r25
     9be:	8f 91       	pop	r24
     9c0:	7f 91       	pop	r23
     9c2:	6f 91       	pop	r22
     9c4:	5f 91       	pop	r21
     9c6:	4f 91       	pop	r20
     9c8:	3f 91       	pop	r19
     9ca:	2f 91       	pop	r18
     9cc:	0f 90       	pop	r0
     9ce:	0b be       	out	0x3b, r0	; 59
     9d0:	0f 90       	pop	r0
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	0f 90       	pop	r0
     9d6:	1f 90       	pop	r1
     9d8:	18 95       	reti

000009da <__vector_22>:
     9da:	1f 92       	push	r1
     9dc:	0f 92       	push	r0
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	0f 92       	push	r0
     9e2:	11 24       	eor	r1, r1
     9e4:	0b b6       	in	r0, 0x3b	; 59
     9e6:	0f 92       	push	r0
     9e8:	2f 93       	push	r18
     9ea:	3f 93       	push	r19
     9ec:	4f 93       	push	r20
     9ee:	5f 93       	push	r21
     9f0:	6f 93       	push	r22
     9f2:	7f 93       	push	r23
     9f4:	8f 93       	push	r24
     9f6:	9f 93       	push	r25
     9f8:	af 93       	push	r26
     9fa:	bf 93       	push	r27
     9fc:	ef 93       	push	r30
     9fe:	ff 93       	push	r31
     a00:	e0 91 38 20 	lds	r30, 0x2038	; 0x802038 <tc_tcc1_cca_callback>
     a04:	f0 91 39 20 	lds	r31, 0x2039	; 0x802039 <tc_tcc1_cca_callback+0x1>
     a08:	30 97       	sbiw	r30, 0x00	; 0
     a0a:	09 f0       	breq	.+2      	; 0xa0e <__vector_22+0x34>
     a0c:	19 95       	eicall
     a0e:	ff 91       	pop	r31
     a10:	ef 91       	pop	r30
     a12:	bf 91       	pop	r27
     a14:	af 91       	pop	r26
     a16:	9f 91       	pop	r25
     a18:	8f 91       	pop	r24
     a1a:	7f 91       	pop	r23
     a1c:	6f 91       	pop	r22
     a1e:	5f 91       	pop	r21
     a20:	4f 91       	pop	r20
     a22:	3f 91       	pop	r19
     a24:	2f 91       	pop	r18
     a26:	0f 90       	pop	r0
     a28:	0b be       	out	0x3b, r0	; 59
     a2a:	0f 90       	pop	r0
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	0f 90       	pop	r0
     a30:	1f 90       	pop	r1
     a32:	18 95       	reti

00000a34 <__vector_23>:
     a34:	1f 92       	push	r1
     a36:	0f 92       	push	r0
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	0f 92       	push	r0
     a3c:	11 24       	eor	r1, r1
     a3e:	0b b6       	in	r0, 0x3b	; 59
     a40:	0f 92       	push	r0
     a42:	2f 93       	push	r18
     a44:	3f 93       	push	r19
     a46:	4f 93       	push	r20
     a48:	5f 93       	push	r21
     a4a:	6f 93       	push	r22
     a4c:	7f 93       	push	r23
     a4e:	8f 93       	push	r24
     a50:	9f 93       	push	r25
     a52:	af 93       	push	r26
     a54:	bf 93       	push	r27
     a56:	ef 93       	push	r30
     a58:	ff 93       	push	r31
     a5a:	e0 91 36 20 	lds	r30, 0x2036	; 0x802036 <tc_tcc1_ccb_callback>
     a5e:	f0 91 37 20 	lds	r31, 0x2037	; 0x802037 <tc_tcc1_ccb_callback+0x1>
     a62:	30 97       	sbiw	r30, 0x00	; 0
     a64:	09 f0       	breq	.+2      	; 0xa68 <__vector_23+0x34>
     a66:	19 95       	eicall
     a68:	ff 91       	pop	r31
     a6a:	ef 91       	pop	r30
     a6c:	bf 91       	pop	r27
     a6e:	af 91       	pop	r26
     a70:	9f 91       	pop	r25
     a72:	8f 91       	pop	r24
     a74:	7f 91       	pop	r23
     a76:	6f 91       	pop	r22
     a78:	5f 91       	pop	r21
     a7a:	4f 91       	pop	r20
     a7c:	3f 91       	pop	r19
     a7e:	2f 91       	pop	r18
     a80:	0f 90       	pop	r0
     a82:	0b be       	out	0x3b, r0	; 59
     a84:	0f 90       	pop	r0
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	0f 90       	pop	r0
     a8a:	1f 90       	pop	r1
     a8c:	18 95       	reti

00000a8e <__vector_77>:
     a8e:	1f 92       	push	r1
     a90:	0f 92       	push	r0
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	0f 92       	push	r0
     a96:	11 24       	eor	r1, r1
     a98:	0b b6       	in	r0, 0x3b	; 59
     a9a:	0f 92       	push	r0
     a9c:	2f 93       	push	r18
     a9e:	3f 93       	push	r19
     aa0:	4f 93       	push	r20
     aa2:	5f 93       	push	r21
     aa4:	6f 93       	push	r22
     aa6:	7f 93       	push	r23
     aa8:	8f 93       	push	r24
     aaa:	9f 93       	push	r25
     aac:	af 93       	push	r26
     aae:	bf 93       	push	r27
     ab0:	ef 93       	push	r30
     ab2:	ff 93       	push	r31
     ab4:	e0 91 34 20 	lds	r30, 0x2034	; 0x802034 <tc_tcd0_ovf_callback>
     ab8:	f0 91 35 20 	lds	r31, 0x2035	; 0x802035 <tc_tcd0_ovf_callback+0x1>
     abc:	30 97       	sbiw	r30, 0x00	; 0
     abe:	09 f0       	breq	.+2      	; 0xac2 <__vector_77+0x34>
     ac0:	19 95       	eicall
     ac2:	ff 91       	pop	r31
     ac4:	ef 91       	pop	r30
     ac6:	bf 91       	pop	r27
     ac8:	af 91       	pop	r26
     aca:	9f 91       	pop	r25
     acc:	8f 91       	pop	r24
     ace:	7f 91       	pop	r23
     ad0:	6f 91       	pop	r22
     ad2:	5f 91       	pop	r21
     ad4:	4f 91       	pop	r20
     ad6:	3f 91       	pop	r19
     ad8:	2f 91       	pop	r18
     ada:	0f 90       	pop	r0
     adc:	0b be       	out	0x3b, r0	; 59
     ade:	0f 90       	pop	r0
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	0f 90       	pop	r0
     ae4:	1f 90       	pop	r1
     ae6:	18 95       	reti

00000ae8 <__vector_78>:
     ae8:	1f 92       	push	r1
     aea:	0f 92       	push	r0
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	0f 92       	push	r0
     af0:	11 24       	eor	r1, r1
     af2:	0b b6       	in	r0, 0x3b	; 59
     af4:	0f 92       	push	r0
     af6:	2f 93       	push	r18
     af8:	3f 93       	push	r19
     afa:	4f 93       	push	r20
     afc:	5f 93       	push	r21
     afe:	6f 93       	push	r22
     b00:	7f 93       	push	r23
     b02:	8f 93       	push	r24
     b04:	9f 93       	push	r25
     b06:	af 93       	push	r26
     b08:	bf 93       	push	r27
     b0a:	ef 93       	push	r30
     b0c:	ff 93       	push	r31
     b0e:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <tc_tcd0_err_callback>
     b12:	f0 91 33 20 	lds	r31, 0x2033	; 0x802033 <tc_tcd0_err_callback+0x1>
     b16:	30 97       	sbiw	r30, 0x00	; 0
     b18:	09 f0       	breq	.+2      	; 0xb1c <__vector_78+0x34>
     b1a:	19 95       	eicall
     b1c:	ff 91       	pop	r31
     b1e:	ef 91       	pop	r30
     b20:	bf 91       	pop	r27
     b22:	af 91       	pop	r26
     b24:	9f 91       	pop	r25
     b26:	8f 91       	pop	r24
     b28:	7f 91       	pop	r23
     b2a:	6f 91       	pop	r22
     b2c:	5f 91       	pop	r21
     b2e:	4f 91       	pop	r20
     b30:	3f 91       	pop	r19
     b32:	2f 91       	pop	r18
     b34:	0f 90       	pop	r0
     b36:	0b be       	out	0x3b, r0	; 59
     b38:	0f 90       	pop	r0
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	0f 90       	pop	r0
     b3e:	1f 90       	pop	r1
     b40:	18 95       	reti

00000b42 <__vector_79>:
     b42:	1f 92       	push	r1
     b44:	0f 92       	push	r0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	0f 92       	push	r0
     b4a:	11 24       	eor	r1, r1
     b4c:	0b b6       	in	r0, 0x3b	; 59
     b4e:	0f 92       	push	r0
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	e0 91 30 20 	lds	r30, 0x2030	; 0x802030 <tc_tcd0_cca_callback>
     b6c:	f0 91 31 20 	lds	r31, 0x2031	; 0x802031 <tc_tcd0_cca_callback+0x1>
     b70:	30 97       	sbiw	r30, 0x00	; 0
     b72:	09 f0       	breq	.+2      	; 0xb76 <__vector_79+0x34>
     b74:	19 95       	eicall
     b76:	ff 91       	pop	r31
     b78:	ef 91       	pop	r30
     b7a:	bf 91       	pop	r27
     b7c:	af 91       	pop	r26
     b7e:	9f 91       	pop	r25
     b80:	8f 91       	pop	r24
     b82:	7f 91       	pop	r23
     b84:	6f 91       	pop	r22
     b86:	5f 91       	pop	r21
     b88:	4f 91       	pop	r20
     b8a:	3f 91       	pop	r19
     b8c:	2f 91       	pop	r18
     b8e:	0f 90       	pop	r0
     b90:	0b be       	out	0x3b, r0	; 59
     b92:	0f 90       	pop	r0
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	0f 90       	pop	r0
     b98:	1f 90       	pop	r1
     b9a:	18 95       	reti

00000b9c <__vector_80>:
     b9c:	1f 92       	push	r1
     b9e:	0f 92       	push	r0
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	0f 92       	push	r0
     ba4:	11 24       	eor	r1, r1
     ba6:	0b b6       	in	r0, 0x3b	; 59
     ba8:	0f 92       	push	r0
     baa:	2f 93       	push	r18
     bac:	3f 93       	push	r19
     bae:	4f 93       	push	r20
     bb0:	5f 93       	push	r21
     bb2:	6f 93       	push	r22
     bb4:	7f 93       	push	r23
     bb6:	8f 93       	push	r24
     bb8:	9f 93       	push	r25
     bba:	af 93       	push	r26
     bbc:	bf 93       	push	r27
     bbe:	ef 93       	push	r30
     bc0:	ff 93       	push	r31
     bc2:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <tc_tcd0_ccb_callback>
     bc6:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <tc_tcd0_ccb_callback+0x1>
     bca:	30 97       	sbiw	r30, 0x00	; 0
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <__vector_80+0x34>
     bce:	19 95       	eicall
     bd0:	ff 91       	pop	r31
     bd2:	ef 91       	pop	r30
     bd4:	bf 91       	pop	r27
     bd6:	af 91       	pop	r26
     bd8:	9f 91       	pop	r25
     bda:	8f 91       	pop	r24
     bdc:	7f 91       	pop	r23
     bde:	6f 91       	pop	r22
     be0:	5f 91       	pop	r21
     be2:	4f 91       	pop	r20
     be4:	3f 91       	pop	r19
     be6:	2f 91       	pop	r18
     be8:	0f 90       	pop	r0
     bea:	0b be       	out	0x3b, r0	; 59
     bec:	0f 90       	pop	r0
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	0f 90       	pop	r0
     bf2:	1f 90       	pop	r1
     bf4:	18 95       	reti

00000bf6 <__vector_81>:
     bf6:	1f 92       	push	r1
     bf8:	0f 92       	push	r0
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	0f 92       	push	r0
     bfe:	11 24       	eor	r1, r1
     c00:	0b b6       	in	r0, 0x3b	; 59
     c02:	0f 92       	push	r0
     c04:	2f 93       	push	r18
     c06:	3f 93       	push	r19
     c08:	4f 93       	push	r20
     c0a:	5f 93       	push	r21
     c0c:	6f 93       	push	r22
     c0e:	7f 93       	push	r23
     c10:	8f 93       	push	r24
     c12:	9f 93       	push	r25
     c14:	af 93       	push	r26
     c16:	bf 93       	push	r27
     c18:	ef 93       	push	r30
     c1a:	ff 93       	push	r31
     c1c:	e0 91 2c 20 	lds	r30, 0x202C	; 0x80202c <tc_tcd0_ccc_callback>
     c20:	f0 91 2d 20 	lds	r31, 0x202D	; 0x80202d <tc_tcd0_ccc_callback+0x1>
     c24:	30 97       	sbiw	r30, 0x00	; 0
     c26:	09 f0       	breq	.+2      	; 0xc2a <__vector_81+0x34>
     c28:	19 95       	eicall
     c2a:	ff 91       	pop	r31
     c2c:	ef 91       	pop	r30
     c2e:	bf 91       	pop	r27
     c30:	af 91       	pop	r26
     c32:	9f 91       	pop	r25
     c34:	8f 91       	pop	r24
     c36:	7f 91       	pop	r23
     c38:	6f 91       	pop	r22
     c3a:	5f 91       	pop	r21
     c3c:	4f 91       	pop	r20
     c3e:	3f 91       	pop	r19
     c40:	2f 91       	pop	r18
     c42:	0f 90       	pop	r0
     c44:	0b be       	out	0x3b, r0	; 59
     c46:	0f 90       	pop	r0
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	0f 90       	pop	r0
     c4c:	1f 90       	pop	r1
     c4e:	18 95       	reti

00000c50 <__vector_82>:
     c50:	1f 92       	push	r1
     c52:	0f 92       	push	r0
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	0f 92       	push	r0
     c58:	11 24       	eor	r1, r1
     c5a:	0b b6       	in	r0, 0x3b	; 59
     c5c:	0f 92       	push	r0
     c5e:	2f 93       	push	r18
     c60:	3f 93       	push	r19
     c62:	4f 93       	push	r20
     c64:	5f 93       	push	r21
     c66:	6f 93       	push	r22
     c68:	7f 93       	push	r23
     c6a:	8f 93       	push	r24
     c6c:	9f 93       	push	r25
     c6e:	af 93       	push	r26
     c70:	bf 93       	push	r27
     c72:	ef 93       	push	r30
     c74:	ff 93       	push	r31
     c76:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <tc_tcd0_ccd_callback>
     c7a:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <tc_tcd0_ccd_callback+0x1>
     c7e:	30 97       	sbiw	r30, 0x00	; 0
     c80:	09 f0       	breq	.+2      	; 0xc84 <__vector_82+0x34>
     c82:	19 95       	eicall
     c84:	ff 91       	pop	r31
     c86:	ef 91       	pop	r30
     c88:	bf 91       	pop	r27
     c8a:	af 91       	pop	r26
     c8c:	9f 91       	pop	r25
     c8e:	8f 91       	pop	r24
     c90:	7f 91       	pop	r23
     c92:	6f 91       	pop	r22
     c94:	5f 91       	pop	r21
     c96:	4f 91       	pop	r20
     c98:	3f 91       	pop	r19
     c9a:	2f 91       	pop	r18
     c9c:	0f 90       	pop	r0
     c9e:	0b be       	out	0x3b, r0	; 59
     ca0:	0f 90       	pop	r0
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	0f 90       	pop	r0
     ca6:	1f 90       	pop	r1
     ca8:	18 95       	reti

00000caa <__vector_83>:
     caa:	1f 92       	push	r1
     cac:	0f 92       	push	r0
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	0f 92       	push	r0
     cb2:	11 24       	eor	r1, r1
     cb4:	0b b6       	in	r0, 0x3b	; 59
     cb6:	0f 92       	push	r0
     cb8:	2f 93       	push	r18
     cba:	3f 93       	push	r19
     cbc:	4f 93       	push	r20
     cbe:	5f 93       	push	r21
     cc0:	6f 93       	push	r22
     cc2:	7f 93       	push	r23
     cc4:	8f 93       	push	r24
     cc6:	9f 93       	push	r25
     cc8:	af 93       	push	r26
     cca:	bf 93       	push	r27
     ccc:	ef 93       	push	r30
     cce:	ff 93       	push	r31
     cd0:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <tc_tcd1_ovf_callback>
     cd4:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <tc_tcd1_ovf_callback+0x1>
     cd8:	30 97       	sbiw	r30, 0x00	; 0
     cda:	09 f0       	breq	.+2      	; 0xcde <__vector_83+0x34>
     cdc:	19 95       	eicall
     cde:	ff 91       	pop	r31
     ce0:	ef 91       	pop	r30
     ce2:	bf 91       	pop	r27
     ce4:	af 91       	pop	r26
     ce6:	9f 91       	pop	r25
     ce8:	8f 91       	pop	r24
     cea:	7f 91       	pop	r23
     cec:	6f 91       	pop	r22
     cee:	5f 91       	pop	r21
     cf0:	4f 91       	pop	r20
     cf2:	3f 91       	pop	r19
     cf4:	2f 91       	pop	r18
     cf6:	0f 90       	pop	r0
     cf8:	0b be       	out	0x3b, r0	; 59
     cfa:	0f 90       	pop	r0
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	0f 90       	pop	r0
     d00:	1f 90       	pop	r1
     d02:	18 95       	reti

00000d04 <__vector_84>:
     d04:	1f 92       	push	r1
     d06:	0f 92       	push	r0
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	0f 92       	push	r0
     d0c:	11 24       	eor	r1, r1
     d0e:	0b b6       	in	r0, 0x3b	; 59
     d10:	0f 92       	push	r0
     d12:	2f 93       	push	r18
     d14:	3f 93       	push	r19
     d16:	4f 93       	push	r20
     d18:	5f 93       	push	r21
     d1a:	6f 93       	push	r22
     d1c:	7f 93       	push	r23
     d1e:	8f 93       	push	r24
     d20:	9f 93       	push	r25
     d22:	af 93       	push	r26
     d24:	bf 93       	push	r27
     d26:	ef 93       	push	r30
     d28:	ff 93       	push	r31
     d2a:	e0 91 26 20 	lds	r30, 0x2026	; 0x802026 <tc_tcd1_err_callback>
     d2e:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <tc_tcd1_err_callback+0x1>
     d32:	30 97       	sbiw	r30, 0x00	; 0
     d34:	09 f0       	breq	.+2      	; 0xd38 <__vector_84+0x34>
     d36:	19 95       	eicall
     d38:	ff 91       	pop	r31
     d3a:	ef 91       	pop	r30
     d3c:	bf 91       	pop	r27
     d3e:	af 91       	pop	r26
     d40:	9f 91       	pop	r25
     d42:	8f 91       	pop	r24
     d44:	7f 91       	pop	r23
     d46:	6f 91       	pop	r22
     d48:	5f 91       	pop	r21
     d4a:	4f 91       	pop	r20
     d4c:	3f 91       	pop	r19
     d4e:	2f 91       	pop	r18
     d50:	0f 90       	pop	r0
     d52:	0b be       	out	0x3b, r0	; 59
     d54:	0f 90       	pop	r0
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	0f 90       	pop	r0
     d5a:	1f 90       	pop	r1
     d5c:	18 95       	reti

00000d5e <__vector_85>:
     d5e:	1f 92       	push	r1
     d60:	0f 92       	push	r0
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	0f 92       	push	r0
     d66:	11 24       	eor	r1, r1
     d68:	0b b6       	in	r0, 0x3b	; 59
     d6a:	0f 92       	push	r0
     d6c:	2f 93       	push	r18
     d6e:	3f 93       	push	r19
     d70:	4f 93       	push	r20
     d72:	5f 93       	push	r21
     d74:	6f 93       	push	r22
     d76:	7f 93       	push	r23
     d78:	8f 93       	push	r24
     d7a:	9f 93       	push	r25
     d7c:	af 93       	push	r26
     d7e:	bf 93       	push	r27
     d80:	ef 93       	push	r30
     d82:	ff 93       	push	r31
     d84:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <tc_tcd1_cca_callback>
     d88:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <tc_tcd1_cca_callback+0x1>
     d8c:	30 97       	sbiw	r30, 0x00	; 0
     d8e:	09 f0       	breq	.+2      	; 0xd92 <__vector_85+0x34>
     d90:	19 95       	eicall
     d92:	ff 91       	pop	r31
     d94:	ef 91       	pop	r30
     d96:	bf 91       	pop	r27
     d98:	af 91       	pop	r26
     d9a:	9f 91       	pop	r25
     d9c:	8f 91       	pop	r24
     d9e:	7f 91       	pop	r23
     da0:	6f 91       	pop	r22
     da2:	5f 91       	pop	r21
     da4:	4f 91       	pop	r20
     da6:	3f 91       	pop	r19
     da8:	2f 91       	pop	r18
     daa:	0f 90       	pop	r0
     dac:	0b be       	out	0x3b, r0	; 59
     dae:	0f 90       	pop	r0
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	0f 90       	pop	r0
     db4:	1f 90       	pop	r1
     db6:	18 95       	reti

00000db8 <__vector_86>:
     db8:	1f 92       	push	r1
     dba:	0f 92       	push	r0
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	0f 92       	push	r0
     dc0:	11 24       	eor	r1, r1
     dc2:	0b b6       	in	r0, 0x3b	; 59
     dc4:	0f 92       	push	r0
     dc6:	2f 93       	push	r18
     dc8:	3f 93       	push	r19
     dca:	4f 93       	push	r20
     dcc:	5f 93       	push	r21
     dce:	6f 93       	push	r22
     dd0:	7f 93       	push	r23
     dd2:	8f 93       	push	r24
     dd4:	9f 93       	push	r25
     dd6:	af 93       	push	r26
     dd8:	bf 93       	push	r27
     dda:	ef 93       	push	r30
     ddc:	ff 93       	push	r31
     dde:	e0 91 22 20 	lds	r30, 0x2022	; 0x802022 <tc_tcd1_ccb_callback>
     de2:	f0 91 23 20 	lds	r31, 0x2023	; 0x802023 <tc_tcd1_ccb_callback+0x1>
     de6:	30 97       	sbiw	r30, 0x00	; 0
     de8:	09 f0       	breq	.+2      	; 0xdec <__vector_86+0x34>
     dea:	19 95       	eicall
     dec:	ff 91       	pop	r31
     dee:	ef 91       	pop	r30
     df0:	bf 91       	pop	r27
     df2:	af 91       	pop	r26
     df4:	9f 91       	pop	r25
     df6:	8f 91       	pop	r24
     df8:	7f 91       	pop	r23
     dfa:	6f 91       	pop	r22
     dfc:	5f 91       	pop	r21
     dfe:	4f 91       	pop	r20
     e00:	3f 91       	pop	r19
     e02:	2f 91       	pop	r18
     e04:	0f 90       	pop	r0
     e06:	0b be       	out	0x3b, r0	; 59
     e08:	0f 90       	pop	r0
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	0f 90       	pop	r0
     e0e:	1f 90       	pop	r1
     e10:	18 95       	reti

00000e12 <__vector_47>:
     e12:	1f 92       	push	r1
     e14:	0f 92       	push	r0
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	0f 92       	push	r0
     e1a:	11 24       	eor	r1, r1
     e1c:	0b b6       	in	r0, 0x3b	; 59
     e1e:	0f 92       	push	r0
     e20:	2f 93       	push	r18
     e22:	3f 93       	push	r19
     e24:	4f 93       	push	r20
     e26:	5f 93       	push	r21
     e28:	6f 93       	push	r22
     e2a:	7f 93       	push	r23
     e2c:	8f 93       	push	r24
     e2e:	9f 93       	push	r25
     e30:	af 93       	push	r26
     e32:	bf 93       	push	r27
     e34:	ef 93       	push	r30
     e36:	ff 93       	push	r31
     e38:	e0 91 20 20 	lds	r30, 0x2020	; 0x802020 <tc_tce0_ovf_callback>
     e3c:	f0 91 21 20 	lds	r31, 0x2021	; 0x802021 <tc_tce0_ovf_callback+0x1>
     e40:	30 97       	sbiw	r30, 0x00	; 0
     e42:	09 f0       	breq	.+2      	; 0xe46 <__vector_47+0x34>
     e44:	19 95       	eicall
     e46:	ff 91       	pop	r31
     e48:	ef 91       	pop	r30
     e4a:	bf 91       	pop	r27
     e4c:	af 91       	pop	r26
     e4e:	9f 91       	pop	r25
     e50:	8f 91       	pop	r24
     e52:	7f 91       	pop	r23
     e54:	6f 91       	pop	r22
     e56:	5f 91       	pop	r21
     e58:	4f 91       	pop	r20
     e5a:	3f 91       	pop	r19
     e5c:	2f 91       	pop	r18
     e5e:	0f 90       	pop	r0
     e60:	0b be       	out	0x3b, r0	; 59
     e62:	0f 90       	pop	r0
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	0f 90       	pop	r0
     e68:	1f 90       	pop	r1
     e6a:	18 95       	reti

00000e6c <__vector_48>:
     e6c:	1f 92       	push	r1
     e6e:	0f 92       	push	r0
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	0f 92       	push	r0
     e74:	11 24       	eor	r1, r1
     e76:	0b b6       	in	r0, 0x3b	; 59
     e78:	0f 92       	push	r0
     e7a:	2f 93       	push	r18
     e7c:	3f 93       	push	r19
     e7e:	4f 93       	push	r20
     e80:	5f 93       	push	r21
     e82:	6f 93       	push	r22
     e84:	7f 93       	push	r23
     e86:	8f 93       	push	r24
     e88:	9f 93       	push	r25
     e8a:	af 93       	push	r26
     e8c:	bf 93       	push	r27
     e8e:	ef 93       	push	r30
     e90:	ff 93       	push	r31
     e92:	e0 91 1e 20 	lds	r30, 0x201E	; 0x80201e <tc_tce0_err_callback>
     e96:	f0 91 1f 20 	lds	r31, 0x201F	; 0x80201f <tc_tce0_err_callback+0x1>
     e9a:	30 97       	sbiw	r30, 0x00	; 0
     e9c:	09 f0       	breq	.+2      	; 0xea0 <__vector_48+0x34>
     e9e:	19 95       	eicall
     ea0:	ff 91       	pop	r31
     ea2:	ef 91       	pop	r30
     ea4:	bf 91       	pop	r27
     ea6:	af 91       	pop	r26
     ea8:	9f 91       	pop	r25
     eaa:	8f 91       	pop	r24
     eac:	7f 91       	pop	r23
     eae:	6f 91       	pop	r22
     eb0:	5f 91       	pop	r21
     eb2:	4f 91       	pop	r20
     eb4:	3f 91       	pop	r19
     eb6:	2f 91       	pop	r18
     eb8:	0f 90       	pop	r0
     eba:	0b be       	out	0x3b, r0	; 59
     ebc:	0f 90       	pop	r0
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	0f 90       	pop	r0
     ec2:	1f 90       	pop	r1
     ec4:	18 95       	reti

00000ec6 <__vector_49>:
     ec6:	1f 92       	push	r1
     ec8:	0f 92       	push	r0
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	0f 92       	push	r0
     ece:	11 24       	eor	r1, r1
     ed0:	0b b6       	in	r0, 0x3b	; 59
     ed2:	0f 92       	push	r0
     ed4:	2f 93       	push	r18
     ed6:	3f 93       	push	r19
     ed8:	4f 93       	push	r20
     eda:	5f 93       	push	r21
     edc:	6f 93       	push	r22
     ede:	7f 93       	push	r23
     ee0:	8f 93       	push	r24
     ee2:	9f 93       	push	r25
     ee4:	af 93       	push	r26
     ee6:	bf 93       	push	r27
     ee8:	ef 93       	push	r30
     eea:	ff 93       	push	r31
     eec:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <tc_tce0_cca_callback>
     ef0:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <tc_tce0_cca_callback+0x1>
     ef4:	30 97       	sbiw	r30, 0x00	; 0
     ef6:	09 f0       	breq	.+2      	; 0xefa <__vector_49+0x34>
     ef8:	19 95       	eicall
     efa:	ff 91       	pop	r31
     efc:	ef 91       	pop	r30
     efe:	bf 91       	pop	r27
     f00:	af 91       	pop	r26
     f02:	9f 91       	pop	r25
     f04:	8f 91       	pop	r24
     f06:	7f 91       	pop	r23
     f08:	6f 91       	pop	r22
     f0a:	5f 91       	pop	r21
     f0c:	4f 91       	pop	r20
     f0e:	3f 91       	pop	r19
     f10:	2f 91       	pop	r18
     f12:	0f 90       	pop	r0
     f14:	0b be       	out	0x3b, r0	; 59
     f16:	0f 90       	pop	r0
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	0f 90       	pop	r0
     f1c:	1f 90       	pop	r1
     f1e:	18 95       	reti

00000f20 <__vector_50>:
     f20:	1f 92       	push	r1
     f22:	0f 92       	push	r0
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	0f 92       	push	r0
     f28:	11 24       	eor	r1, r1
     f2a:	0b b6       	in	r0, 0x3b	; 59
     f2c:	0f 92       	push	r0
     f2e:	2f 93       	push	r18
     f30:	3f 93       	push	r19
     f32:	4f 93       	push	r20
     f34:	5f 93       	push	r21
     f36:	6f 93       	push	r22
     f38:	7f 93       	push	r23
     f3a:	8f 93       	push	r24
     f3c:	9f 93       	push	r25
     f3e:	af 93       	push	r26
     f40:	bf 93       	push	r27
     f42:	ef 93       	push	r30
     f44:	ff 93       	push	r31
     f46:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <tc_tce0_ccb_callback>
     f4a:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <tc_tce0_ccb_callback+0x1>
     f4e:	30 97       	sbiw	r30, 0x00	; 0
     f50:	09 f0       	breq	.+2      	; 0xf54 <__vector_50+0x34>
     f52:	19 95       	eicall
     f54:	ff 91       	pop	r31
     f56:	ef 91       	pop	r30
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	0f 90       	pop	r0
     f6e:	0b be       	out	0x3b, r0	; 59
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <__vector_51>:
     f7a:	1f 92       	push	r1
     f7c:	0f 92       	push	r0
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	0f 92       	push	r0
     f82:	11 24       	eor	r1, r1
     f84:	0b b6       	in	r0, 0x3b	; 59
     f86:	0f 92       	push	r0
     f88:	2f 93       	push	r18
     f8a:	3f 93       	push	r19
     f8c:	4f 93       	push	r20
     f8e:	5f 93       	push	r21
     f90:	6f 93       	push	r22
     f92:	7f 93       	push	r23
     f94:	8f 93       	push	r24
     f96:	9f 93       	push	r25
     f98:	af 93       	push	r26
     f9a:	bf 93       	push	r27
     f9c:	ef 93       	push	r30
     f9e:	ff 93       	push	r31
     fa0:	e0 91 18 20 	lds	r30, 0x2018	; 0x802018 <tc_tce0_ccc_callback>
     fa4:	f0 91 19 20 	lds	r31, 0x2019	; 0x802019 <tc_tce0_ccc_callback+0x1>
     fa8:	30 97       	sbiw	r30, 0x00	; 0
     faa:	09 f0       	breq	.+2      	; 0xfae <__vector_51+0x34>
     fac:	19 95       	eicall
     fae:	ff 91       	pop	r31
     fb0:	ef 91       	pop	r30
     fb2:	bf 91       	pop	r27
     fb4:	af 91       	pop	r26
     fb6:	9f 91       	pop	r25
     fb8:	8f 91       	pop	r24
     fba:	7f 91       	pop	r23
     fbc:	6f 91       	pop	r22
     fbe:	5f 91       	pop	r21
     fc0:	4f 91       	pop	r20
     fc2:	3f 91       	pop	r19
     fc4:	2f 91       	pop	r18
     fc6:	0f 90       	pop	r0
     fc8:	0b be       	out	0x3b, r0	; 59
     fca:	0f 90       	pop	r0
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	0f 90       	pop	r0
     fd0:	1f 90       	pop	r1
     fd2:	18 95       	reti

00000fd4 <__vector_52>:
     fd4:	1f 92       	push	r1
     fd6:	0f 92       	push	r0
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	0f 92       	push	r0
     fdc:	11 24       	eor	r1, r1
     fde:	0b b6       	in	r0, 0x3b	; 59
     fe0:	0f 92       	push	r0
     fe2:	2f 93       	push	r18
     fe4:	3f 93       	push	r19
     fe6:	4f 93       	push	r20
     fe8:	5f 93       	push	r21
     fea:	6f 93       	push	r22
     fec:	7f 93       	push	r23
     fee:	8f 93       	push	r24
     ff0:	9f 93       	push	r25
     ff2:	af 93       	push	r26
     ff4:	bf 93       	push	r27
     ff6:	ef 93       	push	r30
     ff8:	ff 93       	push	r31
     ffa:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <tc_tce0_ccd_callback>
     ffe:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <tc_tce0_ccd_callback+0x1>
    1002:	30 97       	sbiw	r30, 0x00	; 0
    1004:	09 f0       	breq	.+2      	; 0x1008 <__vector_52+0x34>
    1006:	19 95       	eicall
    1008:	ff 91       	pop	r31
    100a:	ef 91       	pop	r30
    100c:	bf 91       	pop	r27
    100e:	af 91       	pop	r26
    1010:	9f 91       	pop	r25
    1012:	8f 91       	pop	r24
    1014:	7f 91       	pop	r23
    1016:	6f 91       	pop	r22
    1018:	5f 91       	pop	r21
    101a:	4f 91       	pop	r20
    101c:	3f 91       	pop	r19
    101e:	2f 91       	pop	r18
    1020:	0f 90       	pop	r0
    1022:	0b be       	out	0x3b, r0	; 59
    1024:	0f 90       	pop	r0
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	0f 90       	pop	r0
    102a:	1f 90       	pop	r1
    102c:	18 95       	reti

0000102e <__vector_53>:
    102e:	1f 92       	push	r1
    1030:	0f 92       	push	r0
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	0f 92       	push	r0
    1036:	11 24       	eor	r1, r1
    1038:	0b b6       	in	r0, 0x3b	; 59
    103a:	0f 92       	push	r0
    103c:	2f 93       	push	r18
    103e:	3f 93       	push	r19
    1040:	4f 93       	push	r20
    1042:	5f 93       	push	r21
    1044:	6f 93       	push	r22
    1046:	7f 93       	push	r23
    1048:	8f 93       	push	r24
    104a:	9f 93       	push	r25
    104c:	af 93       	push	r26
    104e:	bf 93       	push	r27
    1050:	ef 93       	push	r30
    1052:	ff 93       	push	r31
    1054:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <tc_tce1_ovf_callback>
    1058:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <tc_tce1_ovf_callback+0x1>
    105c:	30 97       	sbiw	r30, 0x00	; 0
    105e:	09 f0       	breq	.+2      	; 0x1062 <__vector_53+0x34>
    1060:	19 95       	eicall
    1062:	ff 91       	pop	r31
    1064:	ef 91       	pop	r30
    1066:	bf 91       	pop	r27
    1068:	af 91       	pop	r26
    106a:	9f 91       	pop	r25
    106c:	8f 91       	pop	r24
    106e:	7f 91       	pop	r23
    1070:	6f 91       	pop	r22
    1072:	5f 91       	pop	r21
    1074:	4f 91       	pop	r20
    1076:	3f 91       	pop	r19
    1078:	2f 91       	pop	r18
    107a:	0f 90       	pop	r0
    107c:	0b be       	out	0x3b, r0	; 59
    107e:	0f 90       	pop	r0
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	0f 90       	pop	r0
    1084:	1f 90       	pop	r1
    1086:	18 95       	reti

00001088 <__vector_54>:
    1088:	1f 92       	push	r1
    108a:	0f 92       	push	r0
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	0f 92       	push	r0
    1090:	11 24       	eor	r1, r1
    1092:	0b b6       	in	r0, 0x3b	; 59
    1094:	0f 92       	push	r0
    1096:	2f 93       	push	r18
    1098:	3f 93       	push	r19
    109a:	4f 93       	push	r20
    109c:	5f 93       	push	r21
    109e:	6f 93       	push	r22
    10a0:	7f 93       	push	r23
    10a2:	8f 93       	push	r24
    10a4:	9f 93       	push	r25
    10a6:	af 93       	push	r26
    10a8:	bf 93       	push	r27
    10aa:	ef 93       	push	r30
    10ac:	ff 93       	push	r31
    10ae:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <tc_tce1_err_callback>
    10b2:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <tc_tce1_err_callback+0x1>
    10b6:	30 97       	sbiw	r30, 0x00	; 0
    10b8:	09 f0       	breq	.+2      	; 0x10bc <__vector_54+0x34>
    10ba:	19 95       	eicall
    10bc:	ff 91       	pop	r31
    10be:	ef 91       	pop	r30
    10c0:	bf 91       	pop	r27
    10c2:	af 91       	pop	r26
    10c4:	9f 91       	pop	r25
    10c6:	8f 91       	pop	r24
    10c8:	7f 91       	pop	r23
    10ca:	6f 91       	pop	r22
    10cc:	5f 91       	pop	r21
    10ce:	4f 91       	pop	r20
    10d0:	3f 91       	pop	r19
    10d2:	2f 91       	pop	r18
    10d4:	0f 90       	pop	r0
    10d6:	0b be       	out	0x3b, r0	; 59
    10d8:	0f 90       	pop	r0
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	0f 90       	pop	r0
    10de:	1f 90       	pop	r1
    10e0:	18 95       	reti

000010e2 <__vector_55>:
    10e2:	1f 92       	push	r1
    10e4:	0f 92       	push	r0
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	0f 92       	push	r0
    10ea:	11 24       	eor	r1, r1
    10ec:	0b b6       	in	r0, 0x3b	; 59
    10ee:	0f 92       	push	r0
    10f0:	2f 93       	push	r18
    10f2:	3f 93       	push	r19
    10f4:	4f 93       	push	r20
    10f6:	5f 93       	push	r21
    10f8:	6f 93       	push	r22
    10fa:	7f 93       	push	r23
    10fc:	8f 93       	push	r24
    10fe:	9f 93       	push	r25
    1100:	af 93       	push	r26
    1102:	bf 93       	push	r27
    1104:	ef 93       	push	r30
    1106:	ff 93       	push	r31
    1108:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <tc_tce1_cca_callback>
    110c:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <tc_tce1_cca_callback+0x1>
    1110:	30 97       	sbiw	r30, 0x00	; 0
    1112:	09 f0       	breq	.+2      	; 0x1116 <__vector_55+0x34>
    1114:	19 95       	eicall
    1116:	ff 91       	pop	r31
    1118:	ef 91       	pop	r30
    111a:	bf 91       	pop	r27
    111c:	af 91       	pop	r26
    111e:	9f 91       	pop	r25
    1120:	8f 91       	pop	r24
    1122:	7f 91       	pop	r23
    1124:	6f 91       	pop	r22
    1126:	5f 91       	pop	r21
    1128:	4f 91       	pop	r20
    112a:	3f 91       	pop	r19
    112c:	2f 91       	pop	r18
    112e:	0f 90       	pop	r0
    1130:	0b be       	out	0x3b, r0	; 59
    1132:	0f 90       	pop	r0
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	0f 90       	pop	r0
    1138:	1f 90       	pop	r1
    113a:	18 95       	reti

0000113c <__vector_56>:
    113c:	1f 92       	push	r1
    113e:	0f 92       	push	r0
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	0f 92       	push	r0
    1144:	11 24       	eor	r1, r1
    1146:	0b b6       	in	r0, 0x3b	; 59
    1148:	0f 92       	push	r0
    114a:	2f 93       	push	r18
    114c:	3f 93       	push	r19
    114e:	4f 93       	push	r20
    1150:	5f 93       	push	r21
    1152:	6f 93       	push	r22
    1154:	7f 93       	push	r23
    1156:	8f 93       	push	r24
    1158:	9f 93       	push	r25
    115a:	af 93       	push	r26
    115c:	bf 93       	push	r27
    115e:	ef 93       	push	r30
    1160:	ff 93       	push	r31
    1162:	e0 91 0e 20 	lds	r30, 0x200E	; 0x80200e <tc_tce1_ccb_callback>
    1166:	f0 91 0f 20 	lds	r31, 0x200F	; 0x80200f <tc_tce1_ccb_callback+0x1>
    116a:	30 97       	sbiw	r30, 0x00	; 0
    116c:	09 f0       	breq	.+2      	; 0x1170 <__vector_56+0x34>
    116e:	19 95       	eicall
    1170:	ff 91       	pop	r31
    1172:	ef 91       	pop	r30
    1174:	bf 91       	pop	r27
    1176:	af 91       	pop	r26
    1178:	9f 91       	pop	r25
    117a:	8f 91       	pop	r24
    117c:	7f 91       	pop	r23
    117e:	6f 91       	pop	r22
    1180:	5f 91       	pop	r21
    1182:	4f 91       	pop	r20
    1184:	3f 91       	pop	r19
    1186:	2f 91       	pop	r18
    1188:	0f 90       	pop	r0
    118a:	0b be       	out	0x3b, r0	; 59
    118c:	0f 90       	pop	r0
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	0f 90       	pop	r0
    1192:	1f 90       	pop	r1
    1194:	18 95       	reti

00001196 <__vector_108>:
    1196:	1f 92       	push	r1
    1198:	0f 92       	push	r0
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	0f 92       	push	r0
    119e:	11 24       	eor	r1, r1
    11a0:	0b b6       	in	r0, 0x3b	; 59
    11a2:	0f 92       	push	r0
    11a4:	2f 93       	push	r18
    11a6:	3f 93       	push	r19
    11a8:	4f 93       	push	r20
    11aa:	5f 93       	push	r21
    11ac:	6f 93       	push	r22
    11ae:	7f 93       	push	r23
    11b0:	8f 93       	push	r24
    11b2:	9f 93       	push	r25
    11b4:	af 93       	push	r26
    11b6:	bf 93       	push	r27
    11b8:	ef 93       	push	r30
    11ba:	ff 93       	push	r31
    11bc:	e0 91 0c 20 	lds	r30, 0x200C	; 0x80200c <tc_tcf0_ovf_callback>
    11c0:	f0 91 0d 20 	lds	r31, 0x200D	; 0x80200d <tc_tcf0_ovf_callback+0x1>
    11c4:	30 97       	sbiw	r30, 0x00	; 0
    11c6:	09 f0       	breq	.+2      	; 0x11ca <__vector_108+0x34>
    11c8:	19 95       	eicall
    11ca:	ff 91       	pop	r31
    11cc:	ef 91       	pop	r30
    11ce:	bf 91       	pop	r27
    11d0:	af 91       	pop	r26
    11d2:	9f 91       	pop	r25
    11d4:	8f 91       	pop	r24
    11d6:	7f 91       	pop	r23
    11d8:	6f 91       	pop	r22
    11da:	5f 91       	pop	r21
    11dc:	4f 91       	pop	r20
    11de:	3f 91       	pop	r19
    11e0:	2f 91       	pop	r18
    11e2:	0f 90       	pop	r0
    11e4:	0b be       	out	0x3b, r0	; 59
    11e6:	0f 90       	pop	r0
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	0f 90       	pop	r0
    11ec:	1f 90       	pop	r1
    11ee:	18 95       	reti

000011f0 <__vector_109>:
    11f0:	1f 92       	push	r1
    11f2:	0f 92       	push	r0
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	0f 92       	push	r0
    11f8:	11 24       	eor	r1, r1
    11fa:	0b b6       	in	r0, 0x3b	; 59
    11fc:	0f 92       	push	r0
    11fe:	2f 93       	push	r18
    1200:	3f 93       	push	r19
    1202:	4f 93       	push	r20
    1204:	5f 93       	push	r21
    1206:	6f 93       	push	r22
    1208:	7f 93       	push	r23
    120a:	8f 93       	push	r24
    120c:	9f 93       	push	r25
    120e:	af 93       	push	r26
    1210:	bf 93       	push	r27
    1212:	ef 93       	push	r30
    1214:	ff 93       	push	r31
    1216:	e0 91 0a 20 	lds	r30, 0x200A	; 0x80200a <tc_tcf0_err_callback>
    121a:	f0 91 0b 20 	lds	r31, 0x200B	; 0x80200b <tc_tcf0_err_callback+0x1>
    121e:	30 97       	sbiw	r30, 0x00	; 0
    1220:	09 f0       	breq	.+2      	; 0x1224 <__vector_109+0x34>
    1222:	19 95       	eicall
    1224:	ff 91       	pop	r31
    1226:	ef 91       	pop	r30
    1228:	bf 91       	pop	r27
    122a:	af 91       	pop	r26
    122c:	9f 91       	pop	r25
    122e:	8f 91       	pop	r24
    1230:	7f 91       	pop	r23
    1232:	6f 91       	pop	r22
    1234:	5f 91       	pop	r21
    1236:	4f 91       	pop	r20
    1238:	3f 91       	pop	r19
    123a:	2f 91       	pop	r18
    123c:	0f 90       	pop	r0
    123e:	0b be       	out	0x3b, r0	; 59
    1240:	0f 90       	pop	r0
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	0f 90       	pop	r0
    1246:	1f 90       	pop	r1
    1248:	18 95       	reti

0000124a <__vector_110>:
    124a:	1f 92       	push	r1
    124c:	0f 92       	push	r0
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	0f 92       	push	r0
    1252:	11 24       	eor	r1, r1
    1254:	0b b6       	in	r0, 0x3b	; 59
    1256:	0f 92       	push	r0
    1258:	2f 93       	push	r18
    125a:	3f 93       	push	r19
    125c:	4f 93       	push	r20
    125e:	5f 93       	push	r21
    1260:	6f 93       	push	r22
    1262:	7f 93       	push	r23
    1264:	8f 93       	push	r24
    1266:	9f 93       	push	r25
    1268:	af 93       	push	r26
    126a:	bf 93       	push	r27
    126c:	ef 93       	push	r30
    126e:	ff 93       	push	r31
    1270:	e0 91 08 20 	lds	r30, 0x2008	; 0x802008 <tc_tcf0_cca_callback>
    1274:	f0 91 09 20 	lds	r31, 0x2009	; 0x802009 <tc_tcf0_cca_callback+0x1>
    1278:	30 97       	sbiw	r30, 0x00	; 0
    127a:	09 f0       	breq	.+2      	; 0x127e <__vector_110+0x34>
    127c:	19 95       	eicall
    127e:	ff 91       	pop	r31
    1280:	ef 91       	pop	r30
    1282:	bf 91       	pop	r27
    1284:	af 91       	pop	r26
    1286:	9f 91       	pop	r25
    1288:	8f 91       	pop	r24
    128a:	7f 91       	pop	r23
    128c:	6f 91       	pop	r22
    128e:	5f 91       	pop	r21
    1290:	4f 91       	pop	r20
    1292:	3f 91       	pop	r19
    1294:	2f 91       	pop	r18
    1296:	0f 90       	pop	r0
    1298:	0b be       	out	0x3b, r0	; 59
    129a:	0f 90       	pop	r0
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	0f 90       	pop	r0
    12a0:	1f 90       	pop	r1
    12a2:	18 95       	reti

000012a4 <__vector_111>:
    12a4:	1f 92       	push	r1
    12a6:	0f 92       	push	r0
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	0f 92       	push	r0
    12ac:	11 24       	eor	r1, r1
    12ae:	0b b6       	in	r0, 0x3b	; 59
    12b0:	0f 92       	push	r0
    12b2:	2f 93       	push	r18
    12b4:	3f 93       	push	r19
    12b6:	4f 93       	push	r20
    12b8:	5f 93       	push	r21
    12ba:	6f 93       	push	r22
    12bc:	7f 93       	push	r23
    12be:	8f 93       	push	r24
    12c0:	9f 93       	push	r25
    12c2:	af 93       	push	r26
    12c4:	bf 93       	push	r27
    12c6:	ef 93       	push	r30
    12c8:	ff 93       	push	r31
    12ca:	e0 91 06 20 	lds	r30, 0x2006	; 0x802006 <tc_tcf0_ccb_callback>
    12ce:	f0 91 07 20 	lds	r31, 0x2007	; 0x802007 <tc_tcf0_ccb_callback+0x1>
    12d2:	30 97       	sbiw	r30, 0x00	; 0
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <__vector_111+0x34>
    12d6:	19 95       	eicall
    12d8:	ff 91       	pop	r31
    12da:	ef 91       	pop	r30
    12dc:	bf 91       	pop	r27
    12de:	af 91       	pop	r26
    12e0:	9f 91       	pop	r25
    12e2:	8f 91       	pop	r24
    12e4:	7f 91       	pop	r23
    12e6:	6f 91       	pop	r22
    12e8:	5f 91       	pop	r21
    12ea:	4f 91       	pop	r20
    12ec:	3f 91       	pop	r19
    12ee:	2f 91       	pop	r18
    12f0:	0f 90       	pop	r0
    12f2:	0b be       	out	0x3b, r0	; 59
    12f4:	0f 90       	pop	r0
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	0f 90       	pop	r0
    12fa:	1f 90       	pop	r1
    12fc:	18 95       	reti

000012fe <__vector_112>:
    12fe:	1f 92       	push	r1
    1300:	0f 92       	push	r0
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	0f 92       	push	r0
    1306:	11 24       	eor	r1, r1
    1308:	0b b6       	in	r0, 0x3b	; 59
    130a:	0f 92       	push	r0
    130c:	2f 93       	push	r18
    130e:	3f 93       	push	r19
    1310:	4f 93       	push	r20
    1312:	5f 93       	push	r21
    1314:	6f 93       	push	r22
    1316:	7f 93       	push	r23
    1318:	8f 93       	push	r24
    131a:	9f 93       	push	r25
    131c:	af 93       	push	r26
    131e:	bf 93       	push	r27
    1320:	ef 93       	push	r30
    1322:	ff 93       	push	r31
    1324:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <tc_tcf0_ccc_callback>
    1328:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <tc_tcf0_ccc_callback+0x1>
    132c:	30 97       	sbiw	r30, 0x00	; 0
    132e:	09 f0       	breq	.+2      	; 0x1332 <__vector_112+0x34>
    1330:	19 95       	eicall
    1332:	ff 91       	pop	r31
    1334:	ef 91       	pop	r30
    1336:	bf 91       	pop	r27
    1338:	af 91       	pop	r26
    133a:	9f 91       	pop	r25
    133c:	8f 91       	pop	r24
    133e:	7f 91       	pop	r23
    1340:	6f 91       	pop	r22
    1342:	5f 91       	pop	r21
    1344:	4f 91       	pop	r20
    1346:	3f 91       	pop	r19
    1348:	2f 91       	pop	r18
    134a:	0f 90       	pop	r0
    134c:	0b be       	out	0x3b, r0	; 59
    134e:	0f 90       	pop	r0
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	0f 90       	pop	r0
    1354:	1f 90       	pop	r1
    1356:	18 95       	reti

00001358 <__vector_113>:
    1358:	1f 92       	push	r1
    135a:	0f 92       	push	r0
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	0f 92       	push	r0
    1360:	11 24       	eor	r1, r1
    1362:	0b b6       	in	r0, 0x3b	; 59
    1364:	0f 92       	push	r0
    1366:	2f 93       	push	r18
    1368:	3f 93       	push	r19
    136a:	4f 93       	push	r20
    136c:	5f 93       	push	r21
    136e:	6f 93       	push	r22
    1370:	7f 93       	push	r23
    1372:	8f 93       	push	r24
    1374:	9f 93       	push	r25
    1376:	af 93       	push	r26
    1378:	bf 93       	push	r27
    137a:	ef 93       	push	r30
    137c:	ff 93       	push	r31
    137e:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <tc_tcf0_ccd_callback>
    1382:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <tc_tcf0_ccd_callback+0x1>
    1386:	30 97       	sbiw	r30, 0x00	; 0
    1388:	09 f0       	breq	.+2      	; 0x138c <__vector_113+0x34>
    138a:	19 95       	eicall
    138c:	ff 91       	pop	r31
    138e:	ef 91       	pop	r30
    1390:	bf 91       	pop	r27
    1392:	af 91       	pop	r26
    1394:	9f 91       	pop	r25
    1396:	8f 91       	pop	r24
    1398:	7f 91       	pop	r23
    139a:	6f 91       	pop	r22
    139c:	5f 91       	pop	r21
    139e:	4f 91       	pop	r20
    13a0:	3f 91       	pop	r19
    13a2:	2f 91       	pop	r18
    13a4:	0f 90       	pop	r0
    13a6:	0b be       	out	0x3b, r0	; 59
    13a8:	0f 90       	pop	r0
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	0f 90       	pop	r0
    13ae:	1f 90       	pop	r1
    13b0:	18 95       	reti

000013b2 <tc_enable>:
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	1f 92       	push	r1
    13ba:	1f 92       	push	r1
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	2f b7       	in	r18, 0x3f	; 63
    13c2:	2a 83       	std	Y+2, r18	; 0x02
    13c4:	f8 94       	cli
    13c6:	1a 81       	ldd	r17, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	39 2f       	mov	r19, r25
    13cc:	21 15       	cp	r18, r1
    13ce:	88 e0       	ldi	r24, 0x08	; 8
    13d0:	38 07       	cpc	r19, r24
    13d2:	49 f4       	brne	.+18     	; 0x13e6 <tc_enable+0x34>
    13d4:	61 e0       	ldi	r22, 0x01	; 1
    13d6:	83 e0       	ldi	r24, 0x03	; 3
    13d8:	0e 94 30 01 	call	0x260	; 0x260 <sysclk_enable_module>
    13dc:	64 e0       	ldi	r22, 0x04	; 4
    13de:	83 e0       	ldi	r24, 0x03	; 3
    13e0:	0e 94 30 01 	call	0x260	; 0x260 <sysclk_enable_module>
    13e4:	4f c0       	rjmp	.+158    	; 0x1484 <tc_enable+0xd2>
    13e6:	20 34       	cpi	r18, 0x40	; 64
    13e8:	88 e0       	ldi	r24, 0x08	; 8
    13ea:	38 07       	cpc	r19, r24
    13ec:	49 f4       	brne	.+18     	; 0x1400 <tc_enable+0x4e>
    13ee:	62 e0       	ldi	r22, 0x02	; 2
    13f0:	83 e0       	ldi	r24, 0x03	; 3
    13f2:	0e 94 30 01 	call	0x260	; 0x260 <sysclk_enable_module>
    13f6:	64 e0       	ldi	r22, 0x04	; 4
    13f8:	83 e0       	ldi	r24, 0x03	; 3
    13fa:	0e 94 30 01 	call	0x260	; 0x260 <sysclk_enable_module>
    13fe:	42 c0       	rjmp	.+132    	; 0x1484 <tc_enable+0xd2>
    1400:	21 15       	cp	r18, r1
    1402:	89 e0       	ldi	r24, 0x09	; 9
    1404:	38 07       	cpc	r19, r24
    1406:	49 f4       	brne	.+18     	; 0x141a <tc_enable+0x68>
    1408:	61 e0       	ldi	r22, 0x01	; 1
    140a:	84 e0       	ldi	r24, 0x04	; 4
    140c:	0e 94 30 01 	call	0x260	; 0x260 <sysclk_enable_module>
    1410:	64 e0       	ldi	r22, 0x04	; 4
    1412:	84 e0       	ldi	r24, 0x04	; 4
    1414:	0e 94 30 01 	call	0x260	; 0x260 <sysclk_enable_module>
    1418:	35 c0       	rjmp	.+106    	; 0x1484 <tc_enable+0xd2>
    141a:	20 34       	cpi	r18, 0x40	; 64
    141c:	89 e0       	ldi	r24, 0x09	; 9
    141e:	38 07       	cpc	r19, r24
    1420:	49 f4       	brne	.+18     	; 0x1434 <tc_enable+0x82>
    1422:	62 e0       	ldi	r22, 0x02	; 2
    1424:	84 e0       	ldi	r24, 0x04	; 4
    1426:	0e 94 30 01 	call	0x260	; 0x260 <sysclk_enable_module>
    142a:	64 e0       	ldi	r22, 0x04	; 4
    142c:	84 e0       	ldi	r24, 0x04	; 4
    142e:	0e 94 30 01 	call	0x260	; 0x260 <sysclk_enable_module>
    1432:	28 c0       	rjmp	.+80     	; 0x1484 <tc_enable+0xd2>
    1434:	21 15       	cp	r18, r1
    1436:	8a e0       	ldi	r24, 0x0A	; 10
    1438:	38 07       	cpc	r19, r24
    143a:	49 f4       	brne	.+18     	; 0x144e <tc_enable+0x9c>
    143c:	61 e0       	ldi	r22, 0x01	; 1
    143e:	85 e0       	ldi	r24, 0x05	; 5
    1440:	0e 94 30 01 	call	0x260	; 0x260 <sysclk_enable_module>
    1444:	64 e0       	ldi	r22, 0x04	; 4
    1446:	85 e0       	ldi	r24, 0x05	; 5
    1448:	0e 94 30 01 	call	0x260	; 0x260 <sysclk_enable_module>
    144c:	1b c0       	rjmp	.+54     	; 0x1484 <tc_enable+0xd2>
    144e:	20 34       	cpi	r18, 0x40	; 64
    1450:	8a e0       	ldi	r24, 0x0A	; 10
    1452:	38 07       	cpc	r19, r24
    1454:	49 f4       	brne	.+18     	; 0x1468 <tc_enable+0xb6>
    1456:	62 e0       	ldi	r22, 0x02	; 2
    1458:	85 e0       	ldi	r24, 0x05	; 5
    145a:	0e 94 30 01 	call	0x260	; 0x260 <sysclk_enable_module>
    145e:	64 e0       	ldi	r22, 0x04	; 4
    1460:	85 e0       	ldi	r24, 0x05	; 5
    1462:	0e 94 30 01 	call	0x260	; 0x260 <sysclk_enable_module>
    1466:	0e c0       	rjmp	.+28     	; 0x1484 <tc_enable+0xd2>
    1468:	21 15       	cp	r18, r1
    146a:	3b 40       	sbci	r19, 0x0B	; 11
    146c:	49 f4       	brne	.+18     	; 0x1480 <tc_enable+0xce>
    146e:	61 e0       	ldi	r22, 0x01	; 1
    1470:	86 e0       	ldi	r24, 0x06	; 6
    1472:	0e 94 30 01 	call	0x260	; 0x260 <sysclk_enable_module>
    1476:	64 e0       	ldi	r22, 0x04	; 4
    1478:	86 e0       	ldi	r24, 0x06	; 6
    147a:	0e 94 30 01 	call	0x260	; 0x260 <sysclk_enable_module>
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <tc_enable+0xd2>
    1480:	1f bf       	out	0x3f, r17	; 63
    1482:	10 c0       	rjmp	.+32     	; 0x14a4 <tc_enable+0xf2>
    1484:	80 91 73 20 	lds	r24, 0x2073	; 0x802073 <sleepmgr_locks+0x1>
    1488:	8f 3f       	cpi	r24, 0xFF	; 255
    148a:	09 f4       	brne	.+2      	; 0x148e <tc_enable+0xdc>
    148c:	ff cf       	rjmp	.-2      	; 0x148c <tc_enable+0xda>
    148e:	8f b7       	in	r24, 0x3f	; 63
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	f8 94       	cli
    1494:	99 81       	ldd	r25, Y+1	; 0x01
    1496:	e2 e7       	ldi	r30, 0x72	; 114
    1498:	f0 e2       	ldi	r31, 0x20	; 32
    149a:	81 81       	ldd	r24, Z+1	; 0x01
    149c:	8f 5f       	subi	r24, 0xFF	; 255
    149e:	81 83       	std	Z+1, r24	; 0x01
    14a0:	9f bf       	out	0x3f, r25	; 63
    14a2:	1f bf       	out	0x3f, r17	; 63
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	08 95       	ret

000014b0 <tc_set_cca_interrupt_callback>:
}

void tc_set_cca_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    14b0:	81 15       	cp	r24, r1
    14b2:	28 e0       	ldi	r18, 0x08	; 8
    14b4:	92 07       	cpc	r25, r18
    14b6:	29 f4       	brne	.+10     	; 0x14c2 <tc_set_cca_interrupt_callback+0x12>
		tc_tcc0_cca_callback = callback;
    14b8:	60 93 44 20 	sts	0x2044, r22	; 0x802044 <tc_tcc0_cca_callback>
    14bc:	70 93 45 20 	sts	0x2045, r23	; 0x802045 <tc_tcc0_cca_callback+0x1>
    14c0:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    14c2:	80 34       	cpi	r24, 0x40	; 64
    14c4:	28 e0       	ldi	r18, 0x08	; 8
    14c6:	92 07       	cpc	r25, r18
    14c8:	29 f4       	brne	.+10     	; 0x14d4 <tc_set_cca_interrupt_callback+0x24>
		tc_tcc1_cca_callback = callback;
    14ca:	60 93 38 20 	sts	0x2038, r22	; 0x802038 <tc_tcc1_cca_callback>
    14ce:	70 93 39 20 	sts	0x2039, r23	; 0x802039 <tc_tcc1_cca_callback+0x1>
    14d2:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    14d4:	81 15       	cp	r24, r1
    14d6:	29 e0       	ldi	r18, 0x09	; 9
    14d8:	92 07       	cpc	r25, r18
    14da:	29 f4       	brne	.+10     	; 0x14e6 <tc_set_cca_interrupt_callback+0x36>
		tc_tcd0_cca_callback = callback;
    14dc:	60 93 30 20 	sts	0x2030, r22	; 0x802030 <tc_tcd0_cca_callback>
    14e0:	70 93 31 20 	sts	0x2031, r23	; 0x802031 <tc_tcd0_cca_callback+0x1>
    14e4:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    14e6:	80 34       	cpi	r24, 0x40	; 64
    14e8:	29 e0       	ldi	r18, 0x09	; 9
    14ea:	92 07       	cpc	r25, r18
    14ec:	29 f4       	brne	.+10     	; 0x14f8 <tc_set_cca_interrupt_callback+0x48>
		tc_tcd1_cca_callback = callback;
    14ee:	60 93 24 20 	sts	0x2024, r22	; 0x802024 <tc_tcd1_cca_callback>
    14f2:	70 93 25 20 	sts	0x2025, r23	; 0x802025 <tc_tcd1_cca_callback+0x1>
    14f6:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    14f8:	81 15       	cp	r24, r1
    14fa:	2a e0       	ldi	r18, 0x0A	; 10
    14fc:	92 07       	cpc	r25, r18
    14fe:	29 f4       	brne	.+10     	; 0x150a <tc_set_cca_interrupt_callback+0x5a>
		tc_tce0_cca_callback = callback;
    1500:	60 93 1c 20 	sts	0x201C, r22	; 0x80201c <tc_tce0_cca_callback>
    1504:	70 93 1d 20 	sts	0x201D, r23	; 0x80201d <tc_tce0_cca_callback+0x1>
    1508:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    150a:	80 34       	cpi	r24, 0x40	; 64
    150c:	2a e0       	ldi	r18, 0x0A	; 10
    150e:	92 07       	cpc	r25, r18
    1510:	29 f4       	brne	.+10     	; 0x151c <tc_set_cca_interrupt_callback+0x6c>
		tc_tce1_cca_callback = callback;
    1512:	60 93 10 20 	sts	0x2010, r22	; 0x802010 <tc_tce1_cca_callback>
    1516:	70 93 11 20 	sts	0x2011, r23	; 0x802011 <tc_tce1_cca_callback+0x1>
    151a:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    151c:	81 15       	cp	r24, r1
    151e:	9b 40       	sbci	r25, 0x0B	; 11
    1520:	21 f4       	brne	.+8      	; 0x152a <tc_set_cca_interrupt_callback+0x7a>
		tc_tcf0_cca_callback = callback;
    1522:	60 93 08 20 	sts	0x2008, r22	; 0x802008 <tc_tcf0_cca_callback>
    1526:	70 93 09 20 	sts	0x2009, r23	; 0x802009 <tc_tcf0_cca_callback+0x1>
    152a:	08 95       	ret

0000152c <example_cca_interrupt_callback>:
	ADCA.REFCTRL=ADC_REFSEL_INTVCC_gc;
	ADCA.PRESCALER=ADC_PRESCALER_DIV4_gc;
	ADCA.CH0.CTRL= ADC_CH_INPUTMODE_SINGLEENDED_gc;
	ADCA.CH0.MUXCTRL=ADC_CH_MUXPOS_PIN0_gc;
	ADCA.CH0.INTCTRL=ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_HI_gc;
	ADCA.CTRLA=ADC_ENABLE_bm;
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	1f 92       	push	r1
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <__TEXT_REGION_LENGTH__+0x700647>
    153c:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    1540:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    1544:	ee e6       	ldi	r30, 0x6E	; 110
    1546:	f0 e2       	ldi	r31, 0x20	; 32
    1548:	2a e4       	ldi	r18, 0x4A	; 74
    154a:	30 e2       	ldi	r19, 0x20	; 32
    154c:	b2 91       	ld	r27, -Z
    154e:	a2 91       	ld	r26, -Z
    1550:	92 91       	ld	r25, -Z
    1552:	82 91       	ld	r24, -Z
    1554:	84 83       	std	Z+4, r24	; 0x04
    1556:	95 83       	std	Z+5, r25	; 0x05
    1558:	a6 83       	std	Z+6, r26	; 0x06
    155a:	b7 83       	std	Z+7, r27	; 0x07
    155c:	e2 17       	cp	r30, r18
    155e:	f3 07       	cpc	r31, r19
    1560:	a9 f7       	brne	.-22     	; 0x154c <example_cca_interrupt_callback+0x20>
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	68 d0       	rcall	.+208    	; 0x1638 <__floatunsisf>
    1568:	60 93 4a 20 	sts	0x204A, r22	; 0x80204a <xbuff.5888>
    156c:	70 93 4b 20 	sts	0x204B, r23	; 0x80204b <xbuff.5888+0x1>
    1570:	80 93 4c 20 	sts	0x204C, r24	; 0x80204c <xbuff.5888+0x2>
    1574:	90 93 4d 20 	sts	0x204D, r25	; 0x80204d <xbuff.5888+0x3>
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <__TEXT_REGION_LENGTH__+0x700647>
    157e:	8f b7       	in	r24, 0x3f	; 63
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	f8 94       	cli
    1584:	99 81       	ldd	r25, Y+1	; 0x01
    1586:	e0 e0       	ldi	r30, 0x00	; 0
    1588:	f2 e0       	ldi	r31, 0x02	; 2
    158a:	80 81       	ld	r24, Z
    158c:	84 60       	ori	r24, 0x04	; 4
    158e:	80 83       	st	Z, r24
    1590:	9f bf       	out	0x3f, r25	; 63
    1592:	0f 90       	pop	r0
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	08 95       	ret

0000159a <main>:
}


int main(void)
{
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	1f 92       	push	r1
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    15a4:	87 e0       	ldi	r24, 0x07	; 7
    15a6:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	pmic_init();
	board_init();	
    15aa:	0e 94 6d 01 	call	0x2da	; 0x2da <board_init>
	sysclk_init();
    15ae:	0e 94 20 01 	call	0x240	; 0x240 <sysclk_init>
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    15b2:	e2 e7       	ldi	r30, 0x72	; 114
    15b4:	f0 e2       	ldi	r31, 0x20	; 32
    15b6:	10 82       	st	Z, r1
    15b8:	11 82       	std	Z+1, r1	; 0x01
    15ba:	12 82       	std	Z+2, r1	; 0x02
    15bc:	13 82       	std	Z+3, r1	; 0x03
    15be:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    15c0:	11 e0       	ldi	r17, 0x01	; 1
    15c2:	15 83       	std	Z+5, r17	; 0x05

	//ADC_init();
	sleepmgr_init();
	adc_enable(&ADCA);
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	92 e0       	ldi	r25, 0x02	; 2
    15c8:	0e 94 c9 01 	call	0x392	; 0x392 <adc_enable>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    15cc:	8f b7       	in	r24, 0x3f	; 63
    15ce:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    15d0:	f8 94       	cli
	return flags;
    15d2:	99 81       	ldd	r25, Y+1	; 0x01
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    15d4:	e0 e0       	ldi	r30, 0x00	; 0
    15d6:	f2 e0       	ldi	r31, 0x02	; 2
    15d8:	80 81       	ld	r24, Z
    15da:	84 60       	ori	r24, 0x04	; 4
    15dc:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15de:	9f bf       	out	0x3f, r25	; 63
	adc_start_conversion(&ADCA, ADC_CH0);
	//adc_wait_for_interrupt_flag(&ADCA, ADC_CH0);
	cpu_irq_enable();
    15e0:	78 94       	sei
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    15e2:	e0 e4       	ldi	r30, 0x40	; 64
    15e4:	f6 e0       	ldi	r31, 0x06	; 6
    15e6:	11 83       	std	Z+1, r17	; 0x01
    15e8:	82 e0       	ldi	r24, 0x02	; 2
    15ea:	81 83       	std	Z+1, r24	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    15ec:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    15f0:	80 e2       	ldi	r24, 0x20	; 32
    15f2:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	 * the green led which is in the same packaging. */
	ioport_set_pin_high(LED3_GPIO);
#endif


	tc_enable(&TIMER_EXAMPLE);
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	98 e0       	ldi	r25, 0x08	; 8
    15fa:	db de       	rcall	.-586    	; 0x13b2 <tc_enable>


	tc_set_cca_interrupt_callback(&TIMER_EXAMPLE,
    15fc:	66 e9       	ldi	r22, 0x96	; 150
    15fe:	7a e0       	ldi	r23, 0x0A	; 10
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	98 e0       	ldi	r25, 0x08	; 8
    1604:	55 df       	rcall	.-342    	; 0x14b0 <tc_set_cca_interrupt_callback>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    1606:	e0 e0       	ldi	r30, 0x00	; 0
    1608:	f8 e0       	ldi	r31, 0x08	; 8
    160a:	81 81       	ldd	r24, Z+1	; 0x01
    160c:	88 7f       	andi	r24, 0xF8	; 248
    160e:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    1610:	88 e3       	ldi	r24, 0x38	; 56
    1612:	91 e0       	ldi	r25, 0x01	; 1
    1614:	86 a3       	std	Z+38, r24	; 0x26
    1616:	97 a3       	std	Z+39, r25	; 0x27
		enum tc_cc_channel_t channel_index, uint16_t value)
{
	if (tc_is_tc0(void *tc)) {
		switch (channel_index) {
		case TC_CCA:
			((TC0_t *)tc)->CCA = value;
    1618:	80 a7       	std	Z+40, r24	; 0x28
    161a:	91 a7       	std	Z+41, r25	; 0x29
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
		((TC0_t *)tc)->CTRLB |= enablemask;
    161c:	81 81       	ldd	r24, Z+1	; 0x01
    161e:	80 61       	ori	r24, 0x10	; 16
    1620:	81 83       	std	Z+1, r24	; 0x01
 * \note Configures CCAINTLVL in INTCTRLB
 */
static inline void tc_set_cca_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLB = ((TC0_t *)tc)->INTCTRLB & ~TC0_CCAINTLVL_gm;
    1622:	87 81       	ldd	r24, Z+7	; 0x07
    1624:	8c 7f       	andi	r24, 0xFC	; 252
    1626:	87 83       	std	Z+7, r24	; 0x07
	((TC0_t *)tc)->INTCTRLB =
			((TC0_t *)tc)->INTCTRLB | (level << TC0_CCAINTLVL_gp);
    1628:	87 81       	ldd	r24, Z+7	; 0x07
 */
static inline void tc_set_cca_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLB = ((TC0_t *)tc)->INTCTRLB & ~TC0_CCAINTLVL_gm;
	((TC0_t *)tc)->INTCTRLB =
    162a:	81 60       	ori	r24, 0x01	; 1
    162c:	87 83       	std	Z+7, r24	; 0x07
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    162e:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    1630:	80 7f       	andi	r24, 0xF0	; 240
    1632:	85 60       	ori	r24, 0x05	; 5
    1634:	80 83       	st	Z, r24
    1636:	ff cf       	rjmp	.-2      	; 0x1636 <main+0x9c>

00001638 <__floatunsisf>:
    1638:	e8 94       	clt
    163a:	09 c0       	rjmp	.+18     	; 0x164e <__floatsisf+0x12>

0000163c <__floatsisf>:
    163c:	97 fb       	bst	r25, 7
    163e:	3e f4       	brtc	.+14     	; 0x164e <__floatsisf+0x12>
    1640:	90 95       	com	r25
    1642:	80 95       	com	r24
    1644:	70 95       	com	r23
    1646:	61 95       	neg	r22
    1648:	7f 4f       	sbci	r23, 0xFF	; 255
    164a:	8f 4f       	sbci	r24, 0xFF	; 255
    164c:	9f 4f       	sbci	r25, 0xFF	; 255
    164e:	99 23       	and	r25, r25
    1650:	a9 f0       	breq	.+42     	; 0x167c <__floatsisf+0x40>
    1652:	f9 2f       	mov	r31, r25
    1654:	96 e9       	ldi	r25, 0x96	; 150
    1656:	bb 27       	eor	r27, r27
    1658:	93 95       	inc	r25
    165a:	f6 95       	lsr	r31
    165c:	87 95       	ror	r24
    165e:	77 95       	ror	r23
    1660:	67 95       	ror	r22
    1662:	b7 95       	ror	r27
    1664:	f1 11       	cpse	r31, r1
    1666:	f8 cf       	rjmp	.-16     	; 0x1658 <__floatsisf+0x1c>
    1668:	fa f4       	brpl	.+62     	; 0x16a8 <__floatsisf+0x6c>
    166a:	bb 0f       	add	r27, r27
    166c:	11 f4       	brne	.+4      	; 0x1672 <__floatsisf+0x36>
    166e:	60 ff       	sbrs	r22, 0
    1670:	1b c0       	rjmp	.+54     	; 0x16a8 <__floatsisf+0x6c>
    1672:	6f 5f       	subi	r22, 0xFF	; 255
    1674:	7f 4f       	sbci	r23, 0xFF	; 255
    1676:	8f 4f       	sbci	r24, 0xFF	; 255
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	16 c0       	rjmp	.+44     	; 0x16a8 <__floatsisf+0x6c>
    167c:	88 23       	and	r24, r24
    167e:	11 f0       	breq	.+4      	; 0x1684 <__floatsisf+0x48>
    1680:	96 e9       	ldi	r25, 0x96	; 150
    1682:	11 c0       	rjmp	.+34     	; 0x16a6 <__floatsisf+0x6a>
    1684:	77 23       	and	r23, r23
    1686:	21 f0       	breq	.+8      	; 0x1690 <__floatsisf+0x54>
    1688:	9e e8       	ldi	r25, 0x8E	; 142
    168a:	87 2f       	mov	r24, r23
    168c:	76 2f       	mov	r23, r22
    168e:	05 c0       	rjmp	.+10     	; 0x169a <__floatsisf+0x5e>
    1690:	66 23       	and	r22, r22
    1692:	71 f0       	breq	.+28     	; 0x16b0 <__floatsisf+0x74>
    1694:	96 e8       	ldi	r25, 0x86	; 134
    1696:	86 2f       	mov	r24, r22
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	2a f0       	brmi	.+10     	; 0x16a8 <__floatsisf+0x6c>
    169e:	9a 95       	dec	r25
    16a0:	66 0f       	add	r22, r22
    16a2:	77 1f       	adc	r23, r23
    16a4:	88 1f       	adc	r24, r24
    16a6:	da f7       	brpl	.-10     	; 0x169e <__floatsisf+0x62>
    16a8:	88 0f       	add	r24, r24
    16aa:	96 95       	lsr	r25
    16ac:	87 95       	ror	r24
    16ae:	97 f9       	bld	r25, 7
    16b0:	08 95       	ret

000016b2 <_exit>:
    16b2:	f8 94       	cli

000016b4 <__stop_program>:
    16b4:	ff cf       	rjmp	.-2      	; 0x16b4 <__stop_program>
