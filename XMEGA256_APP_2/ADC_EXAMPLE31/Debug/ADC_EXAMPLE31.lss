
ADC_EXAMPLE31.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000438  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000004ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007d6  00802000  00802000  000004ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004506  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034ab  00000000  00000000  00004aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015b2  00000000  00000000  00007f51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00009504  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002dd8b  00000000  00000000  000095f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000246  00000000  00000000  0003737b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000375c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00009e63  00000000  00000000  00037611  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	1a c1       	rjmp	.+564    	; 0x23a <__bad_interrupt>
   6:	00 00       	nop
   8:	18 c1       	rjmp	.+560    	; 0x23a <__bad_interrupt>
   a:	00 00       	nop
   c:	16 c1       	rjmp	.+556    	; 0x23a <__bad_interrupt>
   e:	00 00       	nop
  10:	14 c1       	rjmp	.+552    	; 0x23a <__bad_interrupt>
  12:	00 00       	nop
  14:	12 c1       	rjmp	.+548    	; 0x23a <__bad_interrupt>
  16:	00 00       	nop
  18:	10 c1       	rjmp	.+544    	; 0x23a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0e c1       	rjmp	.+540    	; 0x23a <__bad_interrupt>
  1e:	00 00       	nop
  20:	0c c1       	rjmp	.+536    	; 0x23a <__bad_interrupt>
  22:	00 00       	nop
  24:	0a c1       	rjmp	.+532    	; 0x23a <__bad_interrupt>
  26:	00 00       	nop
  28:	08 c1       	rjmp	.+528    	; 0x23a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	06 c1       	rjmp	.+524    	; 0x23a <__bad_interrupt>
  2e:	00 00       	nop
  30:	04 c1       	rjmp	.+520    	; 0x23a <__bad_interrupt>
  32:	00 00       	nop
  34:	02 c1       	rjmp	.+516    	; 0x23a <__bad_interrupt>
  36:	00 00       	nop
  38:	00 c1       	rjmp	.+512    	; 0x23a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fe c0       	rjmp	.+508    	; 0x23a <__bad_interrupt>
  3e:	00 00       	nop
  40:	fc c0       	rjmp	.+504    	; 0x23a <__bad_interrupt>
  42:	00 00       	nop
  44:	fa c0       	rjmp	.+500    	; 0x23a <__bad_interrupt>
  46:	00 00       	nop
  48:	f8 c0       	rjmp	.+496    	; 0x23a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f6 c0       	rjmp	.+492    	; 0x23a <__bad_interrupt>
  4e:	00 00       	nop
  50:	f4 c0       	rjmp	.+488    	; 0x23a <__bad_interrupt>
  52:	00 00       	nop
  54:	f2 c0       	rjmp	.+484    	; 0x23a <__bad_interrupt>
  56:	00 00       	nop
  58:	f0 c0       	rjmp	.+480    	; 0x23a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ee c0       	rjmp	.+476    	; 0x23a <__bad_interrupt>
  5e:	00 00       	nop
  60:	ec c0       	rjmp	.+472    	; 0x23a <__bad_interrupt>
  62:	00 00       	nop
  64:	ea c0       	rjmp	.+468    	; 0x23a <__bad_interrupt>
  66:	00 00       	nop
  68:	e8 c0       	rjmp	.+464    	; 0x23a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e6 c0       	rjmp	.+460    	; 0x23a <__bad_interrupt>
  6e:	00 00       	nop
  70:	e4 c0       	rjmp	.+456    	; 0x23a <__bad_interrupt>
  72:	00 00       	nop
  74:	e2 c0       	rjmp	.+452    	; 0x23a <__bad_interrupt>
  76:	00 00       	nop
  78:	e0 c0       	rjmp	.+448    	; 0x23a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	de c0       	rjmp	.+444    	; 0x23a <__bad_interrupt>
  7e:	00 00       	nop
  80:	dc c0       	rjmp	.+440    	; 0x23a <__bad_interrupt>
  82:	00 00       	nop
  84:	da c0       	rjmp	.+436    	; 0x23a <__bad_interrupt>
  86:	00 00       	nop
  88:	d8 c0       	rjmp	.+432    	; 0x23a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d6 c0       	rjmp	.+428    	; 0x23a <__bad_interrupt>
  8e:	00 00       	nop
  90:	d4 c0       	rjmp	.+424    	; 0x23a <__bad_interrupt>
  92:	00 00       	nop
  94:	d2 c0       	rjmp	.+420    	; 0x23a <__bad_interrupt>
  96:	00 00       	nop
  98:	d0 c0       	rjmp	.+416    	; 0x23a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ce c0       	rjmp	.+412    	; 0x23a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	cc c0       	rjmp	.+408    	; 0x23a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	ca c0       	rjmp	.+404    	; 0x23a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c8 c0       	rjmp	.+400    	; 0x23a <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c6 c0       	rjmp	.+396    	; 0x23a <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c4 c0       	rjmp	.+392    	; 0x23a <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c2 c0       	rjmp	.+388    	; 0x23a <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c0 c0       	rjmp	.+384    	; 0x23a <__bad_interrupt>
  ba:	00 00       	nop
  bc:	be c0       	rjmp	.+380    	; 0x23a <__bad_interrupt>
  be:	00 00       	nop
  c0:	bc c0       	rjmp	.+376    	; 0x23a <__bad_interrupt>
  c2:	00 00       	nop
  c4:	ba c0       	rjmp	.+372    	; 0x23a <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b8 c0       	rjmp	.+368    	; 0x23a <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b6 c0       	rjmp	.+364    	; 0x23a <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b4 c0       	rjmp	.+360    	; 0x23a <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b2 c0       	rjmp	.+356    	; 0x23a <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b0 c0       	rjmp	.+352    	; 0x23a <__bad_interrupt>
  da:	00 00       	nop
  dc:	ae c0       	rjmp	.+348    	; 0x23a <__bad_interrupt>
  de:	00 00       	nop
  e0:	ac c0       	rjmp	.+344    	; 0x23a <__bad_interrupt>
  e2:	00 00       	nop
  e4:	aa c0       	rjmp	.+340    	; 0x23a <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a8 c0       	rjmp	.+336    	; 0x23a <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a6 c0       	rjmp	.+332    	; 0x23a <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a4 c0       	rjmp	.+328    	; 0x23a <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a2 c0       	rjmp	.+324    	; 0x23a <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a0 c0       	rjmp	.+320    	; 0x23a <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9e c0       	rjmp	.+316    	; 0x23a <__bad_interrupt>
  fe:	00 00       	nop
 100:	9c c0       	rjmp	.+312    	; 0x23a <__bad_interrupt>
 102:	00 00       	nop
 104:	9a c0       	rjmp	.+308    	; 0x23a <__bad_interrupt>
 106:	00 00       	nop
 108:	98 c0       	rjmp	.+304    	; 0x23a <__bad_interrupt>
 10a:	00 00       	nop
 10c:	96 c0       	rjmp	.+300    	; 0x23a <__bad_interrupt>
 10e:	00 00       	nop
 110:	94 c0       	rjmp	.+296    	; 0x23a <__bad_interrupt>
 112:	00 00       	nop
 114:	92 c0       	rjmp	.+292    	; 0x23a <__bad_interrupt>
 116:	00 00       	nop
 118:	90 c0       	rjmp	.+288    	; 0x23a <__bad_interrupt>
 11a:	00 00       	nop
 11c:	ca c0       	rjmp	.+404    	; 0x2b2 <__vector_71>
 11e:	00 00       	nop
 120:	8c c0       	rjmp	.+280    	; 0x23a <__bad_interrupt>
 122:	00 00       	nop
 124:	8a c0       	rjmp	.+276    	; 0x23a <__bad_interrupt>
 126:	00 00       	nop
 128:	88 c0       	rjmp	.+272    	; 0x23a <__bad_interrupt>
 12a:	00 00       	nop
 12c:	86 c0       	rjmp	.+268    	; 0x23a <__bad_interrupt>
 12e:	00 00       	nop
 130:	84 c0       	rjmp	.+264    	; 0x23a <__bad_interrupt>
 132:	00 00       	nop
 134:	82 c0       	rjmp	.+260    	; 0x23a <__bad_interrupt>
 136:	00 00       	nop
 138:	80 c0       	rjmp	.+256    	; 0x23a <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7e c0       	rjmp	.+252    	; 0x23a <__bad_interrupt>
 13e:	00 00       	nop
 140:	7c c0       	rjmp	.+248    	; 0x23a <__bad_interrupt>
 142:	00 00       	nop
 144:	7a c0       	rjmp	.+244    	; 0x23a <__bad_interrupt>
 146:	00 00       	nop
 148:	78 c0       	rjmp	.+240    	; 0x23a <__bad_interrupt>
 14a:	00 00       	nop
 14c:	76 c0       	rjmp	.+236    	; 0x23a <__bad_interrupt>
 14e:	00 00       	nop
 150:	74 c0       	rjmp	.+232    	; 0x23a <__bad_interrupt>
 152:	00 00       	nop
 154:	72 c0       	rjmp	.+228    	; 0x23a <__bad_interrupt>
 156:	00 00       	nop
 158:	70 c0       	rjmp	.+224    	; 0x23a <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6e c0       	rjmp	.+220    	; 0x23a <__bad_interrupt>
 15e:	00 00       	nop
 160:	6c c0       	rjmp	.+216    	; 0x23a <__bad_interrupt>
 162:	00 00       	nop
 164:	6a c0       	rjmp	.+212    	; 0x23a <__bad_interrupt>
 166:	00 00       	nop
 168:	68 c0       	rjmp	.+208    	; 0x23a <__bad_interrupt>
 16a:	00 00       	nop
 16c:	66 c0       	rjmp	.+204    	; 0x23a <__bad_interrupt>
 16e:	00 00       	nop
 170:	64 c0       	rjmp	.+200    	; 0x23a <__bad_interrupt>
 172:	00 00       	nop
 174:	62 c0       	rjmp	.+196    	; 0x23a <__bad_interrupt>
 176:	00 00       	nop
 178:	60 c0       	rjmp	.+192    	; 0x23a <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5e c0       	rjmp	.+188    	; 0x23a <__bad_interrupt>
 17e:	00 00       	nop
 180:	5c c0       	rjmp	.+184    	; 0x23a <__bad_interrupt>
 182:	00 00       	nop
 184:	5a c0       	rjmp	.+180    	; 0x23a <__bad_interrupt>
 186:	00 00       	nop
 188:	58 c0       	rjmp	.+176    	; 0x23a <__bad_interrupt>
 18a:	00 00       	nop
 18c:	56 c0       	rjmp	.+172    	; 0x23a <__bad_interrupt>
 18e:	00 00       	nop
 190:	54 c0       	rjmp	.+168    	; 0x23a <__bad_interrupt>
 192:	00 00       	nop
 194:	52 c0       	rjmp	.+164    	; 0x23a <__bad_interrupt>
 196:	00 00       	nop
 198:	50 c0       	rjmp	.+160    	; 0x23a <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4e c0       	rjmp	.+156    	; 0x23a <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	4c c0       	rjmp	.+152    	; 0x23a <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4a c0       	rjmp	.+148    	; 0x23a <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	48 c0       	rjmp	.+144    	; 0x23a <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	46 c0       	rjmp	.+140    	; 0x23a <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	44 c0       	rjmp	.+136    	; 0x23a <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	42 c0       	rjmp	.+132    	; 0x23a <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	40 c0       	rjmp	.+128    	; 0x23a <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3e c0       	rjmp	.+124    	; 0x23a <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	3c c0       	rjmp	.+120    	; 0x23a <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3a c0       	rjmp	.+116    	; 0x23a <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	38 c0       	rjmp	.+112    	; 0x23a <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	36 c0       	rjmp	.+108    	; 0x23a <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	34 c0       	rjmp	.+104    	; 0x23a <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	32 c0       	rjmp	.+100    	; 0x23a <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	30 c0       	rjmp	.+96     	; 0x23a <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2e c0       	rjmp	.+92     	; 0x23a <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	2c c0       	rjmp	.+88     	; 0x23a <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2a c0       	rjmp	.+84     	; 0x23a <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	28 c0       	rjmp	.+80     	; 0x23a <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	26 c0       	rjmp	.+76     	; 0x23a <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	24 c0       	rjmp	.+72     	; 0x23a <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	22 c0       	rjmp	.+68     	; 0x23a <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	20 c0       	rjmp	.+64     	; 0x23a <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e8 e3       	ldi	r30, 0x38	; 56
 214:	f4 e0       	ldi	r31, 0x04	; 4
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a0 30       	cpi	r26, 0x00	; 0
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	27 e2       	ldi	r18, 0x27	; 39
 228:	a0 e0       	ldi	r26, 0x00	; 0
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a6 3d       	cpi	r26, 0xD6	; 214
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	28 d0       	rcall	.+80     	; 0x288 <main>
 238:	fd c0       	rjmp	.+506    	; 0x434 <_exit>

0000023a <__bad_interrupt>:
 23a:	e2 ce       	rjmp	.-572    	; 0x0 <__vectors>

0000023c <disable_JTAG>:

/************************************************************************/
/* Lowers power consumption                                                                     */
/************************************************************************/
void disable_JTAG(void){
	CCP = CCP_IOREG_gc;
 23c:	88 ed       	ldi	r24, 0xD8	; 216
 23e:	84 bf       	out	0x34, r24	; 52
	MCU.MCUCR=MCU_JTAGD_bm;
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
 246:	08 95       	ret

00000248 <disable_peripherals>:
}
/************************************************************************/
/*         Disable unused peripherals to save power                                                             */
/************************************************************************/
void disable_peripherals(void){
	PR.PRGEN=PR_USB_bm | PR_AES_bm  | PR_EVSYS_bm | PR_DMA_bm;
 248:	e0 e7       	ldi	r30, 0x70	; 112
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	83 e5       	ldi	r24, 0x53	; 83
 24e:	80 83       	st	Z, r24

	PR.PRPA=PR_DAC_bm | PR_AC_bm;
 250:	85 e0       	ldi	r24, 0x05	; 5
 252:	81 83       	std	Z+1, r24	; 0x01
	PR.PRPB=PR_DAC_bm | PR_AC_bm;
 254:	82 83       	std	Z+2, r24	; 0x02

	PR.PRPC= PR_TWI_bm | PR_USART0_bm | PR_USART1_bm | PR_SPI_bm | PR_HIRES_bm | PR_TC0_bm | PR_TC1_bm;
 256:	8f e7       	ldi	r24, 0x7F	; 127
 258:	83 83       	std	Z+3, r24	; 0x03
	PR.PRPD= PR_TWI_bm | PR_USART0_bm | PR_USART1_bm | PR_SPI_bm | PR_HIRES_bm | PR_TC0_bm | PR_TC1_bm;
 25a:	84 83       	std	Z+4, r24	; 0x04
	PR.PRPE= PR_TWI_bm | PR_USART0_bm | PR_USART1_bm | PR_SPI_bm | PR_HIRES_bm | PR_TC0_bm | PR_TC1_bm;
 25c:	85 83       	std	Z+5, r24	; 0x05
	PR.PRPF= PR_TWI_bm | PR_USART0_bm | PR_USART1_bm | PR_SPI_bm | PR_HIRES_bm | PR_TC0_bm | PR_TC1_bm;
 25e:	86 83       	std	Z+6, r24	; 0x06
 260:	08 95       	ret

00000262 <ADC_init>:
}

void ADC_init(void){
	CCP = 0xD8;
 262:	88 ed       	ldi	r24, 0xD8	; 216
 264:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = CLK_PSADIV_2_gc;
 266:	84 e0       	ldi	r24, 0x04	; 4
 268:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
	ADCA.CTRLB = ADC_CURRLIMIT_HIGH_gc;
 26c:	e0 e0       	ldi	r30, 0x00	; 0
 26e:	f2 e0       	ldi	r31, 0x02	; 2
 270:	80 e6       	ldi	r24, 0x60	; 96
 272:	81 83       	std	Z+1, r24	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC_gc;
 274:	80 e1       	ldi	r24, 0x10	; 16
 276:	82 83       	std	Z+2, r24	; 0x02
	ADCA.PRESCALER = ADC_PRESCALER_DIV4_gc;
 278:	14 82       	std	Z+4, r1	; 0x04
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;
 27e:	11 a2       	std	Z+33, r1	; 0x21
	ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_HI_gc;
 280:	93 e0       	ldi	r25, 0x03	; 3
 282:	92 a3       	std	Z+34, r25	; 0x22
	ADCA.CTRLA = ADC_ENABLE_bm;
 284:	80 83       	st	Z, r24
 286:	08 95       	ret

00000288 <main>:
 */
int main(void)
{
	board_init();
	disable_peripherals();
	disable_JTAG();
 288:	aa d0       	rcall	.+340    	; 0x3de <board_init>
 28a:	de df       	rcall	.-68     	; 0x248 <disable_peripherals>
	ADC_init();
 28c:	d7 df       	rcall	.-82     	; 0x23c <disable_JTAG>
 28e:	e9 df       	rcall	.-46     	; 0x262 <ADC_init>
	set_sleep_mode(SLEEP_MODE_IDLE);
 290:	e8 e4       	ldi	r30, 0x48	; 72
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	81 7f       	andi	r24, 0xF1	; 241
 298:	80 83       	st	Z, r24
	sleep_enable();
 29a:	80 81       	ld	r24, Z
 29c:	81 60       	ori	r24, 0x01	; 1
 29e:	80 83       	st	Z, r24
	ADCA.CH0.CTRL = ADC_CH_START_bm;
 2a0:	80 e8       	ldi	r24, 0x80	; 128
 2a2:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
	PMIC.CTRL = PMIC_HILVLEN_bm;
 2a6:	84 e0       	ldi	r24, 0x04	; 4
 2a8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
 2ac:	78 94       	sei

	 while (1){
		sleep_cpu();
 2ae:	88 95       	sleep
 2b0:	fe cf       	rjmp	.-4      	; 0x2ae <main+0x26>

000002b2 <__vector_71>:
	 }
}

ISR(ADCA_CH0_vect){
 2b2:	1f 92       	push	r1
 2b4:	0f 92       	push	r0
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	0f 92       	push	r0
 2ba:	11 24       	eor	r1, r1
 2bc:	0b b6       	in	r0, 0x3b	; 59
 2be:	0f 92       	push	r0
 2c0:	2f 93       	push	r18
 2c2:	3f 93       	push	r19
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
 2c8:	af 93       	push	r26
 2ca:	bf 93       	push	r27
 2cc:	ef 93       	push	r30
 2ce:	ff 93       	push	r31
	adc_results = ADCA_CH0RES;
 2d0:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
 2d4:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
 2d8:	a0 e0       	ldi	r26, 0x00	; 0
 2da:	b0 e0       	ldi	r27, 0x00	; 0
 2dc:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_end>
 2e0:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_end+0x1>
 2e4:	a0 93 02 20 	sts	0x2002, r26	; 0x802002 <__data_end+0x2>
 2e8:	b0 93 03 20 	sts	0x2003, r27	; 0x802003 <__data_end+0x3>
	ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
 2ec:	e0 e0       	ldi	r30, 0x00	; 0
 2ee:	f2 e0       	ldi	r31, 0x02	; 2
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	83 a3       	std	Z+35, r24	; 0x23
	ADCA.CH0.CTRL = ADC_CH_START_bm;
 2f4:	80 e8       	ldi	r24, 0x80	; 128
 2f6:	80 a3       	std	Z+32, r24	; 0x20
	adc_scan_results[counter]=adc_results;
 2f8:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <counter>
 2fc:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <counter+0x1>
 300:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_end>
 304:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_end+0x1>
 308:	a0 91 02 20 	lds	r26, 0x2002	; 0x802002 <__data_end+0x2>
 30c:	b0 91 03 20 	lds	r27, 0x2003	; 0x802003 <__data_end+0x3>
 310:	ee 0f       	add	r30, r30
 312:	ff 1f       	adc	r31, r31
 314:	ea 5f       	subi	r30, 0xFA	; 250
 316:	ff 4d       	sbci	r31, 0xDF	; 223
 318:	80 83       	st	Z, r24
 31a:	91 83       	std	Z+1, r25	; 0x01
	counter++;
 31c:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <counter>
 320:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <counter+0x1>
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <counter>
 32a:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <counter+0x1>
	if(counter==1000){
 32e:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <counter>
 332:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <counter+0x1>
 336:	88 3e       	cpi	r24, 0xE8	; 232
 338:	93 40       	sbci	r25, 0x03	; 3
 33a:	d9 f4       	brne	.+54     	; 0x372 <__vector_71+0xc0>
		int sum=0;
		for(int i = 0; i<counter; i++){
 33c:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <counter>
 340:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <counter+0x1>
 344:	89 2b       	or	r24, r25
 346:	89 f0       	breq	.+34     	; 0x36a <__vector_71+0xb8>
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	90 e0       	ldi	r25, 0x00	; 0
			sum = sum + adc_scan_results[i];
 34c:	fc 01       	movw	r30, r24
 34e:	ee 0f       	add	r30, r30
 350:	ff 1f       	adc	r31, r31
 352:	ea 5f       	subi	r30, 0xFA	; 250
 354:	ff 4d       	sbci	r31, 0xDF	; 223
 356:	20 81       	ld	r18, Z
 358:	31 81       	ldd	r19, Z+1	; 0x01
	ADCA.CH0.CTRL = ADC_CH_START_bm;
	adc_scan_results[counter]=adc_results;
	counter++;
	if(counter==1000){
		int sum=0;
		for(int i = 0; i<counter; i++){
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <counter>
 360:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <counter+0x1>
 364:	82 17       	cp	r24, r18
 366:	93 07       	cpc	r25, r19
 368:	88 f3       	brcs	.-30     	; 0x34c <__vector_71+0x9a>
			sum = sum + adc_scan_results[i];
		}
		counter=0;
 36a:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <counter>
 36e:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <counter+0x1>
		uint16_t send_value=sum/1000;
		
	}
}
 372:	ff 91       	pop	r31
 374:	ef 91       	pop	r30
 376:	bf 91       	pop	r27
 378:	af 91       	pop	r26
 37a:	9f 91       	pop	r25
 37c:	8f 91       	pop	r24
 37e:	3f 91       	pop	r19
 380:	2f 91       	pop	r18
 382:	0f 90       	pop	r0
 384:	0b be       	out	0x3b, r0	; 59
 386:	0f 90       	pop	r0
 388:	0f be       	out	0x3f, r0	; 63
 38a:	0f 90       	pop	r0
 38c:	1f 90       	pop	r1
 38e:	18 95       	reti

00000390 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 39a:	c6 2f       	mov	r28, r22
 39c:	d0 e0       	ldi	r29, 0x00	; 0
 39e:	de 01       	movw	r26, r28
 3a0:	02 2e       	mov	r0, r18
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <ioport_configure_port_pin+0x18>
 3a4:	b5 95       	asr	r27
 3a6:	a7 95       	ror	r26
 3a8:	0a 94       	dec	r0
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <ioport_configure_port_pin+0x14>
 3ac:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 3ae:	50 8b       	std	Z+16, r21	; 0x10
 3b0:	2f 5f       	subi	r18, 0xFF	; 255
 3b2:	3f 4f       	sbci	r19, 0xFF	; 255
 3b4:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 3b6:	28 30       	cpi	r18, 0x08	; 8
 3b8:	31 05       	cpc	r19, r1
 3ba:	89 f7       	brne	.-30     	; 0x39e <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 3bc:	40 ff       	sbrs	r20, 0
 3be:	0a c0       	rjmp	.+20     	; 0x3d4 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
 3c0:	41 ff       	sbrs	r20, 1
 3c2:	03 c0       	rjmp	.+6      	; 0x3ca <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 3c4:	fc 01       	movw	r30, r24
 3c6:	65 83       	std	Z+5, r22	; 0x05
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 3ca:	fc 01       	movw	r30, r24
 3cc:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 3ce:	fc 01       	movw	r30, r24
 3d0:	61 83       	std	Z+1, r22	; 0x01
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 3d4:	fc 01       	movw	r30, r24
 3d6:	62 83       	std	Z+2, r22	; 0x02
	}
}
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 3de:	43 e0       	ldi	r20, 0x03	; 3
 3e0:	50 e0       	ldi	r21, 0x00	; 0
 3e2:	61 e0       	ldi	r22, 0x01	; 1
 3e4:	80 ee       	ldi	r24, 0xE0	; 224
 3e6:	97 e0       	ldi	r25, 0x07	; 7
 3e8:	d3 df       	rcall	.-90     	; 0x390 <ioport_configure_port_pin>
 3ea:	43 e0       	ldi	r20, 0x03	; 3
 3ec:	50 e0       	ldi	r21, 0x00	; 0
 3ee:	62 e0       	ldi	r22, 0x02	; 2
 3f0:	80 ee       	ldi	r24, 0xE0	; 224
 3f2:	97 e0       	ldi	r25, 0x07	; 7
 3f4:	cd df       	rcall	.-102    	; 0x390 <ioport_configure_port_pin>
 3f6:	43 e0       	ldi	r20, 0x03	; 3
 3f8:	50 e0       	ldi	r21, 0x00	; 0
 3fa:	60 e1       	ldi	r22, 0x10	; 16
 3fc:	80 e6       	ldi	r24, 0x60	; 96
 3fe:	96 e0       	ldi	r25, 0x06	; 6
 400:	c7 df       	rcall	.-114    	; 0x390 <ioport_configure_port_pin>
 402:	41 e0       	ldi	r20, 0x01	; 1
 404:	50 e4       	ldi	r21, 0x40	; 64
 406:	60 e2       	ldi	r22, 0x20	; 32
 408:	80 e6       	ldi	r24, 0x60	; 96
 40a:	96 e0       	ldi	r25, 0x06	; 6
 40c:	c1 df       	rcall	.-126    	; 0x390 <ioport_configure_port_pin>
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	5b e1       	ldi	r21, 0x1B	; 27
 412:	60 e2       	ldi	r22, 0x20	; 32
 414:	80 e8       	ldi	r24, 0x80	; 128
 416:	96 e0       	ldi	r25, 0x06	; 6
 418:	bb df       	rcall	.-138    	; 0x390 <ioport_configure_port_pin>
 41a:	40 e0       	ldi	r20, 0x00	; 0
 41c:	5b e1       	ldi	r21, 0x1B	; 27
 41e:	62 e0       	ldi	r22, 0x02	; 2
 420:	80 ea       	ldi	r24, 0xA0	; 160
 422:	96 e0       	ldi	r25, 0x06	; 6
 424:	b5 df       	rcall	.-150    	; 0x390 <ioport_configure_port_pin>
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	5b e1       	ldi	r21, 0x1B	; 27
 42a:	64 e0       	ldi	r22, 0x04	; 4
 42c:	80 ea       	ldi	r24, 0xA0	; 160
 42e:	96 e0       	ldi	r25, 0x06	; 6
 430:	af cf       	rjmp	.-162    	; 0x390 <ioport_configure_port_pin>
 432:	08 95       	ret

00000434 <_exit>:
 434:	f8 94       	cli

00000436 <__stop_program>:
 436:	ff cf       	rjmp	.-2      	; 0x436 <__stop_program>
